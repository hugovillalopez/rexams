import type { Node } from 'prosemirror-model';
import type { Decoration, DecorationSource, EditorView } from 'prosemirror-view';
export type NodeViewDOMSpec = string | HTMLElement | ((node: Node) => HTMLElement);
export interface CoreNodeViewUserOptions<Component> {
    as?: NodeViewDOMSpec;
    contentAs?: NodeViewDOMSpec;
    component: Component;
    update?: (node: Node, decorations: readonly Decoration[], innerDecorations: DecorationSource) => boolean | void;
    ignoreMutation?: (mutation: MutationRecord) => boolean | void;
    selectNode?: () => void;
    deselectNode?: () => void;
    setSelection?: (anchor: number, head: number, root: Document | ShadowRoot) => void;
    stopEvent?: (event: Event) => boolean;
    destroy?: () => void;
    onUpdate?: () => void;
}
export interface CoreNodeViewSpec<Component> {
    node: Node;
    view: EditorView;
    getPos: () => number | undefined;
    decorations: readonly Decoration[];
    innerDecorations: DecorationSource;
    options: CoreNodeViewUserOptions<Component>;
}
