import type { Attrs, Node } from 'prosemirror-model';
import type { Decoration, DecorationSource, EditorView, NodeView } from 'prosemirror-view';
import type { CoreNodeViewSpec, CoreNodeViewUserOptions } from './CoreNodeViewOptions';
export declare class CoreNodeView<ComponentType> implements NodeView {
    #private;
    dom: HTMLElement;
    contentDOM: HTMLElement | null;
    node: Node;
    view: EditorView;
    getPos: () => number | undefined;
    decorations: readonly Decoration[];
    innerDecorations: DecorationSource;
    options: CoreNodeViewUserOptions<ComponentType>;
    selected: boolean;
    setSelection?: (anchor: number, head: number, root: Document | ShadowRoot) => void;
    stopEvent?: (event: Event) => boolean;
    createDOM(as?: string | HTMLElement | ((node: Node) => HTMLElement)): HTMLElement;
    createContentDOM(as?: string | HTMLElement | ((node: Node) => HTMLElement)): HTMLElement;
    constructor({ node, view, getPos, decorations, innerDecorations, options }: CoreNodeViewSpec<ComponentType>);
    get component(): ComponentType;
    selectNode: () => void;
    deselectNode: () => void;
    shouldUpdate: (node: Node) => boolean;
    update: (node: Node, decorations: readonly Decoration[], innerDecorations: DecorationSource) => boolean;
    shouldIgnoreMutation: (mutation: MutationRecord) => boolean;
    ignoreMutation: (mutation: MutationRecord) => boolean;
    destroy: () => void;
    setAttrs: (attr: Attrs) => void;
}
