{"version":3,"file":"index.es.js","sources":["../src/nodeView/nodeViewContext.ts","../src/nodeView/ReactNodeView.tsx","../src/pluginView/pluginViewContext.ts","../src/nodeView/useReactNodeViewCreator.ts","../src/pluginView/ReactPluginView.tsx","../src/pluginView/useReactPluginViewCreator.ts","../src/ReactRenderer.ts","../src/widgetView/widgetViewContext.ts","../src/widgetView/ReactWidgetView.tsx","../src/widgetView/useReactWidgetViewCreator.ts","../src/Provider.tsx"],"sourcesContent":["/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport type { Attrs, Node } from 'prosemirror-model'\nimport type { Decoration, DecorationSource, EditorView, NodeViewConstructor } from 'prosemirror-view'\nimport { createContext, useContext } from 'react'\nimport type { ReactNodeViewUserOptions } from './ReactNodeViewOptions'\n\nexport type NodeViewContentRef = (node: HTMLElement | null) => void\n\nexport interface NodeViewContext {\n  // won't change\n  contentRef: NodeViewContentRef\n  view: EditorView\n  getPos: () => number | undefined\n  setAttrs: (attrs: Attrs) => void\n\n  // changes between updates\n  node: Node\n  selected: boolean\n  decorations: readonly Decoration[]\n  innerDecorations: DecorationSource\n}\n\nexport const nodeViewContext = createContext<NodeViewContext>({\n  contentRef: () => {\n    // nothing to do\n  },\n  view: null as never,\n  getPos: () => 0,\n  setAttrs: () => {\n    // nothing to do\n  },\n\n  node: null as never,\n  selected: false,\n  decorations: [],\n  innerDecorations: null as never,\n})\n\nexport const useNodeViewContext = () => useContext(nodeViewContext)\n\nexport const createNodeViewContext = createContext<(options: ReactNodeViewUserOptions) => NodeViewConstructor>(\n  (_options) => {\n    throw new Error('out of scope')\n  },\n)\n\nexport const useNodeViewFactory = () => useContext(createNodeViewContext)\n","/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport { CoreNodeView } from '@prosemirror-adapter/core'\nimport { nanoid } from 'nanoid'\nimport React from 'react'\nimport { createPortal } from 'react-dom'\n\nimport type { ReactRenderer } from '../ReactRenderer'\nimport type { NodeViewContext } from './nodeViewContext'\nimport { nodeViewContext } from './nodeViewContext'\nimport type { ReactNodeViewComponent } from './ReactNodeViewOptions'\n\nexport class ReactNodeView extends CoreNodeView<ReactNodeViewComponent> implements ReactRenderer<NodeViewContext> {\n  key: string = nanoid()\n\n  context: NodeViewContext = {\n    contentRef: (element) => {\n      if (element && this.contentDOM && element.firstChild !== this.contentDOM)\n        element.appendChild(this.contentDOM)\n    },\n    view: this.view,\n    getPos: this.getPos,\n    setAttrs: this.setAttrs,\n\n    node: this.node,\n    selected: this.selected,\n    decorations: this.decorations,\n    innerDecorations: this.innerDecorations,\n  }\n\n  updateContext = () => {\n    Object.assign(this.context, {\n      node: this.node,\n      selected: this.selected,\n      decorations: this.decorations,\n      innerDecorations: this.innerDecorations,\n    })\n  }\n\n  render = () => {\n    const UserComponent = this.component\n\n    return createPortal(\n      <nodeViewContext.Provider value={this.context}>\n        <UserComponent />\n      </nodeViewContext.Provider>,\n      this.dom,\n      this.key,\n    )\n  }\n}\n","/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport type { PluginViewSpec } from '@prosemirror-adapter/core'\nimport type { EditorState } from 'prosemirror-state'\nimport type { EditorView } from 'prosemirror-view'\nimport { createContext, useContext } from 'react'\nimport type { ReactPluginViewUserOptions } from './ReactPluginViewOptions'\n\nexport type PluginViewContentRef = (node: HTMLElement | null) => void\n\nexport interface PluginViewContext {\n  view: EditorView\n  prevState?: EditorState\n}\n\nexport const pluginViewContext = createContext<PluginViewContext>({\n  view: null as never,\n})\n\nexport const usePluginViewContext = () => useContext(pluginViewContext)\n\nexport const createPluginViewContext = createContext<(options: ReactPluginViewUserOptions) => PluginViewSpec>(\n  (_options) => {\n    throw new Error('out of scope')\n  },\n)\n\nexport const usePluginViewFactory = () => useContext(createPluginViewContext)\n","/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport type { NodeViewConstructor } from 'prosemirror-view'\nimport { useCallback } from 'react'\nimport type { ReactRendererResult } from '../ReactRenderer'\nimport { ReactNodeView } from './ReactNodeView'\nimport type { ReactNodeViewUserOptions } from './ReactNodeViewOptions'\n\nexport const useReactNodeViewCreator = (\n  renderReactRenderer: ReactRendererResult['renderReactRenderer'],\n  removeReactRenderer: ReactRendererResult['removeReactRenderer'],\n) => {\n  const createReactNodeView = useCallback(\n    (options: ReactNodeViewUserOptions): NodeViewConstructor =>\n      (node, view, getPos, decorations, innerDecorations) => {\n        const nodeView = new ReactNodeView({\n          node,\n          view,\n          getPos,\n          decorations,\n          innerDecorations,\n          options: {\n            ...options,\n            onUpdate() {\n              options.onUpdate?.()\n              renderReactRenderer(nodeView)\n            },\n            selectNode() {\n              options.selectNode?.()\n              renderReactRenderer(nodeView)\n            },\n            deselectNode() {\n              options.deselectNode?.()\n              renderReactRenderer(nodeView)\n            },\n            destroy() {\n              options.destroy?.()\n              removeReactRenderer(nodeView)\n            },\n          },\n        })\n\n        renderReactRenderer(nodeView, false)\n\n        return nodeView\n      },\n    [removeReactRenderer, renderReactRenderer],\n  )\n\n  return createReactNodeView\n}\n","/* Copyright 2021, Prosemirror Adapter by Mirone. */\n\nimport { CorePluginView } from '@prosemirror-adapter/core'\nimport React from 'react'\nimport { nanoid } from 'nanoid'\nimport { createPortal } from 'react-dom'\nimport type { ReactRenderer } from '../ReactRenderer'\nimport type { PluginViewContext } from './pluginViewContext'\nimport { pluginViewContext } from './pluginViewContext'\nimport type { ReactPluginViewComponent } from './ReactPluginViewOptions'\n\nexport class ReactPluginView extends CorePluginView<ReactPluginViewComponent> implements ReactRenderer<PluginViewContext> {\n  key: string = nanoid()\n\n  context: PluginViewContext = {\n    view: this.view,\n    prevState: this.prevState,\n  }\n\n  updateContext = () => {\n    Object.assign(this.context, {\n      view: this.view,\n      prevState: this.prevState,\n    })\n  }\n\n  render = () => {\n    const UserComponent = this.component\n\n    return createPortal(\n      <pluginViewContext.Provider value={this.context}>\n        <UserComponent />\n      </pluginViewContext.Provider>,\n      this.root,\n      this.key,\n    )\n  }\n}\n","/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport type { PluginViewSpec } from '@prosemirror-adapter/core'\nimport { useCallback } from 'react'\nimport type { ReactRendererResult } from '../ReactRenderer'\nimport { ReactPluginView } from './ReactPluginView'\nimport type { ReactPluginViewUserOptions } from './ReactPluginViewOptions'\n\nexport const useReactPluginViewCreator = (\n  renderReactRenderer: ReactRendererResult['renderReactRenderer'],\n  removeReactRenderer: ReactRendererResult['removeReactRenderer'],\n) => {\n  const createReactPluginView = useCallback((options: ReactPluginViewUserOptions): PluginViewSpec => {\n    return (view) => {\n      const pluginView = new ReactPluginView({\n        view,\n        options: {\n          ...options,\n          update: (view, prevState) => {\n            options.update?.(view, prevState)\n            renderReactRenderer(pluginView)\n          },\n          destroy: () => {\n            options.destroy?.()\n            removeReactRenderer(pluginView)\n          },\n        },\n      })\n\n      renderReactRenderer(pluginView, false)\n\n      return pluginView\n    }\n  }, [removeReactRenderer, renderReactRenderer])\n\n  return createReactPluginView\n}\n","/* Copyright 2021, Prosemirror Adapter by Mirone. */\n\nimport type { ReactPortal } from 'react'\nimport { useCallback, useEffect, useRef, useState } from 'react'\nimport { flushSync } from 'react-dom'\n\nexport interface ReactRenderer<Context> {\n  key: string\n\n  context: Context\n\n  render: () => ReactPortal\n\n  updateContext: () => void\n}\n\nexport interface ReactRendererResult {\n  readonly portals: Record<string, ReactPortal>\n  readonly renderReactRenderer: (nodeView: ReactRenderer<unknown>, update?: boolean) => void\n  readonly removeReactRenderer: (nodeView: ReactRenderer<unknown>) => void\n}\n\nexport const useReactRenderer = (): ReactRendererResult => {\n  const [portals, setPortals] = useState<Record<string, ReactPortal>>({})\n  const mountedRef = useRef(false)\n\n  useEffect(() => {\n    requestAnimationFrame(() => {\n      mountedRef.current = true\n    })\n    return () => {\n      mountedRef.current = false\n    }\n  }, [])\n\n  const maybeFlushSync = useCallback((fn: () => void) => {\n    if (mountedRef.current)\n      flushSync(fn)\n\n    else fn()\n  }, [])\n\n  const renderReactRenderer = useCallback(\n    (nodeView: ReactRenderer<unknown>, update = true) => {\n      maybeFlushSync(() => {\n        if (update)\n          nodeView.updateContext()\n\n        setPortals(prev => ({\n          ...prev,\n          [nodeView.key]: nodeView.render(),\n        }))\n      })\n    },\n    [maybeFlushSync],\n  )\n\n  const removeReactRenderer = useCallback(\n    (nodeView: ReactRenderer<unknown>) => {\n      maybeFlushSync(() => {\n        setPortals((prev) => {\n          const next = { ...prev }\n          delete next[nodeView.key]\n          return next\n        })\n      })\n    },\n    [maybeFlushSync],\n  )\n\n  return {\n    portals,\n    renderReactRenderer,\n    removeReactRenderer,\n  } as const\n}\n","/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport type { WidgetDecorationFactory, WidgetDecorationSpec } from '@prosemirror-adapter/core'\nimport type { EditorView } from 'prosemirror-view'\nimport { createContext, useContext } from 'react'\nimport type { ReactWidgetViewUserOptions } from './ReactWidgetViewOptions'\n\nexport interface WidgetViewContext {\n  view: EditorView\n  getPos: () => number | undefined\n  spec?: WidgetDecorationSpec\n}\n\nexport const widgetViewContext = createContext<WidgetViewContext>({\n  view: null as never,\n  getPos: () => undefined,\n})\n\nexport const useWidgetViewContext = () => useContext(widgetViewContext)\n\nexport const createWidgetViewContext = createContext<(options: ReactWidgetViewUserOptions) => WidgetDecorationFactory>(\n  (_options) => {\n    throw new Error('out of scope')\n  },\n)\n\nexport const useWidgetViewFactory = () => useContext(createWidgetViewContext)\n","/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport { CoreWidgetView } from '@prosemirror-adapter/core'\nimport { nanoid } from 'nanoid'\nimport React from 'react'\nimport { createPortal } from 'react-dom'\nimport type { ReactRenderer } from '../ReactRenderer'\nimport type { ReactWidgetViewComponent } from './ReactWidgetViewOptions'\nimport type { WidgetViewContext } from './widgetViewContext'\nimport { widgetViewContext } from './widgetViewContext'\n\nexport class ReactWidgetView extends CoreWidgetView<ReactWidgetViewComponent> implements ReactRenderer<WidgetViewContext> {\n  key: string = nanoid()\n\n  context: WidgetViewContext = {\n    view: this.view!,\n    getPos: this.getPos!,\n    spec: this.spec,\n  }\n\n  updateContext = () => {\n    Object.assign(this.context, {\n      view: this.view,\n      getPos: this.getPos,\n      spec: this.spec,\n    })\n  }\n\n  render = () => {\n    const UserComponent = this.component\n\n    return createPortal(\n      <widgetViewContext.Provider value={this.context}>\n        <UserComponent />\n      </widgetViewContext.Provider>,\n      this.dom,\n      this.key,\n    )\n  }\n}\n","/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport type { WidgetDecorationFactory, WidgetDecorationSpec } from '@prosemirror-adapter/core'\nimport { Decoration } from 'prosemirror-view'\nimport { useCallback } from 'react'\nimport type { ReactRendererResult } from '../ReactRenderer'\nimport { ReactWidgetView } from './ReactWidgetView'\nimport type { ReactWidgetViewUserOptions } from './ReactWidgetViewOptions'\n\nexport const useReactWidgetViewCreator = (\n  renderReactRenderer: ReactRendererResult['renderReactRenderer'],\n  removeReactRenderer: ReactRendererResult['removeReactRenderer'],\n) => {\n  const createWidgetPluginView = useCallback((options: ReactWidgetViewUserOptions): WidgetDecorationFactory => {\n    return (pos, userSpec = {}) => {\n      const widgetView = new ReactWidgetView({\n        pos,\n        options,\n      })\n      const spec: WidgetDecorationSpec = {\n        ...userSpec,\n        destroy: (node) => {\n          userSpec.destroy?.(node)\n          removeReactRenderer(widgetView)\n        },\n      }\n      widgetView.spec = spec\n\n      return Decoration.widget(pos, (view, getPos) => {\n        widgetView.bind(view, getPos)\n        renderReactRenderer(widgetView)\n\n        return widgetView.dom\n      }, spec)\n    }\n  }, [removeReactRenderer, renderReactRenderer])\n\n  return createWidgetPluginView\n}\n","/* Copyright 2021, Prosemirror Adapter by Mirone. */\n\nimport type {\n  FC,\n  ReactNode,\n} from 'react'\nimport React, { useMemo } from 'react'\nimport { createNodeViewContext } from './nodeView'\nimport { createPluginViewContext } from './pluginView/pluginViewContext'\n\nimport { useReactNodeViewCreator } from './nodeView/useReactNodeViewCreator'\nimport { useReactPluginViewCreator } from './pluginView/useReactPluginViewCreator'\nimport { useReactRenderer } from './ReactRenderer'\nimport { createWidgetViewContext } from './widgetView'\nimport { useReactWidgetViewCreator } from './widgetView/useReactWidgetViewCreator'\n\nexport type CreateReactNodeView = ReturnType<typeof useReactNodeViewCreator>\nexport type CreateReactPluginView = ReturnType<typeof useReactPluginViewCreator>\nexport type CreateReactWidgetView = ReturnType<typeof useReactWidgetViewCreator>\n\nexport const ProsemirrorAdapterProvider: FC<{ children: ReactNode }> = ({ children }) => {\n  const { renderReactRenderer, removeReactRenderer, portals } = useReactRenderer()\n\n  const createReactNodeView: CreateReactNodeView = useReactNodeViewCreator(renderReactRenderer, removeReactRenderer)\n  const createReactPluginView: CreateReactPluginView = useReactPluginViewCreator(renderReactRenderer, removeReactRenderer)\n  const createReactWidgetView: CreateReactWidgetView = useReactWidgetViewCreator(renderReactRenderer, removeReactRenderer)\n\n  const memoizedPortals = useMemo(() => Object.values(portals), [portals])\n\n  return (\n    <createNodeViewContext.Provider value={createReactNodeView}>\n      <createPluginViewContext.Provider value={createReactPluginView}>\n        <createWidgetViewContext.Provider value={createReactWidgetView}>\n          {children}\n          {memoizedPortals}\n        </createWidgetViewContext.Provider>\n      </createPluginViewContext.Provider>\n    </createNodeViewContext.Provider>\n  )\n}\n"],"names":["nodeViewContext","createContext","useNodeViewContext","useContext","createNodeViewContext","_options","useNodeViewFactory","ReactNodeView","CoreNodeView","nanoid","element","UserComponent","createPortal","React","pluginViewContext","usePluginViewContext","createPluginViewContext","usePluginViewFactory","useReactNodeViewCreator","renderReactRenderer","removeReactRenderer","useCallback","options","node","view","getPos","decorations","innerDecorations","nodeView","_a","ReactPluginView","CorePluginView","useReactPluginViewCreator","pluginView","prevState","useReactRenderer","portals","setPortals","useState","mountedRef","useRef","useEffect","maybeFlushSync","fn","flushSync","update","prev","next","widgetViewContext","useWidgetViewContext","createWidgetViewContext","useWidgetViewFactory","ReactWidgetView","CoreWidgetView","useReactWidgetViewCreator","pos","userSpec","widgetView","spec","Decoration","ProsemirrorAdapterProvider","children","createReactNodeView","createReactPluginView","createReactWidgetView","memoizedPortals","useMemo"],"mappings":"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"}