{
  "version": 3,
  "sources": ["../../@prosemirror-adapter/core/src/nodeView/CoreNodeView.ts", "../../@prosemirror-adapter/core/src/pluginView/CorePluginView.ts", "../../@prosemirror-adapter/core/src/widgetView/CoreWidgetView.ts", "../../@prosemirror-adapter/react/node_modules/nanoid/index.browser.js", "../../@prosemirror-adapter/react/src/nodeView/nodeViewContext.ts", "../../@prosemirror-adapter/react/src/nodeView/ReactNodeView.tsx", "../../@prosemirror-adapter/react/src/pluginView/pluginViewContext.ts", "../../@prosemirror-adapter/react/src/nodeView/useReactNodeViewCreator.ts", "../../@prosemirror-adapter/react/src/pluginView/ReactPluginView.tsx", "../../@prosemirror-adapter/react/src/pluginView/useReactPluginViewCreator.ts", "../../@prosemirror-adapter/react/src/ReactRenderer.ts", "../../@prosemirror-adapter/react/src/widgetView/widgetViewContext.ts", "../../@prosemirror-adapter/react/src/widgetView/ReactWidgetView.tsx", "../../@prosemirror-adapter/react/src/widgetView/useReactWidgetViewCreator.ts", "../../@prosemirror-adapter/react/src/Provider.tsx"],
  "sourcesContent": ["/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport type { Attrs, Node } from 'prosemirror-model'\nimport type { Decoration, DecorationSource, EditorView, NodeView } from 'prosemirror-view'\n\nimport type { CoreNodeViewSpec, CoreNodeViewUserOptions } from './CoreNodeViewOptions'\n\nexport class CoreNodeView<ComponentType> implements NodeView {\n  dom: HTMLElement\n  contentDOM: HTMLElement | null\n  node: Node\n  view: EditorView\n  getPos: () => number | undefined\n  decorations: readonly Decoration[]\n  innerDecorations: DecorationSource\n  options: CoreNodeViewUserOptions<ComponentType>\n  selected = false\n  setSelection?: (anchor: number, head: number, root: Document | ShadowRoot) => void\n  stopEvent?: (event: Event) => boolean\n\n  #createElement(as?: string | HTMLElement | ((node: Node) => HTMLElement)) {\n    const { node } = this\n    return as == null\n      ? document.createElement(node.isInline ? 'span' : 'div')\n      : as instanceof HTMLElement\n        ? as\n        : as instanceof Function\n          ? as(node)\n          : document.createElement(as)\n  }\n\n  createDOM(as?: string | HTMLElement | ((node: Node) => HTMLElement)) {\n    return this.#createElement(as)\n  }\n\n  createContentDOM(as?: string | HTMLElement | ((node: Node) => HTMLElement)) {\n    return this.#createElement(as)\n  }\n\n  constructor({ node, view, getPos, decorations, innerDecorations, options }: CoreNodeViewSpec<ComponentType>) {\n    this.node = node\n    this.view = view\n    this.getPos = getPos\n    this.decorations = decorations\n    this.innerDecorations = innerDecorations\n    this.options = options\n\n    this.dom = this.createDOM(options.as)\n    this.contentDOM = node.isLeaf ? null : this.createContentDOM(options.contentAs)\n    this.dom.setAttribute('data-node-view-root', 'true')\n    if (this.contentDOM) {\n      this.contentDOM.setAttribute('data-node-view-content', 'true')\n      this.contentDOM.style.whiteSpace = 'inherit'\n    }\n\n    this.setSelection = options.setSelection\n    this.stopEvent = options.stopEvent\n  }\n\n  get component() {\n    return this.options.component\n  }\n\n  selectNode = () => {\n    this.selected = true\n    this.options.selectNode?.()\n  }\n\n  deselectNode = () => {\n    this.selected = false\n    this.options.deselectNode?.()\n  }\n\n  shouldUpdate: (node: Node) => boolean = (node) => {\n    if (node.type !== this.node.type)\n      return false\n\n    if (node.sameMarkup(this.node) && node.content.eq(this.node.content))\n      return false\n\n    return true\n  }\n\n  update: (node: Node, decorations: readonly Decoration[], innerDecorations: DecorationSource) => boolean = (\n    node,\n    decorations,\n    innerDecorations,\n  ) => {\n    const userUpdate = this.options.update\n    let result\n    if (userUpdate)\n      result = userUpdate(node, decorations, innerDecorations)\n\n    if (typeof result !== 'boolean')\n      result = this.shouldUpdate(node)\n\n    this.node = node\n    this.decorations = decorations\n    this.innerDecorations = innerDecorations\n\n    if (result)\n      this.options.onUpdate?.()\n\n    return result\n  }\n\n  shouldIgnoreMutation: (mutation: MutationRecord) => boolean = (mutation) => {\n    if (!this.dom || !this.contentDOM)\n      return true\n\n    if (this.node.isLeaf || this.node.isAtom)\n      return true\n\n    if ((mutation.type as unknown) === 'selection')\n      return false\n\n    if (this.contentDOM === mutation.target && mutation.type === 'attributes')\n      return true\n\n    if (this.contentDOM.contains(mutation.target))\n      return false\n\n    return true\n  }\n\n  ignoreMutation: (mutation: MutationRecord) => boolean = (mutation) => {\n    if (!this.dom || !this.contentDOM)\n      return true\n\n    let result\n\n    const userIgnoreMutation = this.options.ignoreMutation\n\n    if (userIgnoreMutation)\n      result = userIgnoreMutation(mutation)\n\n    if (typeof result !== 'boolean')\n      result = this.shouldIgnoreMutation(mutation)\n\n    return result\n  }\n\n  destroy: () => void = () => {\n    this.options.destroy?.()\n    this.dom.remove()\n    this.contentDOM?.remove()\n  }\n\n  setAttrs = (attr: Attrs) => {\n    const { dispatch, state } = this.view\n    const pos = this.getPos()\n\n    if (typeof pos !== 'number')\n      return\n\n    return dispatch(\n      state.tr.setNodeMarkup(pos, undefined, {\n        ...this.node.attrs,\n        ...attr,\n      }),\n    )\n  }\n}\n", "/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport type { EditorState, PluginView } from 'prosemirror-state'\nimport type { EditorView } from 'prosemirror-view'\nimport type { CorePluginViewSpec, CorePluginViewUserOptions } from './CorePluginViewOptions'\n\nexport class CorePluginView<ComponentType> implements PluginView {\n  view: EditorView\n  prevState?: EditorState\n  options: CorePluginViewUserOptions<ComponentType>\n\n  constructor(spec: CorePluginViewSpec<ComponentType>) {\n    this.view = spec.view\n    this.options = spec.options\n  }\n\n  get component() {\n    return this.options.component\n  }\n\n  get root() {\n    let root = this.options.root?.(this.view.dom)\n\n    if (!root)\n      root = this.view.dom.parentElement ?? document.body\n\n    return root\n  }\n\n  update(view: EditorView, prevState: EditorState) {\n    this.view = view\n    this.prevState = prevState\n    this.options.update?.(view, prevState)\n  }\n\n  destroy(): void {\n    this.options.destroy?.()\n  }\n}\n", "/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport type { EditorView } from 'prosemirror-view'\nimport type { CoreWidgetViewSpec, CoreWidgetViewUserOptions, WidgetDecorationSpec } from './CoreWidgetViewOptions'\n\nexport class CoreWidgetView<Component> {\n  dom: HTMLElement\n  pos: number\n  view?: EditorView\n  getPos?: () => number | undefined\n  spec?: WidgetDecorationSpec\n\n  options: CoreWidgetViewUserOptions<Component>\n\n  #createElement(as: string | HTMLElement) {\n    return as instanceof HTMLElement\n      ? as\n      : document.createElement(as)\n  }\n\n  constructor({ pos, spec, options }: CoreWidgetViewSpec<Component>) {\n    this.pos = pos\n    this.options = options\n    this.spec = spec\n\n    this.dom = this.#createElement(options.as)\n    this.dom.setAttribute('data-widget-view-root', 'true')\n  }\n\n  bind(view: EditorView, getPos: () => number | undefined) {\n    this.view = view\n    this.getPos = getPos\n  }\n\n  get component() {\n    return this.options.component\n  }\n}\n", "export { urlAlphabet } from './url-alphabet/index.js'\r\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\r\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\r\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\r\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\r\n  return (size = defaultSize) => {\r\n    let id = ''\r\n    while (true) {\r\n      let bytes = getRandom(step)\r\n      let j = step\r\n      while (j--) {\r\n        id += alphabet[bytes[j] & mask] || ''\r\n        if (id.length === size) return id\r\n      }\r\n    }\r\n  }\r\n}\r\nexport let customAlphabet = (alphabet, size = 21) =>\r\n  customRandom(alphabet, size, random)\r\nexport let nanoid = (size = 21) =>\r\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\r\n    byte &= 63\r\n    if (byte < 36) {\r\n      id += byte.toString(36)\r\n    } else if (byte < 62) {\r\n      id += (byte - 26).toString(36).toUpperCase()\r\n    } else if (byte > 62) {\r\n      id += '-'\r\n    } else {\r\n      id += '_'\r\n    }\r\n    return id\r\n  }, '')\r\n", "/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport type { Attrs, Node } from 'prosemirror-model'\nimport type { Decoration, DecorationSource, EditorView, NodeViewConstructor } from 'prosemirror-view'\nimport { createContext, useContext } from 'react'\nimport type { ReactNodeViewUserOptions } from './ReactNodeViewOptions'\n\nexport type NodeViewContentRef = (node: HTMLElement | null) => void\n\nexport interface NodeViewContext {\n  // won't change\n  contentRef: NodeViewContentRef\n  view: EditorView\n  getPos: () => number | undefined\n  setAttrs: (attrs: Attrs) => void\n\n  // changes between updates\n  node: Node\n  selected: boolean\n  decorations: readonly Decoration[]\n  innerDecorations: DecorationSource\n}\n\nexport const nodeViewContext = createContext<NodeViewContext>({\n  contentRef: () => {\n    // nothing to do\n  },\n  view: null as never,\n  getPos: () => 0,\n  setAttrs: () => {\n    // nothing to do\n  },\n\n  node: null as never,\n  selected: false,\n  decorations: [],\n  innerDecorations: null as never,\n})\n\nexport const useNodeViewContext = () => useContext(nodeViewContext)\n\nexport const createNodeViewContext = createContext<(options: ReactNodeViewUserOptions) => NodeViewConstructor>(\n  (_options) => {\n    throw new Error('out of scope')\n  },\n)\n\nexport const useNodeViewFactory = () => useContext(createNodeViewContext)\n", "/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport { CoreNodeView } from '@prosemirror-adapter/core'\nimport { nanoid } from 'nanoid'\nimport React from 'react'\nimport { createPortal } from 'react-dom'\n\nimport type { ReactRenderer } from '../ReactRenderer'\nimport type { NodeViewContext } from './nodeViewContext'\nimport { nodeViewContext } from './nodeViewContext'\nimport type { ReactNodeViewComponent } from './ReactNodeViewOptions'\n\nexport class ReactNodeView extends CoreNodeView<ReactNodeViewComponent> implements ReactRenderer<NodeViewContext> {\n  key: string = nanoid()\n\n  context: NodeViewContext = {\n    contentRef: (element) => {\n      if (element && this.contentDOM && element.firstChild !== this.contentDOM)\n        element.appendChild(this.contentDOM)\n    },\n    view: this.view,\n    getPos: this.getPos,\n    setAttrs: this.setAttrs,\n\n    node: this.node,\n    selected: this.selected,\n    decorations: this.decorations,\n    innerDecorations: this.innerDecorations,\n  }\n\n  updateContext = () => {\n    Object.assign(this.context, {\n      node: this.node,\n      selected: this.selected,\n      decorations: this.decorations,\n      innerDecorations: this.innerDecorations,\n    })\n  }\n\n  render = () => {\n    const UserComponent = this.component\n\n    return createPortal(\n      <nodeViewContext.Provider value={this.context}>\n        <UserComponent />\n      </nodeViewContext.Provider>,\n      this.dom,\n      this.key,\n    )\n  }\n}\n", "/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport type { PluginViewSpec } from '@prosemirror-adapter/core'\nimport type { EditorState } from 'prosemirror-state'\nimport type { EditorView } from 'prosemirror-view'\nimport { createContext, useContext } from 'react'\nimport type { ReactPluginViewUserOptions } from './ReactPluginViewOptions'\n\nexport type PluginViewContentRef = (node: HTMLElement | null) => void\n\nexport interface PluginViewContext {\n  view: EditorView\n  prevState?: EditorState\n}\n\nexport const pluginViewContext = createContext<PluginViewContext>({\n  view: null as never,\n})\n\nexport const usePluginViewContext = () => useContext(pluginViewContext)\n\nexport const createPluginViewContext = createContext<(options: ReactPluginViewUserOptions) => PluginViewSpec>(\n  (_options) => {\n    throw new Error('out of scope')\n  },\n)\n\nexport const usePluginViewFactory = () => useContext(createPluginViewContext)\n", "/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport type { NodeViewConstructor } from 'prosemirror-view'\nimport { useCallback } from 'react'\nimport type { ReactRendererResult } from '../ReactRenderer'\nimport { ReactNodeView } from './ReactNodeView'\nimport type { ReactNodeViewUserOptions } from './ReactNodeViewOptions'\n\nexport const useReactNodeViewCreator = (\n  renderReactRenderer: ReactRendererResult['renderReactRenderer'],\n  removeReactRenderer: ReactRendererResult['removeReactRenderer'],\n) => {\n  const createReactNodeView = useCallback(\n    (options: ReactNodeViewUserOptions): NodeViewConstructor =>\n      (node, view, getPos, decorations, innerDecorations) => {\n        const nodeView = new ReactNodeView({\n          node,\n          view,\n          getPos,\n          decorations,\n          innerDecorations,\n          options: {\n            ...options,\n            onUpdate() {\n              options.onUpdate?.()\n              renderReactRenderer(nodeView)\n            },\n            selectNode() {\n              options.selectNode?.()\n              renderReactRenderer(nodeView)\n            },\n            deselectNode() {\n              options.deselectNode?.()\n              renderReactRenderer(nodeView)\n            },\n            destroy() {\n              options.destroy?.()\n              removeReactRenderer(nodeView)\n            },\n          },\n        })\n\n        renderReactRenderer(nodeView, false)\n\n        return nodeView\n      },\n    [removeReactRenderer, renderReactRenderer],\n  )\n\n  return createReactNodeView\n}\n", "/* Copyright 2021, Prosemirror Adapter by Mirone. */\n\nimport { CorePluginView } from '@prosemirror-adapter/core'\nimport React from 'react'\nimport { nanoid } from 'nanoid'\nimport { createPortal } from 'react-dom'\nimport type { ReactRenderer } from '../ReactRenderer'\nimport type { PluginViewContext } from './pluginViewContext'\nimport { pluginViewContext } from './pluginViewContext'\nimport type { ReactPluginViewComponent } from './ReactPluginViewOptions'\n\nexport class ReactPluginView extends CorePluginView<ReactPluginViewComponent> implements ReactRenderer<PluginViewContext> {\n  key: string = nanoid()\n\n  context: PluginViewContext = {\n    view: this.view,\n    prevState: this.prevState,\n  }\n\n  updateContext = () => {\n    Object.assign(this.context, {\n      view: this.view,\n      prevState: this.prevState,\n    })\n  }\n\n  render = () => {\n    const UserComponent = this.component\n\n    return createPortal(\n      <pluginViewContext.Provider value={this.context}>\n        <UserComponent />\n      </pluginViewContext.Provider>,\n      this.root,\n      this.key,\n    )\n  }\n}\n", "/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport type { PluginViewSpec } from '@prosemirror-adapter/core'\nimport { useCallback } from 'react'\nimport type { ReactRendererResult } from '../ReactRenderer'\nimport { ReactPluginView } from './ReactPluginView'\nimport type { ReactPluginViewUserOptions } from './ReactPluginViewOptions'\n\nexport const useReactPluginViewCreator = (\n  renderReactRenderer: ReactRendererResult['renderReactRenderer'],\n  removeReactRenderer: ReactRendererResult['removeReactRenderer'],\n) => {\n  const createReactPluginView = useCallback((options: ReactPluginViewUserOptions): PluginViewSpec => {\n    return (view) => {\n      const pluginView = new ReactPluginView({\n        view,\n        options: {\n          ...options,\n          update: (view, prevState) => {\n            options.update?.(view, prevState)\n            renderReactRenderer(pluginView)\n          },\n          destroy: () => {\n            options.destroy?.()\n            removeReactRenderer(pluginView)\n          },\n        },\n      })\n\n      renderReactRenderer(pluginView, false)\n\n      return pluginView\n    }\n  }, [removeReactRenderer, renderReactRenderer])\n\n  return createReactPluginView\n}\n", "/* Copyright 2021, Prosemirror Adapter by Mirone. */\n\nimport type { ReactPortal } from 'react'\nimport { useCallback, useEffect, useRef, useState } from 'react'\nimport { flushSync } from 'react-dom'\n\nexport interface ReactRenderer<Context> {\n  key: string\n\n  context: Context\n\n  render: () => ReactPortal\n\n  updateContext: () => void\n}\n\nexport interface ReactRendererResult {\n  readonly portals: Record<string, ReactPortal>\n  readonly renderReactRenderer: (nodeView: ReactRenderer<unknown>, update?: boolean) => void\n  readonly removeReactRenderer: (nodeView: ReactRenderer<unknown>) => void\n}\n\nexport const useReactRenderer = (): ReactRendererResult => {\n  const [portals, setPortals] = useState<Record<string, ReactPortal>>({})\n  const mountedRef = useRef(false)\n\n  useEffect(() => {\n    requestAnimationFrame(() => {\n      mountedRef.current = true\n    })\n    return () => {\n      mountedRef.current = false\n    }\n  }, [])\n\n  const maybeFlushSync = useCallback((fn: () => void) => {\n    if (mountedRef.current)\n      flushSync(fn)\n\n    else fn()\n  }, [])\n\n  const renderReactRenderer = useCallback(\n    (nodeView: ReactRenderer<unknown>, update = true) => {\n      maybeFlushSync(() => {\n        if (update)\n          nodeView.updateContext()\n\n        setPortals(prev => ({\n          ...prev,\n          [nodeView.key]: nodeView.render(),\n        }))\n      })\n    },\n    [maybeFlushSync],\n  )\n\n  const removeReactRenderer = useCallback(\n    (nodeView: ReactRenderer<unknown>) => {\n      maybeFlushSync(() => {\n        setPortals((prev) => {\n          const next = { ...prev }\n          delete next[nodeView.key]\n          return next\n        })\n      })\n    },\n    [maybeFlushSync],\n  )\n\n  return {\n    portals,\n    renderReactRenderer,\n    removeReactRenderer,\n  } as const\n}\n", "/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport type { WidgetDecorationFactory, WidgetDecorationSpec } from '@prosemirror-adapter/core'\nimport type { EditorView } from 'prosemirror-view'\nimport { createContext, useContext } from 'react'\nimport type { ReactWidgetViewUserOptions } from './ReactWidgetViewOptions'\n\nexport interface WidgetViewContext {\n  view: EditorView\n  getPos: () => number | undefined\n  spec?: WidgetDecorationSpec\n}\n\nexport const widgetViewContext = createContext<WidgetViewContext>({\n  view: null as never,\n  getPos: () => undefined,\n})\n\nexport const useWidgetViewContext = () => useContext(widgetViewContext)\n\nexport const createWidgetViewContext = createContext<(options: ReactWidgetViewUserOptions) => WidgetDecorationFactory>(\n  (_options) => {\n    throw new Error('out of scope')\n  },\n)\n\nexport const useWidgetViewFactory = () => useContext(createWidgetViewContext)\n", "/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport { CoreWidgetView } from '@prosemirror-adapter/core'\nimport { nanoid } from 'nanoid'\nimport React from 'react'\nimport { createPortal } from 'react-dom'\nimport type { ReactRenderer } from '../ReactRenderer'\nimport type { ReactWidgetViewComponent } from './ReactWidgetViewOptions'\nimport type { WidgetViewContext } from './widgetViewContext'\nimport { widgetViewContext } from './widgetViewContext'\n\nexport class ReactWidgetView extends CoreWidgetView<ReactWidgetViewComponent> implements ReactRenderer<WidgetViewContext> {\n  key: string = nanoid()\n\n  context: WidgetViewContext = {\n    view: this.view!,\n    getPos: this.getPos!,\n    spec: this.spec,\n  }\n\n  updateContext = () => {\n    Object.assign(this.context, {\n      view: this.view,\n      getPos: this.getPos,\n      spec: this.spec,\n    })\n  }\n\n  render = () => {\n    const UserComponent = this.component\n\n    return createPortal(\n      <widgetViewContext.Provider value={this.context}>\n        <UserComponent />\n      </widgetViewContext.Provider>,\n      this.dom,\n      this.key,\n    )\n  }\n}\n", "/* Copyright 2021, Prosemirror Adapter by Mirone. */\nimport type { WidgetDecorationFactory, WidgetDecorationSpec } from '@prosemirror-adapter/core'\nimport { Decoration } from 'prosemirror-view'\nimport { useCallback } from 'react'\nimport type { ReactRendererResult } from '../ReactRenderer'\nimport { ReactWidgetView } from './ReactWidgetView'\nimport type { ReactWidgetViewUserOptions } from './ReactWidgetViewOptions'\n\nexport const useReactWidgetViewCreator = (\n  renderReactRenderer: ReactRendererResult['renderReactRenderer'],\n  removeReactRenderer: ReactRendererResult['removeReactRenderer'],\n) => {\n  const createWidgetPluginView = useCallback((options: ReactWidgetViewUserOptions): WidgetDecorationFactory => {\n    return (pos, userSpec = {}) => {\n      const widgetView = new ReactWidgetView({\n        pos,\n        options,\n      })\n      const spec: WidgetDecorationSpec = {\n        ...userSpec,\n        destroy: (node) => {\n          userSpec.destroy?.(node)\n          removeReactRenderer(widgetView)\n        },\n      }\n      widgetView.spec = spec\n\n      return Decoration.widget(pos, (view, getPos) => {\n        widgetView.bind(view, getPos)\n        renderReactRenderer(widgetView)\n\n        return widgetView.dom\n      }, spec)\n    }\n  }, [removeReactRenderer, renderReactRenderer])\n\n  return createWidgetPluginView\n}\n", "/* Copyright 2021, Prosemirror Adapter by Mirone. */\n\nimport type {\n  FC,\n  ReactNode,\n} from 'react'\nimport React, { useMemo } from 'react'\nimport { createNodeViewContext } from './nodeView'\nimport { createPluginViewContext } from './pluginView/pluginViewContext'\n\nimport { useReactNodeViewCreator } from './nodeView/useReactNodeViewCreator'\nimport { useReactPluginViewCreator } from './pluginView/useReactPluginViewCreator'\nimport { useReactRenderer } from './ReactRenderer'\nimport { createWidgetViewContext } from './widgetView'\nimport { useReactWidgetViewCreator } from './widgetView/useReactWidgetViewCreator'\n\nexport type CreateReactNodeView = ReturnType<typeof useReactNodeViewCreator>\nexport type CreateReactPluginView = ReturnType<typeof useReactPluginViewCreator>\nexport type CreateReactWidgetView = ReturnType<typeof useReactWidgetViewCreator>\n\nexport const ProsemirrorAdapterProvider: FC<{ children: ReactNode }> = ({ children }) => {\n  const { renderReactRenderer, removeReactRenderer, portals } = useReactRenderer()\n\n  const createReactNodeView: CreateReactNodeView = useReactNodeViewCreator(renderReactRenderer, removeReactRenderer)\n  const createReactPluginView: CreateReactPluginView = useReactPluginViewCreator(renderReactRenderer, removeReactRenderer)\n  const createReactWidgetView: CreateReactWidgetView = useReactWidgetViewCreator(renderReactRenderer, removeReactRenderer)\n\n  const memoizedPortals = useMemo(() => Object.values(portals), [portals])\n\n  return (\n    <createNodeViewContext.Provider value={createReactNodeView}>\n      <createPluginViewContext.Provider value={createReactPluginView}>\n        <createWidgetViewContext.Provider value={createReactWidgetView}>\n          {children}\n          {memoizedPortals}\n        </createWidgetViewContext.Provider>\n      </createPluginViewContext.Provider>\n    </createNodeViewContext.Provider>\n  )\n}\n"],
  "mappings": "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",
  "names": ["_createElement", "createElement_fn", "CoreNodeView", "node", "view", "getPos", "decorations", "innerDecorations", "options", "__privateAdd", "_a", "_b", "userUpdate", "result", "mutation", "userIgnoreMutation", "_c", "attr", "dispatch", "state", "pos", "as", "__privateMethod", "CorePluginView", "spec", "root", "prevState", "CoreWidgetView", "nodeViewContext", "createContext", "useNodeViewContext", "useContext", "createNodeViewContext", "_options", "useNodeViewFactory", "ReactNodeView", "CoreNodeView", "nanoid", "element", "UserComponent", "createPortal", "React", "pluginViewContext", "usePluginViewContext", "createPluginViewContext", "usePluginViewFactory", "useReactNodeViewCreator", "renderReactRenderer", "removeReactRenderer", "useCallback", "options", "node", "view", "getPos", "decorations", "innerDecorations", "nodeView", "_a", "ReactPluginView", "CorePluginView", "useReactPluginViewCreator", "pluginView", "prevState", "useReactRenderer", "portals", "setPortals", "useState", "mountedRef", "useRef", "useEffect", "maybeFlushSync", "fn", "flushSync", "update", "prev", "next", "widgetViewContext", "useWidgetViewContext", "createWidgetViewContext", "useWidgetViewFactory", "ReactWidgetView", "CoreWidgetView", "useReactWidgetViewCreator", "pos", "userSpec", "widgetView", "spec", "Decoration", "ProsemirrorAdapterProvider", "children", "createReactNodeView", "createReactPluginView", "createReactWidgetView", "memoizedPortals", "useMemo"]
}
