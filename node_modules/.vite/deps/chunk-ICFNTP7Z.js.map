{
  "version": 3,
  "sources": ["../../ms/index.js", "../../debug/src/common.js", "../../debug/src/browser.js", "../../extend/index.js", "../../@milkdown/exception/src/code.ts", "../../@milkdown/exception/src/error.ts", "../../@milkdown/exception/src/index.ts", "../../@milkdown/ctx/src/context/container.ts", "../../@milkdown/ctx/src/context/slice.ts", "../../@milkdown/ctx/src/inspector/inspector.ts", "../../@milkdown/ctx/src/plugin/ctx.ts", "../../@milkdown/ctx/src/timer/clock.ts", "../../@milkdown/ctx/src/timer/timer.ts", "../../devlop/lib/development.js", "../../mdast-util-to-string/lib/index.js", "../../decode-named-character-reference/index.dom.js", "../../micromark-util-symbol/lib/codes.js", "../../micromark-util-symbol/lib/constants.js", "../../micromark-util-symbol/lib/types.js", "../../micromark-util-symbol/lib/values.js", "../../micromark-util-chunked/dev/index.js", "../../micromark-util-combine-extensions/index.js", "../../micromark-util-decode-numeric-character-reference/dev/index.js", "../../micromark-util-normalize-identifier/dev/index.js", "../../micromark-util-character/dev/index.js", "../../micromark/dev/lib/compile.js", "../../micromark-factory-space/dev/index.js", "../../micromark/dev/lib/initialize/content.js", "../../micromark/dev/lib/initialize/document.js", "../../micromark-util-classify-character/dev/index.js", "../../micromark-util-resolve-all/index.js", "../../micromark-core-commonmark/dev/lib/attention.js", "../../micromark-core-commonmark/dev/lib/autolink.js", "../../micromark-core-commonmark/dev/lib/blank-line.js", "../../micromark-core-commonmark/dev/lib/block-quote.js", "../../micromark-core-commonmark/dev/lib/character-escape.js", "../../micromark-core-commonmark/dev/lib/character-reference.js", "../../micromark-core-commonmark/dev/lib/code-fenced.js", "../../micromark-core-commonmark/dev/lib/code-indented.js", "../../micromark-core-commonmark/dev/lib/code-text.js", "../../micromark-util-subtokenize/dev/lib/splice-buffer.js", "../../micromark-util-subtokenize/dev/index.js", "../../micromark-core-commonmark/dev/lib/content.js", "../../micromark-factory-destination/dev/index.js", "../../micromark-factory-label/dev/index.js", "../../micromark-factory-title/dev/index.js", "../../micromark-factory-whitespace/dev/index.js", "../../micromark-core-commonmark/dev/lib/definition.js", "../../micromark-core-commonmark/dev/lib/hard-break-escape.js", "../../micromark-core-commonmark/dev/lib/heading-atx.js", "../../micromark-util-html-tag-name/index.js", "../../micromark-core-commonmark/dev/lib/html-flow.js", "../../micromark-core-commonmark/dev/lib/html-text.js", "../../micromark-core-commonmark/dev/lib/label-end.js", "../../micromark-core-commonmark/dev/lib/label-start-image.js", "../../micromark-core-commonmark/dev/lib/label-start-link.js", "../../micromark-core-commonmark/dev/lib/line-ending.js", "../../micromark-core-commonmark/dev/lib/thematic-break.js", "../../micromark-core-commonmark/dev/lib/list.js", "../../micromark-core-commonmark/dev/lib/setext-underline.js", "../../micromark/dev/lib/initialize/flow.js", "../../micromark/dev/lib/initialize/text.js", "../../micromark/dev/lib/create-tokenizer.js", "../../micromark/dev/lib/constructs.js", "../../micromark/dev/lib/parse.js", "../../micromark/dev/lib/postprocess.js", "../../micromark/dev/lib/preprocess.js", "../../micromark-util-decode-string/dev/index.js", "../../unist-util-stringify-position/lib/index.js", "../../mdast-util-from-markdown/dev/lib/index.js", "../../remark-parse/lib/index.js", "../../zwitch/index.js", "../../mdast-util-to-markdown/lib/configure.js", "../../mdast-util-to-markdown/lib/handle/blockquote.js", "../../mdast-util-to-markdown/lib/util/pattern-in-scope.js", "../../mdast-util-to-markdown/lib/handle/break.js", "../../longest-streak/index.js", "../../mdast-util-to-markdown/lib/util/format-code-as-indented.js", "../../mdast-util-to-markdown/lib/util/check-fence.js", "../../mdast-util-to-markdown/lib/handle/code.js", "../../mdast-util-to-markdown/lib/util/check-quote.js", "../../mdast-util-to-markdown/lib/handle/definition.js", "../../mdast-util-to-markdown/lib/util/check-emphasis.js", "../../mdast-util-to-markdown/lib/handle/emphasis.js", "../../unist-util-is/lib/index.js", "../../unist-util-visit-parents/lib/color.js", "../../unist-util-visit-parents/lib/index.js", "../../unist-util-visit/lib/index.js", "../../mdast-util-to-markdown/lib/util/format-heading-as-setext.js", "../../mdast-util-to-markdown/lib/handle/heading.js", "../../mdast-util-to-markdown/lib/handle/html.js", "../../mdast-util-to-markdown/lib/handle/image.js", "../../mdast-util-to-markdown/lib/handle/image-reference.js", "../../mdast-util-to-markdown/lib/handle/inline-code.js", "../../mdast-util-to-markdown/lib/util/format-link-as-autolink.js", "../../mdast-util-to-markdown/lib/handle/link.js", "../../mdast-util-to-markdown/lib/handle/link-reference.js", "../../mdast-util-to-markdown/lib/util/check-bullet.js", "../../mdast-util-to-markdown/lib/util/check-bullet-other.js", "../../mdast-util-to-markdown/lib/util/check-bullet-ordered.js", "../../mdast-util-to-markdown/lib/util/check-rule.js", "../../mdast-util-to-markdown/lib/handle/list.js", "../../mdast-util-to-markdown/lib/util/check-list-item-indent.js", "../../mdast-util-to-markdown/lib/handle/list-item.js", "../../mdast-util-to-markdown/lib/handle/paragraph.js", "../../mdast-util-phrasing/lib/index.js", "../../mdast-util-to-markdown/lib/handle/root.js", "../../mdast-util-to-markdown/lib/util/check-strong.js", "../../mdast-util-to-markdown/lib/handle/strong.js", "../../mdast-util-to-markdown/lib/handle/text.js", "../../mdast-util-to-markdown/lib/util/check-rule-repetition.js", "../../mdast-util-to-markdown/lib/handle/thematic-break.js", "../../mdast-util-to-markdown/lib/handle/index.js", "../../mdast-util-to-markdown/lib/join.js", "../../mdast-util-to-markdown/lib/unsafe.js", "../../mdast-util-to-markdown/lib/util/association.js", "../../mdast-util-to-markdown/lib/util/compile-pattern.js", "../../mdast-util-to-markdown/lib/util/container-phrasing.js", "../../mdast-util-to-markdown/lib/util/container-flow.js", "../../mdast-util-to-markdown/lib/util/indent-lines.js", "../../mdast-util-to-markdown/lib/util/safe.js", "../../mdast-util-to-markdown/lib/util/track.js", "../../mdast-util-to-markdown/lib/index.js", "../../remark-stringify/lib/index.js", "../../bail/index.js", "../../unified/lib/index.js", "../../is-plain-obj/index.js", "../../trough/lib/index.js", "../../vfile-message/lib/index.js", "../../vfile/lib/minpath.browser.js", "../../vfile/lib/minproc.browser.js", "../../vfile/lib/minurl.shared.js", "../../vfile/lib/minurl.browser.js", "../../vfile/lib/index.js", "../../unified/lib/callable-instance.js", "../../@milkdown/transformer/src/utility/stack.ts", "../../@milkdown/transformer/src/parser/stack-element.ts", "../../@milkdown/transformer/src/parser/state.ts", "../../@milkdown/transformer/src/serializer/stack-element.ts", "../../@milkdown/transformer/src/serializer/state.ts", "../../@milkdown/prose/src/toolkit/browser.ts", "../../@milkdown/prose/src/toolkit/input-rules/custom-input-rules.ts", "../../@milkdown/prose/src/toolkit/input-rules/mark-rule.ts", "../../@milkdown/prose/src/toolkit/input-rules/node-rule.ts", "../../@milkdown/prose/src/toolkit/position/index.ts", "../../@milkdown/prose/src/toolkit/prose/helper.ts", "../../@milkdown/prose/src/toolkit/prose/node.ts", "../../@milkdown/prose/src/toolkit/prose/schema.ts", "../../@milkdown/prose/src/toolkit/prose/selection.ts", "../../prosemirror-commands/dist/index.js", "../../prosemirror-keymap/dist/index.js", "../../@milkdown/core/src/__internal__/utils.ts", "../../@milkdown/core/src/__internal__/remark-handlers.ts", "../../@milkdown/core/src/internal-plugin/atoms.ts", "../../@milkdown/core/src/internal-plugin/config.ts", "../../@milkdown/core/src/internal-plugin/init.ts", "../../@milkdown/core/src/internal-plugin/schema.ts", "../../@milkdown/core/src/internal-plugin/commands.ts", "../../@milkdown/core/src/internal-plugin/parser.ts", "../../@milkdown/core/src/internal-plugin/serializer.ts", "../../@milkdown/core/src/internal-plugin/editor-state.ts", "../../@milkdown/core/src/internal-plugin/editor-view.ts", "../../@milkdown/core/src/editor/editor.ts"],
  "sourcesContent": ["/**\r\n * Helpers.\r\n */\r\n\r\nvar s = 1000;\r\nvar m = s * 60;\r\nvar h = m * 60;\r\nvar d = h * 24;\r\nvar w = d * 7;\r\nvar y = d * 365.25;\r\n\r\n/**\r\n * Parse or format the given `val`.\r\n *\r\n * Options:\r\n *\r\n *  - `long` verbose formatting [false]\r\n *\r\n * @param {String|Number} val\r\n * @param {Object} [options]\r\n * @throws {Error} throw an error if val is not a non-empty string or a number\r\n * @return {String|Number}\r\n * @api public\r\n */\r\n\r\nmodule.exports = function (val, options) {\r\n  options = options || {};\r\n  var type = typeof val;\r\n  if (type === 'string' && val.length > 0) {\r\n    return parse(val);\r\n  } else if (type === 'number' && isFinite(val)) {\r\n    return options.long ? fmtLong(val) : fmtShort(val);\r\n  }\r\n  throw new Error(\r\n    'val is not a non-empty string or a valid number. val=' +\r\n      JSON.stringify(val)\r\n  );\r\n};\r\n\r\n/**\r\n * Parse the given `str` and return milliseconds.\r\n *\r\n * @param {String} str\r\n * @return {Number}\r\n * @api private\r\n */\r\n\r\nfunction parse(str) {\r\n  str = String(str);\r\n  if (str.length > 100) {\r\n    return;\r\n  }\r\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\r\n    str\r\n  );\r\n  if (!match) {\r\n    return;\r\n  }\r\n  var n = parseFloat(match[1]);\r\n  var type = (match[2] || 'ms').toLowerCase();\r\n  switch (type) {\r\n    case 'years':\r\n    case 'year':\r\n    case 'yrs':\r\n    case 'yr':\r\n    case 'y':\r\n      return n * y;\r\n    case 'weeks':\r\n    case 'week':\r\n    case 'w':\r\n      return n * w;\r\n    case 'days':\r\n    case 'day':\r\n    case 'd':\r\n      return n * d;\r\n    case 'hours':\r\n    case 'hour':\r\n    case 'hrs':\r\n    case 'hr':\r\n    case 'h':\r\n      return n * h;\r\n    case 'minutes':\r\n    case 'minute':\r\n    case 'mins':\r\n    case 'min':\r\n    case 'm':\r\n      return n * m;\r\n    case 'seconds':\r\n    case 'second':\r\n    case 'secs':\r\n    case 'sec':\r\n    case 's':\r\n      return n * s;\r\n    case 'milliseconds':\r\n    case 'millisecond':\r\n    case 'msecs':\r\n    case 'msec':\r\n    case 'ms':\r\n      return n;\r\n    default:\r\n      return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Short format for `ms`.\r\n *\r\n * @param {Number} ms\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction fmtShort(ms) {\r\n  var msAbs = Math.abs(ms);\r\n  if (msAbs >= d) {\r\n    return Math.round(ms / d) + 'd';\r\n  }\r\n  if (msAbs >= h) {\r\n    return Math.round(ms / h) + 'h';\r\n  }\r\n  if (msAbs >= m) {\r\n    return Math.round(ms / m) + 'm';\r\n  }\r\n  if (msAbs >= s) {\r\n    return Math.round(ms / s) + 's';\r\n  }\r\n  return ms + 'ms';\r\n}\r\n\r\n/**\r\n * Long format for `ms`.\r\n *\r\n * @param {Number} ms\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction fmtLong(ms) {\r\n  var msAbs = Math.abs(ms);\r\n  if (msAbs >= d) {\r\n    return plural(ms, msAbs, d, 'day');\r\n  }\r\n  if (msAbs >= h) {\r\n    return plural(ms, msAbs, h, 'hour');\r\n  }\r\n  if (msAbs >= m) {\r\n    return plural(ms, msAbs, m, 'minute');\r\n  }\r\n  if (msAbs >= s) {\r\n    return plural(ms, msAbs, s, 'second');\r\n  }\r\n  return ms + ' ms';\r\n}\r\n\r\n/**\r\n * Pluralization helper.\r\n */\r\n\r\nfunction plural(ms, msAbs, n, name) {\r\n  var isPlural = msAbs >= n * 1.5;\r\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\r\n}\r\n", "\r\n/**\r\n * This is the common logic for both the Node.js and web browser\r\n * implementations of `debug()`.\r\n */\r\n\r\nfunction setup(env) {\r\n\tcreateDebug.debug = createDebug;\r\n\tcreateDebug.default = createDebug;\r\n\tcreateDebug.coerce = coerce;\r\n\tcreateDebug.disable = disable;\r\n\tcreateDebug.enable = enable;\r\n\tcreateDebug.enabled = enabled;\r\n\tcreateDebug.humanize = require('ms');\r\n\tcreateDebug.destroy = destroy;\r\n\r\n\tObject.keys(env).forEach(key => {\r\n\t\tcreateDebug[key] = env[key];\r\n\t});\r\n\r\n\t/**\r\n\t* The currently active debug mode names, and names to skip.\r\n\t*/\r\n\r\n\tcreateDebug.names = [];\r\n\tcreateDebug.skips = [];\r\n\r\n\t/**\r\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\r\n\t*\r\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\r\n\t*/\r\n\tcreateDebug.formatters = {};\r\n\r\n\t/**\r\n\t* Selects a color for a debug namespace\r\n\t* @param {String} namespace The namespace string for the debug instance to be colored\r\n\t* @return {Number|String} An ANSI color code for the given namespace\r\n\t* @api private\r\n\t*/\r\n\tfunction selectColor(namespace) {\r\n\t\tlet hash = 0;\r\n\r\n\t\tfor (let i = 0; i < namespace.length; i++) {\r\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\r\n\t\t\thash |= 0; // Convert to 32bit integer\r\n\t\t}\r\n\r\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\r\n\t}\r\n\tcreateDebug.selectColor = selectColor;\r\n\r\n\t/**\r\n\t* Create a debugger with the given `namespace`.\r\n\t*\r\n\t* @param {String} namespace\r\n\t* @return {Function}\r\n\t* @api public\r\n\t*/\r\n\tfunction createDebug(namespace) {\r\n\t\tlet prevTime;\r\n\t\tlet enableOverride = null;\r\n\t\tlet namespacesCache;\r\n\t\tlet enabledCache;\r\n\r\n\t\tfunction debug(...args) {\r\n\t\t\t// Disabled?\r\n\t\t\tif (!debug.enabled) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst self = debug;\r\n\r\n\t\t\t// Set `diff` timestamp\r\n\t\t\tconst curr = Number(new Date());\r\n\t\t\tconst ms = curr - (prevTime || curr);\r\n\t\t\tself.diff = ms;\r\n\t\t\tself.prev = prevTime;\r\n\t\t\tself.curr = curr;\r\n\t\t\tprevTime = curr;\r\n\r\n\t\t\targs[0] = createDebug.coerce(args[0]);\r\n\r\n\t\t\tif (typeof args[0] !== 'string') {\r\n\t\t\t\t// Anything else let's inspect with %O\r\n\t\t\t\targs.unshift('%O');\r\n\t\t\t}\r\n\r\n\t\t\t// Apply any `formatters` transformations\r\n\t\t\tlet index = 0;\r\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\r\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\r\n\t\t\t\tif (match === '%%') {\r\n\t\t\t\t\treturn '%';\r\n\t\t\t\t}\r\n\t\t\t\tindex++;\r\n\t\t\t\tconst formatter = createDebug.formatters[format];\r\n\t\t\t\tif (typeof formatter === 'function') {\r\n\t\t\t\t\tconst val = args[index];\r\n\t\t\t\t\tmatch = formatter.call(self, val);\r\n\r\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\r\n\t\t\t\t\targs.splice(index, 1);\r\n\t\t\t\t\tindex--;\r\n\t\t\t\t}\r\n\t\t\t\treturn match;\r\n\t\t\t});\r\n\r\n\t\t\t// Apply env-specific formatting (colors, etc.)\r\n\t\t\tcreateDebug.formatArgs.call(self, args);\r\n\r\n\t\t\tconst logFn = self.log || createDebug.log;\r\n\t\t\tlogFn.apply(self, args);\r\n\t\t}\r\n\r\n\t\tdebug.namespace = namespace;\r\n\t\tdebug.useColors = createDebug.useColors();\r\n\t\tdebug.color = createDebug.selectColor(namespace);\r\n\t\tdebug.extend = extend;\r\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\r\n\r\n\t\tObject.defineProperty(debug, 'enabled', {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: () => {\r\n\t\t\t\tif (enableOverride !== null) {\r\n\t\t\t\t\treturn enableOverride;\r\n\t\t\t\t}\r\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\r\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\r\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn enabledCache;\r\n\t\t\t},\r\n\t\t\tset: v => {\r\n\t\t\t\tenableOverride = v;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Env-specific initialization logic for debug instances\r\n\t\tif (typeof createDebug.init === 'function') {\r\n\t\t\tcreateDebug.init(debug);\r\n\t\t}\r\n\r\n\t\treturn debug;\r\n\t}\r\n\r\n\tfunction extend(namespace, delimiter) {\r\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\r\n\t\tnewDebug.log = this.log;\r\n\t\treturn newDebug;\r\n\t}\r\n\r\n\t/**\r\n\t* Enables a debug mode by namespaces. This can include modes\r\n\t* separated by a colon and wildcards.\r\n\t*\r\n\t* @param {String} namespaces\r\n\t* @api public\r\n\t*/\r\n\tfunction enable(namespaces) {\r\n\t\tcreateDebug.save(namespaces);\r\n\t\tcreateDebug.namespaces = namespaces;\r\n\r\n\t\tcreateDebug.names = [];\r\n\t\tcreateDebug.skips = [];\r\n\r\n\t\tlet i;\r\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\r\n\t\tconst len = split.length;\r\n\r\n\t\tfor (i = 0; i < len; i++) {\r\n\t\t\tif (!split[i]) {\r\n\t\t\t\t// ignore empty strings\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\r\n\r\n\t\t\tif (namespaces[0] === '-') {\r\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\r\n\t\t\t} else {\r\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* Disable debug output.\r\n\t*\r\n\t* @return {String} namespaces\r\n\t* @api public\r\n\t*/\r\n\tfunction disable() {\r\n\t\tconst namespaces = [\r\n\t\t\t...createDebug.names.map(toNamespace),\r\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\r\n\t\t].join(',');\r\n\t\tcreateDebug.enable('');\r\n\t\treturn namespaces;\r\n\t}\r\n\r\n\t/**\r\n\t* Returns true if the given mode name is enabled, false otherwise.\r\n\t*\r\n\t* @param {String} name\r\n\t* @return {Boolean}\r\n\t* @api public\r\n\t*/\r\n\tfunction enabled(name) {\r\n\t\tif (name[name.length - 1] === '*') {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tlet i;\r\n\t\tlet len;\r\n\r\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\r\n\t\t\tif (createDebug.skips[i].test(name)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\r\n\t\t\tif (createDebug.names[i].test(name)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t* Convert regexp to namespace\r\n\t*\r\n\t* @param {RegExp} regxep\r\n\t* @return {String} namespace\r\n\t* @api private\r\n\t*/\r\n\tfunction toNamespace(regexp) {\r\n\t\treturn regexp.toString()\r\n\t\t\t.substring(2, regexp.toString().length - 2)\r\n\t\t\t.replace(/\\.\\*\\?$/, '*');\r\n\t}\r\n\r\n\t/**\r\n\t* Coerce `val`.\r\n\t*\r\n\t* @param {Mixed} val\r\n\t* @return {Mixed}\r\n\t* @api private\r\n\t*/\r\n\tfunction coerce(val) {\r\n\t\tif (val instanceof Error) {\r\n\t\t\treturn val.stack || val.message;\r\n\t\t}\r\n\t\treturn val;\r\n\t}\r\n\r\n\t/**\r\n\t* XXX DO NOT USE. This is a temporary stub function.\r\n\t* XXX It WILL be removed in the next major release.\r\n\t*/\r\n\tfunction destroy() {\r\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\r\n\t}\r\n\r\n\tcreateDebug.enable(createDebug.load());\r\n\r\n\treturn createDebug;\r\n}\r\n\r\nmodule.exports = setup;\r\n", "/* eslint-env browser */\r\n\r\n/**\r\n * This is the web browser implementation of `debug()`.\r\n */\r\n\r\nexports.formatArgs = formatArgs;\r\nexports.save = save;\r\nexports.load = load;\r\nexports.useColors = useColors;\r\nexports.storage = localstorage();\r\nexports.destroy = (() => {\r\n\tlet warned = false;\r\n\r\n\treturn () => {\r\n\t\tif (!warned) {\r\n\t\t\twarned = true;\r\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\r\n\t\t}\r\n\t};\r\n})();\r\n\r\n/**\r\n * Colors.\r\n */\r\n\r\nexports.colors = [\r\n\t'#0000CC',\r\n\t'#0000FF',\r\n\t'#0033CC',\r\n\t'#0033FF',\r\n\t'#0066CC',\r\n\t'#0066FF',\r\n\t'#0099CC',\r\n\t'#0099FF',\r\n\t'#00CC00',\r\n\t'#00CC33',\r\n\t'#00CC66',\r\n\t'#00CC99',\r\n\t'#00CCCC',\r\n\t'#00CCFF',\r\n\t'#3300CC',\r\n\t'#3300FF',\r\n\t'#3333CC',\r\n\t'#3333FF',\r\n\t'#3366CC',\r\n\t'#3366FF',\r\n\t'#3399CC',\r\n\t'#3399FF',\r\n\t'#33CC00',\r\n\t'#33CC33',\r\n\t'#33CC66',\r\n\t'#33CC99',\r\n\t'#33CCCC',\r\n\t'#33CCFF',\r\n\t'#6600CC',\r\n\t'#6600FF',\r\n\t'#6633CC',\r\n\t'#6633FF',\r\n\t'#66CC00',\r\n\t'#66CC33',\r\n\t'#9900CC',\r\n\t'#9900FF',\r\n\t'#9933CC',\r\n\t'#9933FF',\r\n\t'#99CC00',\r\n\t'#99CC33',\r\n\t'#CC0000',\r\n\t'#CC0033',\r\n\t'#CC0066',\r\n\t'#CC0099',\r\n\t'#CC00CC',\r\n\t'#CC00FF',\r\n\t'#CC3300',\r\n\t'#CC3333',\r\n\t'#CC3366',\r\n\t'#CC3399',\r\n\t'#CC33CC',\r\n\t'#CC33FF',\r\n\t'#CC6600',\r\n\t'#CC6633',\r\n\t'#CC9900',\r\n\t'#CC9933',\r\n\t'#CCCC00',\r\n\t'#CCCC33',\r\n\t'#FF0000',\r\n\t'#FF0033',\r\n\t'#FF0066',\r\n\t'#FF0099',\r\n\t'#FF00CC',\r\n\t'#FF00FF',\r\n\t'#FF3300',\r\n\t'#FF3333',\r\n\t'#FF3366',\r\n\t'#FF3399',\r\n\t'#FF33CC',\r\n\t'#FF33FF',\r\n\t'#FF6600',\r\n\t'#FF6633',\r\n\t'#FF9900',\r\n\t'#FF9933',\r\n\t'#FFCC00',\r\n\t'#FFCC33'\r\n];\r\n\r\n/**\r\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\r\n * and the Firebug extension (any Firefox version) are known\r\n * to support \"%c\" CSS customizations.\r\n *\r\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\r\n */\r\n\r\n// eslint-disable-next-line complexity\r\nfunction useColors() {\r\n\t// NB: In an Electron preload script, document will be defined but not fully\r\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\r\n\t// explicitly\r\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Internet Explorer and Edge do not support colors.\r\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tlet m;\r\n\r\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\r\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\r\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\r\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\r\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\r\n\t\t// Is firefox >= v31?\r\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\r\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)) && parseInt(m[1], 10) >= 31) ||\r\n\t\t// Double check webkit in userAgent just in case we are in a worker\r\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\r\n}\r\n\r\n/**\r\n * Colorize log arguments if enabled.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction formatArgs(args) {\r\n\targs[0] = (this.useColors ? '%c' : '') +\r\n\t\tthis.namespace +\r\n\t\t(this.useColors ? ' %c' : ' ') +\r\n\t\targs[0] +\r\n\t\t(this.useColors ? '%c ' : ' ') +\r\n\t\t'+' + module.exports.humanize(this.diff);\r\n\r\n\tif (!this.useColors) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst c = 'color: ' + this.color;\r\n\targs.splice(1, 0, c, 'color: inherit');\r\n\r\n\t// The final \"%c\" is somewhat tricky, because there could be other\r\n\t// arguments passed either before or after the %c, so we need to\r\n\t// figure out the correct index to insert the CSS into\r\n\tlet index = 0;\r\n\tlet lastC = 0;\r\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\r\n\t\tif (match === '%%') {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tindex++;\r\n\t\tif (match === '%c') {\r\n\t\t\t// We only are interested in the *last* %c\r\n\t\t\t// (the user may have provided their own)\r\n\t\t\tlastC = index;\r\n\t\t}\r\n\t});\r\n\r\n\targs.splice(lastC, 0, c);\r\n}\r\n\r\n/**\r\n * Invokes `console.debug()` when available.\r\n * No-op when `console.debug` is not a \"function\".\r\n * If `console.debug` is not available, falls back\r\n * to `console.log`.\r\n *\r\n * @api public\r\n */\r\nexports.log = console.debug || console.log || (() => {});\r\n\r\n/**\r\n * Save `namespaces`.\r\n *\r\n * @param {String} namespaces\r\n * @api private\r\n */\r\nfunction save(namespaces) {\r\n\ttry {\r\n\t\tif (namespaces) {\r\n\t\t\texports.storage.setItem('debug', namespaces);\r\n\t\t} else {\r\n\t\t\texports.storage.removeItem('debug');\r\n\t\t}\r\n\t} catch (error) {\r\n\t\t// Swallow\r\n\t\t// XXX (@Qix-) should we be logging these?\r\n\t}\r\n}\r\n\r\n/**\r\n * Load `namespaces`.\r\n *\r\n * @return {String} returns the previously persisted debug modes\r\n * @api private\r\n */\r\nfunction load() {\r\n\tlet r;\r\n\ttry {\r\n\t\tr = exports.storage.getItem('debug');\r\n\t} catch (error) {\r\n\t\t// Swallow\r\n\t\t// XXX (@Qix-) should we be logging these?\r\n\t}\r\n\r\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\r\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\r\n\t\tr = process.env.DEBUG;\r\n\t}\r\n\r\n\treturn r;\r\n}\r\n\r\n/**\r\n * Localstorage attempts to return the localstorage.\r\n *\r\n * This is necessary because safari throws\r\n * when a user disables cookies/localstorage\r\n * and you attempt to access it.\r\n *\r\n * @return {LocalStorage}\r\n * @api private\r\n */\r\n\r\nfunction localstorage() {\r\n\ttry {\r\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\r\n\t\t// The Browser also has localStorage in the global context.\r\n\t\treturn localStorage;\r\n\t} catch (error) {\r\n\t\t// Swallow\r\n\t\t// XXX (@Qix-) should we be logging these?\r\n\t}\r\n}\r\n\r\nmodule.exports = require('./common')(exports);\r\n\r\nconst {formatters} = module.exports;\r\n\r\n/**\r\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\r\n */\r\n\r\nformatters.j = function (v) {\r\n\ttry {\r\n\t\treturn JSON.stringify(v);\r\n\t} catch (error) {\r\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\r\n\t}\r\n};\r\n", "'use strict';\r\n\r\nvar hasOwn = Object.prototype.hasOwnProperty;\r\nvar toStr = Object.prototype.toString;\r\nvar defineProperty = Object.defineProperty;\r\nvar gOPD = Object.getOwnPropertyDescriptor;\r\n\r\nvar isArray = function isArray(arr) {\r\n\tif (typeof Array.isArray === 'function') {\r\n\t\treturn Array.isArray(arr);\r\n\t}\r\n\r\n\treturn toStr.call(arr) === '[object Array]';\r\n};\r\n\r\nvar isPlainObject = function isPlainObject(obj) {\r\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\r\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\r\n\t// Not own constructor property must be Object\r\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Own properties are enumerated firstly, so to speed up,\r\n\t// if last one is own, then all properties are own.\r\n\tvar key;\r\n\tfor (key in obj) { /**/ }\r\n\r\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\r\n};\r\n\r\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\r\nvar setProperty = function setProperty(target, options) {\r\n\tif (defineProperty && options.name === '__proto__') {\r\n\t\tdefineProperty(target, options.name, {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: true,\r\n\t\t\tvalue: options.newValue,\r\n\t\t\twritable: true\r\n\t\t});\r\n\t} else {\r\n\t\ttarget[options.name] = options.newValue;\r\n\t}\r\n};\r\n\r\n// Return undefined instead of __proto__ if '__proto__' is not an own property\r\nvar getProperty = function getProperty(obj, name) {\r\n\tif (name === '__proto__') {\r\n\t\tif (!hasOwn.call(obj, name)) {\r\n\t\t\treturn void 0;\r\n\t\t} else if (gOPD) {\r\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\r\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\r\n\t\t\treturn gOPD(obj, name).value;\r\n\t\t}\r\n\t}\r\n\r\n\treturn obj[name];\r\n};\r\n\r\nmodule.exports = function extend() {\r\n\tvar options, name, src, copy, copyIsArray, clone;\r\n\tvar target = arguments[0];\r\n\tvar i = 1;\r\n\tvar length = arguments.length;\r\n\tvar deep = false;\r\n\r\n\t// Handle a deep copy situation\r\n\tif (typeof target === 'boolean') {\r\n\t\tdeep = target;\r\n\t\ttarget = arguments[1] || {};\r\n\t\t// skip the boolean and the target\r\n\t\ti = 2;\r\n\t}\r\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\r\n\t\ttarget = {};\r\n\t}\r\n\r\n\tfor (; i < length; ++i) {\r\n\t\toptions = arguments[i];\r\n\t\t// Only deal with non-null/undefined values\r\n\t\tif (options != null) {\r\n\t\t\t// Extend the base object\r\n\t\t\tfor (name in options) {\r\n\t\t\t\tsrc = getProperty(target, name);\r\n\t\t\t\tcopy = getProperty(options, name);\r\n\r\n\t\t\t\t// Prevent never-ending loop\r\n\t\t\t\tif (target !== copy) {\r\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\r\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\r\n\t\t\t\t\t\tif (copyIsArray) {\r\n\t\t\t\t\t\t\tcopyIsArray = false;\r\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Never move original objects, clone them\r\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\r\n\r\n\t\t\t\t\t// Don't bring in undefined values\r\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\r\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Return the modified object\r\n\treturn target;\r\n};\r\n", "export enum ErrorCode {\n  docTypeError = 'docTypeError',\n  contextNotFound = 'contextNotFound',\n  timerNotFound = 'timerNotFound',\n  ctxCallOutOfScope = 'ctxCallOutOfScope',\n  createNodeInParserFail = 'createNodeInParserFail',\n  stackOverFlow = 'stackOverFlow',\n  parserMatchError = 'parserMatchError',\n  serializerMatchError = 'serializerMatchError',\n  getAtomFromSchemaFail = 'getAtomFromSchemaFail',\n  expectDomTypeError = 'expectDomTypeError',\n  callCommandBeforeEditorView = 'callCommandBeforeEditorView',\n  missingRootElement = 'missingRootElement',\n  missingNodeInSchema = 'missingNodeInSchema',\n  missingMarkInSchema = 'missingMarkInSchema',\n\n  // collab plugin\n  ctxNotBind = 'ctxNotBind',\n  missingYjsDoc = 'missingYjsDoc',\n}\n", "import type { ErrorCode } from './code'\n\nexport class MilkdownError extends Error {\n  public code: string\n  constructor(code: ErrorCode, message: string) {\n    super(message)\n    this.name = 'MilkdownError'\n    this.code = code\n  }\n}\n", "import { ErrorCode } from './code'\nimport { MilkdownError } from './error'\n\nconst functionReplacer = (_: string, value: unknown) => (typeof value === 'function' ? '[Function]' : value)\n\nconst stringify = (x: unknown): string => JSON.stringify(x, functionReplacer)\n\nexport function docTypeError(type: unknown) {\n  return new MilkdownError(ErrorCode.docTypeError, `Doc type error, unsupported type: ${stringify(type)}`)\n}\n\nexport function contextNotFound(name: string) {\n  return new MilkdownError(ErrorCode.contextNotFound, `Context \"${name}\" not found, do you forget to inject it?`)\n}\n\nexport function timerNotFound(name: string) {\n  return new MilkdownError(ErrorCode.timerNotFound, `Timer \"${name}\" not found, do you forget to record it?`)\n}\n\nexport function ctxCallOutOfScope() {\n  return new MilkdownError(ErrorCode.ctxCallOutOfScope, 'Should not call a context out of the plugin.')\n}\n\nexport function createNodeInParserFail(...args: unknown[]) {\n  const message = args.reduce((msg, arg) => {\n    if (!arg)\n      return msg\n\n    const serialize = (x: unknown): string => {\n      if (Array.isArray(x))\n        return (x as unknown[]).map(y => serialize(y)).join(', ')\n\n      if ((x as { toJSON: () => Record<string, unknown> }).toJSON)\n        return stringify((x as { toJSON: () => Record<string, unknown> }).toJSON())\n\n      if ((x as { spec: string }).spec)\n        return stringify((x as { spec: string }).spec)\n\n      return (x as { toString: () => string }).toString()\n    }\n    return `${msg}, ${serialize(arg)}`\n  }, 'Create prosemirror node from remark failed in parser') as string\n\n  return new MilkdownError(ErrorCode.createNodeInParserFail, message)\n}\n\nexport function stackOverFlow() {\n  return new MilkdownError(ErrorCode.stackOverFlow, 'Stack over flow, cannot pop on an empty stack.')\n}\n\nexport function parserMatchError(node: unknown) {\n  return new MilkdownError(ErrorCode.parserMatchError, `Cannot match target parser for node: ${stringify(node)}.`)\n}\n\nexport function serializerMatchError(node: unknown) {\n  return new MilkdownError(ErrorCode.serializerMatchError, `Cannot match target serializer for node: ${stringify(node)}.`)\n}\n\nexport function getAtomFromSchemaFail(type: 'mark' | 'node', name: string) {\n  return new MilkdownError(ErrorCode.getAtomFromSchemaFail, `Cannot get ${type}: ${name} from schema.`)\n}\n\nexport function expectDomTypeError(node: unknown) {\n  return new MilkdownError(ErrorCode.expectDomTypeError, `Expect to be a dom, but get: ${stringify(node)}.`)\n}\n\nexport function callCommandBeforeEditorView() {\n  return new MilkdownError(\n    ErrorCode.callCommandBeforeEditorView,\n    'You\\'re trying to call a command before editor view initialized, make sure to get commandManager from ctx after editor view has been initialized',\n  )\n}\n\nexport function missingRootElement() {\n  return new MilkdownError(\n    ErrorCode.missingRootElement,\n    'Missing root element, milkdown cannot find root element of the editor.',\n  )\n}\n\nexport function missingNodeInSchema(name: string) {\n  return new MilkdownError(\n    ErrorCode.missingNodeInSchema,\n        `Missing node in schema, milkdown cannot find \"${name}\" in schema.`,\n  )\n}\n\nexport function missingMarkInSchema(name: string) {\n  return new MilkdownError(\n    ErrorCode.missingMarkInSchema,\n        `Missing mark in schema, milkdown cannot find \"${name}\" in schema.`,\n  )\n}\n\nexport function ctxNotBind() {\n  return new MilkdownError(ErrorCode.ctxNotBind, 'Context not bind, please make sure the plugin has been initialized.')\n}\n\nexport function missingYjsDoc() {\n  return new MilkdownError(ErrorCode.missingYjsDoc, 'Missing yjs doc, please make sure you have bind one.')\n}\n", "import { contextNotFound } from '@milkdown/exception'\n\nimport type { Slice, SliceType } from './slice'\n\n/// @internal\nexport type SliceMap = Map<symbol, Slice>\n\n/// Container is a map of slices.\nexport class Container {\n  /// @internal\n  sliceMap: SliceMap = new Map()\n\n  /// Get a slice from the container by slice type or slice name.\n  get = <T, N extends string = string>(slice: SliceType<T, N> | N): Slice<T, N> => {\n    const context = typeof slice === 'string'\n      ? [...this.sliceMap.values()].find(x => x.type.name === slice)\n      : this.sliceMap.get(slice.id)\n\n    if (!context) {\n      const name = typeof slice === 'string' ? slice : slice.name\n      throw contextNotFound(name)\n    }\n    return context as Slice<T, N>\n  }\n\n  /// Remove a slice from the container by slice type or slice name.\n  remove = <T, N extends string = string>(slice: SliceType<T, N> | N): void => {\n    const context = typeof slice === 'string'\n      ? [...this.sliceMap.values()].find(x => x.type.name === slice)\n      : this.sliceMap.get(slice.id)\n\n    if (!context)\n      return\n\n    this.sliceMap.delete(context.type.id)\n  }\n\n  /// Check if the container has a slice by slice type or slice name.\n  has = <T, N extends string = string>(slice: SliceType<T, N> | N): boolean => {\n    if (typeof slice === 'string')\n      return [...this.sliceMap.values()].some(x => x.type.name === slice)\n\n    return this.sliceMap.has(slice.id)\n  }\n}\n", "import { ctxCallOutOfScope } from '@milkdown/exception'\nimport type { SliceMap } from './container'\n\n/// Slice is a value of slice type.\nexport class Slice<T = any, N extends string = string> {\n  /// The type of the slice.\n  readonly type: SliceType<T, N>\n\n  /// @internal\n  #watchers: Array<(value: T) => unknown> = []\n\n  /// @internal\n  #value: T\n\n  /// @internal\n  #emit = () => {\n    this.#watchers.forEach(watcher => watcher(this.#value))\n  }\n\n  /// @internal\n  constructor(container: SliceMap, value: T, type: SliceType<T, N>) {\n    this.type = type\n    this.#value = value\n    container.set(type.id, this)\n  }\n\n  /// Add a watcher for changes in the slice.\n  /// Returns a function to remove the watcher.\n  on(watcher: (value: T) => unknown) {\n    this.#watchers.push(watcher)\n    return () => {\n      this.#watchers = this.#watchers.filter(w => w !== watcher)\n    }\n  }\n\n  /// Add a one-time watcher for changes in the slice.\n  /// The watcher will be removed after it is called.\n  /// Returns a function to remove the watcher.\n  once(watcher: (value: T) => unknown) {\n    const off = this.on((value) => {\n      watcher(value)\n      off()\n    })\n    return off\n  }\n\n  /// Remove a watcher.\n  off(watcher: (value: T) => unknown) {\n    this.#watchers = this.#watchers.filter(w => w !== watcher)\n  }\n\n  /// Remove all watchers.\n  offAll() {\n    this.#watchers = []\n  }\n\n  /// Set the value of the slice.\n  set = (value: T) => {\n    this.#value = value\n    this.#emit()\n  }\n\n  /// Get the value of the slice.\n  get = () => this.#value\n\n  /// Update the value of the slice with a callback.\n  update = (updater: (prev: T) => T) => {\n    this.#value = updater(this.#value)\n    this.#emit()\n  }\n}\n\n/// Slice type can be used to create slices in different containers.\nexport class SliceType<T = any, N extends string = string> {\n  /// The unique id of the slice type.\n  readonly id: symbol\n  /// The name of the slice type.\n  readonly name: N\n  /// @internal\n  readonly _typeInfo: () => T\n  /// @internal\n  readonly _defaultValue: T\n\n  /// Create a slice type with a default value and a name.\n  /// The name should be unique in the container.\n  constructor(value: T, name: N) {\n    this.id = Symbol(`Context-${name}`)\n    this.name = name\n    this._defaultValue = value\n    this._typeInfo = (): T => {\n      throw ctxCallOutOfScope()\n    }\n  }\n\n  /// Create a slice with a container.\n  /// You can also pass a value to override the default value.\n  create(container: SliceMap, value: T = this._defaultValue): Slice<T, N> {\n    return new Slice(container, value, this)\n  }\n}\n\n/// Create a slice type with a default value and a name.\n/// This is equivalent to `new SliceType(value, name)`.\nexport const createSlice = <T = any, N extends string = string>(value: T, name: N) => new SliceType(value, name)\n", "import type { Container, SliceType } from '../context'\nimport type { Clock, TimerStatus, TimerType } from '../timer'\nimport type { Meta } from './meta'\n\nexport interface Telemetry {\n  metadata: Meta\n  injectedSlices: { name: string, value: unknown }[]\n  consumedSlices: { name: string, value: unknown }[]\n  recordedTimers: { name: string, duration: number, status: TimerStatus }[]\n  waitTimers: { name: string, duration: number, status: TimerStatus }[]\n}\n\n/// The inspector object that is used to inspect the runtime environment of a ctx.\nexport class Inspector {\n  /// @internal\n  readonly #meta: Meta\n\n  /// @internal\n  readonly #container: Container\n\n  /// @internal\n  readonly #clock: Clock\n\n  /// @internal\n  readonly #injectedSlices: Set<SliceType | string> = new Set()\n\n  /// @internal\n  readonly #consumedSlices: Set<SliceType | string> = new Set()\n\n  /// @internal\n  readonly #recordedTimers: Map<TimerType, { duration: number, start: number }> = new Map()\n\n  /// @internal\n  readonly #waitTimers: Map<TimerType, { duration: number }> = new Map()\n\n  /// Create an inspector with container, clock and metadata.\n  constructor(\n    container: Container,\n    clock: Clock,\n    meta: Meta,\n  ) {\n    this.#container = container\n    this.#clock = clock\n    this.#meta = meta\n  }\n\n  /// Read the runtime telemetry as an object of the ctx.\n  read = (): Telemetry => {\n    return {\n      metadata: this.#meta,\n      injectedSlices: [...this.#injectedSlices].map(slice => ({\n        name: typeof slice === 'string' ? slice : slice.name,\n        value: this.#getSlice(slice),\n      })),\n      consumedSlices: [...this.#consumedSlices].map(slice => ({\n        name: typeof slice === 'string' ? slice : slice.name,\n        value: this.#getSlice(slice),\n      })),\n      recordedTimers: [...this.#recordedTimers].map(([timer, { duration }]) => ({\n        name: timer.name,\n        duration,\n        status: this.#getTimer(timer),\n      })),\n      waitTimers: [...this.#waitTimers].map(([timer, { duration }]) => ({\n        name: timer.name,\n        duration,\n        status: this.#getTimer(timer),\n      })),\n    }\n  }\n\n  /// @internal\n  readonly onRecord = (timerType: TimerType) => {\n    this.#recordedTimers.set(timerType, { start: Date.now(), duration: 0 })\n  }\n\n  /// @internal\n  readonly onClear = (timerType: TimerType) => {\n    this.#recordedTimers.delete(timerType)\n  }\n\n  /// @internal\n  readonly onDone = (timerType: TimerType) => {\n    const timer = this.#recordedTimers.get(timerType)\n    if (!timer)\n      return\n    timer.duration = Date.now() - timer.start\n  }\n\n  /// @internal\n  readonly onWait = (timerType: TimerType, promise: Promise<void>) => {\n    const start = Date.now()\n    promise.finally(() => {\n      this.#waitTimers.set(timerType, { duration: Date.now() - start })\n    })\n  }\n\n  /// @internal\n  readonly onInject = (sliceType: SliceType | string) => {\n    this.#injectedSlices.add(sliceType)\n  }\n\n  /// @internal\n  readonly onRemove = (sliceType: SliceType | string) => {\n    this.#injectedSlices.delete(sliceType)\n  }\n\n  /// @internal\n  readonly onUse = (sliceType: SliceType | string) => {\n    this.#consumedSlices.add(sliceType)\n  }\n\n  /// @internal\n  #getSlice = (sliceType: SliceType | string) => {\n    return this.#container.get(sliceType).get()\n  }\n\n  /// @internal\n  #getTimer = (timerType: TimerType) => {\n    return this.#clock.get(timerType).status\n  }\n}\n", "import type { Container, Slice, SliceType } from '../context'\nimport type { Clock, TimerType } from '../timer'\nimport { Inspector } from '../inspector'\nimport type { Meta } from '../inspector'\n\n/// The ctx object that can be accessed in plugin and action.\nexport class Ctx {\n  /// @internal\n  readonly #container: Container\n  /// @internal\n  readonly #clock: Clock\n  /// @internal\n  readonly #meta?: Meta\n  /// @internal\n  readonly #inspector?: Inspector\n\n  /// Create a ctx object with container and clock.\n  constructor(container: Container, clock: Clock, meta?: Meta) {\n    this.#container = container\n    this.#clock = clock\n    this.#meta = meta\n    if (meta)\n      this.#inspector = new Inspector(container, clock, meta)\n  }\n\n  /// Get metadata of the ctx.\n  get meta() {\n    return this.#meta\n  }\n\n  /// Get the inspector of the ctx.\n  get inspector() {\n    return this.#inspector\n  }\n\n  /// Produce a new ctx with metadata.\n  /// The new ctx will link to the same container and clock with the current ctx.\n  /// If the metadata is empty, it will return the current ctx.\n  readonly produce = (meta?: Meta) => {\n    if (meta && Object.keys(meta).length)\n      return new Ctx(this.#container, this.#clock, { ...meta })\n\n    return this\n  }\n\n  /// Add a slice into the ctx.\n  readonly inject = <T>(sliceType: SliceType<T>, value?: T) => {\n    const slice = sliceType.create(this.#container.sliceMap)\n    if (value != null)\n      slice.set(value)\n\n    this.#inspector?.onInject(sliceType)\n\n    return this\n  }\n\n  /// Remove a slice from the ctx.\n  readonly remove = <T, N extends string = string>(sliceType: SliceType<T, N> | N) => {\n    this.#container.remove(sliceType)\n    this.#inspector?.onRemove(sliceType)\n    return this\n  }\n\n  /// Add a timer into the ctx.\n  readonly record = (timerType: TimerType) => {\n    timerType.create(this.#clock.store)\n    this.#inspector?.onRecord(timerType)\n    return this\n  }\n\n  /// Remove a timer from the ctx.\n  readonly clearTimer = (timerType: TimerType) => {\n    this.#clock.remove(timerType)\n    this.#inspector?.onClear(timerType)\n    return this\n  }\n\n  /// Check if the ctx has a slice.\n  readonly isInjected = <T, N extends string = string>(sliceType: SliceType<T, N> | N) => this.#container.has(sliceType)\n\n  /// Check if the ctx has a timer.\n  readonly isRecorded = (timerType: TimerType) => this.#clock.has(timerType)\n\n  /// Get a slice from the ctx.\n  readonly use = <T, N extends string = string>(sliceType: SliceType<T, N> | N): Slice<T, N> => {\n    this.#inspector?.onUse(sliceType)\n    return this.#container.get(sliceType)\n  }\n\n  /// Get a slice value from the ctx.\n  readonly get = <T, N extends string>(sliceType: SliceType<T, N> | N) => this.use(sliceType).get()\n\n  /// Get a slice value from the ctx.\n  readonly set = <T, N extends string>(sliceType: SliceType<T, N> | N, value: T) => this.use(sliceType).set(value)\n\n  /// Update a slice value from the ctx by a callback.\n  readonly update = <T, N extends string>(sliceType: SliceType<T, N> | N, updater: (prev: T) => T) => this.use(sliceType).update(updater)\n\n  /// Get a timer from the ctx.\n  readonly timer = (timer: TimerType) => this.#clock.get(timer)\n\n  /// Resolve a timer from the ctx.\n  readonly done = (timer: TimerType) => {\n    this.timer(timer).done()\n    this.#inspector?.onDone(timer)\n  }\n\n  /// Start a timer from the ctx.\n  readonly wait = (timer: TimerType) => {\n    const promise = this.timer(timer).start()\n    this.#inspector?.onWait(timer, promise)\n    return promise\n  }\n\n  /// Start a list of timers from the ctx, the list is stored in a slice in the ctx.\n  /// This is equivalent to\n  ///\n  /// ```typescript\n  /// Promise.all(ctx.get(slice).map(x => ctx.wait(x))).\n  /// ```\n  readonly waitTimers = async (slice: SliceType<TimerType[]>) => {\n    await Promise.all(this.get(slice).map(x => this.wait(x)))\n  }\n}\n", "import { timerNotFound } from '@milkdown/exception'\n\nimport type { Timer, TimerType } from './timer'\n\n/// @internal\nexport type TimerMap = Map<symbol, Timer>\n\n/// Container is a map of timers.\nexport class Clock {\n  /// @internal\n  readonly store: TimerMap = new Map()\n\n  /// Get a timer from the clock by timer type.\n  get = (timer: TimerType) => {\n    const meta = this.store.get(timer.id)\n    if (!meta)\n      throw timerNotFound(timer.name)\n    return meta\n  }\n\n  /// Remove a timer from the clock by timer type.\n  remove = (timer: TimerType) => {\n    this.store.delete(timer.id)\n  }\n\n  // Check if the clock has a timer by timer type.\n  has = (timer: TimerType) => {\n    return this.store.has(timer.id)\n  }\n}\n", "import type { TimerMap } from './clock'\n\nexport type TimerStatus = 'pending' | 'resolved' | 'rejected'\n\n/// Timer is a promise that can be resolved by calling done.\nexport class Timer {\n  /// The type of the timer.\n  readonly type: TimerType\n\n  /// @internal\n  #promise: Promise<void> | null = null\n  /// @internal\n  #listener: EventListener | null = null\n  /// @internal\n  readonly #eventUniqId: symbol\n  /// @internal\n  #status: TimerStatus = 'pending'\n\n  /// @internal\n  constructor(clock: TimerMap, type: TimerType) {\n    this.#eventUniqId = Symbol(type.name)\n    this.type = type\n    clock.set(type.id, this)\n  }\n\n  /// The status of the timer.\n  /// Can be `pending`, `resolved` or `rejected`.\n  get status() {\n    return this.#status\n  }\n\n  /// Start the timer, which will return a promise.\n  /// If the timer is already started, it will return the same promise.\n  /// If the timer is not resolved in the timeout, it will reject the promise.\n  start = () => {\n    this.#promise ??= new Promise((resolve, reject) => {\n      this.#listener = (e: Event) => {\n        if (!(e instanceof CustomEvent))\n          return\n\n        if (e.detail.id === this.#eventUniqId) {\n          this.#status = 'resolved'\n          this.#removeListener()\n          e.stopImmediatePropagation()\n          resolve()\n        }\n      }\n\n      this.#waitTimeout(() => {\n        if (this.#status === 'pending')\n          this.#status = 'rejected'\n\n        this.#removeListener()\n        reject(new Error(`Timing ${this.type.name} timeout.`))\n      })\n\n      this.#status = 'pending'\n      addEventListener(this.type.name, this.#listener)\n    })\n\n    return this.#promise\n  }\n\n  /// Resolve the timer.\n  done = () => {\n    const event = new CustomEvent(this.type.name, { detail: { id: this.#eventUniqId } })\n    dispatchEvent(event)\n  }\n\n  /// @internal\n  #removeListener = () => {\n    if (this.#listener)\n      removeEventListener(this.type.name, this.#listener)\n  }\n\n  /// @internal\n  #waitTimeout = (ifTimeout: () => void) => {\n    setTimeout(() => {\n      ifTimeout()\n    }, this.type.timeout)\n  }\n}\n\n/// Timer type can be used to create timers in different clocks.\nexport class TimerType {\n  /// The unique id of the timer type.\n  readonly id: symbol\n  /// The name of the timer type.\n  readonly name: string\n  /// The timeout of the timer type.\n  readonly timeout: number\n\n  /// Create a timer type with a name and a timeout.\n  /// The name should be unique in the clock.\n  constructor(name: string, timeout = 3000) {\n    this.id = Symbol(`Timer-${name}`)\n    this.name = name\n    this.timeout = timeout\n  }\n\n  /// Create a timer with a clock.\n  create = (clock: TimerMap): Timer => {\n    return new Timer(clock, this)\n  }\n}\n\n/// Create a timer type with a name and a timeout.\n/// This is equivalent to `new TimerType(name, timeout)`.\nexport const createTimer = (name: string, timeout = 3000) => new TimerType(name, timeout)\n", "import {dequal} from 'dequal'\r\n\r\n/**\r\n * @type {Set<string>}\r\n */\r\nconst codesWarned = new Set()\r\n\r\nclass AssertionError extends Error {\r\n  name = /** @type {const} */ ('Assertion')\r\n  code = /** @type {const} */ ('ERR_ASSERTION')\r\n\r\n  /**\r\n   * Create an assertion error.\r\n   *\r\n   * @param {string} message\r\n   *   Message explaining error.\r\n   * @param {unknown} actual\r\n   *   Value.\r\n   * @param {unknown} expected\r\n   *   Baseline.\r\n   * @param {string} operator\r\n   *   Name of equality operation.\r\n   * @param {boolean} generated\r\n   *   Whether `message` is a custom message or not\r\n   * @returns\r\n   *   Instance.\r\n   */\r\n  // eslint-disable-next-line max-params\r\n  constructor(message, actual, expected, operator, generated) {\r\n    super(message)\r\n\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, this.constructor)\r\n    }\r\n\r\n    /**\r\n     * @type {unknown}\r\n     */\r\n    this.actual = actual\r\n\r\n    /**\r\n     * @type {unknown}\r\n     */\r\n    this.expected = expected\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.generated = generated\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.operator = operator\r\n  }\r\n}\r\n\r\nclass DeprecationError extends Error {\r\n  name = /** @type {const} */ ('DeprecationWarning')\r\n\r\n  /**\r\n   * Create a deprecation message.\r\n   *\r\n   * @param {string} message\r\n   *   Message explaining deprecation.\r\n   * @param {string | undefined} code\r\n   *   Deprecation identifier; deprecation messages will be generated only once per code.\r\n   * @returns\r\n   *   Instance.\r\n   */\r\n  constructor(message, code) {\r\n    super(message)\r\n\r\n    /**\r\n     * @type {string | undefined}\r\n     */\r\n    this.code = code\r\n  }\r\n}\r\n\r\n/**\r\n * Wrap a function or class to show a deprecation message when first called.\r\n *\r\n * > 👉 **Important**: only shows a message when the `development` condition is\r\n * > used, does nothing in production.\r\n *\r\n * When the resulting wrapped `fn` is called, emits a warning once to\r\n * `console.error` (`stderr`).\r\n * If a code is given, one warning message will be emitted in total per code.\r\n *\r\n * @template {Function} T\r\n *   Function or class kind.\r\n * @param {T} fn\r\n *   Function or class.\r\n * @param {string} message\r\n *   Message explaining deprecation.\r\n * @param {string | null | undefined} [code]\r\n *   Deprecation identifier (optional); deprecation messages will be generated\r\n *   only once per code.\r\n * @returns {T}\r\n *   Wrapped `fn`.\r\n */\r\nexport function deprecate(fn, message, code) {\r\n  let warned = false\r\n\r\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\r\n  Object.setPrototypeOf(deprecated, fn)\r\n\r\n  // @ts-expect-error: it’s perfect, typescript…\r\n  return deprecated\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @param  {...Array<unknown>} args\r\n   * @returns {unknown}\r\n   */\r\n  function deprecated(...args) {\r\n    if (!warned) {\r\n      warned = true\r\n\r\n      if (typeof code === 'string' && codesWarned.has(code)) {\r\n        // Empty.\r\n      } else {\r\n        console.error(new DeprecationError(message, code || undefined))\r\n\r\n        if (typeof code === 'string') codesWarned.add(code)\r\n      }\r\n    }\r\n\r\n    return new.target\r\n      ? Reflect.construct(fn, args, new.target)\r\n      : Reflect.apply(fn, this, args)\r\n  }\r\n}\r\n\r\n/**\r\n * Assert deep strict equivalence.\r\n *\r\n * > 👉 **Important**: only asserts when the `development` condition is used,\r\n * > does nothing in production.\r\n *\r\n * @template {unknown} T\r\n *   Expected kind.\r\n * @param {unknown} actual\r\n *   Value.\r\n * @param {T} expected\r\n *   Baseline.\r\n * @param {Error | string | null | undefined} [message]\r\n *   Message for assertion error (default: `'Expected values to be deeply equal'`).\r\n * @returns {asserts actual is T}\r\n *   Nothing; throws when `actual` is not deep strict equal to `expected`.\r\n * @throws {AssertionError}\r\n *   Throws when `actual` is not deep strict equal to `expected`.\r\n */\r\nexport function equal(actual, expected, message) {\r\n  assert(\r\n    dequal(actual, expected),\r\n    actual,\r\n    expected,\r\n    'equal',\r\n    'Expected values to be deeply equal',\r\n    message\r\n  )\r\n}\r\n\r\n/**\r\n * Assert if `value` is truthy.\r\n *\r\n * > 👉 **Important**: only asserts when the `development` condition is used,\r\n * > does nothing in production.\r\n *\r\n * @param {unknown} value\r\n *   Value to assert.\r\n * @param {Error | string | null | undefined} [message]\r\n *   Message for assertion error (default: `'Expected value to be truthy'`).\r\n * @returns {asserts value}\r\n *   Nothing; throws when `value` is falsey.\r\n * @throws {AssertionError}\r\n *   Throws when `value` is falsey.\r\n */\r\nexport function ok(value, message) {\r\n  assert(\r\n    Boolean(value),\r\n    false,\r\n    true,\r\n    'ok',\r\n    'Expected value to be truthy',\r\n    message\r\n  )\r\n}\r\n\r\n/**\r\n * Assert that a code path never happens.\r\n *\r\n * > 👉 **Important**: only asserts when the `development` condition is used,\r\n * > does nothing in production.\r\n *\r\n * @param {Error | string | null | undefined} [message]\r\n *   Message for assertion error (default: `'Unreachable'`).\r\n * @returns {never}\r\n *   Nothing; always throws.\r\n * @throws {AssertionError}\r\n *   Throws when `value` is falsey.\r\n */\r\nexport function unreachable(message) {\r\n  assert(false, false, true, 'ok', 'Unreachable', message)\r\n}\r\n\r\n/**\r\n * @param {boolean} bool\r\n *   Whether to skip this operation.\r\n * @param {unknown} actual\r\n *   Actual value.\r\n * @param {unknown} expected\r\n *   Expected value.\r\n * @param {string} operator\r\n *   Operator.\r\n * @param {string} defaultMessage\r\n *   Default message for operation.\r\n * @param {Error | string | null | undefined} userMessage\r\n *   User-provided message.\r\n * @returns {asserts bool}\r\n *   Nothing; throws when falsey.\r\n */\r\n// eslint-disable-next-line max-params\r\nfunction assert(bool, actual, expected, operator, defaultMessage, userMessage) {\r\n  if (!bool) {\r\n    throw userMessage instanceof Error\r\n      ? userMessage\r\n      : new AssertionError(\r\n          userMessage || defaultMessage,\r\n          actual,\r\n          expected,\r\n          operator,\r\n          !userMessage\r\n        )\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Nodes} Nodes\r\n *\r\n * @typedef Options\r\n *   Configuration (optional).\r\n * @property {boolean | null | undefined} [includeImageAlt=true]\r\n *   Whether to use `alt` for `image`s (default: `true`).\r\n * @property {boolean | null | undefined} [includeHtml=true]\r\n *   Whether to use `value` of HTML (default: `true`).\r\n */\r\n\r\n/** @type {Options} */\r\nconst emptyOptions = {}\r\n\r\n/**\r\n * Get the text content of a node or list of nodes.\r\n *\r\n * Prefers the node’s plain-text fields, otherwise serializes its children,\r\n * and if the given value is an array, serialize the nodes in it.\r\n *\r\n * @param {unknown} [value]\r\n *   Thing to serialize, typically `Node`.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {string}\r\n *   Serialized `value`.\r\n */\r\nexport function toString(value, options) {\r\n  const settings = options || emptyOptions\r\n  const includeImageAlt =\r\n    typeof settings.includeImageAlt === 'boolean'\r\n      ? settings.includeImageAlt\r\n      : true\r\n  const includeHtml =\r\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\r\n\r\n  return one(value, includeImageAlt, includeHtml)\r\n}\r\n\r\n/**\r\n * One node or several nodes.\r\n *\r\n * @param {unknown} value\r\n *   Thing to serialize.\r\n * @param {boolean} includeImageAlt\r\n *   Include image `alt`s.\r\n * @param {boolean} includeHtml\r\n *   Include HTML.\r\n * @returns {string}\r\n *   Serialized node.\r\n */\r\nfunction one(value, includeImageAlt, includeHtml) {\r\n  if (node(value)) {\r\n    if ('value' in value) {\r\n      return value.type === 'html' && !includeHtml ? '' : value.value\r\n    }\r\n\r\n    if (includeImageAlt && 'alt' in value && value.alt) {\r\n      return value.alt\r\n    }\r\n\r\n    if ('children' in value) {\r\n      return all(value.children, includeImageAlt, includeHtml)\r\n    }\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return all(value, includeImageAlt, includeHtml)\r\n  }\r\n\r\n  return ''\r\n}\r\n\r\n/**\r\n * Serialize a list of nodes.\r\n *\r\n * @param {Array<unknown>} values\r\n *   Thing to serialize.\r\n * @param {boolean} includeImageAlt\r\n *   Include image `alt`s.\r\n * @param {boolean} includeHtml\r\n *   Include HTML.\r\n * @returns {string}\r\n *   Serialized nodes.\r\n */\r\nfunction all(values, includeImageAlt, includeHtml) {\r\n  /** @type {Array<string>} */\r\n  const result = []\r\n  let index = -1\r\n\r\n  while (++index < values.length) {\r\n    result[index] = one(values[index], includeImageAlt, includeHtml)\r\n  }\r\n\r\n  return result.join('')\r\n}\r\n\r\n/**\r\n * Check if `value` looks like a node.\r\n *\r\n * @param {unknown} value\r\n *   Thing.\r\n * @returns {value is Nodes}\r\n *   Whether `value` is a node.\r\n */\r\nfunction node(value) {\r\n  return Boolean(value && typeof value === 'object')\r\n}\r\n", "/// <reference lib=\"dom\" />\r\n\r\n/* eslint-env browser */\r\n\r\nconst element = document.createElement('i')\r\n\r\n/**\r\n * @param {string} value\r\n * @returns {string|false}\r\n */\r\nexport function decodeNamedCharacterReference(value) {\r\n  const characterReference = '&' + value + ';'\r\n  element.innerHTML = characterReference\r\n  const char = element.textContent\r\n\r\n  // Some named character references do not require the closing semicolon\r\n  // (`&not`, for instance), which leads to situations where parsing the assumed\r\n  // named reference of `&notit;` will result in the string `¬it;`.\r\n  // When we encounter a trailing semicolon after parsing, and the character\r\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\r\n  // matching was not complete.\r\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\r\n  // yield `null`.\r\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\r\n    return false\r\n  }\r\n\r\n  // If the decoded string is equal to the input, the character reference was\r\n  // not valid.\r\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\r\n  // yield `null`.\r\n  return char === characterReference ? false : char\r\n}\r\n", "/**\r\n * Character codes.\r\n *\r\n * This module is compiled away!\r\n *\r\n * micromark works based on character codes.\r\n * This module contains constants for the ASCII block and the replacement\r\n * character.\r\n * A couple of them are handled in a special way, such as the line endings\r\n * (CR, LF, and CR+LF, commonly known as end-of-line: EOLs), the tab (horizontal\r\n * tab) and its expansion based on what column it’s at (virtual space),\r\n * and the end-of-file (eof) character.\r\n * As values are preprocessed before handling them, the actual characters LF,\r\n * CR, HT, and NUL (which is present as the replacement character), are\r\n * guaranteed to not exist.\r\n *\r\n * Unicode basic latin block.\r\n */\r\nexport const codes = /** @type {const} */ ({\r\n  carriageReturn: -5,\r\n  lineFeed: -4,\r\n  carriageReturnLineFeed: -3,\r\n  horizontalTab: -2,\r\n  virtualSpace: -1,\r\n  eof: null,\r\n  nul: 0,\r\n  soh: 1,\r\n  stx: 2,\r\n  etx: 3,\r\n  eot: 4,\r\n  enq: 5,\r\n  ack: 6,\r\n  bel: 7,\r\n  bs: 8,\r\n  ht: 9, // `\\t`\r\n  lf: 10, // `\\n`\r\n  vt: 11, // `\\v`\r\n  ff: 12, // `\\f`\r\n  cr: 13, // `\\r`\r\n  so: 14,\r\n  si: 15,\r\n  dle: 16,\r\n  dc1: 17,\r\n  dc2: 18,\r\n  dc3: 19,\r\n  dc4: 20,\r\n  nak: 21,\r\n  syn: 22,\r\n  etb: 23,\r\n  can: 24,\r\n  em: 25,\r\n  sub: 26,\r\n  esc: 27,\r\n  fs: 28,\r\n  gs: 29,\r\n  rs: 30,\r\n  us: 31,\r\n  space: 32,\r\n  exclamationMark: 33, // `!`\r\n  quotationMark: 34, // `\"`\r\n  numberSign: 35, // `#`\r\n  dollarSign: 36, // `$`\r\n  percentSign: 37, // `%`\r\n  ampersand: 38, // `&`\r\n  apostrophe: 39, // `'`\r\n  leftParenthesis: 40, // `(`\r\n  rightParenthesis: 41, // `)`\r\n  asterisk: 42, // `*`\r\n  plusSign: 43, // `+`\r\n  comma: 44, // `,`\r\n  dash: 45, // `-`\r\n  dot: 46, // `.`\r\n  slash: 47, // `/`\r\n  digit0: 48, // `0`\r\n  digit1: 49, // `1`\r\n  digit2: 50, // `2`\r\n  digit3: 51, // `3`\r\n  digit4: 52, // `4`\r\n  digit5: 53, // `5`\r\n  digit6: 54, // `6`\r\n  digit7: 55, // `7`\r\n  digit8: 56, // `8`\r\n  digit9: 57, // `9`\r\n  colon: 58, // `:`\r\n  semicolon: 59, // `;`\r\n  lessThan: 60, // `<`\r\n  equalsTo: 61, // `=`\r\n  greaterThan: 62, // `>`\r\n  questionMark: 63, // `?`\r\n  atSign: 64, // `@`\r\n  uppercaseA: 65, // `A`\r\n  uppercaseB: 66, // `B`\r\n  uppercaseC: 67, // `C`\r\n  uppercaseD: 68, // `D`\r\n  uppercaseE: 69, // `E`\r\n  uppercaseF: 70, // `F`\r\n  uppercaseG: 71, // `G`\r\n  uppercaseH: 72, // `H`\r\n  uppercaseI: 73, // `I`\r\n  uppercaseJ: 74, // `J`\r\n  uppercaseK: 75, // `K`\r\n  uppercaseL: 76, // `L`\r\n  uppercaseM: 77, // `M`\r\n  uppercaseN: 78, // `N`\r\n  uppercaseO: 79, // `O`\r\n  uppercaseP: 80, // `P`\r\n  uppercaseQ: 81, // `Q`\r\n  uppercaseR: 82, // `R`\r\n  uppercaseS: 83, // `S`\r\n  uppercaseT: 84, // `T`\r\n  uppercaseU: 85, // `U`\r\n  uppercaseV: 86, // `V`\r\n  uppercaseW: 87, // `W`\r\n  uppercaseX: 88, // `X`\r\n  uppercaseY: 89, // `Y`\r\n  uppercaseZ: 90, // `Z`\r\n  leftSquareBracket: 91, // `[`\r\n  backslash: 92, // `\\`\r\n  rightSquareBracket: 93, // `]`\r\n  caret: 94, // `^`\r\n  underscore: 95, // `_`\r\n  graveAccent: 96, // `` ` ``\r\n  lowercaseA: 97, // `a`\r\n  lowercaseB: 98, // `b`\r\n  lowercaseC: 99, // `c`\r\n  lowercaseD: 100, // `d`\r\n  lowercaseE: 101, // `e`\r\n  lowercaseF: 102, // `f`\r\n  lowercaseG: 103, // `g`\r\n  lowercaseH: 104, // `h`\r\n  lowercaseI: 105, // `i`\r\n  lowercaseJ: 106, // `j`\r\n  lowercaseK: 107, // `k`\r\n  lowercaseL: 108, // `l`\r\n  lowercaseM: 109, // `m`\r\n  lowercaseN: 110, // `n`\r\n  lowercaseO: 111, // `o`\r\n  lowercaseP: 112, // `p`\r\n  lowercaseQ: 113, // `q`\r\n  lowercaseR: 114, // `r`\r\n  lowercaseS: 115, // `s`\r\n  lowercaseT: 116, // `t`\r\n  lowercaseU: 117, // `u`\r\n  lowercaseV: 118, // `v`\r\n  lowercaseW: 119, // `w`\r\n  lowercaseX: 120, // `x`\r\n  lowercaseY: 121, // `y`\r\n  lowercaseZ: 122, // `z`\r\n  leftCurlyBrace: 123, // `{`\r\n  verticalBar: 124, // `|`\r\n  rightCurlyBrace: 125, // `}`\r\n  tilde: 126, // `~`\r\n  del: 127,\r\n  // Unicode Specials block.\r\n  byteOrderMarker: 65279,\r\n  // Unicode Specials block.\r\n  replacementCharacter: 65533 // `�`\r\n})\r\n", "/**\r\n * This module is compiled away!\r\n *\r\n * Parsing markdown comes with a couple of constants, such as minimum or maximum\r\n * sizes of certain sequences.\r\n * Additionally, there are a couple symbols used inside micromark.\r\n * These are all defined here, but compiled away by scripts.\r\n */\r\nexport const constants = /** @type {const} */ ({\r\n  attentionSideBefore: 1, // Symbol to mark an attention sequence as before content: `*a`\r\n  attentionSideAfter: 2, // Symbol to mark an attention sequence as after content: `a*`\r\n  atxHeadingOpeningFenceSizeMax: 6, // 6 number signs is fine, 7 isn’t.\r\n  autolinkDomainSizeMax: 63, // 63 characters is fine, 64 is too many.\r\n  autolinkSchemeSizeMax: 32, // 32 characters is fine, 33 is too many.\r\n  cdataOpeningString: 'CDATA[', // And preceded by `<![`.\r\n  characterGroupWhitespace: 1, // Symbol used to indicate a character is whitespace\r\n  characterGroupPunctuation: 2, // Symbol used to indicate a character is punctuation\r\n  characterReferenceDecimalSizeMax: 7, // `&#9999999;`.\r\n  characterReferenceHexadecimalSizeMax: 6, // `&#xff9999;`.\r\n  characterReferenceNamedSizeMax: 31, // `&CounterClockwiseContourIntegral;`.\r\n  codeFencedSequenceSizeMin: 3, // At least 3 ticks or tildes are needed.\r\n  contentTypeDocument: 'document',\r\n  contentTypeFlow: 'flow',\r\n  contentTypeContent: 'content',\r\n  contentTypeString: 'string',\r\n  contentTypeText: 'text',\r\n  hardBreakPrefixSizeMin: 2, // At least 2 trailing spaces are needed.\r\n  htmlRaw: 1, // Symbol for `<script>`\r\n  htmlComment: 2, // Symbol for `<!---->`\r\n  htmlInstruction: 3, // Symbol for `<?php?>`\r\n  htmlDeclaration: 4, // Symbol for `<!doctype>`\r\n  htmlCdata: 5, // Symbol for `<![CDATA[]]>`\r\n  htmlBasic: 6, // Symbol for `<div`\r\n  htmlComplete: 7, // Symbol for `<x>`\r\n  htmlRawSizeMax: 8, // Length of `textarea`.\r\n  linkResourceDestinationBalanceMax: 32, // See: <https://spec.commonmark.org/0.30/#link-destination>, <https://github.com/remarkjs/react-markdown/issues/658#issuecomment-984345577>\r\n  linkReferenceSizeMax: 999, // See: <https://spec.commonmark.org/0.30/#link-label>\r\n  listItemValueSizeMax: 10, // See: <https://spec.commonmark.org/0.30/#ordered-list-marker>\r\n  numericBaseDecimal: 10,\r\n  numericBaseHexadecimal: 0x10,\r\n  tabSize: 4, // Tabs have a hard-coded size of 4, per CommonMark.\r\n  thematicBreakMarkerCountMin: 3, // At least 3 asterisks, dashes, or underscores are needed.\r\n  v8MaxSafeChunkSize: 10000 // V8 (and potentially others) have problems injecting giant arrays into other arrays, hence we operate in chunks.\r\n})\r\n", "/**\r\n * This module is compiled away!\r\n *\r\n * Here is the list of all types of tokens exposed by micromark, with a short\r\n * explanation of what they include and where they are found.\r\n * In picking names, generally, the rule is to be as explicit as possible\r\n * instead of reusing names.\r\n * For example, there is a `definitionDestination` and a `resourceDestination`,\r\n * instead of one shared name.\r\n */\r\n\r\n// Note: when changing the next record, you must also change `TokenTypeMap`\r\n// in `micromark-util-types/index.d.ts`.\r\nexport const types = /** @type {const} */ ({\r\n  // Generic type for data, such as in a title, a destination, etc.\r\n  data: 'data',\r\n\r\n  // Generic type for syntactic whitespace (tabs, virtual spaces, spaces).\r\n  // Such as, between a fenced code fence and an info string.\r\n  whitespace: 'whitespace',\r\n\r\n  // Generic type for line endings (line feed, carriage return, carriage return +\r\n  // line feed).\r\n  lineEnding: 'lineEnding',\r\n\r\n  // A line ending, but ending a blank line.\r\n  lineEndingBlank: 'lineEndingBlank',\r\n\r\n  // Generic type for whitespace (tabs, virtual spaces, spaces) at the start of a\r\n  // line.\r\n  linePrefix: 'linePrefix',\r\n\r\n  // Generic type for whitespace (tabs, virtual spaces, spaces) at the end of a\r\n  // line.\r\n  lineSuffix: 'lineSuffix',\r\n\r\n  // Whole ATX heading:\r\n  //\r\n  // ```markdown\r\n  // #\r\n  // ## Alpha\r\n  // ### Bravo ###\r\n  // ```\r\n  //\r\n  // Includes `atxHeadingSequence`, `whitespace`, `atxHeadingText`.\r\n  atxHeading: 'atxHeading',\r\n\r\n  // Sequence of number signs in an ATX heading (`###`).\r\n  atxHeadingSequence: 'atxHeadingSequence',\r\n\r\n  // Content in an ATX heading (`alpha`).\r\n  // Includes text.\r\n  atxHeadingText: 'atxHeadingText',\r\n\r\n  // Whole autolink (`<https://example.com>` or `<admin@example.com>`)\r\n  // Includes `autolinkMarker` and `autolinkProtocol` or `autolinkEmail`.\r\n  autolink: 'autolink',\r\n\r\n  // Email autolink w/o markers (`admin@example.com`)\r\n  autolinkEmail: 'autolinkEmail',\r\n\r\n  // Marker around an `autolinkProtocol` or `autolinkEmail` (`<` or `>`).\r\n  autolinkMarker: 'autolinkMarker',\r\n\r\n  // Protocol autolink w/o markers (`https://example.com`)\r\n  autolinkProtocol: 'autolinkProtocol',\r\n\r\n  // A whole character escape (`\\-`).\r\n  // Includes `escapeMarker` and `characterEscapeValue`.\r\n  characterEscape: 'characterEscape',\r\n\r\n  // The escaped character (`-`).\r\n  characterEscapeValue: 'characterEscapeValue',\r\n\r\n  // A whole character reference (`&amp;`, `&#8800;`, or `&#x1D306;`).\r\n  // Includes `characterReferenceMarker`, an optional\r\n  // `characterReferenceMarkerNumeric`, in which case an optional\r\n  // `characterReferenceMarkerHexadecimal`, and a `characterReferenceValue`.\r\n  characterReference: 'characterReference',\r\n\r\n  // The start or end marker (`&` or `;`).\r\n  characterReferenceMarker: 'characterReferenceMarker',\r\n\r\n  // Mark reference as numeric (`#`).\r\n  characterReferenceMarkerNumeric: 'characterReferenceMarkerNumeric',\r\n\r\n  // Mark reference as numeric (`x` or `X`).\r\n  characterReferenceMarkerHexadecimal: 'characterReferenceMarkerHexadecimal',\r\n\r\n  // Value of character reference w/o markers (`amp`, `8800`, or `1D306`).\r\n  characterReferenceValue: 'characterReferenceValue',\r\n\r\n  // Whole fenced code:\r\n  //\r\n  // ````markdown\r\n  // ```js\r\n  // alert(1)\r\n  // ```\r\n  // ````\r\n  codeFenced: 'codeFenced',\r\n\r\n  // A fenced code fence, including whitespace, sequence, info, and meta\r\n  // (` ```js `).\r\n  codeFencedFence: 'codeFencedFence',\r\n\r\n  // Sequence of grave accent or tilde characters (` ``` `) in a fence.\r\n  codeFencedFenceSequence: 'codeFencedFenceSequence',\r\n\r\n  // Info word (`js`) in a fence.\r\n  // Includes string.\r\n  codeFencedFenceInfo: 'codeFencedFenceInfo',\r\n\r\n  // Meta words (`highlight=\"1\"`) in a fence.\r\n  // Includes string.\r\n  codeFencedFenceMeta: 'codeFencedFenceMeta',\r\n\r\n  // A line of code.\r\n  codeFlowValue: 'codeFlowValue',\r\n\r\n  // Whole indented code:\r\n  //\r\n  // ```markdown\r\n  //     alert(1)\r\n  // ```\r\n  //\r\n  // Includes `lineEnding`, `linePrefix`, and `codeFlowValue`.\r\n  codeIndented: 'codeIndented',\r\n\r\n  // A text code (``` `alpha` ```).\r\n  // Includes `codeTextSequence`, `codeTextData`, `lineEnding`, and can include\r\n  // `codeTextPadding`.\r\n  codeText: 'codeText',\r\n\r\n  codeTextData: 'codeTextData',\r\n\r\n  // A space or line ending right after or before a tick.\r\n  codeTextPadding: 'codeTextPadding',\r\n\r\n  // A text code fence (` `` `).\r\n  codeTextSequence: 'codeTextSequence',\r\n\r\n  // Whole content:\r\n  //\r\n  // ```markdown\r\n  // [a]: b\r\n  // c\r\n  // =\r\n  // d\r\n  // ```\r\n  //\r\n  // Includes `paragraph` and `definition`.\r\n  content: 'content',\r\n  // Whole definition:\r\n  //\r\n  // ```markdown\r\n  // [micromark]: https://github.com/micromark/micromark\r\n  // ```\r\n  //\r\n  // Includes `definitionLabel`, `definitionMarker`, `whitespace`,\r\n  // `definitionDestination`, and optionally `lineEnding` and `definitionTitle`.\r\n  definition: 'definition',\r\n\r\n  // Destination of a definition (`https://github.com/micromark/micromark` or\r\n  // `<https://github.com/micromark/micromark>`).\r\n  // Includes `definitionDestinationLiteral` or `definitionDestinationRaw`.\r\n  definitionDestination: 'definitionDestination',\r\n\r\n  // Enclosed destination of a definition\r\n  // (`<https://github.com/micromark/micromark>`).\r\n  // Includes `definitionDestinationLiteralMarker` and optionally\r\n  // `definitionDestinationString`.\r\n  definitionDestinationLiteral: 'definitionDestinationLiteral',\r\n\r\n  // Markers of an enclosed definition destination (`<` or `>`).\r\n  definitionDestinationLiteralMarker: 'definitionDestinationLiteralMarker',\r\n\r\n  // Unenclosed destination of a definition\r\n  // (`https://github.com/micromark/micromark`).\r\n  // Includes `definitionDestinationString`.\r\n  definitionDestinationRaw: 'definitionDestinationRaw',\r\n\r\n  // Text in an destination (`https://github.com/micromark/micromark`).\r\n  // Includes string.\r\n  definitionDestinationString: 'definitionDestinationString',\r\n\r\n  // Label of a definition (`[micromark]`).\r\n  // Includes `definitionLabelMarker` and `definitionLabelString`.\r\n  definitionLabel: 'definitionLabel',\r\n\r\n  // Markers of a definition label (`[` or `]`).\r\n  definitionLabelMarker: 'definitionLabelMarker',\r\n\r\n  // Value of a definition label (`micromark`).\r\n  // Includes string.\r\n  definitionLabelString: 'definitionLabelString',\r\n\r\n  // Marker between a label and a destination (`:`).\r\n  definitionMarker: 'definitionMarker',\r\n\r\n  // Title of a definition (`\"x\"`, `'y'`, or `(z)`).\r\n  // Includes `definitionTitleMarker` and optionally `definitionTitleString`.\r\n  definitionTitle: 'definitionTitle',\r\n\r\n  // Marker around a title of a definition (`\"`, `'`, `(`, or `)`).\r\n  definitionTitleMarker: 'definitionTitleMarker',\r\n\r\n  // Data without markers in a title (`z`).\r\n  // Includes string.\r\n  definitionTitleString: 'definitionTitleString',\r\n\r\n  // Emphasis (`*alpha*`).\r\n  // Includes `emphasisSequence` and `emphasisText`.\r\n  emphasis: 'emphasis',\r\n\r\n  // Sequence of emphasis markers (`*` or `_`).\r\n  emphasisSequence: 'emphasisSequence',\r\n\r\n  // Emphasis text (`alpha`).\r\n  // Includes text.\r\n  emphasisText: 'emphasisText',\r\n\r\n  // The character escape marker (`\\`).\r\n  escapeMarker: 'escapeMarker',\r\n\r\n  // A hard break created with a backslash (`\\\\n`).\r\n  // Note: does not include the line ending.\r\n  hardBreakEscape: 'hardBreakEscape',\r\n\r\n  // A hard break created with trailing spaces (`  \\n`).\r\n  // Does not include the line ending.\r\n  hardBreakTrailing: 'hardBreakTrailing',\r\n\r\n  // Flow HTML:\r\n  //\r\n  // ```markdown\r\n  // <div\r\n  // ```\r\n  //\r\n  // Inlcudes `lineEnding`, `htmlFlowData`.\r\n  htmlFlow: 'htmlFlow',\r\n\r\n  htmlFlowData: 'htmlFlowData',\r\n\r\n  // HTML in text (the tag in `a <i> b`).\r\n  // Includes `lineEnding`, `htmlTextData`.\r\n  htmlText: 'htmlText',\r\n\r\n  htmlTextData: 'htmlTextData',\r\n\r\n  // Whole image (`![alpha](bravo)`, `![alpha][bravo]`, `![alpha][]`, or\r\n  // `![alpha]`).\r\n  // Includes `label` and an optional `resource` or `reference`.\r\n  image: 'image',\r\n\r\n  // Whole link label (`[*alpha*]`).\r\n  // Includes `labelLink` or `labelImage`, `labelText`, and `labelEnd`.\r\n  label: 'label',\r\n\r\n  // Text in an label (`*alpha*`).\r\n  // Includes text.\r\n  labelText: 'labelText',\r\n\r\n  // Start a link label (`[`).\r\n  // Includes a `labelMarker`.\r\n  labelLink: 'labelLink',\r\n\r\n  // Start an image label (`![`).\r\n  // Includes `labelImageMarker` and `labelMarker`.\r\n  labelImage: 'labelImage',\r\n\r\n  // Marker of a label (`[` or `]`).\r\n  labelMarker: 'labelMarker',\r\n\r\n  // Marker to start an image (`!`).\r\n  labelImageMarker: 'labelImageMarker',\r\n\r\n  // End a label (`]`).\r\n  // Includes `labelMarker`.\r\n  labelEnd: 'labelEnd',\r\n\r\n  // Whole link (`[alpha](bravo)`, `[alpha][bravo]`, `[alpha][]`, or `[alpha]`).\r\n  // Includes `label` and an optional `resource` or `reference`.\r\n  link: 'link',\r\n\r\n  // Whole paragraph:\r\n  //\r\n  // ```markdown\r\n  // alpha\r\n  // bravo.\r\n  // ```\r\n  //\r\n  // Includes text.\r\n  paragraph: 'paragraph',\r\n\r\n  // A reference (`[alpha]` or `[]`).\r\n  // Includes `referenceMarker` and an optional `referenceString`.\r\n  reference: 'reference',\r\n\r\n  // A reference marker (`[` or `]`).\r\n  referenceMarker: 'referenceMarker',\r\n\r\n  // Reference text (`alpha`).\r\n  // Includes string.\r\n  referenceString: 'referenceString',\r\n\r\n  // A resource (`(https://example.com \"alpha\")`).\r\n  // Includes `resourceMarker`, an optional `resourceDestination` with an optional\r\n  // `whitespace` and `resourceTitle`.\r\n  resource: 'resource',\r\n\r\n  // A resource destination (`https://example.com`).\r\n  // Includes `resourceDestinationLiteral` or `resourceDestinationRaw`.\r\n  resourceDestination: 'resourceDestination',\r\n\r\n  // A literal resource destination (`<https://example.com>`).\r\n  // Includes `resourceDestinationLiteralMarker` and optionally\r\n  // `resourceDestinationString`.\r\n  resourceDestinationLiteral: 'resourceDestinationLiteral',\r\n\r\n  // A resource destination marker (`<` or `>`).\r\n  resourceDestinationLiteralMarker: 'resourceDestinationLiteralMarker',\r\n\r\n  // A raw resource destination (`https://example.com`).\r\n  // Includes `resourceDestinationString`.\r\n  resourceDestinationRaw: 'resourceDestinationRaw',\r\n\r\n  // Resource destination text (`https://example.com`).\r\n  // Includes string.\r\n  resourceDestinationString: 'resourceDestinationString',\r\n\r\n  // A resource marker (`(` or `)`).\r\n  resourceMarker: 'resourceMarker',\r\n\r\n  // A resource title (`\"alpha\"`, `'alpha'`, or `(alpha)`).\r\n  // Includes `resourceTitleMarker` and optionally `resourceTitleString`.\r\n  resourceTitle: 'resourceTitle',\r\n\r\n  // A resource title marker (`\"`, `'`, `(`, or `)`).\r\n  resourceTitleMarker: 'resourceTitleMarker',\r\n\r\n  // Resource destination title (`alpha`).\r\n  // Includes string.\r\n  resourceTitleString: 'resourceTitleString',\r\n\r\n  // Whole setext heading:\r\n  //\r\n  // ```markdown\r\n  // alpha\r\n  // bravo\r\n  // =====\r\n  // ```\r\n  //\r\n  // Includes `setextHeadingText`, `lineEnding`, `linePrefix`, and\r\n  // `setextHeadingLine`.\r\n  setextHeading: 'setextHeading',\r\n\r\n  // Content in a setext heading (`alpha\\nbravo`).\r\n  // Includes text.\r\n  setextHeadingText: 'setextHeadingText',\r\n\r\n  // Underline in a setext heading, including whitespace suffix (`==`).\r\n  // Includes `setextHeadingLineSequence`.\r\n  setextHeadingLine: 'setextHeadingLine',\r\n\r\n  // Sequence of equals or dash characters in underline in a setext heading (`-`).\r\n  setextHeadingLineSequence: 'setextHeadingLineSequence',\r\n\r\n  // Strong (`**alpha**`).\r\n  // Includes `strongSequence` and `strongText`.\r\n  strong: 'strong',\r\n\r\n  // Sequence of strong markers (`**` or `__`).\r\n  strongSequence: 'strongSequence',\r\n\r\n  // Strong text (`alpha`).\r\n  // Includes text.\r\n  strongText: 'strongText',\r\n\r\n  // Whole thematic break:\r\n  //\r\n  // ```markdown\r\n  // * * *\r\n  // ```\r\n  //\r\n  // Includes `thematicBreakSequence` and `whitespace`.\r\n  thematicBreak: 'thematicBreak',\r\n\r\n  // A sequence of one or more thematic break markers (`***`).\r\n  thematicBreakSequence: 'thematicBreakSequence',\r\n\r\n  // Whole block quote:\r\n  //\r\n  // ```markdown\r\n  // > a\r\n  // >\r\n  // > b\r\n  // ```\r\n  //\r\n  // Includes `blockQuotePrefix` and flow.\r\n  blockQuote: 'blockQuote',\r\n  // The `>` or `> ` of a block quote.\r\n  blockQuotePrefix: 'blockQuotePrefix',\r\n  // The `>` of a block quote prefix.\r\n  blockQuoteMarker: 'blockQuoteMarker',\r\n  // The optional ` ` of a block quote prefix.\r\n  blockQuotePrefixWhitespace: 'blockQuotePrefixWhitespace',\r\n\r\n  // Whole unordered list:\r\n  //\r\n  // ```markdown\r\n  // - a\r\n  //   b\r\n  // ```\r\n  //\r\n  // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further\r\n  // lines.\r\n  listOrdered: 'listOrdered',\r\n\r\n  // Whole ordered list:\r\n  //\r\n  // ```markdown\r\n  // 1. a\r\n  //    b\r\n  // ```\r\n  //\r\n  // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further\r\n  // lines.\r\n  listUnordered: 'listUnordered',\r\n\r\n  // The indent of further list item lines.\r\n  listItemIndent: 'listItemIndent',\r\n\r\n  // A marker, as in, `*`, `+`, `-`, `.`, or `)`.\r\n  listItemMarker: 'listItemMarker',\r\n\r\n  // The thing that starts a list item, such as `1. `.\r\n  // Includes `listItemValue` if ordered, `listItemMarker`, and\r\n  // `listItemPrefixWhitespace` (unless followed by a line ending).\r\n  listItemPrefix: 'listItemPrefix',\r\n\r\n  // The whitespace after a marker.\r\n  listItemPrefixWhitespace: 'listItemPrefixWhitespace',\r\n\r\n  // The numerical value of an ordered item.\r\n  listItemValue: 'listItemValue',\r\n\r\n  // Internal types used for subtokenizers, compiled away\r\n  chunkDocument: 'chunkDocument',\r\n  chunkContent: 'chunkContent',\r\n  chunkFlow: 'chunkFlow',\r\n  chunkText: 'chunkText',\r\n  chunkString: 'chunkString'\r\n})\r\n", "/**\r\n * This module is compiled away!\r\n *\r\n * While micromark works based on character codes, this module includes the\r\n * string versions of ’em.\r\n * The C0 block, except for LF, CR, HT, and w/ the replacement character added,\r\n * are available here.\r\n */\r\nexport const values = /** @type {const} */ ({\r\n  ht: '\\t',\r\n  lf: '\\n',\r\n  cr: '\\r',\r\n  space: ' ',\r\n  exclamationMark: '!',\r\n  quotationMark: '\"',\r\n  numberSign: '#',\r\n  dollarSign: '$',\r\n  percentSign: '%',\r\n  ampersand: '&',\r\n  apostrophe: \"'\",\r\n  leftParenthesis: '(',\r\n  rightParenthesis: ')',\r\n  asterisk: '*',\r\n  plusSign: '+',\r\n  comma: ',',\r\n  dash: '-',\r\n  dot: '.',\r\n  slash: '/',\r\n  digit0: '0',\r\n  digit1: '1',\r\n  digit2: '2',\r\n  digit3: '3',\r\n  digit4: '4',\r\n  digit5: '5',\r\n  digit6: '6',\r\n  digit7: '7',\r\n  digit8: '8',\r\n  digit9: '9',\r\n  colon: ':',\r\n  semicolon: ';',\r\n  lessThan: '<',\r\n  equalsTo: '=',\r\n  greaterThan: '>',\r\n  questionMark: '?',\r\n  atSign: '@',\r\n  uppercaseA: 'A',\r\n  uppercaseB: 'B',\r\n  uppercaseC: 'C',\r\n  uppercaseD: 'D',\r\n  uppercaseE: 'E',\r\n  uppercaseF: 'F',\r\n  uppercaseG: 'G',\r\n  uppercaseH: 'H',\r\n  uppercaseI: 'I',\r\n  uppercaseJ: 'J',\r\n  uppercaseK: 'K',\r\n  uppercaseL: 'L',\r\n  uppercaseM: 'M',\r\n  uppercaseN: 'N',\r\n  uppercaseO: 'O',\r\n  uppercaseP: 'P',\r\n  uppercaseQ: 'Q',\r\n  uppercaseR: 'R',\r\n  uppercaseS: 'S',\r\n  uppercaseT: 'T',\r\n  uppercaseU: 'U',\r\n  uppercaseV: 'V',\r\n  uppercaseW: 'W',\r\n  uppercaseX: 'X',\r\n  uppercaseY: 'Y',\r\n  uppercaseZ: 'Z',\r\n  leftSquareBracket: '[',\r\n  backslash: '\\\\',\r\n  rightSquareBracket: ']',\r\n  caret: '^',\r\n  underscore: '_',\r\n  graveAccent: '`',\r\n  lowercaseA: 'a',\r\n  lowercaseB: 'b',\r\n  lowercaseC: 'c',\r\n  lowercaseD: 'd',\r\n  lowercaseE: 'e',\r\n  lowercaseF: 'f',\r\n  lowercaseG: 'g',\r\n  lowercaseH: 'h',\r\n  lowercaseI: 'i',\r\n  lowercaseJ: 'j',\r\n  lowercaseK: 'k',\r\n  lowercaseL: 'l',\r\n  lowercaseM: 'm',\r\n  lowercaseN: 'n',\r\n  lowercaseO: 'o',\r\n  lowercaseP: 'p',\r\n  lowercaseQ: 'q',\r\n  lowercaseR: 'r',\r\n  lowercaseS: 's',\r\n  lowercaseT: 't',\r\n  lowercaseU: 'u',\r\n  lowercaseV: 'v',\r\n  lowercaseW: 'w',\r\n  lowercaseX: 'x',\r\n  lowercaseY: 'y',\r\n  lowercaseZ: 'z',\r\n  leftCurlyBrace: '{',\r\n  verticalBar: '|',\r\n  rightCurlyBrace: '}',\r\n  tilde: '~',\r\n  replacementCharacter: '�'\r\n})\r\n", "import {constants} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Like `Array#splice`, but smarter for giant arrays.\r\n *\r\n * `Array#splice` takes all items to be inserted as individual argument which\r\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\r\n *\r\n * Otherwise, this does not return the removed items, and takes `items` as an\r\n * array instead of rest parameters.\r\n *\r\n * @template {unknown} T\r\n *   Item type.\r\n * @param {Array<T>} list\r\n *   List to operate on.\r\n * @param {number} start\r\n *   Index to remove/insert at (can be negative).\r\n * @param {number} remove\r\n *   Number of items to remove.\r\n * @param {Array<T>} items\r\n *   Items to inject into `list`.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nexport function splice(list, start, remove, items) {\r\n  const end = list.length\r\n  let chunkStart = 0\r\n  /** @type {Array<unknown>} */\r\n  let parameters\r\n\r\n  // Make start between zero and `end` (included).\r\n  if (start < 0) {\r\n    start = -start > end ? 0 : end + start\r\n  } else {\r\n    start = start > end ? end : start\r\n  }\r\n\r\n  remove = remove > 0 ? remove : 0\r\n\r\n  // No need to chunk the items if there’s only a couple (10k) items.\r\n  if (items.length < constants.v8MaxSafeChunkSize) {\r\n    parameters = Array.from(items)\r\n    parameters.unshift(start, remove)\r\n    // @ts-expect-error Hush, it’s fine.\r\n    list.splice(...parameters)\r\n  } else {\r\n    // Delete `remove` items starting from `start`\r\n    if (remove) list.splice(start, remove)\r\n\r\n    // Insert the items in chunks to not cause stack overflows.\r\n    while (chunkStart < items.length) {\r\n      parameters = items.slice(\r\n        chunkStart,\r\n        chunkStart + constants.v8MaxSafeChunkSize\r\n      )\r\n      parameters.unshift(start, 0)\r\n      // @ts-expect-error Hush, it’s fine.\r\n      list.splice(...parameters)\r\n\r\n      chunkStart += constants.v8MaxSafeChunkSize\r\n      start += constants.v8MaxSafeChunkSize\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Append `items` (an array) at the end of `list` (another array).\r\n * When `list` was empty, returns `items` instead.\r\n *\r\n * This prevents a potentially expensive operation when `list` is empty,\r\n * and adds items in batches to prevent V8 from hanging.\r\n *\r\n * @template {unknown} T\r\n *   Item type.\r\n * @param {Array<T>} list\r\n *   List to operate on.\r\n * @param {Array<T>} items\r\n *   Items to add to `list`.\r\n * @returns {Array<T>}\r\n *   Either `list` or `items`.\r\n */\r\nexport function push(list, items) {\r\n  if (list.length > 0) {\r\n    splice(list, list.length, 0, items)\r\n    return list\r\n  }\r\n\r\n  return items\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Extension} Extension\r\n * @typedef {import('micromark-util-types').Handles} Handles\r\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\r\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\r\n */\r\n\r\nimport {splice} from 'micromark-util-chunked'\r\n\r\nconst hasOwnProperty = {}.hasOwnProperty\r\n\r\n/**\r\n * Combine multiple syntax extensions into one.\r\n *\r\n * @param {Array<Extension>} extensions\r\n *   List of syntax extensions.\r\n * @returns {NormalizedExtension}\r\n *   A single combined extension.\r\n */\r\nexport function combineExtensions(extensions) {\r\n  /** @type {NormalizedExtension} */\r\n  const all = {}\r\n  let index = -1\r\n\r\n  while (++index < extensions.length) {\r\n    syntaxExtension(all, extensions[index])\r\n  }\r\n\r\n  return all\r\n}\r\n\r\n/**\r\n * Merge `extension` into `all`.\r\n *\r\n * @param {NormalizedExtension} all\r\n *   Extension to merge into.\r\n * @param {Extension} extension\r\n *   Extension to merge.\r\n * @returns {undefined}\r\n */\r\nfunction syntaxExtension(all, extension) {\r\n  /** @type {keyof Extension} */\r\n  let hook\r\n\r\n  for (hook in extension) {\r\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\r\n    /** @type {Record<string, unknown>} */\r\n    const left = maybe || (all[hook] = {})\r\n    /** @type {Record<string, unknown> | undefined} */\r\n    const right = extension[hook]\r\n    /** @type {string} */\r\n    let code\r\n\r\n    if (right) {\r\n      for (code in right) {\r\n        if (!hasOwnProperty.call(left, code)) left[code] = []\r\n        const value = right[code]\r\n        constructs(\r\n          // @ts-expect-error Looks like a list.\r\n          left[code],\r\n          Array.isArray(value) ? value : value ? [value] : []\r\n        )\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Merge `list` into `existing` (both lists of constructs).\r\n * Mutates `existing`.\r\n *\r\n * @param {Array<unknown>} existing\r\n * @param {Array<unknown>} list\r\n * @returns {undefined}\r\n */\r\nfunction constructs(existing, list) {\r\n  let index = -1\r\n  /** @type {Array<unknown>} */\r\n  const before = []\r\n\r\n  while (++index < list.length) {\r\n    // @ts-expect-error Looks like an object.\r\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\r\n  }\r\n\r\n  splice(existing, 0, 0, before)\r\n}\r\n\r\n/**\r\n * Combine multiple HTML extensions into one.\r\n *\r\n * @param {Array<HtmlExtension>} htmlExtensions\r\n *   List of HTML extensions.\r\n * @returns {HtmlExtension}\r\n *   A single combined HTML extension.\r\n */\r\nexport function combineHtmlExtensions(htmlExtensions) {\r\n  /** @type {HtmlExtension} */\r\n  const handlers = {}\r\n  let index = -1\r\n\r\n  while (++index < htmlExtensions.length) {\r\n    htmlExtension(handlers, htmlExtensions[index])\r\n  }\r\n\r\n  return handlers\r\n}\r\n\r\n/**\r\n * Merge `extension` into `all`.\r\n *\r\n * @param {HtmlExtension} all\r\n *   Extension to merge into.\r\n * @param {HtmlExtension} extension\r\n *   Extension to merge.\r\n * @returns {undefined}\r\n */\r\nfunction htmlExtension(all, extension) {\r\n  /** @type {keyof HtmlExtension} */\r\n  let hook\r\n\r\n  for (hook in extension) {\r\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\r\n    const left = maybe || (all[hook] = {})\r\n    const right = extension[hook]\r\n    /** @type {keyof Handles} */\r\n    let type\r\n\r\n    if (right) {\r\n      for (type in right) {\r\n        // @ts-expect-error assume document vs regular handler are managed correctly.\r\n        left[type] = right[type]\r\n      }\r\n    }\r\n  }\r\n}\r\n", "import {codes, values} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Turn the number (in string form as either hexa- or plain decimal) coming from\r\n * a numeric character reference into a character.\r\n *\r\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\r\n * non-characters and control characters safe.\r\n *\r\n * @param {string} value\r\n *   Value to decode.\r\n * @param {number} base\r\n *   Numeric base.\r\n * @returns {string}\r\n *   Character.\r\n */\r\nexport function decodeNumericCharacterReference(value, base) {\r\n  const code = Number.parseInt(value, base)\r\n\r\n  if (\r\n    // C0 except for HT, LF, FF, CR, space.\r\n    code < codes.ht ||\r\n    code === codes.vt ||\r\n    (code > codes.cr && code < codes.space) ||\r\n    // Control character (DEL) of C0, and C1 controls.\r\n    (code > codes.tilde && code < 160) ||\r\n    // Lone high surrogates and low surrogates.\r\n    (code > 55_295 && code < 57_344) ||\r\n    // Noncharacters.\r\n    (code > 64_975 && code < 65_008) ||\r\n    /* eslint-disable no-bitwise */\r\n    (code & 65_535) === 65_535 ||\r\n    (code & 65_535) === 65_534 ||\r\n    /* eslint-enable no-bitwise */\r\n    // Out of range\r\n    code > 1_114_111\r\n  ) {\r\n    return values.replacementCharacter\r\n  }\r\n\r\n  return String.fromCodePoint(code)\r\n}\r\n", "import {values} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Normalize an identifier (as found in references, definitions).\r\n *\r\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\r\n *\r\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\r\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\r\n * uppercase character (U+0398 (`Θ`)).\r\n * So, to get a canonical form, we perform both lower- and uppercase.\r\n *\r\n * Using uppercase last makes sure keys will never interact with default\r\n * prototypal values (such as `constructor`): nothing in the prototype of\r\n * `Object` is uppercase.\r\n *\r\n * @param {string} value\r\n *   Identifier to normalize.\r\n * @returns {string}\r\n *   Normalized identifier.\r\n */\r\nexport function normalizeIdentifier(value) {\r\n  return (\r\n    value\r\n      // Collapse markdown whitespace.\r\n      .replace(/[\\t\\n\\r ]+/g, values.space)\r\n      // Trim.\r\n      .replace(/^ | $/g, '')\r\n      // Some characters are considered “uppercase”, but if their lowercase\r\n      // counterpart is uppercased will result in a different uppercase\r\n      // character.\r\n      // Hence, to get that form, we perform both lower- and uppercase.\r\n      // Upper case makes sure keys will not interact with default prototypal\r\n      // methods: no method is uppercase.\r\n      .toLowerCase()\r\n      .toUpperCase()\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n */\r\n\r\nimport {codes} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\r\n * case insensitive).\r\n *\r\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\r\n *\r\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\r\n * to U+005A (`Z`).\r\n *\r\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\r\n * to U+007A (`z`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\r\n\r\n/**\r\n * Check whether the character code represents an ASCII alphanumeric (`a`\r\n * through `z`, case insensitive, or `0` through `9`).\r\n *\r\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\r\n * (see `asciiAlpha`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\r\n\r\n/**\r\n * Check whether the character code represents an ASCII atext.\r\n *\r\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\r\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\r\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\r\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\r\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\r\n * (`{`) to U+007E TILDE (`~`).\r\n *\r\n * See:\r\n * **\\[RFC5322]**:\r\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\r\n * P. Resnick.\r\n * IETF.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\r\n\r\n/**\r\n * Check whether a character code is an ASCII control character.\r\n *\r\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\r\n * to U+001F (US), or U+007F (DEL).\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function asciiControl(code) {\r\n  return (\r\n    // Special whitespace codes (which have negative values), C0 and Control\r\n    // character DEL\r\n    code !== null && (code < codes.space || code === codes.del)\r\n  )\r\n}\r\n\r\n/**\r\n * Check whether the character code represents an ASCII digit (`0` through `9`).\r\n *\r\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\r\n * U+0039 (`9`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiDigit = regexCheck(/\\d/)\r\n\r\n/**\r\n * Check whether the character code represents an ASCII hex digit (`a` through\r\n * `f`, case insensitive, or `0` through `9`).\r\n *\r\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\r\n * digit, or an ASCII lower hex digit.\r\n *\r\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\r\n * (`A`) to U+0046 (`F`).\r\n *\r\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\r\n * (`a`) to U+0066 (`f`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\r\n\r\n/**\r\n * Check whether the character code represents ASCII punctuation.\r\n *\r\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\r\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\r\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\r\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\r\n\r\n/**\r\n * Check whether a character code is a markdown line ending.\r\n *\r\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\r\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\r\n *\r\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\r\n * RETURN (CR) are replaced by these virtual characters depending on whether\r\n * they occurred together.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function markdownLineEnding(code) {\r\n  return code !== null && code < codes.horizontalTab\r\n}\r\n\r\n/**\r\n * Check whether a character code is a markdown line ending (see\r\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function markdownLineEndingOrSpace(code) {\r\n  return code !== null && (code < codes.nul || code === codes.space)\r\n}\r\n\r\n/**\r\n * Check whether a character code is a markdown space.\r\n *\r\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\r\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\r\n *\r\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\r\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\r\n * SPACE (VS) characters, depending on the column at which the tab occurred.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {boolean}\r\n *   Whether it matches.\r\n */\r\nexport function markdownSpace(code) {\r\n  return (\r\n    code === codes.horizontalTab ||\r\n    code === codes.virtualSpace ||\r\n    code === codes.space\r\n  )\r\n}\r\n\r\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\r\n// In fact adds to the bundle size.\r\n/**\r\n * Check whether the character code represents Unicode punctuation.\r\n *\r\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\r\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\r\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\r\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\r\n * punctuation (see `asciiPunctuation`).\r\n *\r\n * See:\r\n * **\\[UNICODE]**:\r\n * [The Unicode Standard](https://www.unicode.org/versions/).\r\n * Unicode Consortium.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\r\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u)\r\n\r\n/**\r\n * Check whether the character code represents Unicode whitespace.\r\n *\r\n * Note that this does handle micromark specific markdown whitespace characters.\r\n * See `markdownLineEndingOrSpace` to check that.\r\n *\r\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\r\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\r\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\r\n *\r\n * See:\r\n * **\\[UNICODE]**:\r\n * [The Unicode Standard](https://www.unicode.org/versions/).\r\n * Unicode Consortium.\r\n *\r\n * @param code\r\n *   Code.\r\n * @returns\r\n *   Whether it matches.\r\n */\r\nexport const unicodeWhitespace = regexCheck(/\\s/)\r\n\r\n/**\r\n * Create a code check from a regex.\r\n *\r\n * @param {RegExp} regex\r\n * @returns {(code: Code) => boolean}\r\n */\r\nfunction regexCheck(regex) {\r\n  return check\r\n\r\n  /**\r\n   * Check whether a code matches the bound regex.\r\n   *\r\n   * @param {Code} code\r\n   *   Character code.\r\n   * @returns {boolean}\r\n   *   Whether the character code matches the bound regex.\r\n   */\r\n  function check(code) {\r\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code))\r\n  }\r\n}\r\n", "/**\r\n * While micromark is a lexer/tokenizer, the common case of going from markdown\r\n * to html is currently built in as this module, even though the parts can be\r\n * used separately to build ASTs, CSTs, or many other output formats.\r\n *\r\n * Having an HTML compiler built in is useful because it allows us to check for\r\n * compliancy to CommonMark, the de facto norm of markdown, specified in roughly\r\n * 600 input/output cases.\r\n *\r\n * This module has an interface that accepts lists of events instead of the\r\n * whole at once, however, because markdown can’t be truly streaming, we buffer\r\n * events before processing and outputting the final result.\r\n */\r\n\r\n/**\r\n * @typedef {import('micromark-util-types').Compile} Compile\r\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\r\n * @typedef {import('micromark-util-types').CompileData} CompileData\r\n * @typedef {import('micromark-util-types').CompileOptions} CompileOptions\r\n * @typedef {import('micromark-util-types').Definition} Definition\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Handle} Handle\r\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\r\n * @typedef {import('micromark-util-types').NormalizedHtmlExtension} NormalizedHtmlExtension\r\n * @typedef {import('micromark-util-types').Token} Token\r\n */\r\n\r\n/**\r\n * @typedef Media\r\n * @property {boolean | undefined} [image]\r\n * @property {string | undefined} [labelId]\r\n * @property {string | undefined} [label]\r\n * @property {string | undefined} [referenceId]\r\n * @property {string | undefined} [destination]\r\n * @property {string | undefined} [title]\r\n */\r\n\r\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\r\nimport {push} from 'micromark-util-chunked'\r\nimport {combineHtmlExtensions} from 'micromark-util-combine-extensions'\r\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\r\nimport {encode as _encode} from 'micromark-util-encode'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\nconst hasOwnProperty = {}.hasOwnProperty\r\n\r\n/**\r\n * These two are allowlists of safe protocols for full URLs in respectively the\r\n * `href` (on `<a>`) and `src` (on `<img>`) attributes.\r\n * They are based on what is allowed on GitHub,\r\n * <https://github.com/syntax-tree/hast-util-sanitize/blob/9275b21/lib/github.json#L31>\r\n */\r\nconst protocolHref = /^(https?|ircs?|mailto|xmpp)$/i\r\nconst protocolSrc = /^https?$/i\r\n\r\n/**\r\n * @param {CompileOptions | null | undefined} [options]\r\n * @returns {Compile}\r\n */\r\nexport function compile(options) {\r\n  const settings = options || {}\r\n\r\n  /**\r\n   * Tags is needed because according to markdown, links and emphasis and\r\n   * whatnot can exist in images, however, as HTML doesn’t allow content in\r\n   * images, the tags are ignored in the `alt` attribute, but the content\r\n   * remains.\r\n   *\r\n   * @type {boolean | undefined}\r\n   */\r\n  let tags = true\r\n\r\n  /**\r\n   * An object to track identifiers to media (URLs and titles) defined with\r\n   * definitions.\r\n   *\r\n   * @type {Record<string, Definition>}\r\n   */\r\n  const definitions = {}\r\n\r\n  /**\r\n   * A lot of the handlers need to capture some of the output data, modify it\r\n   * somehow, and then deal with it.\r\n   * We do that by tracking a stack of buffers, that can be opened (with\r\n   * `buffer`) and closed (with `resume`) to access them.\r\n   *\r\n   * @type {Array<Array<string>>}\r\n   */\r\n  const buffers = [[]]\r\n\r\n  /**\r\n   * As we can have links in images and the other way around, where the deepest\r\n   * ones are closed first, we need to track which one we’re in.\r\n   *\r\n   * @type {Array<Media>}\r\n   */\r\n  const mediaStack = []\r\n\r\n  /**\r\n   * Same as `mediaStack` for tightness, which is specific to lists.\r\n   * We need to track if we’re currently in a tight or loose container.\r\n   *\r\n   * @type {Array<boolean>}\r\n   */\r\n  const tightStack = []\r\n\r\n  /** @type {HtmlExtension} */\r\n  const defaultHandlers = {\r\n    enter: {\r\n      blockQuote: onenterblockquote,\r\n      codeFenced: onentercodefenced,\r\n      codeFencedFenceInfo: buffer,\r\n      codeFencedFenceMeta: buffer,\r\n      codeIndented: onentercodeindented,\r\n      codeText: onentercodetext,\r\n      content: onentercontent,\r\n      definition: onenterdefinition,\r\n      definitionDestinationString: onenterdefinitiondestinationstring,\r\n      definitionLabelString: buffer,\r\n      definitionTitleString: buffer,\r\n      emphasis: onenteremphasis,\r\n      htmlFlow: onenterhtmlflow,\r\n      htmlText: onenterhtml,\r\n      image: onenterimage,\r\n      label: buffer,\r\n      link: onenterlink,\r\n      listItemMarker: onenterlistitemmarker,\r\n      listItemValue: onenterlistitemvalue,\r\n      listOrdered: onenterlistordered,\r\n      listUnordered: onenterlistunordered,\r\n      paragraph: onenterparagraph,\r\n      reference: buffer,\r\n      resource: onenterresource,\r\n      resourceDestinationString: onenterresourcedestinationstring,\r\n      resourceTitleString: buffer,\r\n      setextHeading: onentersetextheading,\r\n      strong: onenterstrong\r\n    },\r\n    exit: {\r\n      atxHeading: onexitatxheading,\r\n      atxHeadingSequence: onexitatxheadingsequence,\r\n      autolinkEmail: onexitautolinkemail,\r\n      autolinkProtocol: onexitautolinkprotocol,\r\n      blockQuote: onexitblockquote,\r\n      characterEscapeValue: onexitdata,\r\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\r\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\r\n      characterReferenceValue: onexitcharacterreferencevalue,\r\n      codeFenced: onexitflowcode,\r\n      codeFencedFence: onexitcodefencedfence,\r\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\r\n      codeFencedFenceMeta: onresumedrop,\r\n      codeFlowValue: onexitcodeflowvalue,\r\n      codeIndented: onexitflowcode,\r\n      codeText: onexitcodetext,\r\n      codeTextData: onexitdata,\r\n      data: onexitdata,\r\n      definition: onexitdefinition,\r\n      definitionDestinationString: onexitdefinitiondestinationstring,\r\n      definitionLabelString: onexitdefinitionlabelstring,\r\n      definitionTitleString: onexitdefinitiontitlestring,\r\n      emphasis: onexitemphasis,\r\n      hardBreakEscape: onexithardbreak,\r\n      hardBreakTrailing: onexithardbreak,\r\n      htmlFlow: onexithtml,\r\n      htmlFlowData: onexitdata,\r\n      htmlText: onexithtml,\r\n      htmlTextData: onexitdata,\r\n      image: onexitmedia,\r\n      label: onexitlabel,\r\n      labelText: onexitlabeltext,\r\n      lineEnding: onexitlineending,\r\n      link: onexitmedia,\r\n      listOrdered: onexitlistordered,\r\n      listUnordered: onexitlistunordered,\r\n      paragraph: onexitparagraph,\r\n      reference: onresumedrop,\r\n      referenceString: onexitreferencestring,\r\n      resource: onresumedrop,\r\n      resourceDestinationString: onexitresourcedestinationstring,\r\n      resourceTitleString: onexitresourcetitlestring,\r\n      setextHeading: onexitsetextheading,\r\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\r\n      setextHeadingText: onexitsetextheadingtext,\r\n      strong: onexitstrong,\r\n      thematicBreak: onexitthematicbreak\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Combine the HTML extensions with the default handlers.\r\n   * An HTML extension is an object whose fields are either `enter` or `exit`\r\n   * (reflecting whether a token is entered or exited).\r\n   * The values at such objects are names of tokens mapping to handlers.\r\n   * Handlers are called, respectively when a token is opener or closed, with\r\n   * that token, and a context as `this`.\r\n   */\r\n  const handlers = /** @type {NormalizedHtmlExtension} */ (\r\n    combineHtmlExtensions(\r\n      [defaultHandlers].concat(settings.htmlExtensions || [])\r\n    )\r\n  )\r\n\r\n  /**\r\n   * Handlers do often need to keep track of some state.\r\n   * That state is provided here as a key-value store (an object).\r\n   *\r\n   * @type {CompileData}\r\n   */\r\n  const data = {\r\n    tightStack,\r\n    definitions\r\n  }\r\n\r\n  /**\r\n   * The context for handlers references a couple of useful functions.\r\n   * In handlers from extensions, those can be accessed at `this`.\r\n   * For the handlers here, they can be accessed directly.\r\n   *\r\n   * @type {Omit<CompileContext, 'sliceSerialize'>}\r\n   */\r\n  const context = {\r\n    lineEndingIfNeeded,\r\n    options: settings,\r\n    encode,\r\n    raw,\r\n    tag,\r\n    buffer,\r\n    resume,\r\n    setData,\r\n    getData\r\n  }\r\n\r\n  /**\r\n   * Generally, micromark copies line endings (`'\\r'`, `'\\n'`, `'\\r\\n'`) in the\r\n   * markdown document over to the compiled HTML.\r\n   * In some cases, such as `> a`, CommonMark requires that extra line endings\r\n   * are added: `<blockquote>\\n<p>a</p>\\n</blockquote>`.\r\n   * This variable hold the default line ending when given (or `undefined`),\r\n   * and in the latter case will be updated to the first found line ending if\r\n   * there is one.\r\n   */\r\n  let lineEndingStyle = settings.defaultLineEnding\r\n\r\n  // Return the function that handles a slice of events.\r\n  return compile\r\n\r\n  /**\r\n   * Deal w/ a slice of events.\r\n   * Return either the empty string if there’s nothing of note to return, or the\r\n   * result when done.\r\n   *\r\n   * @param {Array<Event>} events\r\n   * @returns {string}\r\n   */\r\n  function compile(events) {\r\n    let index = -1\r\n    let start = 0\r\n    /** @type {Array<number>} */\r\n    const listStack = []\r\n    // As definitions can come after references, we need to figure out the media\r\n    // (urls and titles) defined by them before handling the references.\r\n    // So, we do sort of what HTML does: put metadata at the start (in head), and\r\n    // then put content after (`body`).\r\n    /** @type {Array<Event>} */\r\n    let head = []\r\n    /** @type {Array<Event>} */\r\n    let body = []\r\n\r\n    while (++index < events.length) {\r\n      // Figure out the line ending style used in the document.\r\n      if (\r\n        !lineEndingStyle &&\r\n        (events[index][1].type === types.lineEnding ||\r\n          events[index][1].type === types.lineEndingBlank)\r\n      ) {\r\n        // @ts-expect-error Hush, it’s a line ending.\r\n        lineEndingStyle = events[index][2].sliceSerialize(events[index][1])\r\n      }\r\n\r\n      // Preprocess lists to infer whether the list is loose or not.\r\n      if (\r\n        events[index][1].type === types.listOrdered ||\r\n        events[index][1].type === types.listUnordered\r\n      ) {\r\n        if (events[index][0] === 'enter') {\r\n          listStack.push(index)\r\n        } else {\r\n          prepareList(events.slice(listStack.pop(), index))\r\n        }\r\n      }\r\n\r\n      // Move definitions to the front.\r\n      if (events[index][1].type === types.definition) {\r\n        if (events[index][0] === 'enter') {\r\n          body = push(body, events.slice(start, index))\r\n          start = index\r\n        } else {\r\n          head = push(head, events.slice(start, index + 1))\r\n          start = index + 1\r\n        }\r\n      }\r\n    }\r\n\r\n    head = push(head, body)\r\n    head = push(head, events.slice(start))\r\n    index = -1\r\n    const result = head\r\n\r\n    // Handle the start of the document, if defined.\r\n    if (handlers.enter.null) {\r\n      handlers.enter.null.call(context)\r\n    }\r\n\r\n    // Handle all events.\r\n    while (++index < events.length) {\r\n      const handles = handlers[result[index][0]]\r\n      const kind = result[index][1].type\r\n      const handle = handles[kind]\r\n\r\n      if (hasOwnProperty.call(handles, kind) && handle) {\r\n        handle.call(\r\n          Object.assign(\r\n            {sliceSerialize: result[index][2].sliceSerialize},\r\n            context\r\n          ),\r\n          result[index][1]\r\n        )\r\n      }\r\n    }\r\n\r\n    // Handle the end of the document, if defined.\r\n    if (handlers.exit.null) {\r\n      handlers.exit.null.call(context)\r\n    }\r\n\r\n    return buffers[0].join('')\r\n  }\r\n\r\n  /**\r\n   * Figure out whether lists are loose or not.\r\n   *\r\n   * @param {Array<Event>} slice\r\n   * @returns {undefined}\r\n   */\r\n  function prepareList(slice) {\r\n    const length = slice.length\r\n    let index = 0 // Skip open.\r\n    let containerBalance = 0\r\n    let loose = false\r\n    /** @type {boolean | undefined} */\r\n    let atMarker\r\n\r\n    while (++index < length) {\r\n      const event = slice[index]\r\n\r\n      if (event[1]._container) {\r\n        atMarker = undefined\r\n\r\n        if (event[0] === 'enter') {\r\n          containerBalance++\r\n        } else {\r\n          containerBalance--\r\n        }\r\n      } else\r\n        switch (event[1].type) {\r\n          case types.listItemPrefix: {\r\n            if (event[0] === 'exit') {\r\n              atMarker = true\r\n            }\r\n\r\n            break\r\n          }\r\n\r\n          case types.linePrefix: {\r\n            // Ignore\r\n\r\n            break\r\n          }\r\n\r\n          case types.lineEndingBlank: {\r\n            if (event[0] === 'enter' && !containerBalance) {\r\n              if (atMarker) {\r\n                atMarker = undefined\r\n              } else {\r\n                loose = true\r\n              }\r\n            }\r\n\r\n            break\r\n          }\r\n\r\n          default: {\r\n            atMarker = undefined\r\n          }\r\n        }\r\n    }\r\n\r\n    slice[0][1]._loose = loose\r\n  }\r\n\r\n  /**\r\n   * @type {CompileContext['setData']}\r\n   */\r\n  function setData(key, value) {\r\n    // @ts-expect-error: assume `value` is omitted (`undefined` is passed) only\r\n    // if allowed.\r\n    data[key] = value\r\n  }\r\n\r\n  /**\r\n   * @type {CompileContext['getData']}\r\n   */\r\n  function getData(key) {\r\n    return data[key]\r\n  }\r\n\r\n  /** @type {CompileContext['buffer']} */\r\n  function buffer() {\r\n    buffers.push([])\r\n  }\r\n\r\n  /** @type {CompileContext['resume']} */\r\n  function resume() {\r\n    const buf = buffers.pop()\r\n    assert(buf !== undefined, 'Cannot resume w/o buffer')\r\n    return buf.join('')\r\n  }\r\n\r\n  /** @type {CompileContext['tag']} */\r\n  function tag(value) {\r\n    if (!tags) return\r\n    setData('lastWasTag', true)\r\n    buffers[buffers.length - 1].push(value)\r\n  }\r\n\r\n  /** @type {CompileContext['raw']} */\r\n  function raw(value) {\r\n    setData('lastWasTag')\r\n    buffers[buffers.length - 1].push(value)\r\n  }\r\n\r\n  /**\r\n   * Output an extra line ending.\r\n   *\r\n   * @returns {undefined}\r\n   */\r\n  function lineEnding() {\r\n    raw(lineEndingStyle || '\\n')\r\n  }\r\n\r\n  /** @type {CompileContext['lineEndingIfNeeded']} */\r\n  function lineEndingIfNeeded() {\r\n    const buffer = buffers[buffers.length - 1]\r\n    const slice = buffer[buffer.length - 1]\r\n    const previous = slice ? slice.charCodeAt(slice.length - 1) : codes.eof\r\n\r\n    if (\r\n      previous === codes.lf ||\r\n      previous === codes.cr ||\r\n      previous === codes.eof\r\n    ) {\r\n      return\r\n    }\r\n\r\n    lineEnding()\r\n  }\r\n\r\n  /** @type {CompileContext['encode']} */\r\n  function encode(value) {\r\n    return getData('ignoreEncode') ? value : _encode(value)\r\n  }\r\n\r\n  //\r\n  // Handlers.\r\n  //\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onresumedrop() {\r\n    resume()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistordered(token) {\r\n    tightStack.push(!token._loose)\r\n    lineEndingIfNeeded()\r\n    tag('<ol')\r\n    setData('expectFirstItem', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistunordered(token) {\r\n    tightStack.push(!token._loose)\r\n    lineEndingIfNeeded()\r\n    tag('<ul')\r\n    setData('expectFirstItem', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistitemvalue(token) {\r\n    if (getData('expectFirstItem')) {\r\n      const value = Number.parseInt(\r\n        this.sliceSerialize(token),\r\n        constants.numericBaseDecimal\r\n      )\r\n\r\n      if (value !== 1) {\r\n        tag(' start=\"' + encode(String(value)) + '\"')\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onenterlistitemmarker() {\r\n    if (getData('expectFirstItem')) {\r\n      tag('>')\r\n    } else {\r\n      onexitlistitem()\r\n    }\r\n\r\n    lineEndingIfNeeded()\r\n    tag('<li>')\r\n    setData('expectFirstItem')\r\n    // “Hack” to prevent a line ending from showing up if the item is empty.\r\n    setData('lastWasTag')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onexitlistordered() {\r\n    onexitlistitem()\r\n    tightStack.pop()\r\n    lineEnding()\r\n    tag('</ol>')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onexitlistunordered() {\r\n    onexitlistitem()\r\n    tightStack.pop()\r\n    lineEnding()\r\n    tag('</ul>')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onexitlistitem() {\r\n    if (getData('lastWasTag') && !getData('slurpAllLineEndings')) {\r\n      lineEndingIfNeeded()\r\n    }\r\n\r\n    tag('</li>')\r\n    setData('slurpAllLineEndings')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterblockquote() {\r\n    tightStack.push(false)\r\n    lineEndingIfNeeded()\r\n    tag('<blockquote>')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitblockquote() {\r\n    tightStack.pop()\r\n    lineEndingIfNeeded()\r\n    tag('</blockquote>')\r\n    setData('slurpAllLineEndings')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterparagraph() {\r\n    if (!tightStack[tightStack.length - 1]) {\r\n      lineEndingIfNeeded()\r\n      tag('<p>')\r\n    }\r\n\r\n    setData('slurpAllLineEndings')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitparagraph() {\r\n    if (tightStack[tightStack.length - 1]) {\r\n      setData('slurpAllLineEndings', true)\r\n    } else {\r\n      tag('</p>')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onentercodefenced() {\r\n    lineEndingIfNeeded()\r\n    tag('<pre><code')\r\n    setData('fencesCount', 0)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfenceinfo() {\r\n    const value = resume()\r\n    tag(' class=\"language-' + value + '\"')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfence() {\r\n    const count = getData('fencesCount') || 0\r\n\r\n    if (!count) {\r\n      tag('>')\r\n      setData('slurpOneLineEnding', true)\r\n    }\r\n\r\n    setData('fencesCount', count + 1)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onentercodeindented() {\r\n    lineEndingIfNeeded()\r\n    tag('<pre><code>')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitflowcode() {\r\n    const count = getData('fencesCount')\r\n\r\n    // One special case is if we are inside a container, and the fenced code was\r\n    // not closed (meaning it runs to the end).\r\n    // In that case, the following line ending, is considered *outside* the\r\n    // fenced code and block quote by micromark, but CM wants to treat that\r\n    // ending as part of the code.\r\n    if (\r\n      count !== undefined &&\r\n      count < 2 &&\r\n      data.tightStack.length > 0 &&\r\n      !getData('lastWasTag')\r\n    ) {\r\n      lineEnding()\r\n    }\r\n\r\n    // But in most cases, it’s simpler: when we’ve seen some data, emit an extra\r\n    // line ending when needed.\r\n    if (getData('flowCodeSeenData')) {\r\n      lineEndingIfNeeded()\r\n    }\r\n\r\n    tag('</code></pre>')\r\n    if (count !== undefined && count < 2) lineEndingIfNeeded()\r\n    setData('flowCodeSeenData')\r\n    setData('fencesCount')\r\n    setData('slurpOneLineEnding')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterimage() {\r\n    mediaStack.push({image: true})\r\n    tags = undefined // Disallow tags.\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlink() {\r\n    mediaStack.push({})\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitlabeltext(token) {\r\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitlabel() {\r\n    mediaStack[mediaStack.length - 1].label = resume()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitreferencestring(token) {\r\n    mediaStack[mediaStack.length - 1].referenceId = this.sliceSerialize(token)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterresource() {\r\n    buffer() // We can have line endings in the resource, ignore them.\r\n    mediaStack[mediaStack.length - 1].destination = ''\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterresourcedestinationstring() {\r\n    buffer()\r\n    // Ignore encoding the result, as we’ll first percent encode the url and\r\n    // encode manually after.\r\n    setData('ignoreEncode', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitresourcedestinationstring() {\r\n    mediaStack[mediaStack.length - 1].destination = resume()\r\n    setData('ignoreEncode')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitresourcetitlestring() {\r\n    mediaStack[mediaStack.length - 1].title = resume()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitmedia() {\r\n    let index = mediaStack.length - 1 // Skip current.\r\n    const media = mediaStack[index]\r\n    const id = media.referenceId || media.labelId\r\n    assert(id !== undefined, 'media should have `referenceId` or `labelId`')\r\n    assert(media.label !== undefined, 'media should have `label`')\r\n    const context =\r\n      media.destination === undefined\r\n        ? definitions[normalizeIdentifier(id)]\r\n        : media\r\n\r\n    tags = true\r\n\r\n    while (index--) {\r\n      if (mediaStack[index].image) {\r\n        tags = undefined\r\n        break\r\n      }\r\n    }\r\n\r\n    if (media.image) {\r\n      tag(\r\n        '<img src=\"' +\r\n          sanitizeUri(\r\n            context.destination,\r\n            settings.allowDangerousProtocol ? undefined : protocolSrc\r\n          ) +\r\n          '\" alt=\"'\r\n      )\r\n      raw(media.label)\r\n      tag('\"')\r\n    } else {\r\n      tag(\r\n        '<a href=\"' +\r\n          sanitizeUri(\r\n            context.destination,\r\n            settings.allowDangerousProtocol ? undefined : protocolHref\r\n          ) +\r\n          '\"'\r\n      )\r\n    }\r\n\r\n    tag(context.title ? ' title=\"' + context.title + '\"' : '')\r\n\r\n    if (media.image) {\r\n      tag(' />')\r\n    } else {\r\n      tag('>')\r\n      raw(media.label)\r\n      tag('</a>')\r\n    }\r\n\r\n    mediaStack.pop()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterdefinition() {\r\n    buffer()\r\n    mediaStack.push({})\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitionlabelstring(token) {\r\n    // Discard label, use the source content instead.\r\n    resume()\r\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterdefinitiondestinationstring() {\r\n    buffer()\r\n    setData('ignoreEncode', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitiondestinationstring() {\r\n    mediaStack[mediaStack.length - 1].destination = resume()\r\n    setData('ignoreEncode')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitiontitlestring() {\r\n    mediaStack[mediaStack.length - 1].title = resume()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinition() {\r\n    const media = mediaStack[mediaStack.length - 1]\r\n    assert(media.labelId !== undefined, 'media should have `labelId`')\r\n    const id = normalizeIdentifier(media.labelId)\r\n\r\n    resume()\r\n\r\n    if (!hasOwnProperty.call(definitions, id)) {\r\n      definitions[id] = mediaStack[mediaStack.length - 1]\r\n    }\r\n\r\n    mediaStack.pop()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onentercontent() {\r\n    setData('slurpAllLineEndings', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitatxheadingsequence(token) {\r\n    // Exit for further sequences.\r\n    if (getData('headingRank')) return\r\n    setData('headingRank', this.sliceSerialize(token).length)\r\n    lineEndingIfNeeded()\r\n    tag('<h' + getData('headingRank') + '>')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onentersetextheading() {\r\n    buffer()\r\n    setData('slurpAllLineEndings')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheadingtext() {\r\n    setData('slurpAllLineEndings', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitatxheading() {\r\n    tag('</h' + getData('headingRank') + '>')\r\n    setData('headingRank')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheadinglinesequence(token) {\r\n    setData(\r\n      'headingRank',\r\n      this.sliceSerialize(token).charCodeAt(0) === codes.equalsTo ? 1 : 2\r\n    )\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheading() {\r\n    const value = resume()\r\n    lineEndingIfNeeded()\r\n    tag('<h' + getData('headingRank') + '>')\r\n    raw(value)\r\n    tag('</h' + getData('headingRank') + '>')\r\n    setData('slurpAllLineEndings')\r\n    setData('headingRank')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdata(token) {\r\n    raw(encode(this.sliceSerialize(token)))\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitlineending(token) {\r\n    if (getData('slurpAllLineEndings')) {\r\n      return\r\n    }\r\n\r\n    if (getData('slurpOneLineEnding')) {\r\n      setData('slurpOneLineEnding')\r\n      return\r\n    }\r\n\r\n    if (getData('inCodeText')) {\r\n      raw(' ')\r\n      return\r\n    }\r\n\r\n    raw(encode(this.sliceSerialize(token)))\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodeflowvalue(token) {\r\n    raw(encode(this.sliceSerialize(token)))\r\n    setData('flowCodeSeenData', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexithardbreak() {\r\n    tag('<br />')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onenterhtmlflow() {\r\n    lineEndingIfNeeded()\r\n    onenterhtml()\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onexithtml() {\r\n    setData('ignoreEncode')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onenterhtml() {\r\n    if (settings.allowDangerousHtml) {\r\n      setData('ignoreEncode', true)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onenteremphasis() {\r\n    tag('<em>')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onenterstrong() {\r\n    tag('<strong>')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onentercodetext() {\r\n    setData('inCodeText', true)\r\n    tag('<code>')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onexitcodetext() {\r\n    setData('inCodeText')\r\n    tag('</code>')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onexitemphasis() {\r\n    tag('</em>')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onexitstrong() {\r\n    tag('</strong>')\r\n  }\r\n\r\n  /**\r\n   * @returns {undefined}\r\n   */\r\n  function onexitthematicbreak() {\r\n    lineEndingIfNeeded()\r\n    tag('<hr />')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @param {Token} token\r\n   * @returns {undefined}\r\n   */\r\n  function onexitcharacterreferencemarker(token) {\r\n    setData('characterReferenceType', token.type)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcharacterreferencevalue(token) {\r\n    let value = this.sliceSerialize(token)\r\n\r\n    // @ts-expect-error `decodeNamedCharacterReference` can return false for\r\n    // invalid named character references, but everything we’ve tokenized is\r\n    // valid.\r\n    value = getData('characterReferenceType')\r\n      ? decodeNumericCharacterReference(\r\n          value,\r\n          getData('characterReferenceType') ===\r\n            types.characterReferenceMarkerNumeric\r\n            ? constants.numericBaseDecimal\r\n            : constants.numericBaseHexadecimal\r\n        )\r\n      : decodeNamedCharacterReference(value)\r\n\r\n    raw(encode(value))\r\n    setData('characterReferenceType')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitautolinkprotocol(token) {\r\n    const uri = this.sliceSerialize(token)\r\n    tag(\r\n      '<a href=\"' +\r\n        sanitizeUri(\r\n          uri,\r\n          settings.allowDangerousProtocol ? undefined : protocolHref\r\n        ) +\r\n        '\">'\r\n    )\r\n    raw(encode(uri))\r\n    tag('</a>')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitautolinkemail(token) {\r\n    const uri = this.sliceSerialize(token)\r\n    tag('<a href=\"' + sanitizeUri('mailto:' + uri) + '\">')\r\n    raw(encode(uri))\r\n    tag('</a>')\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {markdownSpace} from 'micromark-util-character'\r\n\r\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\r\n\r\n/**\r\n * Parse spaces and tabs.\r\n *\r\n * There is no `nok` parameter:\r\n *\r\n * *   spaces in markdown are often optional, in which case this factory can be\r\n *     used and `ok` will be switched to whether spaces were found or not\r\n * *   one line ending or space can be detected with `markdownSpace(code)` right\r\n *     before using `factorySpace`\r\n *\r\n * ###### Examples\r\n *\r\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\r\n * single space.\r\n *\r\n * ```markdown\r\n * ␉\r\n * ␠␠␠␠\r\n * ␉␠\r\n * ```\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {TokenType} type\r\n *   Type (`' \\t'`).\r\n * @param {number | undefined} [max=Infinity]\r\n *   Max (exclusive).\r\n * @returns {State}\r\n *   Start state.\r\n */\r\nexport function factorySpace(effects, ok, type, max) {\r\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\r\n  let size = 0\r\n\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.enter(type)\r\n      return prefix(code)\r\n    }\r\n\r\n    return ok(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function prefix(code) {\r\n    if (markdownSpace(code) && size++ < limit) {\r\n      effects.consume(code)\r\n      return prefix\r\n    }\r\n\r\n    effects.exit(type)\r\n    return ok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {InitialConstruct} */\r\nexport const content = {tokenize: initializeContent}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Initializer}\r\n */\r\nfunction initializeContent(effects) {\r\n  const contentStart = effects.attempt(\r\n    this.parser.constructs.contentInitial,\r\n    afterContentStartConstruct,\r\n    paragraphInitial\r\n  )\r\n  /** @type {Token} */\r\n  let previous\r\n\r\n  return contentStart\r\n\r\n  /** @type {State} */\r\n  function afterContentStartConstruct(code) {\r\n    assert(\r\n      code === codes.eof || markdownLineEnding(code),\r\n      'expected eol or eof'\r\n    )\r\n\r\n    if (code === codes.eof) {\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return factorySpace(effects, contentStart, types.linePrefix)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function paragraphInitial(code) {\r\n    assert(\r\n      code !== codes.eof && !markdownLineEnding(code),\r\n      'expected anything other than a line ending or EOF'\r\n    )\r\n    effects.enter(types.paragraph)\r\n    return lineStart(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function lineStart(code) {\r\n    const token = effects.enter(types.chunkText, {\r\n      contentType: constants.contentTypeText,\r\n      previous\r\n    })\r\n\r\n    if (previous) {\r\n      previous.next = token\r\n    }\r\n\r\n    previous = token\r\n\r\n    return data(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function data(code) {\r\n    if (code === codes.eof) {\r\n      effects.exit(types.chunkText)\r\n      effects.exit(types.paragraph)\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      effects.consume(code)\r\n      effects.exit(types.chunkText)\r\n      return lineStart\r\n    }\r\n\r\n    // Data.\r\n    effects.consume(code)\r\n    return data\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').Point} Point\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\n/**\r\n * @typedef {[Construct, ContainerState]} StackItem\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {splice} from 'micromark-util-chunked'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {InitialConstruct} */\r\nexport const document = {tokenize: initializeDocument}\r\n\r\n/** @type {Construct} */\r\nconst containerConstruct = {tokenize: tokenizeContainer}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Initializer}\r\n */\r\nfunction initializeDocument(effects) {\r\n  const self = this\r\n  /** @type {Array<StackItem>} */\r\n  const stack = []\r\n  let continued = 0\r\n  /** @type {TokenizeContext | undefined} */\r\n  let childFlow\r\n  /** @type {Token | undefined} */\r\n  let childToken\r\n  /** @type {number} */\r\n  let lineStartOffset\r\n\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    // First we iterate through the open blocks, starting with the root\r\n    // document, and descending through last children down to the last open\r\n    // block.\r\n    // Each block imposes a condition that the line must satisfy if the block is\r\n    // to remain open.\r\n    // For example, a block quote requires a `>` character.\r\n    // A paragraph requires a non-blank line.\r\n    // In this phase we may match all or just some of the open blocks.\r\n    // But we cannot close unmatched blocks yet, because we may have a lazy\r\n    // continuation line.\r\n    if (continued < stack.length) {\r\n      const item = stack[continued]\r\n      self.containerState = item[1]\r\n      assert(\r\n        item[0].continuation,\r\n        'expected `continuation` to be defined on container construct'\r\n      )\r\n      return effects.attempt(\r\n        item[0].continuation,\r\n        documentContinue,\r\n        checkNewContainers\r\n      )(code)\r\n    }\r\n\r\n    // Done.\r\n    return checkNewContainers(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function documentContinue(code) {\r\n    assert(\r\n      self.containerState,\r\n      'expected `containerState` to be defined after continuation'\r\n    )\r\n\r\n    continued++\r\n\r\n    // Note: this field is called `_closeFlow` but it also closes containers.\r\n    // Perhaps a good idea to rename it but it’s already used in the wild by\r\n    // extensions.\r\n    if (self.containerState._closeFlow) {\r\n      self.containerState._closeFlow = undefined\r\n\r\n      if (childFlow) {\r\n        closeFlow()\r\n      }\r\n\r\n      // Note: this algorithm for moving events around is similar to the\r\n      // algorithm when dealing with lazy lines in `writeToChild`.\r\n      const indexBeforeExits = self.events.length\r\n      let indexBeforeFlow = indexBeforeExits\r\n      /** @type {Point | undefined} */\r\n      let point\r\n\r\n      // Find the flow chunk.\r\n      while (indexBeforeFlow--) {\r\n        if (\r\n          self.events[indexBeforeFlow][0] === 'exit' &&\r\n          self.events[indexBeforeFlow][1].type === types.chunkFlow\r\n        ) {\r\n          point = self.events[indexBeforeFlow][1].end\r\n          break\r\n        }\r\n      }\r\n\r\n      assert(point, 'could not find previous flow chunk')\r\n\r\n      exitContainers(continued)\r\n\r\n      // Fix positions.\r\n      let index = indexBeforeExits\r\n\r\n      while (index < self.events.length) {\r\n        self.events[index][1].end = Object.assign({}, point)\r\n        index++\r\n      }\r\n\r\n      // Inject the exits earlier (they’re still also at the end).\r\n      splice(\r\n        self.events,\r\n        indexBeforeFlow + 1,\r\n        0,\r\n        self.events.slice(indexBeforeExits)\r\n      )\r\n\r\n      // Discard the duplicate exits.\r\n      self.events.length = index\r\n\r\n      return checkNewContainers(code)\r\n    }\r\n\r\n    return start(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function checkNewContainers(code) {\r\n    // Next, after consuming the continuation markers for existing blocks, we\r\n    // look for new block starts (e.g. `>` for a block quote).\r\n    // If we encounter a new block start, we close any blocks unmatched in\r\n    // step 1 before creating the new block as a child of the last matched\r\n    // block.\r\n    if (continued === stack.length) {\r\n      // No need to `check` whether there’s a container, of `exitContainers`\r\n      // would be moot.\r\n      // We can instead immediately `attempt` to parse one.\r\n      if (!childFlow) {\r\n        return documentContinued(code)\r\n      }\r\n\r\n      // If we have concrete content, such as block HTML or fenced code,\r\n      // we can’t have containers “pierce” into them, so we can immediately\r\n      // start.\r\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\r\n        return flowStart(code)\r\n      }\r\n\r\n      // If we do have flow, it could still be a blank line,\r\n      // but we’d be interrupting it w/ a new container if there’s a current\r\n      // construct.\r\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\r\n      // needed in micromark-extension-gfm-table@1.0.6).\r\n      self.interrupt = Boolean(\r\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\r\n      )\r\n    }\r\n\r\n    // Check if there is a new container.\r\n    self.containerState = {}\r\n    return effects.check(\r\n      containerConstruct,\r\n      thereIsANewContainer,\r\n      thereIsNoNewContainer\r\n    )(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function thereIsANewContainer(code) {\r\n    if (childFlow) closeFlow()\r\n    exitContainers(continued)\r\n    return documentContinued(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function thereIsNoNewContainer(code) {\r\n    self.parser.lazy[self.now().line] = continued !== stack.length\r\n    lineStartOffset = self.now().offset\r\n    return flowStart(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function documentContinued(code) {\r\n    // Try new containers.\r\n    self.containerState = {}\r\n    return effects.attempt(\r\n      containerConstruct,\r\n      containerContinue,\r\n      flowStart\r\n    )(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function containerContinue(code) {\r\n    assert(\r\n      self.currentConstruct,\r\n      'expected `currentConstruct` to be defined on tokenizer'\r\n    )\r\n    assert(\r\n      self.containerState,\r\n      'expected `containerState` to be defined on tokenizer'\r\n    )\r\n    continued++\r\n    stack.push([self.currentConstruct, self.containerState])\r\n    // Try another.\r\n    return documentContinued(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function flowStart(code) {\r\n    if (code === codes.eof) {\r\n      if (childFlow) closeFlow()\r\n      exitContainers(0)\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    childFlow = childFlow || self.parser.flow(self.now())\r\n    effects.enter(types.chunkFlow, {\r\n      contentType: constants.contentTypeFlow,\r\n      previous: childToken,\r\n      _tokenizer: childFlow\r\n    })\r\n\r\n    return flowContinue(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function flowContinue(code) {\r\n    if (code === codes.eof) {\r\n      writeToChild(effects.exit(types.chunkFlow), true)\r\n      exitContainers(0)\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      effects.consume(code)\r\n      writeToChild(effects.exit(types.chunkFlow))\r\n      // Get ready for the next line.\r\n      continued = 0\r\n      self.interrupt = undefined\r\n      return start\r\n    }\r\n\r\n    effects.consume(code)\r\n    return flowContinue\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   * @param {boolean | undefined} [eof]\r\n   * @returns {undefined}\r\n   */\r\n  function writeToChild(token, eof) {\r\n    assert(childFlow, 'expected `childFlow` to be defined when continuing')\r\n    const stream = self.sliceStream(token)\r\n    if (eof) stream.push(null)\r\n    token.previous = childToken\r\n    if (childToken) childToken.next = token\r\n    childToken = token\r\n    childFlow.defineSkip(token.start)\r\n    childFlow.write(stream)\r\n\r\n    // Alright, so we just added a lazy line:\r\n    //\r\n    // ```markdown\r\n    // > a\r\n    // b.\r\n    //\r\n    // Or:\r\n    //\r\n    // > ~~~c\r\n    // d\r\n    //\r\n    // Or:\r\n    //\r\n    // > | e |\r\n    // f\r\n    // ```\r\n    //\r\n    // The construct in the second example (fenced code) does not accept lazy\r\n    // lines, so it marked itself as done at the end of its first line, and\r\n    // then the content construct parses `d`.\r\n    // Most constructs in markdown match on the first line: if the first line\r\n    // forms a construct, a non-lazy line can’t “unmake” it.\r\n    //\r\n    // The construct in the third example is potentially a GFM table, and\r\n    // those are *weird*.\r\n    // It *could* be a table, from the first line, if the following line\r\n    // matches a condition.\r\n    // In this case, that second line is lazy, which “unmakes” the first line\r\n    // and turns the whole into one content block.\r\n    //\r\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\r\n    // whether the lazy line started a new flow block.\r\n    // If it did, we exit the current containers between the two flow blocks.\r\n    if (self.parser.lazy[token.start.line]) {\r\n      let index = childFlow.events.length\r\n\r\n      while (index--) {\r\n        if (\r\n          // The token starts before the line ending…\r\n          childFlow.events[index][1].start.offset < lineStartOffset &&\r\n          // …and either is not ended yet…\r\n          (!childFlow.events[index][1].end ||\r\n            // …or ends after it.\r\n            childFlow.events[index][1].end.offset > lineStartOffset)\r\n        ) {\r\n          // Exit: there’s still something open, which means it’s a lazy line\r\n          // part of something.\r\n          return\r\n        }\r\n      }\r\n\r\n      // Note: this algorithm for moving events around is similar to the\r\n      // algorithm when closing flow in `documentContinue`.\r\n      const indexBeforeExits = self.events.length\r\n      let indexBeforeFlow = indexBeforeExits\r\n      /** @type {boolean | undefined} */\r\n      let seen\r\n      /** @type {Point | undefined} */\r\n      let point\r\n\r\n      // Find the previous chunk (the one before the lazy line).\r\n      while (indexBeforeFlow--) {\r\n        if (\r\n          self.events[indexBeforeFlow][0] === 'exit' &&\r\n          self.events[indexBeforeFlow][1].type === types.chunkFlow\r\n        ) {\r\n          if (seen) {\r\n            point = self.events[indexBeforeFlow][1].end\r\n            break\r\n          }\r\n\r\n          seen = true\r\n        }\r\n      }\r\n\r\n      assert(point, 'could not find previous flow chunk')\r\n\r\n      exitContainers(continued)\r\n\r\n      // Fix positions.\r\n      index = indexBeforeExits\r\n\r\n      while (index < self.events.length) {\r\n        self.events[index][1].end = Object.assign({}, point)\r\n        index++\r\n      }\r\n\r\n      // Inject the exits earlier (they’re still also at the end).\r\n      splice(\r\n        self.events,\r\n        indexBeforeFlow + 1,\r\n        0,\r\n        self.events.slice(indexBeforeExits)\r\n      )\r\n\r\n      // Discard the duplicate exits.\r\n      self.events.length = index\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} size\r\n   * @returns {undefined}\r\n   */\r\n  function exitContainers(size) {\r\n    let index = stack.length\r\n\r\n    // Exit open containers.\r\n    while (index-- > size) {\r\n      const entry = stack[index]\r\n      self.containerState = entry[1]\r\n      assert(\r\n        entry[0].exit,\r\n        'expected `exit` to be defined on container construct'\r\n      )\r\n      entry[0].exit.call(self, effects)\r\n    }\r\n\r\n    stack.length = size\r\n  }\r\n\r\n  function closeFlow() {\r\n    assert(\r\n      self.containerState,\r\n      'expected `containerState` to be defined when closing flow'\r\n    )\r\n    assert(childFlow, 'expected `childFlow` to be defined when closing it')\r\n    childFlow.write([codes.eof])\r\n    childToken = undefined\r\n    childFlow = undefined\r\n    self.containerState._closeFlow = undefined\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeContainer(effects, ok, nok) {\r\n  // Always populated by defaults.\r\n  assert(\r\n    this.parser.constructs.disable.null,\r\n    'expected `disable.null` to be populated'\r\n  )\r\n  return factorySpace(\r\n    effects,\r\n    effects.attempt(this.parser.constructs.document, ok, nok),\r\n    types.linePrefix,\r\n    this.parser.constructs.disable.null.includes('codeIndented')\r\n      ? undefined\r\n      : constants.tabSize\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n */\r\n\r\nimport {\r\n  markdownLineEndingOrSpace,\r\n  unicodePunctuation,\r\n  unicodeWhitespace\r\n} from 'micromark-util-character'\r\nimport {codes, constants} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Classify whether a code represents whitespace, punctuation, or something\r\n * else.\r\n *\r\n * Used for attention (emphasis, strong), whose sequences can open or close\r\n * based on the class of surrounding characters.\r\n *\r\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\r\n *\r\n * @param {Code} code\r\n *   Code.\r\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\r\n *   Group.\r\n */\r\nexport function classifyCharacter(code) {\r\n  if (\r\n    code === codes.eof ||\r\n    markdownLineEndingOrSpace(code) ||\r\n    unicodeWhitespace(code)\r\n  ) {\r\n    return constants.characterGroupWhitespace\r\n  }\r\n\r\n  if (unicodePunctuation(code)) {\r\n    return constants.characterGroupPunctuation\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\n/**\r\n * Call all `resolveAll`s.\r\n *\r\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\r\n *   List of constructs, optionally with `resolveAll`s.\r\n * @param {Array<Event>} events\r\n *   List of events.\r\n * @param {TokenizeContext} context\r\n *   Context used by `tokenize`.\r\n * @returns {Array<Event>}\r\n *   Changed events.\r\n */\r\nexport function resolveAll(constructs, events, context) {\r\n  /** @type {Array<Resolver>} */\r\n  const called = []\r\n  let index = -1\r\n\r\n  while (++index < constructs.length) {\r\n    const resolve = constructs[index].resolveAll\r\n\r\n    if (resolve && !called.includes(resolve)) {\r\n      events = resolve(events, context)\r\n      called.push(resolve)\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Point} Point\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {push, splice} from 'micromark-util-chunked'\r\nimport {classifyCharacter} from 'micromark-util-classify-character'\r\nimport {resolveAll} from 'micromark-util-resolve-all'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const attention = {\r\n  name: 'attention',\r\n  tokenize: tokenizeAttention,\r\n  resolveAll: resolveAllAttention\r\n}\r\n\r\n/**\r\n * Take all events and resolve attention to emphasis or strong.\r\n *\r\n * @type {Resolver}\r\n */\r\n// eslint-disable-next-line complexity\r\nfunction resolveAllAttention(events, context) {\r\n  let index = -1\r\n  /** @type {number} */\r\n  let open\r\n  /** @type {Token} */\r\n  let group\r\n  /** @type {Token} */\r\n  let text\r\n  /** @type {Token} */\r\n  let openingSequence\r\n  /** @type {Token} */\r\n  let closingSequence\r\n  /** @type {number} */\r\n  let use\r\n  /** @type {Array<Event>} */\r\n  let nextEvents\r\n  /** @type {number} */\r\n  let offset\r\n\r\n  // Walk through all events.\r\n  //\r\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\r\n  // a bottleneck for malicious stuff.\r\n  while (++index < events.length) {\r\n    // Find a token that can close.\r\n    if (\r\n      events[index][0] === 'enter' &&\r\n      events[index][1].type === 'attentionSequence' &&\r\n      events[index][1]._close\r\n    ) {\r\n      open = index\r\n\r\n      // Now walk back to find an opener.\r\n      while (open--) {\r\n        // Find a token that can open the closer.\r\n        if (\r\n          events[open][0] === 'exit' &&\r\n          events[open][1].type === 'attentionSequence' &&\r\n          events[open][1]._open &&\r\n          // If the markers are the same:\r\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\r\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\r\n        ) {\r\n          // If the opening can close or the closing can open,\r\n          // and the close size *is not* a multiple of three,\r\n          // but the sum of the opening and closing size *is* multiple of three,\r\n          // then don’t match.\r\n          if (\r\n            (events[open][1]._close || events[index][1]._open) &&\r\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\r\n            !(\r\n              (events[open][1].end.offset -\r\n                events[open][1].start.offset +\r\n                events[index][1].end.offset -\r\n                events[index][1].start.offset) %\r\n              3\r\n            )\r\n          ) {\r\n            continue\r\n          }\r\n\r\n          // Number of markers to use from the sequence.\r\n          use =\r\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\r\n            events[index][1].end.offset - events[index][1].start.offset > 1\r\n              ? 2\r\n              : 1\r\n\r\n          const start = Object.assign({}, events[open][1].end)\r\n          const end = Object.assign({}, events[index][1].start)\r\n          movePoint(start, -use)\r\n          movePoint(end, use)\r\n\r\n          openingSequence = {\r\n            type: use > 1 ? types.strongSequence : types.emphasisSequence,\r\n            start,\r\n            end: Object.assign({}, events[open][1].end)\r\n          }\r\n          closingSequence = {\r\n            type: use > 1 ? types.strongSequence : types.emphasisSequence,\r\n            start: Object.assign({}, events[index][1].start),\r\n            end\r\n          }\r\n          text = {\r\n            type: use > 1 ? types.strongText : types.emphasisText,\r\n            start: Object.assign({}, events[open][1].end),\r\n            end: Object.assign({}, events[index][1].start)\r\n          }\r\n          group = {\r\n            type: use > 1 ? types.strong : types.emphasis,\r\n            start: Object.assign({}, openingSequence.start),\r\n            end: Object.assign({}, closingSequence.end)\r\n          }\r\n\r\n          events[open][1].end = Object.assign({}, openingSequence.start)\r\n          events[index][1].start = Object.assign({}, closingSequence.end)\r\n\r\n          nextEvents = []\r\n\r\n          // If there are more markers in the opening, add them before.\r\n          if (events[open][1].end.offset - events[open][1].start.offset) {\r\n            nextEvents = push(nextEvents, [\r\n              ['enter', events[open][1], context],\r\n              ['exit', events[open][1], context]\r\n            ])\r\n          }\r\n\r\n          // Opening.\r\n          nextEvents = push(nextEvents, [\r\n            ['enter', group, context],\r\n            ['enter', openingSequence, context],\r\n            ['exit', openingSequence, context],\r\n            ['enter', text, context]\r\n          ])\r\n\r\n          // Always populated by defaults.\r\n          assert(\r\n            context.parser.constructs.insideSpan.null,\r\n            'expected `insideSpan` to be populated'\r\n          )\r\n\r\n          // Between.\r\n          nextEvents = push(\r\n            nextEvents,\r\n            resolveAll(\r\n              context.parser.constructs.insideSpan.null,\r\n              events.slice(open + 1, index),\r\n              context\r\n            )\r\n          )\r\n\r\n          // Closing.\r\n          nextEvents = push(nextEvents, [\r\n            ['exit', text, context],\r\n            ['enter', closingSequence, context],\r\n            ['exit', closingSequence, context],\r\n            ['exit', group, context]\r\n          ])\r\n\r\n          // If there are more markers in the closing, add them after.\r\n          if (events[index][1].end.offset - events[index][1].start.offset) {\r\n            offset = 2\r\n            nextEvents = push(nextEvents, [\r\n              ['enter', events[index][1], context],\r\n              ['exit', events[index][1], context]\r\n            ])\r\n          } else {\r\n            offset = 0\r\n          }\r\n\r\n          splice(events, open - 1, index - open + 3, nextEvents)\r\n\r\n          index = open + nextEvents.length - offset - 2\r\n          break\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Remove remaining sequences.\r\n  index = -1\r\n\r\n  while (++index < events.length) {\r\n    if (events[index][1].type === 'attentionSequence') {\r\n      events[index][1].type = 'data'\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeAttention(effects, ok) {\r\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\r\n  const previous = this.previous\r\n  const before = classifyCharacter(previous)\r\n\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n\r\n  return start\r\n\r\n  /**\r\n   * Before a sequence.\r\n   *\r\n   * ```markdown\r\n   * > | **\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(\r\n      code === codes.asterisk || code === codes.underscore,\r\n      'expected asterisk or underscore'\r\n    )\r\n    marker = code\r\n    effects.enter('attentionSequence')\r\n    return inside(code)\r\n  }\r\n\r\n  /**\r\n   * In a sequence.\r\n   *\r\n   * ```markdown\r\n   * > | **\r\n   *     ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === marker) {\r\n      effects.consume(code)\r\n      return inside\r\n    }\r\n\r\n    const token = effects.exit('attentionSequence')\r\n\r\n    // To do: next major: move this to resolver, just like `markdown-rs`.\r\n    const after = classifyCharacter(code)\r\n\r\n    // Always populated by defaults.\r\n    assert(attentionMarkers, 'expected `attentionMarkers` to be populated')\r\n\r\n    const open =\r\n      !after ||\r\n      (after === constants.characterGroupPunctuation && before) ||\r\n      attentionMarkers.includes(code)\r\n    const close =\r\n      !before ||\r\n      (before === constants.characterGroupPunctuation && after) ||\r\n      attentionMarkers.includes(previous)\r\n\r\n    token._open = Boolean(\r\n      marker === codes.asterisk ? open : open && (before || !close)\r\n    )\r\n    token._close = Boolean(\r\n      marker === codes.asterisk ? close : close && (after || !open)\r\n    )\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * Move a point a bit.\r\n *\r\n * Note: `move` only works inside lines! It’s not possible to move past other\r\n * chunks (replacement characters, tabs, or line endings).\r\n *\r\n * @param {Point} point\r\n * @param {number} offset\r\n * @returns {undefined}\r\n */\r\nfunction movePoint(point, offset) {\r\n  point.column += offset\r\n  point.offset += offset\r\n  point._bufferIndex += offset\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {\r\n  asciiAlpha,\r\n  asciiAlphanumeric,\r\n  asciiAtext,\r\n  asciiControl\r\n} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const autolink = {name: 'autolink', tokenize: tokenizeAutolink}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeAutolink(effects, ok, nok) {\r\n  let size = 0\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of an autolink.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *      ^\r\n   * > | a<user@example.com>b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.lessThan, 'expected `<`')\r\n    effects.enter(types.autolink)\r\n    effects.enter(types.autolinkMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.autolinkMarker)\r\n    effects.enter(types.autolinkProtocol)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `<`, at protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *       ^\r\n   * > | a<user@example.com>b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return schemeOrEmailAtext\r\n    }\r\n\r\n    if (code === codes.atSign) {\r\n      return nok(code)\r\n    }\r\n\r\n    return emailAtext(code)\r\n  }\r\n\r\n  /**\r\n   * At second byte of protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *        ^\r\n   * > | a<user@example.com>b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function schemeOrEmailAtext(code) {\r\n    // ASCII alphanumeric and `+`, `-`, and `.`.\r\n    if (\r\n      code === codes.plusSign ||\r\n      code === codes.dash ||\r\n      code === codes.dot ||\r\n      asciiAlphanumeric(code)\r\n    ) {\r\n      // Count the previous alphabetical from `open` too.\r\n      size = 1\r\n      return schemeInsideOrEmailAtext(code)\r\n    }\r\n\r\n    return emailAtext(code)\r\n  }\r\n\r\n  /**\r\n   * In ambiguous protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *        ^\r\n   * > | a<user@example.com>b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function schemeInsideOrEmailAtext(code) {\r\n    if (code === codes.colon) {\r\n      effects.consume(code)\r\n      size = 0\r\n      return urlInside\r\n    }\r\n\r\n    // ASCII alphanumeric and `+`, `-`, and `.`.\r\n    if (\r\n      (code === codes.plusSign ||\r\n        code === codes.dash ||\r\n        code === codes.dot ||\r\n        asciiAlphanumeric(code)) &&\r\n      size++ < constants.autolinkSchemeSizeMax\r\n    ) {\r\n      effects.consume(code)\r\n      return schemeInsideOrEmailAtext\r\n    }\r\n\r\n    size = 0\r\n    return emailAtext(code)\r\n  }\r\n\r\n  /**\r\n   * After protocol, in URL.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function urlInside(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.exit(types.autolinkProtocol)\r\n      effects.enter(types.autolinkMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.autolinkMarker)\r\n      effects.exit(types.autolink)\r\n      return ok\r\n    }\r\n\r\n    // ASCII control, space, or `<`.\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.space ||\r\n      code === codes.lessThan ||\r\n      asciiControl(code)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return urlInside\r\n  }\r\n\r\n  /**\r\n   * In email atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailAtext(code) {\r\n    if (code === codes.atSign) {\r\n      effects.consume(code)\r\n      return emailAtSignOrDot\r\n    }\r\n\r\n    if (asciiAtext(code)) {\r\n      effects.consume(code)\r\n      return emailAtext\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In label, after at-sign or dot.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *                 ^       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailAtSignOrDot(code) {\r\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\r\n  }\r\n\r\n  /**\r\n   * In label, where `.` and `>` are allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *                   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailLabel(code) {\r\n    if (code === codes.dot) {\r\n      effects.consume(code)\r\n      size = 0\r\n      return emailAtSignOrDot\r\n    }\r\n\r\n    if (code === codes.greaterThan) {\r\n      // Exit, then change the token type.\r\n      effects.exit(types.autolinkProtocol).type = types.autolinkEmail\r\n      effects.enter(types.autolinkMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.autolinkMarker)\r\n      effects.exit(types.autolink)\r\n      return ok\r\n    }\r\n\r\n    return emailValue(code)\r\n  }\r\n\r\n  /**\r\n   * In label, where `.` and `>` are *not* allowed.\r\n   *\r\n   * Though, this is also used in `emailLabel` to parse other values.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@ex-ample.com>b\r\n   *                    ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailValue(code) {\r\n    // ASCII alphanumeric or `-`.\r\n    if (\r\n      (code === codes.dash || asciiAlphanumeric(code)) &&\r\n      size++ < constants.autolinkDomainSizeMax\r\n    ) {\r\n      const next = code === codes.dash ? emailValue : emailLabel\r\n      effects.consume(code)\r\n      return next\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes, types} from 'micromark-util-symbol'\r\n\r\n/** @type {Construct} */\r\nexport const blankLine = {tokenize: tokenizeBlankLine, partial: true}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlankLine(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Start of blank line.\r\n   *\r\n   * > 👉 **Note**: `␠` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ␠␠␊\r\n   *     ^\r\n   * > | ␊\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, after, types.linePrefix)(code)\r\n      : after(code)\r\n  }\r\n\r\n  /**\r\n   * At eof/eol, after optional whitespace.\r\n   *\r\n   * > 👉 **Note**: `␠` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ␠␠␊\r\n   *       ^\r\n   * > | ␊\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    return code === codes.eof || markdownLineEnding(code) ? ok(code) : nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Exiter} Exiter\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownSpace} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const blockQuote = {\r\n  name: 'blockQuote',\r\n  tokenize: tokenizeBlockQuoteStart,\r\n  continuation: {tokenize: tokenizeBlockQuoteContinuation},\r\n  exit\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of block quote.\r\n   *\r\n   * ```markdown\r\n   * > | > a\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === codes.greaterThan) {\r\n      const state = self.containerState\r\n\r\n      assert(state, 'expected `containerState` to be defined in container')\r\n\r\n      if (!state.open) {\r\n        effects.enter(types.blockQuote, {_container: true})\r\n        state.open = true\r\n      }\r\n\r\n      effects.enter(types.blockQuotePrefix)\r\n      effects.enter(types.blockQuoteMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.blockQuoteMarker)\r\n      return after\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `>`, before optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | > a\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.enter(types.blockQuotePrefixWhitespace)\r\n      effects.consume(code)\r\n      effects.exit(types.blockQuotePrefixWhitespace)\r\n      effects.exit(types.blockQuotePrefix)\r\n      return ok\r\n    }\r\n\r\n    effects.exit(types.blockQuotePrefix)\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * Start of block quote continuation.\r\n *\r\n * ```markdown\r\n *   | > a\r\n * > | > b\r\n *     ^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return contStart\r\n\r\n  /**\r\n   * Start of block quote continuation.\r\n   *\r\n   * Also used to parse the first block quote opening.\r\n   *\r\n   * ```markdown\r\n   *   | > a\r\n   * > | > b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contStart(code) {\r\n    if (markdownSpace(code)) {\r\n      // Always populated by defaults.\r\n      assert(\r\n        self.parser.constructs.disable.null,\r\n        'expected `disable.null` to be populated'\r\n      )\r\n\r\n      return factorySpace(\r\n        effects,\r\n        contBefore,\r\n        types.linePrefix,\r\n        self.parser.constructs.disable.null.includes('codeIndented')\r\n          ? undefined\r\n          : constants.tabSize\r\n      )(code)\r\n    }\r\n\r\n    return contBefore(code)\r\n  }\r\n\r\n  /**\r\n   * At `>`, after optional whitespace.\r\n   *\r\n   * Also used to parse the first block quote opening.\r\n   *\r\n   * ```markdown\r\n   *   | > a\r\n   * > | > b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contBefore(code) {\r\n    return effects.attempt(blockQuote, ok, nok)(code)\r\n  }\r\n}\r\n\r\n/** @type {Exiter} */\r\nfunction exit(effects) {\r\n  effects.exit(types.blockQuote)\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {asciiPunctuation} from 'micromark-util-character'\r\nimport {codes, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const characterEscape = {\r\n  name: 'characterEscape',\r\n  tokenize: tokenizeCharacterEscape\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCharacterEscape(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Start of character escape.\r\n   *\r\n   * ```markdown\r\n   * > | a\\*b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.backslash, 'expected `\\\\`')\r\n    effects.enter(types.characterEscape)\r\n    effects.enter(types.escapeMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.escapeMarker)\r\n    return inside\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at punctuation.\r\n   *\r\n   * ```markdown\r\n   * > | a\\*b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    // ASCII punctuation.\r\n    if (asciiPunctuation(code)) {\r\n      effects.enter(types.characterEscapeValue)\r\n      effects.consume(code)\r\n      effects.exit(types.characterEscapeValue)\r\n      effects.exit(types.characterEscape)\r\n      return ok\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\r\nimport {\r\n  asciiAlphanumeric,\r\n  asciiDigit,\r\n  asciiHexDigit\r\n} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const characterReference = {\r\n  name: 'characterReference',\r\n  tokenize: tokenizeCharacterReference\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCharacterReference(effects, ok, nok) {\r\n  const self = this\r\n  let size = 0\r\n  /** @type {number} */\r\n  let max\r\n  /** @type {(code: Code) => boolean} */\r\n  let test\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of character reference.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *      ^\r\n   * > | a&#123;b\r\n   *      ^\r\n   * > | a&#x9;b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.ampersand, 'expected `&`')\r\n    effects.enter(types.characterReference)\r\n    effects.enter(types.characterReferenceMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.characterReferenceMarker)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `&`, at `#` for numeric references or alphanumeric for named\r\n   * references.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *       ^\r\n   * > | a&#123;b\r\n   *       ^\r\n   * > | a&#x9;b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === codes.numberSign) {\r\n      effects.enter(types.characterReferenceMarkerNumeric)\r\n      effects.consume(code)\r\n      effects.exit(types.characterReferenceMarkerNumeric)\r\n      return numeric\r\n    }\r\n\r\n    effects.enter(types.characterReferenceValue)\r\n    max = constants.characterReferenceNamedSizeMax\r\n    test = asciiAlphanumeric\r\n    return value(code)\r\n  }\r\n\r\n  /**\r\n   * After `#`, at `x` for hexadecimals or digit for decimals.\r\n   *\r\n   * ```markdown\r\n   * > | a&#123;b\r\n   *        ^\r\n   * > | a&#x9;b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function numeric(code) {\r\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\r\n      effects.enter(types.characterReferenceMarkerHexadecimal)\r\n      effects.consume(code)\r\n      effects.exit(types.characterReferenceMarkerHexadecimal)\r\n      effects.enter(types.characterReferenceValue)\r\n      max = constants.characterReferenceHexadecimalSizeMax\r\n      test = asciiHexDigit\r\n      return value\r\n    }\r\n\r\n    effects.enter(types.characterReferenceValue)\r\n    max = constants.characterReferenceDecimalSizeMax\r\n    test = asciiDigit\r\n    return value(code)\r\n  }\r\n\r\n  /**\r\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\r\n   *\r\n   * The character reference kind defines what and how many characters are\r\n   * allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *       ^^^\r\n   * > | a&#123;b\r\n   *        ^^^\r\n   * > | a&#x9;b\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function value(code) {\r\n    if (code === codes.semicolon && size) {\r\n      const token = effects.exit(types.characterReferenceValue)\r\n\r\n      if (\r\n        test === asciiAlphanumeric &&\r\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\r\n      ) {\r\n        return nok(code)\r\n      }\r\n\r\n      // To do: `markdown-rs` uses a different name:\r\n      // `CharacterReferenceMarkerSemi`.\r\n      effects.enter(types.characterReferenceMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.characterReferenceMarker)\r\n      effects.exit(types.characterReference)\r\n      return ok\r\n    }\r\n\r\n    if (test(code) && size++ < max) {\r\n      effects.consume(code)\r\n      return value\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nconst nonLazyContinuation = {\r\n  tokenize: tokenizeNonLazyContinuation,\r\n  partial: true\r\n}\r\n\r\n/** @type {Construct} */\r\nexport const codeFenced = {\r\n  name: 'codeFenced',\r\n  tokenize: tokenizeCodeFenced,\r\n  concrete: true\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCodeFenced(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {Construct} */\r\n  const closeStart = {tokenize: tokenizeCloseStart, partial: true}\r\n  let initialPrefix = 0\r\n  let sizeOpen = 0\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of code.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *     ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: parse whitespace like `markdown-rs`.\r\n    return beforeSequenceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In opening fence, after prefix, at sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *     ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function beforeSequenceOpen(code) {\r\n    assert(\r\n      code === codes.graveAccent || code === codes.tilde,\r\n      'expected `` ` `` or `~`'\r\n    )\r\n\r\n    const tail = self.events[self.events.length - 1]\r\n    initialPrefix =\r\n      tail && tail[1].type === types.linePrefix\r\n        ? tail[2].sliceSerialize(tail[1], true).length\r\n        : 0\r\n\r\n    marker = code\r\n    effects.enter(types.codeFenced)\r\n    effects.enter(types.codeFencedFence)\r\n    effects.enter(types.codeFencedFenceSequence)\r\n    return sequenceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In opening fence sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *      ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceOpen(code) {\r\n    if (code === marker) {\r\n      sizeOpen++\r\n      effects.consume(code)\r\n      return sequenceOpen\r\n    }\r\n\r\n    if (sizeOpen < constants.codeFencedSequenceSizeMin) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.exit(types.codeFencedFenceSequence)\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, infoBefore, types.whitespace)(code)\r\n      : infoBefore(code)\r\n  }\r\n\r\n  /**\r\n   * In opening fence, after the sequence (and optional whitespace), before info.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *        ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function infoBefore(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.codeFencedFence)\r\n      return self.interrupt\r\n        ? ok(code)\r\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\r\n    }\r\n\r\n    effects.enter(types.codeFencedFenceInfo)\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return info(code)\r\n  }\r\n\r\n  /**\r\n   * In info.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *        ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function info(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.chunkString)\r\n      effects.exit(types.codeFencedFenceInfo)\r\n      return infoBefore(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.exit(types.chunkString)\r\n      effects.exit(types.codeFencedFenceInfo)\r\n      return factorySpace(effects, metaBefore, types.whitespace)(code)\r\n    }\r\n\r\n    if (code === codes.graveAccent && code === marker) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return info\r\n  }\r\n\r\n  /**\r\n   * In opening fence, after info and whitespace, before meta.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js eval\r\n   *           ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function metaBefore(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      return infoBefore(code)\r\n    }\r\n\r\n    effects.enter(types.codeFencedFenceMeta)\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return meta(code)\r\n  }\r\n\r\n  /**\r\n   * In meta.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js eval\r\n   *           ^\r\n   *   | alert(1)\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function meta(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.chunkString)\r\n      effects.exit(types.codeFencedFenceMeta)\r\n      return infoBefore(code)\r\n    }\r\n\r\n    if (code === codes.graveAccent && code === marker) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return meta\r\n  }\r\n\r\n  /**\r\n   * At eol/eof in code, before a non-lazy closing fence or content.\r\n   *\r\n   * ```markdown\r\n   * > | ~~~js\r\n   *          ^\r\n   * > | alert(1)\r\n   *             ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atNonLazyBreak(code) {\r\n    assert(markdownLineEnding(code), 'expected eol')\r\n    return effects.attempt(closeStart, after, contentBefore)(code)\r\n  }\r\n\r\n  /**\r\n   * Before code content, not a closing fence, at eol.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *             ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentBefore(code) {\r\n    assert(markdownLineEnding(code), 'expected eol')\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return contentStart\r\n  }\r\n\r\n  /**\r\n   * Before code content, not a closing fence.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *     ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentStart(code) {\r\n    return initialPrefix > 0 && markdownSpace(code)\r\n      ? factorySpace(\r\n          effects,\r\n          beforeContentChunk,\r\n          types.linePrefix,\r\n          initialPrefix + 1\r\n        )(code)\r\n      : beforeContentChunk(code)\r\n  }\r\n\r\n  /**\r\n   * Before code content, after optional prefix.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *     ^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function beforeContentChunk(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\r\n    }\r\n\r\n    effects.enter(types.codeFlowValue)\r\n    return contentChunk(code)\r\n  }\r\n\r\n  /**\r\n   * In code content.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   * > | alert(1)\r\n   *     ^^^^^^^^\r\n   *   | ~~~\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentChunk(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.codeFlowValue)\r\n      return beforeContentChunk(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return contentChunk\r\n  }\r\n\r\n  /**\r\n   * After code.\r\n   *\r\n   * ```markdown\r\n   *   | ~~~js\r\n   *   | alert(1)\r\n   * > | ~~~\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    effects.exit(types.codeFenced)\r\n    return ok(code)\r\n  }\r\n\r\n  /**\r\n   * @this {TokenizeContext}\r\n   * @type {Tokenizer}\r\n   */\r\n  function tokenizeCloseStart(effects, ok, nok) {\r\n    let size = 0\r\n\r\n    return startBefore\r\n\r\n    /**\r\n     *\r\n     *\r\n     * @type {State}\r\n     */\r\n    function startBefore(code) {\r\n      assert(markdownLineEnding(code), 'expected eol')\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return start\r\n    }\r\n\r\n    /**\r\n     * Before closing fence, at optional whitespace.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *     ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function start(code) {\r\n      // Always populated by defaults.\r\n      assert(\r\n        self.parser.constructs.disable.null,\r\n        'expected `disable.null` to be populated'\r\n      )\r\n\r\n      // To do: `enter` here or in next state?\r\n      effects.enter(types.codeFencedFence)\r\n      return markdownSpace(code)\r\n        ? factorySpace(\r\n            effects,\r\n            beforeSequenceClose,\r\n            types.linePrefix,\r\n            self.parser.constructs.disable.null.includes('codeIndented')\r\n              ? undefined\r\n              : constants.tabSize\r\n          )(code)\r\n        : beforeSequenceClose(code)\r\n    }\r\n\r\n    /**\r\n     * In closing fence, after optional whitespace, at sequence.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *     ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function beforeSequenceClose(code) {\r\n      if (code === marker) {\r\n        effects.enter(types.codeFencedFenceSequence)\r\n        return sequenceClose(code)\r\n      }\r\n\r\n      return nok(code)\r\n    }\r\n\r\n    /**\r\n     * In closing fence sequence.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *     ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function sequenceClose(code) {\r\n      if (code === marker) {\r\n        size++\r\n        effects.consume(code)\r\n        return sequenceClose\r\n      }\r\n\r\n      if (size >= sizeOpen) {\r\n        effects.exit(types.codeFencedFenceSequence)\r\n        return markdownSpace(code)\r\n          ? factorySpace(effects, sequenceCloseAfter, types.whitespace)(code)\r\n          : sequenceCloseAfter(code)\r\n      }\r\n\r\n      return nok(code)\r\n    }\r\n\r\n    /**\r\n     * After closing fence sequence, after optional whitespace.\r\n     *\r\n     * ```markdown\r\n     *   | ~~~js\r\n     *   | alert(1)\r\n     * > | ~~~\r\n     *        ^\r\n     * ```\r\n     *\r\n     * @type {State}\r\n     */\r\n    function sequenceCloseAfter(code) {\r\n      if (code === codes.eof || markdownLineEnding(code)) {\r\n        effects.exit(types.codeFencedFence)\r\n        return ok(code)\r\n      }\r\n\r\n      return nok(code)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return start\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    assert(markdownLineEnding(code), 'expected eol')\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return lineStart\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineStart(code) {\r\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const codeIndented = {\r\n  name: 'codeIndented',\r\n  tokenize: tokenizeCodeIndented\r\n}\r\n\r\n/** @type {Construct} */\r\nconst furtherStart = {tokenize: tokenizeFurtherStart, partial: true}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCodeIndented(effects, ok, nok) {\r\n  const self = this\r\n  return start\r\n\r\n  /**\r\n   * Start of code (indented).\r\n   *\r\n   * > **Parsing note**: it is not needed to check if this first line is a\r\n   * > filled line (that it has a non-whitespace character), because blank lines\r\n   * > are parsed already, so we never run into that.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: manually check if interrupting like `markdown-rs`.\r\n    assert(markdownSpace(code))\r\n    effects.enter(types.codeIndented)\r\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\r\n    // so that we can drop the next state.\r\n    return factorySpace(\r\n      effects,\r\n      afterPrefix,\r\n      types.linePrefix,\r\n      constants.tabSize + 1\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * At start, after 1 or 4 spaces.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1]\r\n    return tail &&\r\n      tail[1].type === types.linePrefix &&\r\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\r\n      ? atBreak(code)\r\n      : nok(code)\r\n  }\r\n\r\n  /**\r\n   * At a break.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^  ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === codes.eof) {\r\n      return after(code)\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      return effects.attempt(furtherStart, atBreak, after)(code)\r\n    }\r\n\r\n    effects.enter(types.codeFlowValue)\r\n    return inside(code)\r\n  }\r\n\r\n  /**\r\n   * In code content.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.codeFlowValue)\r\n      return atBreak(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return inside\r\n  }\r\n\r\n  /** @type {State} */\r\n  function after(code) {\r\n    effects.exit(types.codeIndented)\r\n    // To do: allow interrupting like `markdown-rs`.\r\n    // Feel free to interrupt.\r\n    // tokenizer.interrupt = false\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeFurtherStart(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return furtherStart\r\n\r\n  /**\r\n   * At eol, trying to parse another indent.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *            ^\r\n   *   |     bbb\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function furtherStart(code) {\r\n    // To do: improve `lazy` / `pierce` handling.\r\n    // If this is a lazy line, it can’t be code.\r\n    if (self.parser.lazy[self.now().line]) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return furtherStart\r\n    }\r\n\r\n    // To do: the code here in `micromark-js` is a bit different from\r\n    // `markdown-rs` because there it can attempt spaces.\r\n    // We can’t yet.\r\n    //\r\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\r\n    // so that we can drop the next state.\r\n    return factorySpace(\r\n      effects,\r\n      afterPrefix,\r\n      types.linePrefix,\r\n      constants.tabSize + 1\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * At start, after 1 or 4 spaces.\r\n   *\r\n   * ```markdown\r\n   * > |     aaa\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1]\r\n    return tail &&\r\n      tail[1].type === types.linePrefix &&\r\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\r\n      ? ok(code)\r\n      : markdownLineEnding(code)\r\n        ? furtherStart(code)\r\n        : nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Previous} Previous\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {codes, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const codeText = {\r\n  name: 'codeText',\r\n  tokenize: tokenizeCodeText,\r\n  resolve: resolveCodeText,\r\n  previous\r\n}\r\n\r\n// To do: next major: don’t resolve, like `markdown-rs`.\r\n/** @type {Resolver} */\r\nfunction resolveCodeText(events) {\r\n  let tailExitIndex = events.length - 4\r\n  let headEnterIndex = 3\r\n  /** @type {number} */\r\n  let index\r\n  /** @type {number | undefined} */\r\n  let enter\r\n\r\n  // If we start and end with an EOL or a space.\r\n  if (\r\n    (events[headEnterIndex][1].type === types.lineEnding ||\r\n      events[headEnterIndex][1].type === 'space') &&\r\n    (events[tailExitIndex][1].type === types.lineEnding ||\r\n      events[tailExitIndex][1].type === 'space')\r\n  ) {\r\n    index = headEnterIndex\r\n\r\n    // And we have data.\r\n    while (++index < tailExitIndex) {\r\n      if (events[index][1].type === types.codeTextData) {\r\n        // Then we have padding.\r\n        events[headEnterIndex][1].type = types.codeTextPadding\r\n        events[tailExitIndex][1].type = types.codeTextPadding\r\n        headEnterIndex += 2\r\n        tailExitIndex -= 2\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  // Merge adjacent spaces and data.\r\n  index = headEnterIndex - 1\r\n  tailExitIndex++\r\n\r\n  while (++index <= tailExitIndex) {\r\n    if (enter === undefined) {\r\n      if (\r\n        index !== tailExitIndex &&\r\n        events[index][1].type !== types.lineEnding\r\n      ) {\r\n        enter = index\r\n      }\r\n    } else if (\r\n      index === tailExitIndex ||\r\n      events[index][1].type === types.lineEnding\r\n    ) {\r\n      events[enter][1].type = types.codeTextData\r\n\r\n      if (index !== enter + 2) {\r\n        events[enter][1].end = events[index - 1][1].end\r\n        events.splice(enter + 2, index - enter - 2)\r\n        tailExitIndex -= index - enter - 2\r\n        index = enter + 2\r\n      }\r\n\r\n      enter = undefined\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Previous}\r\n */\r\nfunction previous(code) {\r\n  // If there is a previous code, there will always be a tail.\r\n  return (\r\n    code !== codes.graveAccent ||\r\n    this.events[this.events.length - 1][1].type === types.characterEscape\r\n  )\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCodeText(effects, ok, nok) {\r\n  const self = this\r\n  let sizeOpen = 0\r\n  /** @type {number} */\r\n  let size\r\n  /** @type {Token} */\r\n  let token\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of code (text).\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *     ^\r\n   * > | \\`a`\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.graveAccent, 'expected `` ` ``')\r\n    assert(previous.call(self, self.previous), 'expected correct previous')\r\n    effects.enter(types.codeText)\r\n    effects.enter(types.codeTextSequence)\r\n    return sequenceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In opening sequence.\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceOpen(code) {\r\n    if (code === codes.graveAccent) {\r\n      effects.consume(code)\r\n      sizeOpen++\r\n      return sequenceOpen\r\n    }\r\n\r\n    effects.exit(types.codeTextSequence)\r\n    return between(code)\r\n  }\r\n\r\n  /**\r\n   * Between something and something else.\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *      ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function between(code) {\r\n    // EOF.\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    // To do: next major: don’t do spaces in resolve, but when compiling,\r\n    // like `markdown-rs`.\r\n    // Tabs don’t work, and virtual spaces don’t make sense.\r\n    if (code === codes.space) {\r\n      effects.enter('space')\r\n      effects.consume(code)\r\n      effects.exit('space')\r\n      return between\r\n    }\r\n\r\n    // Closing fence? Could also be data.\r\n    if (code === codes.graveAccent) {\r\n      token = effects.enter(types.codeTextSequence)\r\n      size = 0\r\n      return sequenceClose(code)\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return between\r\n    }\r\n\r\n    // Data.\r\n    effects.enter(types.codeTextData)\r\n    return data(code)\r\n  }\r\n\r\n  /**\r\n   * In data.\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function data(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.space ||\r\n      code === codes.graveAccent ||\r\n      markdownLineEnding(code)\r\n    ) {\r\n      effects.exit(types.codeTextData)\r\n      return between(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return data\r\n  }\r\n\r\n  /**\r\n   * In closing sequence.\r\n   *\r\n   * ```markdown\r\n   * > | `a`\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceClose(code) {\r\n    // More.\r\n    if (code === codes.graveAccent) {\r\n      effects.consume(code)\r\n      size++\r\n      return sequenceClose\r\n    }\r\n\r\n    // Done!\r\n    if (size === sizeOpen) {\r\n      effects.exit(types.codeTextSequence)\r\n      effects.exit(types.codeText)\r\n      return ok(code)\r\n    }\r\n\r\n    // More or less accents: mark as data.\r\n    token.type = types.codeTextData\r\n    return data(code)\r\n  }\r\n}\r\n", "import {constants} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Some of the internal operations of micromark do lots of editing\r\n * operations on very large arrays. This runs into problems with two\r\n * properties of most circa-2020 JavaScript interpreters:\r\n *\r\n *  - Array-length modifications at the high end of an array (push/pop) are\r\n *    expected to be common and are implemented in (amortized) time\r\n *    proportional to the number of elements added or removed, whereas\r\n *    other operations (shift/unshift and splice) are much less efficient.\r\n *  - Function arguments are passed on the stack, so adding tens of thousands\r\n *    of elements to an array with `arr.push[...newElements]` will frequently\r\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\r\n *\r\n * SpliceBuffers are an implementation of gap buffers, which are a\r\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\r\n * maintains a cursor, and moving the cursor has cost proportional to the\r\n * distance the cursor moves, but inserting, deleting, or splicing in\r\n * new information at the cursor is as efficient as the push/pop operation.\r\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\r\n * or unshifts) as long such edits happen at the same part of the array or\r\n * generally sweep through the array from the beginning to the end.\r\n *\r\n * The interface for splice buffers also supports large numbers of inputs by\r\n * passing a single array argument rather passing multiple arguments on the\r\n * function call stack.\r\n *\r\n * @template T\r\n *   Item type.\r\n */\r\nexport class SpliceBuffer {\r\n  /**\r\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\r\n   *   Initial items (optional).\r\n   * @returns\r\n   *   Splice buffer.\r\n   */\r\n  constructor(initial) {\r\n    /** @type {Array<T>} */\r\n    this.left = initial ? [...initial] : []\r\n    /** @type {Array<T>} */\r\n    this.right = []\r\n  }\r\n\r\n  /**\r\n   * Array access;\r\n   * does not move the cursor.\r\n   *\r\n   * @param {number} index\r\n   *   Index.\r\n   * @return {T}\r\n   *   Item.\r\n   */\r\n  get(index) {\r\n    if (index < 0 || index >= this.left.length + this.right.length) {\r\n      throw new RangeError(\r\n        'Cannot access index `' +\r\n          index +\r\n          '` in a splice buffer of size `' +\r\n          (this.left.length + this.right.length) +\r\n          '`'\r\n      )\r\n    }\r\n\r\n    if (index < this.left.length) return this.left[index]\r\n    return this.right[this.right.length - index + this.left.length - 1]\r\n  }\r\n\r\n  /**\r\n   * The length of the splice buffer, one greater than the largest index in the\r\n   * array.\r\n   */\r\n  get length() {\r\n    return this.left.length + this.right.length\r\n  }\r\n\r\n  /**\r\n   * Remove and return `list[0]`;\r\n   * moves the cursor to `0`.\r\n   *\r\n   * @returns {T | undefined}\r\n   *   Item, optional.\r\n   */\r\n  shift() {\r\n    this.setCursor(0)\r\n    return this.right.pop()\r\n  }\r\n\r\n  /**\r\n   * Slice the buffer to get an array;\r\n   * does not move the cursor.\r\n   *\r\n   * @param {number} start\r\n   *   Start.\r\n   * @param {number | null | undefined} [end]\r\n   *   End (optional).\r\n   * @returns {Array<T>}\r\n   *   Array of items.\r\n   */\r\n  slice(start, end) {\r\n    /** @type {number} */\r\n    const stop =\r\n      end === null || end === undefined ? Number.POSITIVE_INFINITY : end\r\n\r\n    if (stop < this.left.length) {\r\n      return this.left.slice(start, stop)\r\n    }\r\n\r\n    if (start > this.left.length) {\r\n      return this.right\r\n        .slice(\r\n          this.right.length - stop + this.left.length,\r\n          this.right.length - start + this.left.length\r\n        )\r\n        .reverse()\r\n    }\r\n\r\n    return this.left\r\n      .slice(start)\r\n      .concat(\r\n        this.right.slice(this.right.length - stop + this.left.length).reverse()\r\n      )\r\n  }\r\n\r\n  /**\r\n   * Mimics the behavior of Array.prototype.splice() except for the change of\r\n   * interface necessary to avoid segfaults when patching in very large arrays.\r\n   *\r\n   * This operation moves cursor is moved to `start` and results in the cursor\r\n   * placed after any inserted items.\r\n   *\r\n   * @param {number} start\r\n   *   Start;\r\n   *   zero-based index at which to start changing the array;\r\n   *   negative numbers count backwards from the end of the array and values\r\n   *   that are out-of bounds are clamped to the appropriate end of the array.\r\n   * @param {number | null | undefined} [deleteCount=0]\r\n   *   Delete count (default: `0`);\r\n   *   maximum number of elements to delete, starting from start.\r\n   * @param {Array<T> | null | undefined} [items=[]]\r\n   *   Items to include in place of the deleted items (default: `[]`).\r\n   * @return {Array<T>}\r\n   *   Any removed items.\r\n   */\r\n  splice(start, deleteCount, items) {\r\n    /** @type {number} */\r\n    const count = deleteCount || 0\r\n\r\n    this.setCursor(Math.trunc(start))\r\n    const removed = this.right.splice(\r\n      this.right.length - count,\r\n      Number.POSITIVE_INFINITY\r\n    )\r\n    if (items) chunkedPush(this.left, items)\r\n    return removed.reverse()\r\n  }\r\n\r\n  /**\r\n   * Remove and return the highest-numbered item in the array, so\r\n   * `list[list.length - 1]`;\r\n   * Moves the cursor to `length`.\r\n   *\r\n   * @returns {T | undefined}\r\n   *   Item, optional.\r\n   */\r\n  pop() {\r\n    this.setCursor(Number.POSITIVE_INFINITY)\r\n    return this.left.pop()\r\n  }\r\n\r\n  /**\r\n   * Inserts a single item to the high-numbered side of the array;\r\n   * moves the cursor to `length`.\r\n   *\r\n   * @param {T} item\r\n   *   Item.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  push(item) {\r\n    this.setCursor(Number.POSITIVE_INFINITY)\r\n    this.left.push(item)\r\n  }\r\n\r\n  /**\r\n   * Inserts many items to the high-numbered side of the array.\r\n   * Moves the cursor to `length`.\r\n   *\r\n   * @param {Array<T>} items\r\n   *   Items.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  pushMany(items) {\r\n    this.setCursor(Number.POSITIVE_INFINITY)\r\n    chunkedPush(this.left, items)\r\n  }\r\n\r\n  /**\r\n   * Inserts a single item to the low-numbered side of the array;\r\n   * Moves the cursor to `0`.\r\n   *\r\n   * @param {T} item\r\n   *   Item.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  unshift(item) {\r\n    this.setCursor(0)\r\n    this.right.push(item)\r\n  }\r\n\r\n  /**\r\n   * Inserts many items to the low-numbered side of the array;\r\n   * moves the cursor to `0`.\r\n   *\r\n   * @param {Array<T>} items\r\n   *   Items.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  unshiftMany(items) {\r\n    this.setCursor(0)\r\n    chunkedPush(this.right, items.reverse())\r\n  }\r\n\r\n  /**\r\n   * Move the cursor to a specific position in the array. Requires\r\n   * time proportional to the distance moved.\r\n   *\r\n   * If `n < 0`, the cursor will end up at the beginning.\r\n   * If `n > length`, the cursor will end up at the end.\r\n   *\r\n   * @param {number} n\r\n   *   Position.\r\n   * @return {undefined}\r\n   *   Nothing.\r\n   */\r\n  setCursor(n) {\r\n    if (\r\n      n === this.left.length ||\r\n      (n > this.left.length && this.right.length === 0) ||\r\n      (n < 0 && this.left.length === 0)\r\n    )\r\n      return\r\n    if (n < this.left.length) {\r\n      // Move cursor to the this.left\r\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY)\r\n      chunkedPush(this.right, removed.reverse())\r\n    } else {\r\n      // Move cursor to the this.right\r\n      const removed = this.right.splice(\r\n        this.left.length + this.right.length - n,\r\n        Number.POSITIVE_INFINITY\r\n      )\r\n      chunkedPush(this.left, removed.reverse())\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Avoid stack overflow by pushing items onto the stack in segments\r\n *\r\n * @template T\r\n *   Item type.\r\n * @param {Array<T>} list\r\n *   List to inject into.\r\n * @param {ReadonlyArray<T>} right\r\n *   Items to inject.\r\n * @return {undefined}\r\n *   Nothing.\r\n */\r\nfunction chunkedPush(list, right) {\r\n  /** @type {number} */\r\n  let chunkStart = 0\r\n\r\n  if (right.length < constants.v8MaxSafeChunkSize) {\r\n    list.push(...right)\r\n  } else {\r\n    while (chunkStart < right.length) {\r\n      list.push(\r\n        ...right.slice(chunkStart, chunkStart + constants.v8MaxSafeChunkSize)\r\n      )\r\n      chunkStart += constants.v8MaxSafeChunkSize\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Chunk} Chunk\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Token} Token\r\n */\r\n\r\nimport {splice} from 'micromark-util-chunked'\r\nimport {codes, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\nimport {SpliceBuffer} from './lib/splice-buffer.js'\r\n\r\n// Hidden API exposed for testing.\r\nexport {SpliceBuffer} from './lib/splice-buffer.js'\r\n\r\n/**\r\n * Tokenize subcontent.\r\n *\r\n * @param {Array<Event>} eventsArray\r\n *   List of events.\r\n * @returns {boolean}\r\n *   Whether subtokens were found.\r\n */\r\n// eslint-disable-next-line complexity\r\nexport function subtokenize(eventsArray) {\r\n  /** @type {Record<string, number>} */\r\n  const jumps = {}\r\n  let index = -1\r\n  /** @type {Event} */\r\n  let event\r\n  /** @type {number | undefined} */\r\n  let lineIndex\r\n  /** @type {number} */\r\n  let otherIndex\r\n  /** @type {Event} */\r\n  let otherEvent\r\n  /** @type {Array<Event>} */\r\n  let parameters\r\n  /** @type {Array<Event>} */\r\n  let subevents\r\n  /** @type {boolean | undefined} */\r\n  let more\r\n  const events = new SpliceBuffer(eventsArray)\r\n\r\n  while (++index < events.length) {\r\n    while (index in jumps) {\r\n      index = jumps[index]\r\n    }\r\n\r\n    event = events.get(index)\r\n\r\n    // Add a hook for the GFM tasklist extension, which needs to know if text\r\n    // is in the first content of a list item.\r\n    if (\r\n      index &&\r\n      event[1].type === types.chunkFlow &&\r\n      events.get(index - 1)[1].type === types.listItemPrefix\r\n    ) {\r\n      assert(event[1]._tokenizer, 'expected `_tokenizer` on subtokens')\r\n      subevents = event[1]._tokenizer.events\r\n      otherIndex = 0\r\n\r\n      if (\r\n        otherIndex < subevents.length &&\r\n        subevents[otherIndex][1].type === types.lineEndingBlank\r\n      ) {\r\n        otherIndex += 2\r\n      }\r\n\r\n      if (\r\n        otherIndex < subevents.length &&\r\n        subevents[otherIndex][1].type === types.content\r\n      ) {\r\n        while (++otherIndex < subevents.length) {\r\n          if (subevents[otherIndex][1].type === types.content) {\r\n            break\r\n          }\r\n\r\n          if (subevents[otherIndex][1].type === types.chunkText) {\r\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\r\n            otherIndex++\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Enter.\r\n    if (event[0] === 'enter') {\r\n      if (event[1].contentType) {\r\n        Object.assign(jumps, subcontent(events, index))\r\n        index = jumps[index]\r\n        more = true\r\n      }\r\n    }\r\n    // Exit.\r\n    else if (event[1]._container) {\r\n      otherIndex = index\r\n      lineIndex = undefined\r\n\r\n      while (otherIndex--) {\r\n        otherEvent = events.get(otherIndex)\r\n\r\n        if (\r\n          otherEvent[1].type === types.lineEnding ||\r\n          otherEvent[1].type === types.lineEndingBlank\r\n        ) {\r\n          if (otherEvent[0] === 'enter') {\r\n            if (lineIndex) {\r\n              events.get(lineIndex)[1].type = types.lineEndingBlank\r\n            }\r\n\r\n            otherEvent[1].type = types.lineEnding\r\n            lineIndex = otherIndex\r\n          }\r\n        } else {\r\n          break\r\n        }\r\n      }\r\n\r\n      if (lineIndex) {\r\n        // Fix position.\r\n        event[1].end = Object.assign({}, events.get(lineIndex)[1].start)\r\n\r\n        // Switch container exit w/ line endings.\r\n        parameters = events.slice(lineIndex, index)\r\n        parameters.unshift(event)\r\n        events.splice(lineIndex, index - lineIndex + 1, parameters)\r\n      }\r\n    }\r\n  }\r\n\r\n  // The changes to the `events` buffer must be copied back into the eventsArray\r\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0))\r\n  return !more\r\n}\r\n\r\n/**\r\n * Tokenize embedded tokens.\r\n *\r\n * @param {SpliceBuffer<Event>} events\r\n * @param {number} eventIndex\r\n * @returns {Record<string, number>}\r\n */\r\nfunction subcontent(events, eventIndex) {\r\n  const token = events.get(eventIndex)[1]\r\n  const context = events.get(eventIndex)[2]\r\n  let startPosition = eventIndex - 1\r\n  /** @type {Array<number>} */\r\n  const startPositions = []\r\n  assert(token.contentType, 'expected `contentType` on subtokens')\r\n  const tokenizer =\r\n    token._tokenizer || context.parser[token.contentType](token.start)\r\n  const childEvents = tokenizer.events\r\n  /** @type {Array<[number, number]>} */\r\n  const jumps = []\r\n  /** @type {Record<string, number>} */\r\n  const gaps = {}\r\n  /** @type {Array<Chunk>} */\r\n  let stream\r\n  /** @type {Token | undefined} */\r\n  let previous\r\n  let index = -1\r\n  /** @type {Token | undefined} */\r\n  let current = token\r\n  let adjust = 0\r\n  let start = 0\r\n  const breaks = [start]\r\n\r\n  // Loop forward through the linked tokens to pass them in order to the\r\n  // subtokenizer.\r\n  while (current) {\r\n    // Find the position of the event for this token.\r\n    while (events.get(++startPosition)[1] !== current) {\r\n      // Empty.\r\n    }\r\n\r\n    assert(\r\n      !previous || current.previous === previous,\r\n      'expected previous to match'\r\n    )\r\n    assert(!previous || previous.next === current, 'expected next to match')\r\n\r\n    startPositions.push(startPosition)\r\n\r\n    if (!current._tokenizer) {\r\n      stream = context.sliceStream(current)\r\n\r\n      if (!current.next) {\r\n        stream.push(codes.eof)\r\n      }\r\n\r\n      if (previous) {\r\n        tokenizer.defineSkip(current.start)\r\n      }\r\n\r\n      if (current._isInFirstContentOfListItem) {\r\n        tokenizer._gfmTasklistFirstContentOfListItem = true\r\n      }\r\n\r\n      tokenizer.write(stream)\r\n\r\n      if (current._isInFirstContentOfListItem) {\r\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\r\n      }\r\n    }\r\n\r\n    // Unravel the next token.\r\n    previous = current\r\n    current = current.next\r\n  }\r\n\r\n  // Now, loop back through all events (and linked tokens), to figure out which\r\n  // parts belong where.\r\n  current = token\r\n\r\n  while (++index < childEvents.length) {\r\n    if (\r\n      // Find a void token that includes a break.\r\n      childEvents[index][0] === 'exit' &&\r\n      childEvents[index - 1][0] === 'enter' &&\r\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\r\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\r\n    ) {\r\n      assert(current, 'expected a current token')\r\n      start = index + 1\r\n      breaks.push(start)\r\n      // Help GC.\r\n      current._tokenizer = undefined\r\n      current.previous = undefined\r\n      current = current.next\r\n    }\r\n  }\r\n\r\n  // Help GC.\r\n  tokenizer.events = []\r\n\r\n  // If there’s one more token (which is the cases for lines that end in an\r\n  // EOF), that’s perfect: the last point we found starts it.\r\n  // If there isn’t then make sure any remaining content is added to it.\r\n  if (current) {\r\n    // Help GC.\r\n    current._tokenizer = undefined\r\n    current.previous = undefined\r\n    assert(!current.next, 'expected no next token')\r\n  } else {\r\n    breaks.pop()\r\n  }\r\n\r\n  // Now splice the events from the subtokenizer into the current events,\r\n  // moving back to front so that splice indices aren’t affected.\r\n  index = breaks.length\r\n\r\n  while (index--) {\r\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\r\n    const start = startPositions.pop()\r\n    assert(start !== undefined, 'expected a start position when splicing')\r\n    jumps.push([start, start + slice.length - 1])\r\n    events.splice(start, 2, slice)\r\n  }\r\n\r\n  jumps.reverse()\r\n  index = -1\r\n\r\n  while (++index < jumps.length) {\r\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\r\n    adjust += jumps[index][1] - jumps[index][0] - 1\r\n  }\r\n\r\n  return gaps\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {subtokenize} from 'micromark-util-subtokenize'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/**\r\n * No name because it must not be turned off.\r\n * @type {Construct}\r\n */\r\nexport const content = {tokenize: tokenizeContent, resolve: resolveContent}\r\n\r\n/** @type {Construct} */\r\nconst continuationConstruct = {tokenize: tokenizeContinuation, partial: true}\r\n\r\n/**\r\n * Content is transparent: it’s parsed right now. That way, definitions are also\r\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\r\n *\r\n * @type {Resolver}\r\n */\r\nfunction resolveContent(events) {\r\n  subtokenize(events)\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeContent(effects, ok) {\r\n  /** @type {Token | undefined} */\r\n  let previous\r\n\r\n  return chunkStart\r\n\r\n  /**\r\n   * Before a content chunk.\r\n   *\r\n   * ```markdown\r\n   * > | abc\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function chunkStart(code) {\r\n    assert(\r\n      code !== codes.eof && !markdownLineEnding(code),\r\n      'expected no eof or eol'\r\n    )\r\n\r\n    effects.enter(types.content)\r\n    previous = effects.enter(types.chunkContent, {\r\n      contentType: constants.contentTypeContent\r\n    })\r\n    return chunkInside(code)\r\n  }\r\n\r\n  /**\r\n   * In a content chunk.\r\n   *\r\n   * ```markdown\r\n   * > | abc\r\n   *     ^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function chunkInside(code) {\r\n    if (code === codes.eof) {\r\n      return contentEnd(code)\r\n    }\r\n\r\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\r\n    // is stitched together resolving.\r\n    if (markdownLineEnding(code)) {\r\n      return effects.check(\r\n        continuationConstruct,\r\n        contentContinue,\r\n        contentEnd\r\n      )(code)\r\n    }\r\n\r\n    // Data.\r\n    effects.consume(code)\r\n    return chunkInside\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentEnd(code) {\r\n    effects.exit(types.chunkContent)\r\n    effects.exit(types.content)\r\n    return ok(code)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contentContinue(code) {\r\n    assert(markdownLineEnding(code), 'expected eol')\r\n    effects.consume(code)\r\n    effects.exit(types.chunkContent)\r\n    assert(previous, 'expected previous token')\r\n    previous.next = effects.enter(types.chunkContent, {\r\n      contentType: constants.contentTypeContent,\r\n      previous\r\n    })\r\n    previous = previous.next\r\n    return chunkInside\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeContinuation(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return startLookahead\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function startLookahead(code) {\r\n    assert(markdownLineEnding(code), 'expected a line ending')\r\n    effects.exit(types.chunkContent)\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return factorySpace(effects, prefixed, types.linePrefix)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function prefixed(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      return nok(code)\r\n    }\r\n\r\n    // Always populated by defaults.\r\n    assert(\r\n      self.parser.constructs.disable.null,\r\n      'expected `disable.null` to be populated'\r\n    )\r\n\r\n    const tail = self.events[self.events.length - 1]\r\n\r\n    if (\r\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\r\n      tail &&\r\n      tail[1].type === types.linePrefix &&\r\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\r\n    ) {\r\n      return ok(code)\r\n    }\r\n\r\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {\r\n  asciiControl,\r\n  markdownLineEndingOrSpace,\r\n  markdownLineEnding\r\n} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Parse destinations.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * <a>\r\n * <a\\>b>\r\n * <a b>\r\n * <a)>\r\n * a\r\n * a\\)b\r\n * a(b)c\r\n * a(b)\r\n * ```\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type for whole (`<a>` or `b`).\r\n * @param {TokenType} literalType\r\n *   Type when enclosed (`<a>`).\r\n * @param {TokenType} literalMarkerType\r\n *   Type for enclosing (`<` and `>`).\r\n * @param {TokenType} rawType\r\n *   Type when not enclosed (`b`).\r\n * @param {TokenType} stringType\r\n *   Type for the value (`a` or `b`).\r\n * @param {number | undefined} [max=Infinity]\r\n *   Depth of nested parens (inclusive).\r\n * @returns {State}\r\n *   Start state.\r\n */\r\n// eslint-disable-next-line max-params\r\nexport function factoryDestination(\r\n  effects,\r\n  ok,\r\n  nok,\r\n  type,\r\n  literalType,\r\n  literalMarkerType,\r\n  rawType,\r\n  stringType,\r\n  max\r\n) {\r\n  const limit = max || Number.POSITIVE_INFINITY\r\n  let balance = 0\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of destination.\r\n   *\r\n   * ```markdown\r\n   * > | <aa>\r\n   *     ^\r\n   * > | aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === codes.lessThan) {\r\n      effects.enter(type)\r\n      effects.enter(literalType)\r\n      effects.enter(literalMarkerType)\r\n      effects.consume(code)\r\n      effects.exit(literalMarkerType)\r\n      return enclosedBefore\r\n    }\r\n\r\n    // ASCII control, space, closing paren.\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.space ||\r\n      code === codes.rightParenthesis ||\r\n      asciiControl(code)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.enter(type)\r\n    effects.enter(rawType)\r\n    effects.enter(stringType)\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return raw(code)\r\n  }\r\n\r\n  /**\r\n   * After `<`, at an enclosed destination.\r\n   *\r\n   * ```markdown\r\n   * > | <aa>\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function enclosedBefore(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.enter(literalMarkerType)\r\n      effects.consume(code)\r\n      effects.exit(literalMarkerType)\r\n      effects.exit(literalType)\r\n      effects.exit(type)\r\n      return ok\r\n    }\r\n\r\n    effects.enter(stringType)\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return enclosed(code)\r\n  }\r\n\r\n  /**\r\n   * In enclosed destination.\r\n   *\r\n   * ```markdown\r\n   * > | <aa>\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function enclosed(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.exit(types.chunkString)\r\n      effects.exit(stringType)\r\n      return enclosedBefore(code)\r\n    }\r\n\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.lessThan ||\r\n      markdownLineEnding(code)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return code === codes.backslash ? enclosedEscape : enclosed\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | <a\\*a>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function enclosedEscape(code) {\r\n    if (\r\n      code === codes.lessThan ||\r\n      code === codes.greaterThan ||\r\n      code === codes.backslash\r\n    ) {\r\n      effects.consume(code)\r\n      return enclosed\r\n    }\r\n\r\n    return enclosed(code)\r\n  }\r\n\r\n  /**\r\n   * In raw destination.\r\n   *\r\n   * ```markdown\r\n   * > | aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function raw(code) {\r\n    if (\r\n      !balance &&\r\n      (code === codes.eof ||\r\n        code === codes.rightParenthesis ||\r\n        markdownLineEndingOrSpace(code))\r\n    ) {\r\n      effects.exit(types.chunkString)\r\n      effects.exit(stringType)\r\n      effects.exit(rawType)\r\n      effects.exit(type)\r\n      return ok(code)\r\n    }\r\n\r\n    if (balance < limit && code === codes.leftParenthesis) {\r\n      effects.consume(code)\r\n      balance++\r\n      return raw\r\n    }\r\n\r\n    if (code === codes.rightParenthesis) {\r\n      effects.consume(code)\r\n      balance--\r\n      return raw\r\n    }\r\n\r\n    // ASCII control (but *not* `\\0`) and space and `(`.\r\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\r\n    // doesn’t.\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.space ||\r\n      code === codes.leftParenthesis ||\r\n      asciiControl(code)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return code === codes.backslash ? rawEscape : raw\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at special character.\r\n   *\r\n   * ```markdown\r\n   * > | a\\*a\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function rawEscape(code) {\r\n    if (\r\n      code === codes.leftParenthesis ||\r\n      code === codes.rightParenthesis ||\r\n      code === codes.backslash\r\n    ) {\r\n      effects.consume(code)\r\n      return raw\r\n    }\r\n\r\n    return raw(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/**\r\n * Parse labels.\r\n *\r\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * [a]\r\n * [a\r\n * b]\r\n * [a\\]b]\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n *   Tokenize context.\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type of the whole label (`[a]`).\r\n * @param {TokenType} markerType\r\n *   Type for the markers (`[` and `]`).\r\n * @param {TokenType} stringType\r\n *   Type for the identifier (`a`).\r\n * @returns {State}\r\n *   Start state.\r\n */\r\n// eslint-disable-next-line max-params\r\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\r\n  const self = this\r\n  let size = 0\r\n  /** @type {boolean} */\r\n  let seen\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of label.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.leftSquareBracket, 'expected `[`')\r\n    effects.enter(type)\r\n    effects.enter(markerType)\r\n    effects.consume(code)\r\n    effects.exit(markerType)\r\n    effects.enter(stringType)\r\n    return atBreak\r\n  }\r\n\r\n  /**\r\n   * In label, at something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (\r\n      size > constants.linkReferenceSizeMax ||\r\n      code === codes.eof ||\r\n      code === codes.leftSquareBracket ||\r\n      (code === codes.rightSquareBracket && !seen) ||\r\n      // To do: remove in the future once we’ve switched from\r\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\r\n      // which doesn’t need this.\r\n      // Hidden footnotes hook.\r\n      /* c8 ignore next 3 */\r\n      (code === codes.caret &&\r\n        !size &&\r\n        '_hiddenFootnoteSupport' in self.parser.constructs)\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.exit(stringType)\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      effects.exit(type)\r\n      return ok\r\n    }\r\n\r\n    // To do: indent? Link chunks and EOLs together?\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return atBreak\r\n    }\r\n\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return labelInside(code)\r\n  }\r\n\r\n  /**\r\n   * In label, in text.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelInside(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.leftSquareBracket ||\r\n      code === codes.rightSquareBracket ||\r\n      markdownLineEnding(code) ||\r\n      size++ > constants.linkReferenceSizeMax\r\n    ) {\r\n      effects.exit(types.chunkString)\r\n      return atBreak(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    if (!seen) seen = !markdownSpace(code)\r\n    return code === codes.backslash ? labelEscape : labelInside\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | [a\\*a]\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEscape(code) {\r\n    if (\r\n      code === codes.leftSquareBracket ||\r\n      code === codes.backslash ||\r\n      code === codes.rightSquareBracket\r\n    ) {\r\n      effects.consume(code)\r\n      size++\r\n      return labelInside\r\n    }\r\n\r\n    return labelInside(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Parse titles.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * \"a\"\r\n * 'b'\r\n * (c)\r\n * \"a\r\n * b\"\r\n * 'a\r\n *     b'\r\n * (a\\)b)\r\n * ```\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\r\n * @param {TokenType} markerType\r\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\r\n * @param {TokenType} stringType\r\n *   Type for the value (`a`).\r\n * @returns {State}\r\n *   Start state.\r\n */\r\n// eslint-disable-next-line max-params\r\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of title.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (\r\n      code === codes.quotationMark ||\r\n      code === codes.apostrophe ||\r\n      code === codes.leftParenthesis\r\n    ) {\r\n      effects.enter(type)\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      marker = code === codes.leftParenthesis ? codes.rightParenthesis : code\r\n      return begin\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After opening marker.\r\n   *\r\n   * This is also used at the closing marker.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function begin(code) {\r\n    if (code === marker) {\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      effects.exit(type)\r\n      return ok\r\n    }\r\n\r\n    effects.enter(stringType)\r\n    return atBreak(code)\r\n  }\r\n\r\n  /**\r\n   * At something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === marker) {\r\n      effects.exit(stringType)\r\n      return begin(marker)\r\n    }\r\n\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    // Note: blank lines can’t exist in content.\r\n    if (markdownLineEnding(code)) {\r\n      // To do: use `space_or_tab_eol_with_options`, connect.\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return factorySpace(effects, atBreak, types.linePrefix)\r\n    }\r\n\r\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\r\n    return inside(code)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === marker || code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.chunkString)\r\n      return atBreak(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return code === codes.backslash ? escape : inside\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\\*b\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function escape(code) {\r\n    if (code === marker || code === codes.backslash) {\r\n      effects.consume(code)\r\n      return inside\r\n    }\r\n\r\n    return inside(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {types} from 'micromark-util-symbol'\r\n\r\n/**\r\n * Parse spaces and tabs.\r\n *\r\n * There is no `nok` parameter:\r\n *\r\n * *   line endings or spaces in markdown are often optional, in which case this\r\n *     factory can be used and `ok` will be switched to whether spaces were found\r\n *     or not\r\n * *   one line ending or space can be detected with\r\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @returns {State}\r\n *   Start state.\r\n */\r\nexport function factoryWhitespace(effects, ok) {\r\n  /** @type {boolean} */\r\n  let seen\r\n\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      seen = true\r\n      return start\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(\r\n        effects,\r\n        start,\r\n        seen ? types.linePrefix : types.lineSuffix\r\n      )(code)\r\n    }\r\n\r\n    return ok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factoryDestination} from 'micromark-factory-destination'\r\nimport {factoryLabel} from 'micromark-factory-label'\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {factoryTitle} from 'micromark-factory-title'\r\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\r\nimport {\r\n  markdownLineEnding,\r\n  markdownLineEndingOrSpace,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\nimport {codes, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const definition = {name: 'definition', tokenize: tokenizeDefinition}\r\n\r\n/** @type {Construct} */\r\nconst titleBefore = {tokenize: tokenizeTitleBefore, partial: true}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeDefinition(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {string} */\r\n  let identifier\r\n\r\n  return start\r\n\r\n  /**\r\n   * At start of a definition.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // Do not interrupt paragraphs (but do follow definitions).\r\n    // To do: do `interrupt` the way `markdown-rs` does.\r\n    // To do: parse whitespace the way `markdown-rs` does.\r\n    effects.enter(types.definition)\r\n    return before(code)\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at `[`.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    // To do: parse whitespace the way `markdown-rs` does.\r\n    assert(code === codes.leftSquareBracket, 'expected `[`')\r\n    return factoryLabel.call(\r\n      self,\r\n      effects,\r\n      labelAfter,\r\n      // Note: we don’t need to reset the way `markdown-rs` does.\r\n      nok,\r\n      types.definitionLabel,\r\n      types.definitionLabelMarker,\r\n      types.definitionLabelString\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * After label.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelAfter(code) {\r\n    identifier = normalizeIdentifier(\r\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\r\n    )\r\n\r\n    if (code === codes.colon) {\r\n      effects.enter(types.definitionMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.definitionMarker)\r\n      return markerAfter\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After marker.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function markerAfter(code) {\r\n    // Note: whitespace is optional.\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, destinationBefore)(code)\r\n      : destinationBefore(code)\r\n  }\r\n\r\n  /**\r\n   * Before destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function destinationBefore(code) {\r\n    return factoryDestination(\r\n      effects,\r\n      destinationAfter,\r\n      // Note: we don’t need to reset the way `markdown-rs` does.\r\n      nok,\r\n      types.definitionDestination,\r\n      types.definitionDestinationLiteral,\r\n      types.definitionDestinationLiteralMarker,\r\n      types.definitionDestinationRaw,\r\n      types.definitionDestinationString\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * After destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function destinationAfter(code) {\r\n    return effects.attempt(titleBefore, after, after)(code)\r\n  }\r\n\r\n  /**\r\n   * After definition.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b\r\n   *           ^\r\n   * > | [a]: b \"c\"\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, afterWhitespace, types.whitespace)(code)\r\n      : afterWhitespace(code)\r\n  }\r\n\r\n  /**\r\n   * After definition, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b\r\n   *           ^\r\n   * > | [a]: b \"c\"\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function afterWhitespace(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.definition)\r\n\r\n      // Note: we don’t care about uniqueness.\r\n      // It’s likely that that doesn’t happen very frequently.\r\n      // It is more likely that it wastes precious time.\r\n      self.parser.defined.push(identifier)\r\n\r\n      // To do: `markdown-rs` interrupt.\r\n      // // You’d be interrupting.\r\n      // tokenizer.interrupt = true\r\n      return ok(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeTitleBefore(effects, ok, nok) {\r\n  return titleBefore\r\n\r\n  /**\r\n   * After destination, at whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b\r\n   *           ^\r\n   * > | [a]: b \"c\"\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function titleBefore(code) {\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, beforeMarker)(code)\r\n      : nok(code)\r\n  }\r\n\r\n  /**\r\n   * At title.\r\n   *\r\n   * ```markdown\r\n   *   | [a]: b\r\n   * > | \"c\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function beforeMarker(code) {\r\n    return factoryTitle(\r\n      effects,\r\n      titleAfter,\r\n      nok,\r\n      types.definitionTitle,\r\n      types.definitionTitleMarker,\r\n      types.definitionTitleString\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * After title.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function titleAfter(code) {\r\n    return markdownSpace(code)\r\n      ? factorySpace(\r\n          effects,\r\n          titleAfterOptionalWhitespace,\r\n          types.whitespace\r\n        )(code)\r\n      : titleAfterOptionalWhitespace(code)\r\n  }\r\n\r\n  /**\r\n   * After title, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a]: b \"c\"\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function titleAfterOptionalWhitespace(code) {\r\n    return code === codes.eof || markdownLineEnding(code) ? ok(code) : nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {codes, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const hardBreakEscape = {\r\n  name: 'hardBreakEscape',\r\n  tokenize: tokenizeHardBreakEscape\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Start of a hard break (escape).\r\n   *\r\n   * ```markdown\r\n   * > | a\\\r\n   *      ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.backslash, 'expected `\\\\`')\r\n    effects.enter(types.hardBreakEscape)\r\n    effects.consume(code)\r\n    return after\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at eol.\r\n   *\r\n   * ```markdown\r\n   * > | a\\\r\n   *       ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   *  @type {State}\r\n   */\r\n  function after(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.exit(types.hardBreakEscape)\r\n      return ok(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {\r\n  markdownLineEnding,\r\n  markdownLineEndingOrSpace,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\nimport {splice} from 'micromark-util-chunked'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const headingAtx = {\r\n  name: 'headingAtx',\r\n  tokenize: tokenizeHeadingAtx,\r\n  resolve: resolveHeadingAtx\r\n}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveHeadingAtx(events, context) {\r\n  let contentEnd = events.length - 2\r\n  let contentStart = 3\r\n  /** @type {Token} */\r\n  let content\r\n  /** @type {Token} */\r\n  let text\r\n\r\n  // Prefix whitespace, part of the opening.\r\n  if (events[contentStart][1].type === types.whitespace) {\r\n    contentStart += 2\r\n  }\r\n\r\n  // Suffix whitespace, part of the closing.\r\n  if (\r\n    contentEnd - 2 > contentStart &&\r\n    events[contentEnd][1].type === types.whitespace\r\n  ) {\r\n    contentEnd -= 2\r\n  }\r\n\r\n  if (\r\n    events[contentEnd][1].type === types.atxHeadingSequence &&\r\n    (contentStart === contentEnd - 1 ||\r\n      (contentEnd - 4 > contentStart &&\r\n        events[contentEnd - 2][1].type === types.whitespace))\r\n  ) {\r\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\r\n  }\r\n\r\n  if (contentEnd > contentStart) {\r\n    content = {\r\n      type: types.atxHeadingText,\r\n      start: events[contentStart][1].start,\r\n      end: events[contentEnd][1].end\r\n    }\r\n    text = {\r\n      type: types.chunkText,\r\n      start: events[contentStart][1].start,\r\n      end: events[contentEnd][1].end,\r\n      contentType: constants.contentTypeText\r\n    }\r\n\r\n    splice(events, contentStart, contentEnd - contentStart + 1, [\r\n      ['enter', content, context],\r\n      ['enter', text, context],\r\n      ['exit', text, context],\r\n      ['exit', content, context]\r\n    ])\r\n  }\r\n\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHeadingAtx(effects, ok, nok) {\r\n  let size = 0\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of a heading (atx).\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: parse indent like `markdown-rs`.\r\n    effects.enter(types.atxHeading)\r\n    return before(code)\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at `#`.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    assert(code === codes.numberSign, 'expected `#`')\r\n    effects.enter(types.atxHeadingSequence)\r\n    return sequenceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In opening sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceOpen(code) {\r\n    if (\r\n      code === codes.numberSign &&\r\n      size++ < constants.atxHeadingOpeningFenceSizeMax\r\n    ) {\r\n      effects.consume(code)\r\n      return sequenceOpen\r\n    }\r\n\r\n    // Always at least one `#`.\r\n    if (code === codes.eof || markdownLineEndingOrSpace(code)) {\r\n      effects.exit(types.atxHeadingSequence)\r\n      return atBreak(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === codes.numberSign) {\r\n      effects.enter(types.atxHeadingSequence)\r\n      return sequenceFurther(code)\r\n    }\r\n\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.atxHeading)\r\n      // To do: interrupt like `markdown-rs`.\r\n      // // Feel free to interrupt.\r\n      // tokenizer.interrupt = false\r\n      return ok(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      return factorySpace(effects, atBreak, types.whitespace)(code)\r\n    }\r\n\r\n    // To do: generate `data` tokens, add the `text` token later.\r\n    // Needs edit map, see: `markdown.rs`.\r\n    effects.enter(types.atxHeadingText)\r\n    return data(code)\r\n  }\r\n\r\n  /**\r\n   * In further sequence (after whitespace).\r\n   *\r\n   * Could be normal “visible” hashes in the heading or a final sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa ##\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequenceFurther(code) {\r\n    if (code === codes.numberSign) {\r\n      effects.consume(code)\r\n      return sequenceFurther\r\n    }\r\n\r\n    effects.exit(types.atxHeadingSequence)\r\n    return atBreak(code)\r\n  }\r\n\r\n  /**\r\n   * In text.\r\n   *\r\n   * ```markdown\r\n   * > | ## aa\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function data(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.numberSign ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      effects.exit(types.atxHeadingText)\r\n      return atBreak(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return data\r\n  }\r\n}\r\n", "/**\r\n * List of lowercase HTML “block” tag names.\r\n *\r\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\r\n * 6).\r\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\r\n * strictly parsed.\r\n * For tag names not in this list, a more strict algorithm (condition 7) is used\r\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\r\n *\r\n * This is copied from:\r\n * <https://spec.commonmark.org/0.30/#html-blocks>.\r\n *\r\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\r\n */\r\nexport const htmlBlockNames = [\r\n  'address',\r\n  'article',\r\n  'aside',\r\n  'base',\r\n  'basefont',\r\n  'blockquote',\r\n  'body',\r\n  'caption',\r\n  'center',\r\n  'col',\r\n  'colgroup',\r\n  'dd',\r\n  'details',\r\n  'dialog',\r\n  'dir',\r\n  'div',\r\n  'dl',\r\n  'dt',\r\n  'fieldset',\r\n  'figcaption',\r\n  'figure',\r\n  'footer',\r\n  'form',\r\n  'frame',\r\n  'frameset',\r\n  'h1',\r\n  'h2',\r\n  'h3',\r\n  'h4',\r\n  'h5',\r\n  'h6',\r\n  'head',\r\n  'header',\r\n  'hr',\r\n  'html',\r\n  'iframe',\r\n  'legend',\r\n  'li',\r\n  'link',\r\n  'main',\r\n  'menu',\r\n  'menuitem',\r\n  'nav',\r\n  'noframes',\r\n  'ol',\r\n  'optgroup',\r\n  'option',\r\n  'p',\r\n  'param',\r\n  'search',\r\n  'section',\r\n  'summary',\r\n  'table',\r\n  'tbody',\r\n  'td',\r\n  'tfoot',\r\n  'th',\r\n  'thead',\r\n  'title',\r\n  'tr',\r\n  'track',\r\n  'ul'\r\n]\r\n\r\n/**\r\n * List of lowercase HTML “raw” tag names.\r\n *\r\n * The list, when parsing HTML (flow), results in HTML that can include lines\r\n * without exiting, until a closing tag also in this list is found (condition\r\n * 1).\r\n *\r\n * This module is copied from:\r\n * <https://spec.commonmark.org/0.30/#html-blocks>.\r\n *\r\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\r\n */\r\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {\r\n  asciiAlpha,\r\n  asciiAlphanumeric,\r\n  markdownLineEnding,\r\n  markdownLineEndingOrSpace,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\nimport {blankLine} from './blank-line.js'\r\n\r\n/** @type {Construct} */\r\nexport const htmlFlow = {\r\n  name: 'htmlFlow',\r\n  tokenize: tokenizeHtmlFlow,\r\n  resolveTo: resolveToHtmlFlow,\r\n  concrete: true\r\n}\r\n\r\n/** @type {Construct} */\r\nconst blankLineBefore = {tokenize: tokenizeBlankLineBefore, partial: true}\r\nconst nonLazyContinuationStart = {\r\n  tokenize: tokenizeNonLazyContinuationStart,\r\n  partial: true\r\n}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveToHtmlFlow(events) {\r\n  let index = events.length\r\n\r\n  while (index--) {\r\n    if (\r\n      events[index][0] === 'enter' &&\r\n      events[index][1].type === types.htmlFlow\r\n    ) {\r\n      break\r\n    }\r\n  }\r\n\r\n  if (index > 1 && events[index - 2][1].type === types.linePrefix) {\r\n    // Add the prefix start to the HTML token.\r\n    events[index][1].start = events[index - 2][1].start\r\n    // Add the prefix start to the HTML line token.\r\n    events[index + 1][1].start = events[index - 2][1].start\r\n    // Remove the line prefix.\r\n    events.splice(index - 2, 2)\r\n  }\r\n\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHtmlFlow(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {number} */\r\n  let marker\r\n  /** @type {boolean} */\r\n  let closingTag\r\n  /** @type {string} */\r\n  let buffer\r\n  /** @type {number} */\r\n  let index\r\n  /** @type {Code} */\r\n  let markerB\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of HTML (flow).\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: parse indent like `markdown-rs`.\r\n    return before(code)\r\n  }\r\n\r\n  /**\r\n   * At `<`, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    assert(code === codes.lessThan, 'expected `<`')\r\n    effects.enter(types.htmlFlow)\r\n    effects.enter(types.htmlFlowData)\r\n    effects.consume(code)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `<`, at tag name or other stuff.\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *      ^\r\n   * > | <!doctype>\r\n   *      ^\r\n   * > | <!--xxx-->\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === codes.exclamationMark) {\r\n      effects.consume(code)\r\n      return declarationOpen\r\n    }\r\n\r\n    if (code === codes.slash) {\r\n      effects.consume(code)\r\n      closingTag = true\r\n      return tagCloseStart\r\n    }\r\n\r\n    if (code === codes.questionMark) {\r\n      effects.consume(code)\r\n      marker = constants.htmlInstruction\r\n      // To do:\r\n      // tokenizer.concrete = true\r\n      // To do: use `markdown-rs` style interrupt.\r\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\r\n      // right now, so we do need to search for `>`, similar to declarations.\r\n      return self.interrupt ? ok : continuationDeclarationInside\r\n    }\r\n\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      // @ts-expect-error: not null.\r\n      buffer = String.fromCharCode(code)\r\n      return tagName\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<!`, at declaration, comment, or CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *       ^\r\n   * > | <!--xxx-->\r\n   *       ^\r\n   * > | <![CDATA[>&<]]>\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function declarationOpen(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      marker = constants.htmlComment\r\n      return commentOpenInside\r\n    }\r\n\r\n    if (code === codes.leftSquareBracket) {\r\n      effects.consume(code)\r\n      marker = constants.htmlCdata\r\n      index = 0\r\n      return cdataOpenInside\r\n    }\r\n\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      marker = constants.htmlDeclaration\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuationDeclarationInside\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<!-`, inside a comment, at another `-`.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentOpenInside(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuationDeclarationInside\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<![`, inside CDATA, expecting `CDATA[`.\r\n   *\r\n   * ```markdown\r\n   * > | <![CDATA[>&<]]>\r\n   *        ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataOpenInside(code) {\r\n    const value = constants.cdataOpeningString\r\n\r\n    if (code === value.charCodeAt(index++)) {\r\n      effects.consume(code)\r\n\r\n      if (index === value.length) {\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok : continuation\r\n      }\r\n\r\n      return cdataOpenInside\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `</`, in closing tag, at tag name.\r\n   *\r\n   * ```markdown\r\n   * > | </x>\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagCloseStart(code) {\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      // @ts-expect-error: not null.\r\n      buffer = String.fromCharCode(code)\r\n      return tagName\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <ab>\r\n   *      ^^\r\n   * > | </ab>\r\n   *       ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagName(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.slash ||\r\n      code === codes.greaterThan ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      const slash = code === codes.slash\r\n      const name = buffer.toLowerCase()\r\n\r\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\r\n        marker = constants.htmlRaw\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok(code) : continuation(code)\r\n      }\r\n\r\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\r\n        marker = constants.htmlBasic\r\n\r\n        if (slash) {\r\n          effects.consume(code)\r\n          return basicSelfClosing\r\n        }\r\n\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok(code) : continuation(code)\r\n      }\r\n\r\n      marker = constants.htmlComplete\r\n      // Do not support complete HTML when interrupting.\r\n      return self.interrupt && !self.parser.lazy[self.now().line]\r\n        ? nok(code)\r\n        : closingTag\r\n          ? completeClosingTagAfter(code)\r\n          : completeAttributeNameBefore(code)\r\n    }\r\n\r\n    // ASCII alphanumerical and `-`.\r\n    if (code === codes.dash || asciiAlphanumeric(code)) {\r\n      effects.consume(code)\r\n      buffer += String.fromCharCode(code)\r\n      return tagName\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After closing slash of a basic tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <div/>\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function basicSelfClosing(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.consume(code)\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuation\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After closing slash of a complete tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <x/>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeClosingTagAfter(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeClosingTagAfter\r\n    }\r\n\r\n    return completeEnd(code)\r\n  }\r\n\r\n  /**\r\n   * At an attribute name.\r\n   *\r\n   * At first, this state is used after a complete tag name, after whitespace,\r\n   * where it expects optional attributes or the end of the tag.\r\n   * It is also reused after attributes, when expecting more optional\r\n   * attributes.\r\n   *\r\n   * ```markdown\r\n   * > | <a />\r\n   *        ^\r\n   * > | <a :b>\r\n   *        ^\r\n   * > | <a _b>\r\n   *        ^\r\n   * > | <a b>\r\n   *        ^\r\n   * > | <a >\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeNameBefore(code) {\r\n    if (code === codes.slash) {\r\n      effects.consume(code)\r\n      return completeEnd\r\n    }\r\n\r\n    // ASCII alphanumerical and `:` and `_`.\r\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeName\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeNameBefore\r\n    }\r\n\r\n    return completeEnd(code)\r\n  }\r\n\r\n  /**\r\n   * In attribute name.\r\n   *\r\n   * ```markdown\r\n   * > | <a :b>\r\n   *         ^\r\n   * > | <a _b>\r\n   *         ^\r\n   * > | <a b>\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeName(code) {\r\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\r\n    if (\r\n      code === codes.dash ||\r\n      code === codes.dot ||\r\n      code === codes.colon ||\r\n      code === codes.underscore ||\r\n      asciiAlphanumeric(code)\r\n    ) {\r\n      effects.consume(code)\r\n      return completeAttributeName\r\n    }\r\n\r\n    return completeAttributeNameAfter(code)\r\n  }\r\n\r\n  /**\r\n   * After attribute name, at an optional initializer, the end of the tag, or\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <a b>\r\n   *         ^\r\n   * > | <a b=c>\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeNameAfter(code) {\r\n    if (code === codes.equalsTo) {\r\n      effects.consume(code)\r\n      return completeAttributeValueBefore\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeNameAfter\r\n    }\r\n\r\n    return completeAttributeNameBefore(code)\r\n  }\r\n\r\n  /**\r\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=c>\r\n   *          ^\r\n   * > | <a b=\"c\">\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueBefore(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.lessThan ||\r\n      code === codes.equalsTo ||\r\n      code === codes.greaterThan ||\r\n      code === codes.graveAccent\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.quotationMark || code === codes.apostrophe) {\r\n      effects.consume(code)\r\n      markerB = code\r\n      return completeAttributeValueQuoted\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeValueBefore\r\n    }\r\n\r\n    return completeAttributeValueUnquoted(code)\r\n  }\r\n\r\n  /**\r\n   * In double or single quoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *           ^\r\n   * > | <a b='c'>\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueQuoted(code) {\r\n    if (code === markerB) {\r\n      effects.consume(code)\r\n      markerB = null\r\n      return completeAttributeValueQuotedAfter\r\n    }\r\n\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      return nok(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return completeAttributeValueQuoted\r\n  }\r\n\r\n  /**\r\n   * In unquoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=c>\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueUnquoted(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.quotationMark ||\r\n      code === codes.apostrophe ||\r\n      code === codes.slash ||\r\n      code === codes.lessThan ||\r\n      code === codes.equalsTo ||\r\n      code === codes.greaterThan ||\r\n      code === codes.graveAccent ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      return completeAttributeNameAfter(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return completeAttributeValueUnquoted\r\n  }\r\n\r\n  /**\r\n   * After double or single quoted attribute value, before whitespace or the\r\n   * end of the tag.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueQuotedAfter(code) {\r\n    if (\r\n      code === codes.slash ||\r\n      code === codes.greaterThan ||\r\n      markdownSpace(code)\r\n    ) {\r\n      return completeAttributeNameBefore(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In certain circumstances of a complete tag where only an `>` is allowed.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeEnd(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.consume(code)\r\n      return completeAfter\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `>` in a complete tag.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAfter(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return continuation(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAfter\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In continuation of any HTML kind.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuation(code) {\r\n    if (code === codes.dash && marker === constants.htmlComment) {\r\n      effects.consume(code)\r\n      return continuationCommentInside\r\n    }\r\n\r\n    if (code === codes.lessThan && marker === constants.htmlRaw) {\r\n      effects.consume(code)\r\n      return continuationRawTagOpen\r\n    }\r\n\r\n    if (code === codes.greaterThan && marker === constants.htmlDeclaration) {\r\n      effects.consume(code)\r\n      return continuationClose\r\n    }\r\n\r\n    if (code === codes.questionMark && marker === constants.htmlInstruction) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n\r\n    if (code === codes.rightSquareBracket && marker === constants.htmlCdata) {\r\n      effects.consume(code)\r\n      return continuationCdataInside\r\n    }\r\n\r\n    if (\r\n      markdownLineEnding(code) &&\r\n      (marker === constants.htmlBasic || marker === constants.htmlComplete)\r\n    ) {\r\n      effects.exit(types.htmlFlowData)\r\n      return effects.check(\r\n        blankLineBefore,\r\n        continuationAfter,\r\n        continuationStart\r\n      )(code)\r\n    }\r\n\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.htmlFlowData)\r\n      return continuationStart(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return continuation\r\n  }\r\n\r\n  /**\r\n   * In continuation, at eol.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   *   | asd\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationStart(code) {\r\n    return effects.check(\r\n      nonLazyContinuationStart,\r\n      continuationStartNonLazy,\r\n      continuationAfter\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * In continuation, at eol, before non-lazy content.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   *   | asd\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationStartNonLazy(code) {\r\n    assert(markdownLineEnding(code))\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return continuationBefore\r\n  }\r\n\r\n  /**\r\n   * In continuation, before non-lazy content.\r\n   *\r\n   * ```markdown\r\n   *   | <x>\r\n   * > | asd\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationBefore(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      return continuationStart(code)\r\n    }\r\n\r\n    effects.enter(types.htmlFlowData)\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In comment continuation, after one `-`, expecting another.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationCommentInside(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In raw continuation, after `<`, at `/`.\r\n   *\r\n   * ```markdown\r\n   * > | <script>console.log(1)</script>\r\n   *                            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationRawTagOpen(code) {\r\n    if (code === codes.slash) {\r\n      effects.consume(code)\r\n      buffer = ''\r\n      return continuationRawEndTag\r\n    }\r\n\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In raw continuation, after `</`, in a raw tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <script>console.log(1)</script>\r\n   *                             ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationRawEndTag(code) {\r\n    if (code === codes.greaterThan) {\r\n      const name = buffer.toLowerCase()\r\n\r\n      if (htmlRawNames.includes(name)) {\r\n        effects.consume(code)\r\n        return continuationClose\r\n      }\r\n\r\n      return continuation(code)\r\n    }\r\n\r\n    if (asciiAlpha(code) && buffer.length < constants.htmlRawSizeMax) {\r\n      effects.consume(code)\r\n      // @ts-expect-error: not null.\r\n      buffer += String.fromCharCode(code)\r\n      return continuationRawEndTag\r\n    }\r\n\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In cdata continuation, after `]`, expecting `]>`.\r\n   *\r\n   * ```markdown\r\n   * > | <![CDATA[>&<]]>\r\n   *                  ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationCdataInside(code) {\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In declaration or instruction continuation, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | <!-->\r\n   *         ^\r\n   * > | <?>\r\n   *       ^\r\n   * > | <!q>\r\n   *        ^\r\n   * > | <!--ab-->\r\n   *             ^\r\n   * > | <![CDATA[>&<]]>\r\n   *                   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationDeclarationInside(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.consume(code)\r\n      return continuationClose\r\n    }\r\n\r\n    // More dashes.\r\n    if (code === codes.dash && marker === constants.htmlComment) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In closed continuation: everything we get until the eol/eof is part of it.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationClose(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.htmlFlowData)\r\n      return continuationAfter(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return continuationClose\r\n  }\r\n\r\n  /**\r\n   * Done.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationAfter(code) {\r\n    effects.exit(types.htmlFlow)\r\n    // // Feel free to interrupt.\r\n    // tokenizer.interrupt = false\r\n    // // No longer concrete.\r\n    // tokenizer.concrete = false\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return start\r\n\r\n  /**\r\n   * At eol, before continuation.\r\n   *\r\n   * ```markdown\r\n   * > | * ```js\r\n   *            ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(types.lineEnding)\r\n      effects.consume(code)\r\n      effects.exit(types.lineEnding)\r\n      return after\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * A continuation.\r\n   *\r\n   * ```markdown\r\n   *   | * ```js\r\n   * > | b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Before eol, expecting blank line.\r\n   *\r\n   * ```markdown\r\n   * > | <div>\r\n   *          ^\r\n   *   |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(markdownLineEnding(code), 'expected a line ending')\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return effects.attempt(blankLine, ok, nok)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {\r\n  asciiAlpha,\r\n  asciiAlphanumeric,\r\n  markdownLineEnding,\r\n  markdownLineEndingOrSpace,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const htmlText = {name: 'htmlText', tokenize: tokenizeHtmlText}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHtmlText(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {NonNullable<Code> | undefined} */\r\n  let marker\r\n  /** @type {number} */\r\n  let index\r\n  /** @type {State} */\r\n  let returnState\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of HTML (text).\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.lessThan, 'expected `<`')\r\n    effects.enter(types.htmlText)\r\n    effects.enter(types.htmlTextData)\r\n    effects.consume(code)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `<`, at tag name or other stuff.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *        ^\r\n   * > | a <!doctype> c\r\n   *        ^\r\n   * > | a <!--b--> c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === codes.exclamationMark) {\r\n      effects.consume(code)\r\n      return declarationOpen\r\n    }\r\n\r\n    if (code === codes.slash) {\r\n      effects.consume(code)\r\n      return tagCloseStart\r\n    }\r\n\r\n    if (code === codes.questionMark) {\r\n      effects.consume(code)\r\n      return instruction\r\n    }\r\n\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return tagOpen\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<!`, at declaration, comment, or CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | a <!doctype> c\r\n   *         ^\r\n   * > | a <!--b--> c\r\n   *         ^\r\n   * > | a <![CDATA[>&<]]> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function declarationOpen(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      return commentOpenInside\r\n    }\r\n\r\n    if (code === codes.leftSquareBracket) {\r\n      effects.consume(code)\r\n      index = 0\r\n      return cdataOpenInside\r\n    }\r\n\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return declaration\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In a comment, after `<!-`, at another `-`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentOpenInside(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      return commentEnd\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In comment.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function comment(code) {\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      return commentClose\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = comment\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return comment\r\n  }\r\n\r\n  /**\r\n   * In comment, after `-`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentClose(code) {\r\n    if (code === codes.dash) {\r\n      effects.consume(code)\r\n      return commentEnd\r\n    }\r\n\r\n    return comment(code)\r\n  }\r\n\r\n  /**\r\n   * In comment, after `--`.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--b--> c\r\n   *              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentEnd(code) {\r\n    return code === codes.greaterThan\r\n      ? end(code)\r\n      : code === codes.dash\r\n        ? commentClose(code)\r\n        : comment(code)\r\n  }\r\n\r\n  /**\r\n   * After `<![`, in CDATA, expecting `CDATA[`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *          ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataOpenInside(code) {\r\n    const value = constants.cdataOpeningString\r\n\r\n    if (code === value.charCodeAt(index++)) {\r\n      effects.consume(code)\r\n      return index === value.length ? cdata : cdataOpenInside\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                ^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdata(code) {\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.consume(code)\r\n      return cdataClose\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = cdata\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return cdata\r\n  }\r\n\r\n  /**\r\n   * In CDATA, after `]`, at another `]`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                    ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataClose(code) {\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.consume(code)\r\n      return cdataEnd\r\n    }\r\n\r\n    return cdata(code)\r\n  }\r\n\r\n  /**\r\n   * In CDATA, after `]]`, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | a <![CDATA[>&<]]> b\r\n   *                     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataEnd(code) {\r\n    if (code === codes.greaterThan) {\r\n      return end(code)\r\n    }\r\n\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.consume(code)\r\n      return cdataEnd\r\n    }\r\n\r\n    return cdata(code)\r\n  }\r\n\r\n  /**\r\n   * In declaration.\r\n   *\r\n   * ```markdown\r\n   * > | a <!b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function declaration(code) {\r\n    if (code === codes.eof || code === codes.greaterThan) {\r\n      return end(code)\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = declaration\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return declaration\r\n  }\r\n\r\n  /**\r\n   * In instruction.\r\n   *\r\n   * ```markdown\r\n   * > | a <?b?> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function instruction(code) {\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.questionMark) {\r\n      effects.consume(code)\r\n      return instructionClose\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = instruction\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return instruction\r\n  }\r\n\r\n  /**\r\n   * In instruction, after `?`, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | a <?b?> c\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function instructionClose(code) {\r\n    return code === codes.greaterThan ? end(code) : instruction(code)\r\n  }\r\n\r\n  /**\r\n   * After `</`, in closing tag, at tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagCloseStart(code) {\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return tagClose\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `</x`, in a tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagClose(code) {\r\n    // ASCII alphanumerical and `-`.\r\n    if (code === codes.dash || asciiAlphanumeric(code)) {\r\n      effects.consume(code)\r\n      return tagClose\r\n    }\r\n\r\n    return tagCloseBetween(code)\r\n  }\r\n\r\n  /**\r\n   * In closing tag, after tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a </b> c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagCloseBetween(code) {\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagCloseBetween\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return tagCloseBetween\r\n    }\r\n\r\n    return end(code)\r\n  }\r\n\r\n  /**\r\n   * After `<x`, in opening tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpen(code) {\r\n    // ASCII alphanumerical and `-`.\r\n    if (code === codes.dash || asciiAlphanumeric(code)) {\r\n      effects.consume(code)\r\n      return tagOpen\r\n    }\r\n\r\n    if (\r\n      code === codes.slash ||\r\n      code === codes.greaterThan ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      return tagOpenBetween(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In opening tag, after tag name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b> c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenBetween(code) {\r\n    if (code === codes.slash) {\r\n      effects.consume(code)\r\n      return end\r\n    }\r\n\r\n    // ASCII alphabetical and `:` and `_`.\r\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeName\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenBetween\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return tagOpenBetween\r\n    }\r\n\r\n    return end(code)\r\n  }\r\n\r\n  /**\r\n   * In attribute name.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c> d\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeName(code) {\r\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\r\n    if (\r\n      code === codes.dash ||\r\n      code === codes.dot ||\r\n      code === codes.colon ||\r\n      code === codes.underscore ||\r\n      asciiAlphanumeric(code)\r\n    ) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeName\r\n    }\r\n\r\n    return tagOpenAttributeNameAfter(code)\r\n  }\r\n\r\n  /**\r\n   * After attribute name, before initializer, the end of the tag, or\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c> d\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeNameAfter(code) {\r\n    if (code === codes.equalsTo) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeValueBefore\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenAttributeNameAfter\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeNameAfter\r\n    }\r\n\r\n    return tagOpenBetween(code)\r\n  }\r\n\r\n  /**\r\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=d> e\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueBefore(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.lessThan ||\r\n      code === codes.equalsTo ||\r\n      code === codes.greaterThan ||\r\n      code === codes.graveAccent\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (code === codes.quotationMark || code === codes.apostrophe) {\r\n      effects.consume(code)\r\n      marker = code\r\n      return tagOpenAttributeValueQuoted\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenAttributeValueBefore\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return tagOpenAttributeValueBefore\r\n    }\r\n\r\n    effects.consume(code)\r\n    return tagOpenAttributeValueUnquoted\r\n  }\r\n\r\n  /**\r\n   * In double or single quoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueQuoted(code) {\r\n    if (code === marker) {\r\n      effects.consume(code)\r\n      marker = undefined\r\n      return tagOpenAttributeValueQuotedAfter\r\n    }\r\n\r\n    if (code === codes.eof) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (markdownLineEnding(code)) {\r\n      returnState = tagOpenAttributeValueQuoted\r\n      return lineEndingBefore(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return tagOpenAttributeValueQuoted\r\n  }\r\n\r\n  /**\r\n   * In unquoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=d> e\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueUnquoted(code) {\r\n    if (\r\n      code === codes.eof ||\r\n      code === codes.quotationMark ||\r\n      code === codes.apostrophe ||\r\n      code === codes.lessThan ||\r\n      code === codes.equalsTo ||\r\n      code === codes.graveAccent\r\n    ) {\r\n      return nok(code)\r\n    }\r\n\r\n    if (\r\n      code === codes.slash ||\r\n      code === codes.greaterThan ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      return tagOpenBetween(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return tagOpenAttributeValueUnquoted\r\n  }\r\n\r\n  /**\r\n   * After double or single quoted attribute value, before whitespace or the end\r\n   * of the tag.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagOpenAttributeValueQuotedAfter(code) {\r\n    if (\r\n      code === codes.slash ||\r\n      code === codes.greaterThan ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      return tagOpenBetween(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In certain circumstances of a tag where only an `>` is allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a <b c=\"d\"> e\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function end(code) {\r\n    if (code === codes.greaterThan) {\r\n      effects.consume(code)\r\n      effects.exit(types.htmlTextData)\r\n      effects.exit(types.htmlText)\r\n      return ok\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * At eol.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   * > | a <!--a\r\n   *            ^\r\n   *   | b-->\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineEndingBefore(code) {\r\n    assert(returnState, 'expected return state')\r\n    assert(markdownLineEnding(code), 'expected eol')\r\n    effects.exit(types.htmlTextData)\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return lineEndingAfter\r\n  }\r\n\r\n  /**\r\n   * After eol, at optional whitespace.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   *   | a <!--a\r\n   * > | b-->\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineEndingAfter(code) {\r\n    // Always populated by defaults.\r\n    assert(\r\n      self.parser.constructs.disable.null,\r\n      'expected `disable.null` to be populated'\r\n    )\r\n    return markdownSpace(code)\r\n      ? factorySpace(\r\n          effects,\r\n          lineEndingAfterPrefix,\r\n          types.linePrefix,\r\n          self.parser.constructs.disable.null.includes('codeIndented')\r\n            ? undefined\r\n            : constants.tabSize\r\n        )(code)\r\n      : lineEndingAfterPrefix(code)\r\n  }\r\n\r\n  /**\r\n   * After eol, after optional whitespace.\r\n   *\r\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\r\n   * > empty tokens.\r\n   *\r\n   * ```markdown\r\n   *   | a <!--a\r\n   * > | b-->\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function lineEndingAfterPrefix(code) {\r\n    effects.enter(types.htmlTextData)\r\n    return returnState(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factoryDestination} from 'micromark-factory-destination'\r\nimport {factoryLabel} from 'micromark-factory-label'\r\nimport {factoryTitle} from 'micromark-factory-title'\r\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\r\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\r\nimport {push, splice} from 'micromark-util-chunked'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\nimport {resolveAll} from 'micromark-util-resolve-all'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const labelEnd = {\r\n  name: 'labelEnd',\r\n  tokenize: tokenizeLabelEnd,\r\n  resolveTo: resolveToLabelEnd,\r\n  resolveAll: resolveAllLabelEnd\r\n}\r\n\r\n/** @type {Construct} */\r\nconst resourceConstruct = {tokenize: tokenizeResource}\r\n/** @type {Construct} */\r\nconst referenceFullConstruct = {tokenize: tokenizeReferenceFull}\r\n/** @type {Construct} */\r\nconst referenceCollapsedConstruct = {tokenize: tokenizeReferenceCollapsed}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveAllLabelEnd(events) {\r\n  let index = -1\r\n\r\n  while (++index < events.length) {\r\n    const token = events[index][1]\r\n\r\n    if (\r\n      token.type === types.labelImage ||\r\n      token.type === types.labelLink ||\r\n      token.type === types.labelEnd\r\n    ) {\r\n      // Remove the marker.\r\n      events.splice(index + 1, token.type === types.labelImage ? 4 : 2)\r\n      token.type = types.data\r\n      index++\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveToLabelEnd(events, context) {\r\n  let index = events.length\r\n  let offset = 0\r\n  /** @type {Token} */\r\n  let token\r\n  /** @type {number | undefined} */\r\n  let open\r\n  /** @type {number | undefined} */\r\n  let close\r\n  /** @type {Array<Event>} */\r\n  let media\r\n\r\n  // Find an opening.\r\n  while (index--) {\r\n    token = events[index][1]\r\n\r\n    if (open) {\r\n      // If we see another link, or inactive link label, we’ve been here before.\r\n      if (\r\n        token.type === types.link ||\r\n        (token.type === types.labelLink && token._inactive)\r\n      ) {\r\n        break\r\n      }\r\n\r\n      // Mark other link openings as inactive, as we can’t have links in\r\n      // links.\r\n      if (events[index][0] === 'enter' && token.type === types.labelLink) {\r\n        token._inactive = true\r\n      }\r\n    } else if (close) {\r\n      if (\r\n        events[index][0] === 'enter' &&\r\n        (token.type === types.labelImage || token.type === types.labelLink) &&\r\n        !token._balanced\r\n      ) {\r\n        open = index\r\n\r\n        if (token.type !== types.labelLink) {\r\n          offset = 2\r\n          break\r\n        }\r\n      }\r\n    } else if (token.type === types.labelEnd) {\r\n      close = index\r\n    }\r\n  }\r\n\r\n  assert(open !== undefined, '`open` is supposed to be found')\r\n  assert(close !== undefined, '`close` is supposed to be found')\r\n\r\n  const group = {\r\n    type: events[open][1].type === types.labelLink ? types.link : types.image,\r\n    start: Object.assign({}, events[open][1].start),\r\n    end: Object.assign({}, events[events.length - 1][1].end)\r\n  }\r\n\r\n  const label = {\r\n    type: types.label,\r\n    start: Object.assign({}, events[open][1].start),\r\n    end: Object.assign({}, events[close][1].end)\r\n  }\r\n\r\n  const text = {\r\n    type: types.labelText,\r\n    start: Object.assign({}, events[open + offset + 2][1].end),\r\n    end: Object.assign({}, events[close - 2][1].start)\r\n  }\r\n\r\n  media = [\r\n    ['enter', group, context],\r\n    ['enter', label, context]\r\n  ]\r\n\r\n  // Opening marker.\r\n  media = push(media, events.slice(open + 1, open + offset + 3))\r\n\r\n  // Text open.\r\n  media = push(media, [['enter', text, context]])\r\n\r\n  // Always populated by defaults.\r\n  assert(\r\n    context.parser.constructs.insideSpan.null,\r\n    'expected `insideSpan.null` to be populated'\r\n  )\r\n  // Between.\r\n  media = push(\r\n    media,\r\n    resolveAll(\r\n      context.parser.constructs.insideSpan.null,\r\n      events.slice(open + offset + 4, close - 3),\r\n      context\r\n    )\r\n  )\r\n\r\n  // Text close, marker close, label close.\r\n  media = push(media, [\r\n    ['exit', text, context],\r\n    events[close - 2],\r\n    events[close - 1],\r\n    ['exit', label, context]\r\n  ])\r\n\r\n  // Reference, resource, or so.\r\n  media = push(media, events.slice(close + 1))\r\n\r\n  // Media close.\r\n  media = push(media, [['exit', group, context]])\r\n\r\n  splice(events, open, events.length, media)\r\n\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLabelEnd(effects, ok, nok) {\r\n  const self = this\r\n  let index = self.events.length\r\n  /** @type {Token} */\r\n  let labelStart\r\n  /** @type {boolean} */\r\n  let defined\r\n\r\n  // Find an opening.\r\n  while (index--) {\r\n    if (\r\n      (self.events[index][1].type === types.labelImage ||\r\n        self.events[index][1].type === types.labelLink) &&\r\n      !self.events[index][1]._balanced\r\n    ) {\r\n      labelStart = self.events[index][1]\r\n      break\r\n    }\r\n  }\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of label end.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *       ^\r\n   * > | [a][b] c\r\n   *       ^\r\n   * > | [a][] b\r\n   *       ^\r\n   * > | [a] b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.rightSquareBracket, 'expected `]`')\r\n\r\n    // If there is not an okay opening.\r\n    if (!labelStart) {\r\n      return nok(code)\r\n    }\r\n\r\n    // If the corresponding label (link) start is marked as inactive,\r\n    // it means we’d be wrapping a link, like this:\r\n    //\r\n    // ```markdown\r\n    // > | a [b [c](d) e](f) g.\r\n    //                  ^\r\n    // ```\r\n    //\r\n    // We can’t have that, so it’s just balanced brackets.\r\n    if (labelStart._inactive) {\r\n      return labelEndNok(code)\r\n    }\r\n\r\n    defined = self.parser.defined.includes(\r\n      normalizeIdentifier(\r\n        self.sliceSerialize({start: labelStart.end, end: self.now()})\r\n      )\r\n    )\r\n    effects.enter(types.labelEnd)\r\n    effects.enter(types.labelMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.labelMarker)\r\n    effects.exit(types.labelEnd)\r\n    return after\r\n  }\r\n\r\n  /**\r\n   * After `]`.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *       ^\r\n   * > | [a][b] c\r\n   *       ^\r\n   * > | [a][] b\r\n   *       ^\r\n   * > | [a] b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\r\n    // an extension.\r\n\r\n    // Resource (`[asd](fgh)`)?\r\n    if (code === codes.leftParenthesis) {\r\n      return effects.attempt(\r\n        resourceConstruct,\r\n        labelEndOk,\r\n        defined ? labelEndOk : labelEndNok\r\n      )(code)\r\n    }\r\n\r\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\r\n    if (code === codes.leftSquareBracket) {\r\n      return effects.attempt(\r\n        referenceFullConstruct,\r\n        labelEndOk,\r\n        defined ? referenceNotFull : labelEndNok\r\n      )(code)\r\n    }\r\n\r\n    // Shortcut (`[asd]`) reference?\r\n    return defined ? labelEndOk(code) : labelEndNok(code)\r\n  }\r\n\r\n  /**\r\n   * After `]`, at `[`, but not at a full reference.\r\n   *\r\n   * > 👉 **Note**: we only get here if the label is defined.\r\n   *\r\n   * ```markdown\r\n   * > | [a][] b\r\n   *        ^\r\n   * > | [a] b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceNotFull(code) {\r\n    return effects.attempt(\r\n      referenceCollapsedConstruct,\r\n      labelEndOk,\r\n      labelEndNok\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * Done, we found something.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *           ^\r\n   * > | [a][b] c\r\n   *           ^\r\n   * > | [a][] b\r\n   *          ^\r\n   * > | [a] b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEndOk(code) {\r\n    // Note: `markdown-rs` does a bunch of stuff here.\r\n    return ok(code)\r\n  }\r\n\r\n  /**\r\n   * Done, it’s nothing.\r\n   *\r\n   * There was an okay opening, but we didn’t match anything.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b c\r\n   *        ^\r\n   * > | [a][b c\r\n   *        ^\r\n   * > | [a] b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEndNok(code) {\r\n    labelStart._balanced = true\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeResource(effects, ok, nok) {\r\n  return resourceStart\r\n\r\n  /**\r\n   * At a resource.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceStart(code) {\r\n    assert(code === codes.leftParenthesis, 'expected left paren')\r\n    effects.enter(types.resource)\r\n    effects.enter(types.resourceMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.resourceMarker)\r\n    return resourceBefore\r\n  }\r\n\r\n  /**\r\n   * In resource, after `(`, at optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceBefore(code) {\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, resourceOpen)(code)\r\n      : resourceOpen(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, after optional whitespace, at `)` or a destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceOpen(code) {\r\n    if (code === codes.rightParenthesis) {\r\n      return resourceEnd(code)\r\n    }\r\n\r\n    return factoryDestination(\r\n      effects,\r\n      resourceDestinationAfter,\r\n      resourceDestinationMissing,\r\n      types.resourceDestination,\r\n      types.resourceDestinationLiteral,\r\n      types.resourceDestinationLiteralMarker,\r\n      types.resourceDestinationRaw,\r\n      types.resourceDestinationString,\r\n      constants.linkResourceDestinationBalanceMax\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, after destination, at optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) c\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceDestinationAfter(code) {\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, resourceBetween)(code)\r\n      : resourceEnd(code)\r\n  }\r\n\r\n  /**\r\n   * At invalid destination.\r\n   *\r\n   * ```markdown\r\n   * > | [a](<<) b\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceDestinationMissing(code) {\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, after destination and whitespace, at `(` or title.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b ) c\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceBetween(code) {\r\n    if (\r\n      code === codes.quotationMark ||\r\n      code === codes.apostrophe ||\r\n      code === codes.leftParenthesis\r\n    ) {\r\n      return factoryTitle(\r\n        effects,\r\n        resourceTitleAfter,\r\n        nok,\r\n        types.resourceTitle,\r\n        types.resourceTitleMarker,\r\n        types.resourceTitleString\r\n      )(code)\r\n    }\r\n\r\n    return resourceEnd(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, after title, at optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b \"c\") d\r\n   *              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceTitleAfter(code) {\r\n    return markdownLineEndingOrSpace(code)\r\n      ? factoryWhitespace(effects, resourceEnd)(code)\r\n      : resourceEnd(code)\r\n  }\r\n\r\n  /**\r\n   * In resource, at `)`.\r\n   *\r\n   * ```markdown\r\n   * > | [a](b) d\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function resourceEnd(code) {\r\n    if (code === codes.rightParenthesis) {\r\n      effects.enter(types.resourceMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.resourceMarker)\r\n      effects.exit(types.resource)\r\n      return ok\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeReferenceFull(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return referenceFull\r\n\r\n  /**\r\n   * In a reference (full), at the `[`.\r\n   *\r\n   * ```markdown\r\n   * > | [a][b] d\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceFull(code) {\r\n    assert(code === codes.leftSquareBracket, 'expected left bracket')\r\n    return factoryLabel.call(\r\n      self,\r\n      effects,\r\n      referenceFullAfter,\r\n      referenceFullMissing,\r\n      types.reference,\r\n      types.referenceMarker,\r\n      types.referenceString\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * In a reference (full), after `]`.\r\n   *\r\n   * ```markdown\r\n   * > | [a][b] d\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceFullAfter(code) {\r\n    return self.parser.defined.includes(\r\n      normalizeIdentifier(\r\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\r\n      )\r\n    )\r\n      ? ok(code)\r\n      : nok(code)\r\n  }\r\n\r\n  /**\r\n   * In reference (full) that was missing.\r\n   *\r\n   * ```markdown\r\n   * > | [a][b d\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceFullMissing(code) {\r\n    return nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\r\n  return referenceCollapsedStart\r\n\r\n  /**\r\n   * In reference (collapsed), at `[`.\r\n   *\r\n   * > 👉 **Note**: we only get here if the label is defined.\r\n   *\r\n   * ```markdown\r\n   * > | [a][] d\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function referenceCollapsedStart(code) {\r\n    // We only attempt a collapsed label if there’s a `[`.\r\n    assert(code === codes.leftSquareBracket, 'expected left bracket')\r\n    effects.enter(types.reference)\r\n    effects.enter(types.referenceMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.referenceMarker)\r\n    return referenceCollapsedOpen\r\n  }\r\n\r\n  /**\r\n   * In reference (collapsed), at `]`.\r\n   *\r\n   * > 👉 **Note**: we only get here if the label is defined.\r\n   *\r\n   * ```markdown\r\n   * > | [a][] d\r\n   *         ^\r\n   * ```\r\n   *\r\n   *  @type {State}\r\n   */\r\n  function referenceCollapsedOpen(code) {\r\n    if (code === codes.rightSquareBracket) {\r\n      effects.enter(types.referenceMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.referenceMarker)\r\n      effects.exit(types.reference)\r\n      return ok\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {codes, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\nimport {labelEnd} from './label-end.js'\r\n\r\n/** @type {Construct} */\r\nexport const labelStartImage = {\r\n  name: 'labelStartImage',\r\n  tokenize: tokenizeLabelStartImage,\r\n  resolveAll: labelEnd.resolveAll\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLabelStartImage(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of label (image) start.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.exclamationMark, 'expected `!`')\r\n    effects.enter(types.labelImage)\r\n    effects.enter(types.labelImageMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.labelImageMarker)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `!`, at `[`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === codes.leftSquareBracket) {\r\n      effects.enter(types.labelMarker)\r\n      effects.consume(code)\r\n      effects.exit(types.labelMarker)\r\n      effects.exit(types.labelImage)\r\n      return after\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `![`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * This is needed in because, when GFM footnotes are enabled, images never\r\n   * form when started with a `^`.\r\n   * Instead, links form:\r\n   *\r\n   * ```markdown\r\n   * ![^a](b)\r\n   *\r\n   * ![^a][b]\r\n   *\r\n   * [b]: c\r\n   * ```\r\n   *\r\n   * ```html\r\n   * <p>!<a href=\\\"b\\\">^a</a></p>\r\n   * <p>!<a href=\\\"c\\\">^a</a></p>\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // To do: use a new field to do this, this is still needed for\r\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\r\n    // behavior isn’t.\r\n    // Hidden footnotes hook.\r\n    /* c8 ignore next 3 */\r\n    return code === codes.caret &&\r\n      '_hiddenFootnoteSupport' in self.parser.constructs\r\n      ? nok(code)\r\n      : ok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {codes, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\nimport {labelEnd} from './label-end.js'\r\n\r\n/** @type {Construct} */\r\nexport const labelStartLink = {\r\n  name: 'labelStartLink',\r\n  tokenize: tokenizeLabelStartLink,\r\n  resolveAll: labelEnd.resolveAll\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLabelStartLink(effects, ok, nok) {\r\n  const self = this\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of label (link) start.\r\n   *\r\n   * ```markdown\r\n   * > | a [b] c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    assert(code === codes.leftSquareBracket, 'expected `[`')\r\n    effects.enter(types.labelLink)\r\n    effects.enter(types.labelMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.labelMarker)\r\n    effects.exit(types.labelLink)\r\n    return after\r\n  }\r\n\r\n  /** @type {State} */\r\n  function after(code) {\r\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\r\n    // remove.\r\n    // Hidden footnotes hook.\r\n    /* c8 ignore next 3 */\r\n    return code === codes.caret &&\r\n      '_hiddenFootnoteSupport' in self.parser.constructs\r\n      ? nok(code)\r\n      : ok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const lineEnding = {name: 'lineEnding', tokenize: tokenizeLineEnding}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLineEnding(effects, ok) {\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    assert(markdownLineEnding(code), 'expected eol')\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    return factorySpace(effects, ok, types.linePrefix)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const thematicBreak = {\r\n  name: 'thematicBreak',\r\n  tokenize: tokenizeThematicBreak\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeThematicBreak(effects, ok, nok) {\r\n  let size = 0\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n\r\n  return start\r\n\r\n  /**\r\n   * Start of thematic break.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter(types.thematicBreak)\r\n    // To do: parse indent like `markdown-rs`.\r\n    return before(code)\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at marker.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    assert(\r\n      code === codes.asterisk ||\r\n        code === codes.dash ||\r\n        code === codes.underscore,\r\n      'expected `*`, `-`, or `_`'\r\n    )\r\n    marker = code\r\n    return atBreak(code)\r\n  }\r\n\r\n  /**\r\n   * After something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === marker) {\r\n      effects.enter(types.thematicBreakSequence)\r\n      return sequence(code)\r\n    }\r\n\r\n    if (\r\n      size >= constants.thematicBreakMarkerCountMin &&\r\n      (code === codes.eof || markdownLineEnding(code))\r\n    ) {\r\n      effects.exit(types.thematicBreak)\r\n      return ok(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequence(code) {\r\n    if (code === marker) {\r\n      effects.consume(code)\r\n      size++\r\n      return sequence\r\n    }\r\n\r\n    effects.exit(types.thematicBreakSequence)\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, atBreak, types.whitespace)(code)\r\n      : atBreak(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\r\n * @typedef {import('micromark-util-types').Exiter} Exiter\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\nimport {blankLine} from './blank-line.js'\r\nimport {thematicBreak} from './thematic-break.js'\r\n\r\n/** @type {Construct} */\r\nexport const list = {\r\n  name: 'list',\r\n  tokenize: tokenizeListStart,\r\n  continuation: {tokenize: tokenizeListContinuation},\r\n  exit: tokenizeListEnd\r\n}\r\n\r\n/** @type {Construct} */\r\nconst listItemPrefixWhitespaceConstruct = {\r\n  tokenize: tokenizeListItemPrefixWhitespace,\r\n  partial: true\r\n}\r\n\r\n/** @type {Construct} */\r\nconst indentConstruct = {tokenize: tokenizeIndent, partial: true}\r\n\r\n// To do: `markdown-rs` parses list items on their own and later stitches them\r\n// together.\r\n\r\n/**\r\n * @type {Tokenizer}\r\n * @this {TokenizeContext}\r\n */\r\nfunction tokenizeListStart(effects, ok, nok) {\r\n  const self = this\r\n  const tail = self.events[self.events.length - 1]\r\n  let initialSize =\r\n    tail && tail[1].type === types.linePrefix\r\n      ? tail[2].sliceSerialize(tail[1], true).length\r\n      : 0\r\n  let size = 0\r\n\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    assert(self.containerState, 'expected state')\r\n    const kind =\r\n      self.containerState.type ||\r\n      (code === codes.asterisk || code === codes.plusSign || code === codes.dash\r\n        ? types.listUnordered\r\n        : types.listOrdered)\r\n\r\n    if (\r\n      kind === types.listUnordered\r\n        ? !self.containerState.marker || code === self.containerState.marker\r\n        : asciiDigit(code)\r\n    ) {\r\n      if (!self.containerState.type) {\r\n        self.containerState.type = kind\r\n        effects.enter(kind, {_container: true})\r\n      }\r\n\r\n      if (kind === types.listUnordered) {\r\n        effects.enter(types.listItemPrefix)\r\n        return code === codes.asterisk || code === codes.dash\r\n          ? effects.check(thematicBreak, nok, atMarker)(code)\r\n          : atMarker(code)\r\n      }\r\n\r\n      if (!self.interrupt || code === codes.digit1) {\r\n        effects.enter(types.listItemPrefix)\r\n        effects.enter(types.listItemValue)\r\n        return inside(code)\r\n      }\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function inside(code) {\r\n    assert(self.containerState, 'expected state')\r\n    if (asciiDigit(code) && ++size < constants.listItemValueSizeMax) {\r\n      effects.consume(code)\r\n      return inside\r\n    }\r\n\r\n    if (\r\n      (!self.interrupt || size < 2) &&\r\n      (self.containerState.marker\r\n        ? code === self.containerState.marker\r\n        : code === codes.rightParenthesis || code === codes.dot)\r\n    ) {\r\n      effects.exit(types.listItemValue)\r\n      return atMarker(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * @type {State}\r\n   **/\r\n  function atMarker(code) {\r\n    assert(self.containerState, 'expected state')\r\n    assert(code !== codes.eof, 'eof (`null`) is not a marker')\r\n    effects.enter(types.listItemMarker)\r\n    effects.consume(code)\r\n    effects.exit(types.listItemMarker)\r\n    self.containerState.marker = self.containerState.marker || code\r\n    return effects.check(\r\n      blankLine,\r\n      // Can’t be empty when interrupting.\r\n      self.interrupt ? nok : onBlank,\r\n      effects.attempt(\r\n        listItemPrefixWhitespaceConstruct,\r\n        endOfPrefix,\r\n        otherPrefix\r\n      )\r\n    )\r\n  }\r\n\r\n  /** @type {State} */\r\n  function onBlank(code) {\r\n    assert(self.containerState, 'expected state')\r\n    self.containerState.initialBlankLine = true\r\n    initialSize++\r\n    return endOfPrefix(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function otherPrefix(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.enter(types.listItemPrefixWhitespace)\r\n      effects.consume(code)\r\n      effects.exit(types.listItemPrefixWhitespace)\r\n      return endOfPrefix\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function endOfPrefix(code) {\r\n    assert(self.containerState, 'expected state')\r\n    self.containerState.size =\r\n      initialSize +\r\n      self.sliceSerialize(effects.exit(types.listItemPrefix), true).length\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @type {Tokenizer}\r\n * @this {TokenizeContext}\r\n */\r\nfunction tokenizeListContinuation(effects, ok, nok) {\r\n  const self = this\r\n\r\n  assert(self.containerState, 'expected state')\r\n  self.containerState._closeFlow = undefined\r\n\r\n  return effects.check(blankLine, onBlank, notBlank)\r\n\r\n  /** @type {State} */\r\n  function onBlank(code) {\r\n    assert(self.containerState, 'expected state')\r\n    assert(typeof self.containerState.size === 'number', 'expected size')\r\n    self.containerState.furtherBlankLines =\r\n      self.containerState.furtherBlankLines ||\r\n      self.containerState.initialBlankLine\r\n\r\n    // We have a blank line.\r\n    // Still, try to consume at most the items size.\r\n    return factorySpace(\r\n      effects,\r\n      ok,\r\n      types.listItemIndent,\r\n      self.containerState.size + 1\r\n    )(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function notBlank(code) {\r\n    assert(self.containerState, 'expected state')\r\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\r\n      self.containerState.furtherBlankLines = undefined\r\n      self.containerState.initialBlankLine = undefined\r\n      return notInCurrentItem(code)\r\n    }\r\n\r\n    self.containerState.furtherBlankLines = undefined\r\n    self.containerState.initialBlankLine = undefined\r\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function notInCurrentItem(code) {\r\n    assert(self.containerState, 'expected state')\r\n    // While we do continue, we signal that the flow should be closed.\r\n    self.containerState._closeFlow = true\r\n    // As we’re closing flow, we’re no longer interrupting.\r\n    self.interrupt = undefined\r\n    // Always populated by defaults.\r\n    assert(\r\n      self.parser.constructs.disable.null,\r\n      'expected `disable.null` to be populated'\r\n    )\r\n    return factorySpace(\r\n      effects,\r\n      effects.attempt(list, ok, nok),\r\n      types.linePrefix,\r\n      self.parser.constructs.disable.null.includes('codeIndented')\r\n        ? undefined\r\n        : constants.tabSize\r\n    )(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @type {Tokenizer}\r\n * @this {TokenizeContext}\r\n */\r\nfunction tokenizeIndent(effects, ok, nok) {\r\n  const self = this\r\n\r\n  assert(self.containerState, 'expected state')\r\n  assert(typeof self.containerState.size === 'number', 'expected size')\r\n\r\n  return factorySpace(\r\n    effects,\r\n    afterPrefix,\r\n    types.listItemIndent,\r\n    self.containerState.size + 1\r\n  )\r\n\r\n  /** @type {State} */\r\n  function afterPrefix(code) {\r\n    assert(self.containerState, 'expected state')\r\n    const tail = self.events[self.events.length - 1]\r\n    return tail &&\r\n      tail[1].type === types.listItemIndent &&\r\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\r\n      ? ok(code)\r\n      : nok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @type {Exiter}\r\n * @this {TokenizeContext}\r\n */\r\nfunction tokenizeListEnd(effects) {\r\n  assert(this.containerState, 'expected state')\r\n  assert(typeof this.containerState.type === 'string', 'expected type')\r\n  effects.exit(this.containerState.type)\r\n}\r\n\r\n/**\r\n * @type {Tokenizer}\r\n * @this {TokenizeContext}\r\n */\r\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\r\n  const self = this\r\n\r\n  // Always populated by defaults.\r\n  assert(\r\n    self.parser.constructs.disable.null,\r\n    'expected `disable.null` to be populated'\r\n  )\r\n\r\n  return factorySpace(\r\n    effects,\r\n    afterPrefix,\r\n    types.listItemPrefixWhitespace,\r\n    self.parser.constructs.disable.null.includes('codeIndented')\r\n      ? undefined\r\n      : constants.tabSize + 1\r\n  )\r\n\r\n  /** @type {State} */\r\n  function afterPrefix(code) {\r\n    const tail = self.events[self.events.length - 1]\r\n\r\n    return !markdownSpace(code) &&\r\n      tail &&\r\n      tail[1].type === types.listItemPrefixWhitespace\r\n      ? ok(code)\r\n      : nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\nimport {codes, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {Construct} */\r\nexport const setextUnderline = {\r\n  name: 'setextUnderline',\r\n  tokenize: tokenizeSetextUnderline,\r\n  resolveTo: resolveToSetextUnderline\r\n}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveToSetextUnderline(events, context) {\r\n  // To do: resolve like `markdown-rs`.\r\n  let index = events.length\r\n  /** @type {number | undefined} */\r\n  let content\r\n  /** @type {number | undefined} */\r\n  let text\r\n  /** @type {number | undefined} */\r\n  let definition\r\n\r\n  // Find the opening of the content.\r\n  // It’ll always exist: we don’t tokenize if it isn’t there.\r\n  while (index--) {\r\n    if (events[index][0] === 'enter') {\r\n      if (events[index][1].type === types.content) {\r\n        content = index\r\n        break\r\n      }\r\n\r\n      if (events[index][1].type === types.paragraph) {\r\n        text = index\r\n      }\r\n    }\r\n    // Exit\r\n    else {\r\n      if (events[index][1].type === types.content) {\r\n        // Remove the content end (if needed we’ll add it later)\r\n        events.splice(index, 1)\r\n      }\r\n\r\n      if (!definition && events[index][1].type === types.definition) {\r\n        definition = index\r\n      }\r\n    }\r\n  }\r\n\r\n  assert(text !== undefined, 'expected a `text` index to be found')\r\n  assert(content !== undefined, 'expected a `text` index to be found')\r\n\r\n  const heading = {\r\n    type: types.setextHeading,\r\n    start: Object.assign({}, events[text][1].start),\r\n    end: Object.assign({}, events[events.length - 1][1].end)\r\n  }\r\n\r\n  // Change the paragraph to setext heading text.\r\n  events[text][1].type = types.setextHeadingText\r\n\r\n  // If we have definitions in the content, we’ll keep on having content,\r\n  // but we need move it.\r\n  if (definition) {\r\n    events.splice(text, 0, ['enter', heading, context])\r\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\r\n    events[content][1].end = Object.assign({}, events[definition][1].end)\r\n  } else {\r\n    events[content][1] = heading\r\n  }\r\n\r\n  // Add the heading exit at the end.\r\n  events.push(['exit', heading, context])\r\n\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeSetextUnderline(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n\r\n  return start\r\n\r\n  /**\r\n   * At start of heading (setext) underline.\r\n   *\r\n   * ```markdown\r\n   *   | aa\r\n   * > | ==\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    let index = self.events.length\r\n    /** @type {boolean | undefined} */\r\n    let paragraph\r\n\r\n    assert(\r\n      code === codes.dash || code === codes.equalsTo,\r\n      'expected `=` or `-`'\r\n    )\r\n\r\n    // Find an opening.\r\n    while (index--) {\r\n      // Skip enter/exit of line ending, line prefix, and content.\r\n      // We can now either have a definition or a paragraph.\r\n      if (\r\n        self.events[index][1].type !== types.lineEnding &&\r\n        self.events[index][1].type !== types.linePrefix &&\r\n        self.events[index][1].type !== types.content\r\n      ) {\r\n        paragraph = self.events[index][1].type === types.paragraph\r\n        break\r\n      }\r\n    }\r\n\r\n    // To do: handle lazy/pierce like `markdown-rs`.\r\n    // To do: parse indent like `markdown-rs`.\r\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\r\n      effects.enter(types.setextHeadingLine)\r\n      marker = code\r\n      return before(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at `-` or `=`.\r\n   *\r\n   * ```markdown\r\n   *   | aa\r\n   * > | ==\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    effects.enter(types.setextHeadingLineSequence)\r\n    return inside(code)\r\n  }\r\n\r\n  /**\r\n   * In sequence.\r\n   *\r\n   * ```markdown\r\n   *   | aa\r\n   * > | ==\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === marker) {\r\n      effects.consume(code)\r\n      return inside\r\n    }\r\n\r\n    effects.exit(types.setextHeadingLineSequence)\r\n\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, after, types.lineSuffix)(code)\r\n      : after(code)\r\n  }\r\n\r\n  /**\r\n   * After sequence, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   *   | aa\r\n   * > | ==\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    if (code === codes.eof || markdownLineEnding(code)) {\r\n      effects.exit(types.setextHeadingLine)\r\n      return ok(code)\r\n    }\r\n\r\n    return nok(code)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\nimport {blankLine, content} from 'micromark-core-commonmark'\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {codes, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\n/** @type {InitialConstruct} */\r\nexport const flow = {tokenize: initializeFlow}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Initializer}\r\n */\r\nfunction initializeFlow(effects) {\r\n  const self = this\r\n  const initial = effects.attempt(\r\n    // Try to parse a blank line.\r\n    blankLine,\r\n    atBlankEnding,\r\n    // Try to parse initial flow (essentially, only code).\r\n    effects.attempt(\r\n      this.parser.constructs.flowInitial,\r\n      afterConstruct,\r\n      factorySpace(\r\n        effects,\r\n        effects.attempt(\r\n          this.parser.constructs.flow,\r\n          afterConstruct,\r\n          effects.attempt(content, afterConstruct)\r\n        ),\r\n        types.linePrefix\r\n      )\r\n    )\r\n  )\r\n\r\n  return initial\r\n\r\n  /** @type {State} */\r\n  function atBlankEnding(code) {\r\n    assert(\r\n      code === codes.eof || markdownLineEnding(code),\r\n      'expected eol or eof'\r\n    )\r\n\r\n    if (code === codes.eof) {\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    effects.enter(types.lineEndingBlank)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEndingBlank)\r\n    self.currentConstruct = undefined\r\n    return initial\r\n  }\r\n\r\n  /** @type {State} */\r\n  function afterConstruct(code) {\r\n    assert(\r\n      code === codes.eof || markdownLineEnding(code),\r\n      'expected eol or eof'\r\n    )\r\n\r\n    if (code === codes.eof) {\r\n      effects.consume(code)\r\n      return\r\n    }\r\n\r\n    effects.enter(types.lineEnding)\r\n    effects.consume(code)\r\n    effects.exit(types.lineEnding)\r\n    self.currentConstruct = undefined\r\n    return initial\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\nexport const resolver = {resolveAll: createResolver()}\r\nexport const string = initializeFactory('string')\r\nexport const text = initializeFactory('text')\r\n\r\n/**\r\n * @param {'string' | 'text'} field\r\n * @returns {InitialConstruct}\r\n */\r\nfunction initializeFactory(field) {\r\n  return {\r\n    tokenize: initializeText,\r\n    resolveAll: createResolver(\r\n      field === 'text' ? resolveAllLineSuffixes : undefined\r\n    )\r\n  }\r\n\r\n  /**\r\n   * @this {TokenizeContext}\r\n   * @type {Initializer}\r\n   */\r\n  function initializeText(effects) {\r\n    const self = this\r\n    const constructs = this.parser.constructs[field]\r\n    const text = effects.attempt(constructs, start, notText)\r\n\r\n    return start\r\n\r\n    /** @type {State} */\r\n    function start(code) {\r\n      return atBreak(code) ? text(code) : notText(code)\r\n    }\r\n\r\n    /** @type {State} */\r\n    function notText(code) {\r\n      if (code === codes.eof) {\r\n        effects.consume(code)\r\n        return\r\n      }\r\n\r\n      effects.enter(types.data)\r\n      effects.consume(code)\r\n      return data\r\n    }\r\n\r\n    /** @type {State} */\r\n    function data(code) {\r\n      if (atBreak(code)) {\r\n        effects.exit(types.data)\r\n        return text(code)\r\n      }\r\n\r\n      // Data.\r\n      effects.consume(code)\r\n      return data\r\n    }\r\n\r\n    /**\r\n     * @param {Code} code\r\n     * @returns {boolean}\r\n     */\r\n    function atBreak(code) {\r\n      if (code === codes.eof) {\r\n        return true\r\n      }\r\n\r\n      const list = constructs[code]\r\n      let index = -1\r\n\r\n      if (list) {\r\n        // Always populated by defaults.\r\n        assert(Array.isArray(list), 'expected `disable.null` to be populated')\r\n\r\n        while (++index < list.length) {\r\n          const item = list[index]\r\n          if (!item.previous || item.previous.call(self, self.previous)) {\r\n            return true\r\n          }\r\n        }\r\n      }\r\n\r\n      return false\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Resolver | undefined} [extraResolver]\r\n * @returns {Resolver}\r\n */\r\nfunction createResolver(extraResolver) {\r\n  return resolveAllText\r\n\r\n  /** @type {Resolver} */\r\n  function resolveAllText(events, context) {\r\n    let index = -1\r\n    /** @type {number | undefined} */\r\n    let enter\r\n\r\n    // A rather boring computation (to merge adjacent `data` events) which\r\n    // improves mm performance by 29%.\r\n    while (++index <= events.length) {\r\n      if (enter === undefined) {\r\n        if (events[index] && events[index][1].type === types.data) {\r\n          enter = index\r\n          index++\r\n        }\r\n      } else if (!events[index] || events[index][1].type !== types.data) {\r\n        // Don’t do anything if there is one data token.\r\n        if (index !== enter + 2) {\r\n          events[enter][1].end = events[index - 1][1].end\r\n          events.splice(enter + 2, index - enter - 2)\r\n          index = enter + 2\r\n        }\r\n\r\n        enter = undefined\r\n      }\r\n    }\r\n\r\n    return extraResolver ? extraResolver(events, context) : events\r\n  }\r\n}\r\n\r\n/**\r\n * A rather ugly set of instructions which again looks at chunks in the input\r\n * stream.\r\n * The reason to do this here is that it is *much* faster to parse in reverse.\r\n * And that we can’t hook into `null` to split the line suffix before an EOF.\r\n * To do: figure out if we can make this into a clean utility, or even in core.\r\n * As it will be useful for GFMs literal autolink extension (and maybe even\r\n * tables?)\r\n *\r\n * @type {Resolver}\r\n */\r\nfunction resolveAllLineSuffixes(events, context) {\r\n  let eventIndex = 0 // Skip first.\r\n\r\n  while (++eventIndex <= events.length) {\r\n    if (\r\n      (eventIndex === events.length ||\r\n        events[eventIndex][1].type === types.lineEnding) &&\r\n      events[eventIndex - 1][1].type === types.data\r\n    ) {\r\n      const data = events[eventIndex - 1][1]\r\n      const chunks = context.sliceStream(data)\r\n      let index = chunks.length\r\n      let bufferIndex = -1\r\n      let size = 0\r\n      /** @type {boolean | undefined} */\r\n      let tabs\r\n\r\n      while (index--) {\r\n        const chunk = chunks[index]\r\n\r\n        if (typeof chunk === 'string') {\r\n          bufferIndex = chunk.length\r\n\r\n          while (chunk.charCodeAt(bufferIndex - 1) === codes.space) {\r\n            size++\r\n            bufferIndex--\r\n          }\r\n\r\n          if (bufferIndex) break\r\n          bufferIndex = -1\r\n        }\r\n        // Number\r\n        else if (chunk === codes.horizontalTab) {\r\n          tabs = true\r\n          size++\r\n        } else if (chunk === codes.virtualSpace) {\r\n          // Empty\r\n        } else {\r\n          // Replacement character, exit.\r\n          index++\r\n          break\r\n        }\r\n      }\r\n\r\n      if (size) {\r\n        const token = {\r\n          type:\r\n            eventIndex === events.length ||\r\n            tabs ||\r\n            size < constants.hardBreakPrefixSizeMin\r\n              ? types.lineSuffix\r\n              : types.hardBreakTrailing,\r\n          start: {\r\n            line: data.end.line,\r\n            column: data.end.column - size,\r\n            offset: data.end.offset - size,\r\n            _index: data.start._index + index,\r\n            _bufferIndex: index\r\n              ? bufferIndex\r\n              : data.start._bufferIndex + bufferIndex\r\n          },\r\n          end: Object.assign({}, data.end)\r\n        }\r\n\r\n        data.end = Object.assign({}, token.start)\r\n\r\n        if (data.start.offset === data.end.offset) {\r\n          Object.assign(data, token)\r\n        } else {\r\n          events.splice(\r\n            eventIndex,\r\n            0,\r\n            ['enter', token, context],\r\n            ['exit', token, context]\r\n          )\r\n          eventIndex += 2\r\n        }\r\n      }\r\n\r\n      eventIndex++\r\n    }\r\n  }\r\n\r\n  return events\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Chunk} Chunk\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\r\n * @typedef {import('micromark-util-types').Point} Point\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\n/**\r\n * @callback Restore\r\n * @returns {undefined}\r\n *\r\n * @typedef Info\r\n * @property {Restore} restore\r\n * @property {number} from\r\n *\r\n * @callback ReturnHandle\r\n *   Handle a successful run.\r\n * @param {Construct} construct\r\n * @param {Info} info\r\n * @returns {undefined}\r\n */\r\n\r\nimport createDebug from 'debug'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {push, splice} from 'micromark-util-chunked'\r\nimport {resolveAll} from 'micromark-util-resolve-all'\r\nimport {codes, values} from 'micromark-util-symbol'\r\nimport {ok as assert} from 'devlop'\r\n\r\nconst debug = createDebug('micromark')\r\n\r\n/**\r\n * Create a tokenizer.\r\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\r\n * The parser is the object dealing with it all.\r\n * `initialize` works like other constructs, except that only its `tokenize`\r\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\r\n * `from` can be given to set the point before the first character, although\r\n * when further lines are indented, they must be set with `defineSkip`.\r\n *\r\n * @param {ParseContext} parser\r\n * @param {InitialConstruct} initialize\r\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\r\n * @returns {TokenizeContext}\r\n */\r\nexport function createTokenizer(parser, initialize, from) {\r\n  /** @type {Point} */\r\n  let point = Object.assign(\r\n    from ? Object.assign({}, from) : {line: 1, column: 1, offset: 0},\r\n    {_index: 0, _bufferIndex: -1}\r\n  )\r\n  /** @type {Record<string, number>} */\r\n  const columnStart = {}\r\n  /** @type {Array<Construct>} */\r\n  const resolveAllConstructs = []\r\n  /** @type {Array<Chunk>} */\r\n  let chunks = []\r\n  /** @type {Array<Token>} */\r\n  let stack = []\r\n  /** @type {boolean | undefined} */\r\n  let consumed = true\r\n\r\n  /**\r\n   * Tools used for tokenizing.\r\n   *\r\n   * @type {Effects}\r\n   */\r\n  const effects = {\r\n    consume,\r\n    enter,\r\n    exit,\r\n    attempt: constructFactory(onsuccessfulconstruct),\r\n    check: constructFactory(onsuccessfulcheck),\r\n    interrupt: constructFactory(onsuccessfulcheck, {interrupt: true})\r\n  }\r\n\r\n  /**\r\n   * State and tools for resolving and serializing.\r\n   *\r\n   * @type {TokenizeContext}\r\n   */\r\n  const context = {\r\n    previous: codes.eof,\r\n    code: codes.eof,\r\n    containerState: {},\r\n    events: [],\r\n    parser,\r\n    sliceStream,\r\n    sliceSerialize,\r\n    now,\r\n    defineSkip,\r\n    write\r\n  }\r\n\r\n  /**\r\n   * The state function.\r\n   *\r\n   * @type {State | undefined}\r\n   */\r\n  let state = initialize.tokenize.call(context, effects)\r\n\r\n  /**\r\n   * Track which character we expect to be consumed, to catch bugs.\r\n   *\r\n   * @type {Code}\r\n   */\r\n  let expectedCode\r\n\r\n  if (initialize.resolveAll) {\r\n    resolveAllConstructs.push(initialize)\r\n  }\r\n\r\n  return context\r\n\r\n  /** @type {TokenizeContext['write']} */\r\n  function write(slice) {\r\n    chunks = push(chunks, slice)\r\n\r\n    main()\r\n\r\n    // Exit if we’re not done, resolve might change stuff.\r\n    if (chunks[chunks.length - 1] !== codes.eof) {\r\n      return []\r\n    }\r\n\r\n    addResult(initialize, 0)\r\n\r\n    // Otherwise, resolve, and exit.\r\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\r\n\r\n    return context.events\r\n  }\r\n\r\n  //\r\n  // Tools.\r\n  //\r\n\r\n  /** @type {TokenizeContext['sliceSerialize']} */\r\n  function sliceSerialize(token, expandTabs) {\r\n    return serializeChunks(sliceStream(token), expandTabs)\r\n  }\r\n\r\n  /** @type {TokenizeContext['sliceStream']} */\r\n  function sliceStream(token) {\r\n    return sliceChunks(chunks, token)\r\n  }\r\n\r\n  /** @type {TokenizeContext['now']} */\r\n  function now() {\r\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\r\n    const {line, column, offset, _index, _bufferIndex} = point\r\n    return {line, column, offset, _index, _bufferIndex}\r\n  }\r\n\r\n  /** @type {TokenizeContext['defineSkip']} */\r\n  function defineSkip(value) {\r\n    columnStart[value.line] = value.column\r\n    accountForPotentialSkip()\r\n    debug('position: define skip: `%j`', point)\r\n  }\r\n\r\n  //\r\n  // State management.\r\n  //\r\n\r\n  /**\r\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\r\n   * `consume`).\r\n   * Here is where we walk through the chunks, which either include strings of\r\n   * several characters, or numerical character codes.\r\n   * The reason to do this in a loop instead of a call is so the stack can\r\n   * drain.\r\n   *\r\n   * @returns {undefined}\r\n   */\r\n  function main() {\r\n    /** @type {number} */\r\n    let chunkIndex\r\n\r\n    while (point._index < chunks.length) {\r\n      const chunk = chunks[point._index]\r\n\r\n      // If we’re in a buffer chunk, loop through it.\r\n      if (typeof chunk === 'string') {\r\n        chunkIndex = point._index\r\n\r\n        if (point._bufferIndex < 0) {\r\n          point._bufferIndex = 0\r\n        }\r\n\r\n        while (\r\n          point._index === chunkIndex &&\r\n          point._bufferIndex < chunk.length\r\n        ) {\r\n          go(chunk.charCodeAt(point._bufferIndex))\r\n        }\r\n      } else {\r\n        go(chunk)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deal with one code.\r\n   *\r\n   * @param {Code} code\r\n   * @returns {undefined}\r\n   */\r\n  function go(code) {\r\n    assert(consumed === true, 'expected character to be consumed')\r\n    consumed = undefined\r\n    debug('main: passing `%s` to %s', code, state && state.name)\r\n    expectedCode = code\r\n    assert(typeof state === 'function', 'expected state')\r\n    state = state(code)\r\n  }\r\n\r\n  /** @type {Effects['consume']} */\r\n  function consume(code) {\r\n    assert(code === expectedCode, 'expected given code to equal expected code')\r\n\r\n    debug('consume: `%s`', code)\r\n\r\n    assert(\r\n      consumed === undefined,\r\n      'expected code to not have been consumed: this might be because `return x(code)` instead of `return x` was used'\r\n    )\r\n    assert(\r\n      code === null\r\n        ? context.events.length === 0 ||\r\n            context.events[context.events.length - 1][0] === 'exit'\r\n        : context.events[context.events.length - 1][0] === 'enter',\r\n      'expected last token to be open'\r\n    )\r\n\r\n    if (markdownLineEnding(code)) {\r\n      point.line++\r\n      point.column = 1\r\n      point.offset += code === codes.carriageReturnLineFeed ? 2 : 1\r\n      accountForPotentialSkip()\r\n      debug('position: after eol: `%j`', point)\r\n    } else if (code !== codes.virtualSpace) {\r\n      point.column++\r\n      point.offset++\r\n    }\r\n\r\n    // Not in a string chunk.\r\n    if (point._bufferIndex < 0) {\r\n      point._index++\r\n    } else {\r\n      point._bufferIndex++\r\n\r\n      // At end of string chunk.\r\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\r\n      // strings.\r\n      if (point._bufferIndex === chunks[point._index].length) {\r\n        point._bufferIndex = -1\r\n        point._index++\r\n      }\r\n    }\r\n\r\n    // Expose the previous character.\r\n    context.previous = code\r\n\r\n    // Mark as consumed.\r\n    consumed = true\r\n  }\r\n\r\n  /** @type {Effects['enter']} */\r\n  function enter(type, fields) {\r\n    /** @type {Token} */\r\n    // @ts-expect-error Patch instead of assign required fields to help GC.\r\n    const token = fields || {}\r\n    token.type = type\r\n    token.start = now()\r\n\r\n    assert(typeof type === 'string', 'expected string type')\r\n    assert(type.length > 0, 'expected non-empty string')\r\n    debug('enter: `%s`', type)\r\n\r\n    context.events.push(['enter', token, context])\r\n\r\n    stack.push(token)\r\n\r\n    return token\r\n  }\r\n\r\n  /** @type {Effects['exit']} */\r\n  function exit(type) {\r\n    assert(typeof type === 'string', 'expected string type')\r\n    assert(type.length > 0, 'expected non-empty string')\r\n\r\n    const token = stack.pop()\r\n    assert(token, 'cannot close w/o open tokens')\r\n    token.end = now()\r\n\r\n    assert(type === token.type, 'expected exit token to match current token')\r\n\r\n    assert(\r\n      !(\r\n        token.start._index === token.end._index &&\r\n        token.start._bufferIndex === token.end._bufferIndex\r\n      ),\r\n      'expected non-empty token (`' + type + '`)'\r\n    )\r\n\r\n    debug('exit: `%s`', token.type)\r\n    context.events.push(['exit', token, context])\r\n\r\n    return token\r\n  }\r\n\r\n  /**\r\n   * Use results.\r\n   *\r\n   * @type {ReturnHandle}\r\n   */\r\n  function onsuccessfulconstruct(construct, info) {\r\n    addResult(construct, info.from)\r\n  }\r\n\r\n  /**\r\n   * Discard results.\r\n   *\r\n   * @type {ReturnHandle}\r\n   */\r\n  function onsuccessfulcheck(_, info) {\r\n    info.restore()\r\n  }\r\n\r\n  /**\r\n   * Factory to attempt/check/interrupt.\r\n   *\r\n   * @param {ReturnHandle} onreturn\r\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\r\n   */\r\n  function constructFactory(onreturn, fields) {\r\n    return hook\r\n\r\n    /**\r\n     * Handle either an object mapping codes to constructs, a list of\r\n     * constructs, or a single construct.\r\n     *\r\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\r\n     * @param {State} returnState\r\n     * @param {State | undefined} [bogusState]\r\n     * @returns {State}\r\n     */\r\n    function hook(constructs, returnState, bogusState) {\r\n      /** @type {Array<Construct>} */\r\n      let listOfConstructs\r\n      /** @type {number} */\r\n      let constructIndex\r\n      /** @type {Construct} */\r\n      let currentConstruct\r\n      /** @type {Info} */\r\n      let info\r\n\r\n      return Array.isArray(constructs)\r\n        ? /* c8 ignore next 1 */\r\n          handleListOfConstructs(constructs)\r\n        : 'tokenize' in constructs\r\n        ? // @ts-expect-error Looks like a construct.\r\n          handleListOfConstructs([constructs])\r\n        : handleMapOfConstructs(constructs)\r\n\r\n      /**\r\n       * Handle a list of construct.\r\n       *\r\n       * @param {ConstructRecord} map\r\n       * @returns {State}\r\n       */\r\n      function handleMapOfConstructs(map) {\r\n        return start\r\n\r\n        /** @type {State} */\r\n        function start(code) {\r\n          const def = code !== null && map[code]\r\n          const all = code !== null && map.null\r\n          const list = [\r\n            // To do: add more extension tests.\r\n            /* c8 ignore next 2 */\r\n            ...(Array.isArray(def) ? def : def ? [def] : []),\r\n            ...(Array.isArray(all) ? all : all ? [all] : [])\r\n          ]\r\n\r\n          return handleListOfConstructs(list)(code)\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Handle a list of construct.\r\n       *\r\n       * @param {Array<Construct>} list\r\n       * @returns {State}\r\n       */\r\n      function handleListOfConstructs(list) {\r\n        listOfConstructs = list\r\n        constructIndex = 0\r\n\r\n        if (list.length === 0) {\r\n          assert(bogusState, 'expected `bogusState` to be given')\r\n          return bogusState\r\n        }\r\n\r\n        return handleConstruct(list[constructIndex])\r\n      }\r\n\r\n      /**\r\n       * Handle a single construct.\r\n       *\r\n       * @param {Construct} construct\r\n       * @returns {State}\r\n       */\r\n      function handleConstruct(construct) {\r\n        return start\r\n\r\n        /** @type {State} */\r\n        function start(code) {\r\n          // To do: not needed to store if there is no bogus state, probably?\r\n          // Currently doesn’t work because `inspect` in document does a check\r\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\r\n          // by not storing.\r\n          info = store()\r\n          currentConstruct = construct\r\n\r\n          if (!construct.partial) {\r\n            context.currentConstruct = construct\r\n          }\r\n\r\n          // Always populated by defaults.\r\n          assert(\r\n            context.parser.constructs.disable.null,\r\n            'expected `disable.null` to be populated'\r\n          )\r\n\r\n          if (\r\n            construct.name &&\r\n            context.parser.constructs.disable.null.includes(construct.name)\r\n          ) {\r\n            return nok(code)\r\n          }\r\n\r\n          return construct.tokenize.call(\r\n            // If we do have fields, create an object w/ `context` as its\r\n            // prototype.\r\n            // This allows a “live binding”, which is needed for `interrupt`.\r\n            fields ? Object.assign(Object.create(context), fields) : context,\r\n            effects,\r\n            ok,\r\n            nok\r\n          )(code)\r\n        }\r\n      }\r\n\r\n      /** @type {State} */\r\n      function ok(code) {\r\n        assert(code === expectedCode, 'expected code')\r\n        consumed = true\r\n        onreturn(currentConstruct, info)\r\n        return returnState\r\n      }\r\n\r\n      /** @type {State} */\r\n      function nok(code) {\r\n        assert(code === expectedCode, 'expected code')\r\n        consumed = true\r\n        info.restore()\r\n\r\n        if (++constructIndex < listOfConstructs.length) {\r\n          return handleConstruct(listOfConstructs[constructIndex])\r\n        }\r\n\r\n        return bogusState\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Construct} construct\r\n   * @param {number} from\r\n   * @returns {undefined}\r\n   */\r\n  function addResult(construct, from) {\r\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\r\n      resolveAllConstructs.push(construct)\r\n    }\r\n\r\n    if (construct.resolve) {\r\n      splice(\r\n        context.events,\r\n        from,\r\n        context.events.length - from,\r\n        construct.resolve(context.events.slice(from), context)\r\n      )\r\n    }\r\n\r\n    if (construct.resolveTo) {\r\n      context.events = construct.resolveTo(context.events, context)\r\n    }\r\n\r\n    assert(\r\n      construct.partial ||\r\n        context.events.length === 0 ||\r\n        context.events[context.events.length - 1][0] === 'exit',\r\n      'expected last token to end'\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Store state.\r\n   *\r\n   * @returns {Info}\r\n   */\r\n  function store() {\r\n    const startPoint = now()\r\n    const startPrevious = context.previous\r\n    const startCurrentConstruct = context.currentConstruct\r\n    const startEventsIndex = context.events.length\r\n    const startStack = Array.from(stack)\r\n\r\n    return {restore, from: startEventsIndex}\r\n\r\n    /**\r\n     * Restore state.\r\n     *\r\n     * @returns {undefined}\r\n     */\r\n    function restore() {\r\n      point = startPoint\r\n      context.previous = startPrevious\r\n      context.currentConstruct = startCurrentConstruct\r\n      context.events.length = startEventsIndex\r\n      stack = startStack\r\n      accountForPotentialSkip()\r\n      debug('position: restore: `%j`', point)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Move the current point a bit forward in the line when it’s on a column\r\n   * skip.\r\n   *\r\n   * @returns {undefined}\r\n   */\r\n  function accountForPotentialSkip() {\r\n    if (point.line in columnStart && point.column < 2) {\r\n      point.column = columnStart[point.line]\r\n      point.offset += columnStart[point.line] - 1\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get the chunks from a slice of chunks in the range of a token.\r\n *\r\n * @param {Array<Chunk>} chunks\r\n * @param {Pick<Token, 'end' | 'start'>} token\r\n * @returns {Array<Chunk>}\r\n */\r\nfunction sliceChunks(chunks, token) {\r\n  const startIndex = token.start._index\r\n  const startBufferIndex = token.start._bufferIndex\r\n  const endIndex = token.end._index\r\n  const endBufferIndex = token.end._bufferIndex\r\n  /** @type {Array<Chunk>} */\r\n  let view\r\n\r\n  if (startIndex === endIndex) {\r\n    assert(endBufferIndex > -1, 'expected non-negative end buffer index')\r\n    assert(startBufferIndex > -1, 'expected non-negative start buffer index')\r\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\r\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\r\n  } else {\r\n    view = chunks.slice(startIndex, endIndex)\r\n\r\n    if (startBufferIndex > -1) {\r\n      const head = view[0]\r\n      if (typeof head === 'string') {\r\n        view[0] = head.slice(startBufferIndex)\r\n      } else {\r\n        assert(startBufferIndex === 0, 'expected `startBufferIndex` to be `0`')\r\n        view.shift()\r\n      }\r\n    }\r\n\r\n    if (endBufferIndex > 0) {\r\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\r\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\r\n    }\r\n  }\r\n\r\n  return view\r\n}\r\n\r\n/**\r\n * Get the string value of a slice of chunks.\r\n *\r\n * @param {Array<Chunk>} chunks\r\n * @param {boolean | undefined} [expandTabs=false]\r\n * @returns {string}\r\n */\r\nfunction serializeChunks(chunks, expandTabs) {\r\n  let index = -1\r\n  /** @type {Array<string>} */\r\n  const result = []\r\n  /** @type {boolean | undefined} */\r\n  let atTab\r\n\r\n  while (++index < chunks.length) {\r\n    const chunk = chunks[index]\r\n    /** @type {string} */\r\n    let value\r\n\r\n    if (typeof chunk === 'string') {\r\n      value = chunk\r\n    } else\r\n      switch (chunk) {\r\n        case codes.carriageReturn: {\r\n          value = values.cr\r\n\r\n          break\r\n        }\r\n\r\n        case codes.lineFeed: {\r\n          value = values.lf\r\n\r\n          break\r\n        }\r\n\r\n        case codes.carriageReturnLineFeed: {\r\n          value = values.cr + values.lf\r\n\r\n          break\r\n        }\r\n\r\n        case codes.horizontalTab: {\r\n          value = expandTabs ? values.space : values.ht\r\n\r\n          break\r\n        }\r\n\r\n        case codes.virtualSpace: {\r\n          if (!expandTabs && atTab) continue\r\n          value = values.space\r\n\r\n          break\r\n        }\r\n\r\n        default: {\r\n          assert(typeof chunk === 'number', 'expected number')\r\n          // Currently only replacement character.\r\n          value = String.fromCharCode(chunk)\r\n        }\r\n      }\r\n\r\n    atTab = chunk === codes.horizontalTab\r\n    result.push(value)\r\n  }\r\n\r\n  return result.join('')\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Extension} Extension\r\n */\r\n\r\nimport {\r\n  attention,\r\n  autolink,\r\n  blockQuote,\r\n  characterEscape,\r\n  characterReference,\r\n  codeFenced,\r\n  codeIndented,\r\n  codeText,\r\n  definition,\r\n  hardBreakEscape,\r\n  headingAtx,\r\n  htmlFlow,\r\n  htmlText,\r\n  labelEnd,\r\n  labelStartImage,\r\n  labelStartLink,\r\n  lineEnding,\r\n  list,\r\n  setextUnderline,\r\n  thematicBreak\r\n} from 'micromark-core-commonmark'\r\nimport {codes} from 'micromark-util-symbol'\r\nimport {resolver as resolveText} from './initialize/text.js'\r\n\r\n/** @satisfies {Extension['document']} */\r\nexport const document = {\r\n  [codes.asterisk]: list,\r\n  [codes.plusSign]: list,\r\n  [codes.dash]: list,\r\n  [codes.digit0]: list,\r\n  [codes.digit1]: list,\r\n  [codes.digit2]: list,\r\n  [codes.digit3]: list,\r\n  [codes.digit4]: list,\r\n  [codes.digit5]: list,\r\n  [codes.digit6]: list,\r\n  [codes.digit7]: list,\r\n  [codes.digit8]: list,\r\n  [codes.digit9]: list,\r\n  [codes.greaterThan]: blockQuote\r\n}\r\n\r\n/** @satisfies {Extension['contentInitial']} */\r\nexport const contentInitial = {\r\n  [codes.leftSquareBracket]: definition\r\n}\r\n\r\n/** @satisfies {Extension['flowInitial']} */\r\nexport const flowInitial = {\r\n  [codes.horizontalTab]: codeIndented,\r\n  [codes.virtualSpace]: codeIndented,\r\n  [codes.space]: codeIndented\r\n}\r\n\r\n/** @satisfies {Extension['flow']} */\r\nexport const flow = {\r\n  [codes.numberSign]: headingAtx,\r\n  [codes.asterisk]: thematicBreak,\r\n  [codes.dash]: [setextUnderline, thematicBreak],\r\n  [codes.lessThan]: htmlFlow,\r\n  [codes.equalsTo]: setextUnderline,\r\n  [codes.underscore]: thematicBreak,\r\n  [codes.graveAccent]: codeFenced,\r\n  [codes.tilde]: codeFenced\r\n}\r\n\r\n/** @satisfies {Extension['string']} */\r\nexport const string = {\r\n  [codes.ampersand]: characterReference,\r\n  [codes.backslash]: characterEscape\r\n}\r\n\r\n/** @satisfies {Extension['text']} */\r\nexport const text = {\r\n  [codes.carriageReturn]: lineEnding,\r\n  [codes.lineFeed]: lineEnding,\r\n  [codes.carriageReturnLineFeed]: lineEnding,\r\n  [codes.exclamationMark]: labelStartImage,\r\n  [codes.ampersand]: characterReference,\r\n  [codes.asterisk]: attention,\r\n  [codes.lessThan]: [autolink, htmlText],\r\n  [codes.leftSquareBracket]: labelStartLink,\r\n  [codes.backslash]: [hardBreakEscape, characterEscape],\r\n  [codes.rightSquareBracket]: labelEnd,\r\n  [codes.underscore]: attention,\r\n  [codes.graveAccent]: codeText\r\n}\r\n\r\n/** @satisfies {Extension['insideSpan']} */\r\nexport const insideSpan = {null: [attention, resolveText]}\r\n\r\n/** @satisfies {Extension['attentionMarkers']} */\r\nexport const attentionMarkers = {null: [codes.asterisk, codes.underscore]}\r\n\r\n/** @satisfies {Extension['disable']} */\r\nexport const disable = {null: []}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Create} Create\r\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\r\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\r\n */\r\n\r\nimport {combineExtensions} from 'micromark-util-combine-extensions'\r\nimport {content} from './initialize/content.js'\r\nimport {document} from './initialize/document.js'\r\nimport {flow} from './initialize/flow.js'\r\nimport {string, text} from './initialize/text.js'\r\nimport {createTokenizer} from './create-tokenizer.js'\r\nimport * as defaultConstructs from './constructs.js'\r\n\r\n/**\r\n * @param {ParseOptions | null | undefined} [options]\r\n * @returns {ParseContext}\r\n */\r\nexport function parse(options) {\r\n  const settings = options || {}\r\n  const constructs = /** @type {FullNormalizedExtension} */ (\r\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\r\n  )\r\n\r\n  /** @type {ParseContext} */\r\n  const parser = {\r\n    defined: [],\r\n    lazy: {},\r\n    constructs,\r\n    content: create(content),\r\n    document: create(document),\r\n    flow: create(flow),\r\n    string: create(string),\r\n    text: create(text)\r\n  }\r\n\r\n  return parser\r\n\r\n  /**\r\n   * @param {InitialConstruct} initial\r\n   */\r\n  function create(initial) {\r\n    return creator\r\n    /** @type {Create} */\r\n    function creator(from) {\r\n      return createTokenizer(parser, initial, from)\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Event} Event\r\n */\r\n\r\nimport {subtokenize} from 'micromark-util-subtokenize'\r\n\r\n/**\r\n * @param {Array<Event>} events\r\n * @returns {Array<Event>}\r\n */\r\nexport function postprocess(events) {\r\n  while (!subtokenize(events)) {\r\n    // Empty\r\n  }\r\n\r\n  return events\r\n}\r\n", "/**\r\n * @typedef {import('micromark-util-types').Chunk} Chunk\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Encoding} Encoding\r\n * @typedef {import('micromark-util-types').Value} Value\r\n */\r\n\r\n/**\r\n * @callback Preprocessor\r\n * @param {Value} value\r\n * @param {Encoding | null | undefined} [encoding]\r\n * @param {boolean | null | undefined} [end=false]\r\n * @returns {Array<Chunk>}\r\n */\r\n\r\nimport {codes, constants} from 'micromark-util-symbol'\r\n\r\nconst search = /[\\0\\t\\n\\r]/g\r\n\r\n/**\r\n * @returns {Preprocessor}\r\n */\r\nexport function preprocess() {\r\n  let column = 1\r\n  let buffer = ''\r\n  /** @type {boolean | undefined} */\r\n  let start = true\r\n  /** @type {boolean | undefined} */\r\n  let atCarriageReturn\r\n\r\n  return preprocessor\r\n\r\n  /** @type {Preprocessor} */\r\n  // eslint-disable-next-line complexity\r\n  function preprocessor(value, encoding, end) {\r\n    /** @type {Array<Chunk>} */\r\n    const chunks = []\r\n    /** @type {RegExpMatchArray | null} */\r\n    let match\r\n    /** @type {number} */\r\n    let next\r\n    /** @type {number} */\r\n    let startPosition\r\n    /** @type {number} */\r\n    let endPosition\r\n    /** @type {Code} */\r\n    let code\r\n\r\n    value =\r\n      buffer +\r\n      (typeof value === 'string'\r\n        ? value.toString()\r\n        : new TextDecoder(encoding || undefined).decode(value))\r\n\r\n    startPosition = 0\r\n    buffer = ''\r\n\r\n    if (start) {\r\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\r\n      if (value.charCodeAt(0) === codes.byteOrderMarker) {\r\n        startPosition++\r\n      }\r\n\r\n      start = undefined\r\n    }\r\n\r\n    while (startPosition < value.length) {\r\n      search.lastIndex = startPosition\r\n      match = search.exec(value)\r\n      endPosition =\r\n        match && match.index !== undefined ? match.index : value.length\r\n      code = value.charCodeAt(endPosition)\r\n\r\n      if (!match) {\r\n        buffer = value.slice(startPosition)\r\n        break\r\n      }\r\n\r\n      if (\r\n        code === codes.lf &&\r\n        startPosition === endPosition &&\r\n        atCarriageReturn\r\n      ) {\r\n        chunks.push(codes.carriageReturnLineFeed)\r\n        atCarriageReturn = undefined\r\n      } else {\r\n        if (atCarriageReturn) {\r\n          chunks.push(codes.carriageReturn)\r\n          atCarriageReturn = undefined\r\n        }\r\n\r\n        if (startPosition < endPosition) {\r\n          chunks.push(value.slice(startPosition, endPosition))\r\n          column += endPosition - startPosition\r\n        }\r\n\r\n        switch (code) {\r\n          case codes.nul: {\r\n            chunks.push(codes.replacementCharacter)\r\n            column++\r\n\r\n            break\r\n          }\r\n\r\n          case codes.ht: {\r\n            next = Math.ceil(column / constants.tabSize) * constants.tabSize\r\n            chunks.push(codes.horizontalTab)\r\n            while (column++ < next) chunks.push(codes.virtualSpace)\r\n\r\n            break\r\n          }\r\n\r\n          case codes.lf: {\r\n            chunks.push(codes.lineFeed)\r\n            column = 1\r\n\r\n            break\r\n          }\r\n\r\n          default: {\r\n            atCarriageReturn = true\r\n            column = 1\r\n          }\r\n        }\r\n      }\r\n\r\n      startPosition = endPosition + 1\r\n    }\r\n\r\n    if (end) {\r\n      if (atCarriageReturn) chunks.push(codes.carriageReturn)\r\n      if (buffer) chunks.push(buffer)\r\n      chunks.push(codes.eof)\r\n    }\r\n\r\n    return chunks\r\n  }\r\n}\r\n", "import {decodeNamedCharacterReference} from 'decode-named-character-reference'\r\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\r\nimport {codes, constants} from 'micromark-util-symbol'\r\n\r\nconst characterEscapeOrReference =\r\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\r\n\r\n/**\r\n * Decode markdown strings (which occur in places such as fenced code info\r\n * strings, destinations, labels, and titles).\r\n *\r\n * The “string” content type allows character escapes and -references.\r\n * This decodes those.\r\n *\r\n * @param {string} value\r\n *   Value to decode.\r\n * @returns {string}\r\n *   Decoded value.\r\n */\r\nexport function decodeString(value) {\r\n  return value.replace(characterEscapeOrReference, decode)\r\n}\r\n\r\n/**\r\n * @param {string} $0\r\n * @param {string} $1\r\n * @param {string} $2\r\n * @returns {string}\r\n */\r\nfunction decode($0, $1, $2) {\r\n  if ($1) {\r\n    // Escape.\r\n    return $1\r\n  }\r\n\r\n  // Reference.\r\n  const head = $2.charCodeAt(0)\r\n\r\n  if (head === codes.numberSign) {\r\n    const head = $2.charCodeAt(1)\r\n    const hex = head === codes.lowercaseX || head === codes.uppercaseX\r\n    return decodeNumericCharacterReference(\r\n      $2.slice(hex ? 2 : 1),\r\n      hex ? constants.numericBaseHexadecimal : constants.numericBaseDecimal\r\n    )\r\n  }\r\n\r\n  return decodeNamedCharacterReference($2) || $0\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Point} Point\r\n * @typedef {import('unist').Position} Position\r\n */\r\n\r\n/**\r\n * @typedef NodeLike\r\n * @property {string} type\r\n * @property {PositionLike | null | undefined} [position]\r\n *\r\n * @typedef PointLike\r\n * @property {number | null | undefined} [line]\r\n * @property {number | null | undefined} [column]\r\n * @property {number | null | undefined} [offset]\r\n *\r\n * @typedef PositionLike\r\n * @property {PointLike | null | undefined} [start]\r\n * @property {PointLike | null | undefined} [end]\r\n */\r\n\r\n/**\r\n * Serialize the positional info of a point, position (start and end points),\r\n * or node.\r\n *\r\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\r\n *   Node, position, or point.\r\n * @returns {string}\r\n *   Pretty printed positional info of a node (`string`).\r\n *\r\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\r\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\r\n *   column, `s` for `start`, and `e` for end.\r\n *   An empty string (`''`) is returned if the given value is neither `node`,\r\n *   `position`, nor `point`.\r\n */\r\nexport function stringifyPosition(value) {\r\n  // Nothing.\r\n  if (!value || typeof value !== 'object') {\r\n    return ''\r\n  }\r\n\r\n  // Node.\r\n  if ('position' in value || 'type' in value) {\r\n    return position(value.position)\r\n  }\r\n\r\n  // Position.\r\n  if ('start' in value || 'end' in value) {\r\n    return position(value)\r\n  }\r\n\r\n  // Point.\r\n  if ('line' in value || 'column' in value) {\r\n    return point(value)\r\n  }\r\n\r\n  // ?\r\n  return ''\r\n}\r\n\r\n/**\r\n * @param {Point | PointLike | null | undefined} point\r\n * @returns {string}\r\n */\r\nfunction point(point) {\r\n  return index(point && point.line) + ':' + index(point && point.column)\r\n}\r\n\r\n/**\r\n * @param {Position | PositionLike | null | undefined} pos\r\n * @returns {string}\r\n */\r\nfunction position(pos) {\r\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\r\n}\r\n\r\n/**\r\n * @param {number | null | undefined} value\r\n * @returns {number}\r\n */\r\nfunction index(value) {\r\n  return value && typeof value === 'number' ? value : 1\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Break} Break\r\n * @typedef {import('mdast').Blockquote} Blockquote\r\n * @typedef {import('mdast').Code} Code\r\n * @typedef {import('mdast').Definition} Definition\r\n * @typedef {import('mdast').Emphasis} Emphasis\r\n * @typedef {import('mdast').Heading} Heading\r\n * @typedef {import('mdast').Html} Html\r\n * @typedef {import('mdast').Image} Image\r\n * @typedef {import('mdast').InlineCode} InlineCode\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('mdast').List} List\r\n * @typedef {import('mdast').ListItem} ListItem\r\n * @typedef {import('mdast').Nodes} Nodes\r\n * @typedef {import('mdast').Paragraph} Paragraph\r\n * @typedef {import('mdast').Parent} Parent\r\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\r\n * @typedef {import('mdast').ReferenceType} ReferenceType\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast').Strong} Strong\r\n * @typedef {import('mdast').Text} Text\r\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\r\n *\r\n * @typedef {import('micromark-util-types').Encoding} Encoding\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Value} Value\r\n *\r\n * @typedef {import('unist').Point} Point\r\n *\r\n * @typedef {import('../index.js').CompileData} CompileData\r\n */\r\n\r\n/**\r\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\r\n */\r\n\r\n/**\r\n * @callback Transform\r\n *   Extra transform, to change the AST afterwards.\r\n * @param {Root} tree\r\n *   Tree to transform.\r\n * @returns {Root | null | undefined | void}\r\n *   New tree or nothing (in which case the current tree is used).\r\n *\r\n * @callback Handle\r\n *   Handle a token.\r\n * @param {CompileContext} this\r\n *   Context.\r\n * @param {Token} token\r\n *   Current token.\r\n * @returns {undefined | void}\r\n *   Nothing.\r\n *\r\n * @typedef {Record<string, Handle>} Handles\r\n *   Token types mapping to handles\r\n *\r\n * @callback OnEnterError\r\n *   Handle the case where the `right` token is open, but it is closed (by the\r\n *   `left` token) or because we reached the end of the document.\r\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\r\n *   Context.\r\n * @param {Token | undefined} left\r\n *   Left token.\r\n * @param {Token} right\r\n *   Right token.\r\n * @returns {undefined}\r\n *   Nothing.\r\n *\r\n * @callback OnExitError\r\n *   Handle the case where the `right` token is open but it is closed by\r\n *   exiting the `left` token.\r\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\r\n *   Context.\r\n * @param {Token} left\r\n *   Left token.\r\n * @param {Token} right\r\n *   Right token.\r\n * @returns {undefined}\r\n *   Nothing.\r\n *\r\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\r\n *   Open token on the stack, with an optional error handler for when\r\n *   that token isn’t closed properly.\r\n */\r\n\r\n/**\r\n * @typedef Config\r\n *   Configuration.\r\n *\r\n *   We have our defaults, but extensions will add more.\r\n * @property {Array<string>} canContainEols\r\n *   Token types where line endings are used.\r\n * @property {Handles} enter\r\n *   Opening handles.\r\n * @property {Handles} exit\r\n *   Closing handles.\r\n * @property {Array<Transform>} transforms\r\n *   Tree transforms.\r\n *\r\n * @typedef {Partial<Config>} Extension\r\n *   Change how markdown tokens from micromark are turned into mdast.\r\n *\r\n * @typedef CompileContext\r\n *   mdast compiler context.\r\n * @property {Array<Fragment | Nodes>} stack\r\n *   Stack of nodes.\r\n * @property {Array<TokenTuple>} tokenStack\r\n *   Stack of tokens.\r\n * @property {(this: CompileContext) => undefined} buffer\r\n *   Capture some of the output data.\r\n * @property {(this: CompileContext) => string} resume\r\n *   Stop capturing and access the output data.\r\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\r\n *   Enter a node.\r\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\r\n *   Exit a node.\r\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\r\n *   Get the string value of a token.\r\n * @property {Config} config\r\n *   Configuration.\r\n * @property {CompileData} data\r\n *   Info passed around; key/value store.\r\n *\r\n * @typedef FromMarkdownOptions\r\n *   Configuration for how to build mdast.\r\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\r\n *   Extensions for this utility to change how tokens are turned into a tree.\r\n *\r\n * @typedef {ParseOptions & FromMarkdownOptions} Options\r\n *   Configuration.\r\n */\r\n\r\nimport {ok as assert} from 'devlop'\r\nimport {toString} from 'mdast-util-to-string'\r\nimport {parse, postprocess, preprocess} from 'micromark'\r\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\r\nimport {decodeString} from 'micromark-util-decode-string'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\nimport {codes, constants, types} from 'micromark-util-symbol'\r\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\r\nimport {stringifyPosition} from 'unist-util-stringify-position'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * Turn markdown into a syntax tree.\r\n *\r\n * @overload\r\n * @param {Value} value\r\n * @param {Encoding | null | undefined} [encoding]\r\n * @param {Options | null | undefined} [options]\r\n * @returns {Root}\r\n *\r\n * @overload\r\n * @param {Value} value\r\n * @param {Options | null | undefined} [options]\r\n * @returns {Root}\r\n *\r\n * @param {Value} value\r\n *   Markdown to parse.\r\n * @param {Encoding | Options | null | undefined} [encoding]\r\n *   Character encoding for when `value` is `Buffer`.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration.\r\n * @returns {Root}\r\n *   mdast tree.\r\n */\r\nexport function fromMarkdown(value, encoding, options) {\r\n  if (typeof encoding !== 'string') {\r\n    options = encoding\r\n    encoding = undefined\r\n  }\r\n\r\n  return compiler(options)(\r\n    postprocess(\r\n      parse(options)\r\n        .document()\r\n        .write(preprocess()(value, encoding, true))\r\n    )\r\n  )\r\n}\r\n\r\n/**\r\n * Note this compiler only understand complete buffering, not streaming.\r\n *\r\n * @param {Options | null | undefined} [options]\r\n */\r\nfunction compiler(options) {\r\n  /** @type {Config} */\r\n  const config = {\r\n    transforms: [],\r\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\r\n    enter: {\r\n      autolink: opener(link),\r\n      autolinkProtocol: onenterdata,\r\n      autolinkEmail: onenterdata,\r\n      atxHeading: opener(heading),\r\n      blockQuote: opener(blockQuote),\r\n      characterEscape: onenterdata,\r\n      characterReference: onenterdata,\r\n      codeFenced: opener(codeFlow),\r\n      codeFencedFenceInfo: buffer,\r\n      codeFencedFenceMeta: buffer,\r\n      codeIndented: opener(codeFlow, buffer),\r\n      codeText: opener(codeText, buffer),\r\n      codeTextData: onenterdata,\r\n      data: onenterdata,\r\n      codeFlowValue: onenterdata,\r\n      definition: opener(definition),\r\n      definitionDestinationString: buffer,\r\n      definitionLabelString: buffer,\r\n      definitionTitleString: buffer,\r\n      emphasis: opener(emphasis),\r\n      hardBreakEscape: opener(hardBreak),\r\n      hardBreakTrailing: opener(hardBreak),\r\n      htmlFlow: opener(html, buffer),\r\n      htmlFlowData: onenterdata,\r\n      htmlText: opener(html, buffer),\r\n      htmlTextData: onenterdata,\r\n      image: opener(image),\r\n      label: buffer,\r\n      link: opener(link),\r\n      listItem: opener(listItem),\r\n      listItemValue: onenterlistitemvalue,\r\n      listOrdered: opener(list, onenterlistordered),\r\n      listUnordered: opener(list),\r\n      paragraph: opener(paragraph),\r\n      reference: onenterreference,\r\n      referenceString: buffer,\r\n      resourceDestinationString: buffer,\r\n      resourceTitleString: buffer,\r\n      setextHeading: opener(heading),\r\n      strong: opener(strong),\r\n      thematicBreak: opener(thematicBreak)\r\n    },\r\n    exit: {\r\n      atxHeading: closer(),\r\n      atxHeadingSequence: onexitatxheadingsequence,\r\n      autolink: closer(),\r\n      autolinkEmail: onexitautolinkemail,\r\n      autolinkProtocol: onexitautolinkprotocol,\r\n      blockQuote: closer(),\r\n      characterEscapeValue: onexitdata,\r\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\r\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\r\n      characterReferenceValue: onexitcharacterreferencevalue,\r\n      characterReference: onexitcharacterreference,\r\n      codeFenced: closer(onexitcodefenced),\r\n      codeFencedFence: onexitcodefencedfence,\r\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\r\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\r\n      codeFlowValue: onexitdata,\r\n      codeIndented: closer(onexitcodeindented),\r\n      codeText: closer(onexitcodetext),\r\n      codeTextData: onexitdata,\r\n      data: onexitdata,\r\n      definition: closer(),\r\n      definitionDestinationString: onexitdefinitiondestinationstring,\r\n      definitionLabelString: onexitdefinitionlabelstring,\r\n      definitionTitleString: onexitdefinitiontitlestring,\r\n      emphasis: closer(),\r\n      hardBreakEscape: closer(onexithardbreak),\r\n      hardBreakTrailing: closer(onexithardbreak),\r\n      htmlFlow: closer(onexithtmlflow),\r\n      htmlFlowData: onexitdata,\r\n      htmlText: closer(onexithtmltext),\r\n      htmlTextData: onexitdata,\r\n      image: closer(onexitimage),\r\n      label: onexitlabel,\r\n      labelText: onexitlabeltext,\r\n      lineEnding: onexitlineending,\r\n      link: closer(onexitlink),\r\n      listItem: closer(),\r\n      listOrdered: closer(),\r\n      listUnordered: closer(),\r\n      paragraph: closer(),\r\n      referenceString: onexitreferencestring,\r\n      resourceDestinationString: onexitresourcedestinationstring,\r\n      resourceTitleString: onexitresourcetitlestring,\r\n      resource: onexitresource,\r\n      setextHeading: closer(onexitsetextheading),\r\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\r\n      setextHeadingText: onexitsetextheadingtext,\r\n      strong: closer(),\r\n      thematicBreak: closer()\r\n    }\r\n  }\r\n\r\n  configure(config, (options || {}).mdastExtensions || [])\r\n\r\n  /** @type {CompileData} */\r\n  const data = {}\r\n\r\n  return compile\r\n\r\n  /**\r\n   * Turn micromark events into an mdast tree.\r\n   *\r\n   * @param {Array<Event>} events\r\n   *   Events.\r\n   * @returns {Root}\r\n   *   mdast tree.\r\n   */\r\n  function compile(events) {\r\n    /** @type {Root} */\r\n    let tree = {type: 'root', children: []}\r\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\r\n    const context = {\r\n      stack: [tree],\r\n      tokenStack: [],\r\n      config,\r\n      enter,\r\n      exit,\r\n      buffer,\r\n      resume,\r\n      data\r\n    }\r\n    /** @type {Array<number>} */\r\n    const listStack = []\r\n    let index = -1\r\n\r\n    while (++index < events.length) {\r\n      // We preprocess lists to add `listItem` tokens, and to infer whether\r\n      // items the list itself are spread out.\r\n      if (\r\n        events[index][1].type === types.listOrdered ||\r\n        events[index][1].type === types.listUnordered\r\n      ) {\r\n        if (events[index][0] === 'enter') {\r\n          listStack.push(index)\r\n        } else {\r\n          const tail = listStack.pop()\r\n          assert(typeof tail === 'number', 'expected list ot be open')\r\n          index = prepareList(events, tail, index)\r\n        }\r\n      }\r\n    }\r\n\r\n    index = -1\r\n\r\n    while (++index < events.length) {\r\n      const handler = config[events[index][0]]\r\n\r\n      if (own.call(handler, events[index][1].type)) {\r\n        handler[events[index][1].type].call(\r\n          Object.assign(\r\n            {sliceSerialize: events[index][2].sliceSerialize},\r\n            context\r\n          ),\r\n          events[index][1]\r\n        )\r\n      }\r\n    }\r\n\r\n    // Handle tokens still being open.\r\n    if (context.tokenStack.length > 0) {\r\n      const tail = context.tokenStack[context.tokenStack.length - 1]\r\n      const handler = tail[1] || defaultOnError\r\n      handler.call(context, undefined, tail[0])\r\n    }\r\n\r\n    // Figure out `root` position.\r\n    tree.position = {\r\n      start: point(\r\n        events.length > 0 ? events[0][1].start : {line: 1, column: 1, offset: 0}\r\n      ),\r\n      end: point(\r\n        events.length > 0\r\n          ? events[events.length - 2][1].end\r\n          : {line: 1, column: 1, offset: 0}\r\n      )\r\n    }\r\n\r\n    // Call transforms.\r\n    index = -1\r\n    while (++index < config.transforms.length) {\r\n      tree = config.transforms[index](tree) || tree\r\n    }\r\n\r\n    return tree\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Event>} events\r\n   * @param {number} start\r\n   * @param {number} length\r\n   * @returns {number}\r\n   */\r\n  function prepareList(events, start, length) {\r\n    let index = start - 1\r\n    let containerBalance = -1\r\n    let listSpread = false\r\n    /** @type {Token | undefined} */\r\n    let listItem\r\n    /** @type {number | undefined} */\r\n    let lineIndex\r\n    /** @type {number | undefined} */\r\n    let firstBlankLineIndex\r\n    /** @type {boolean | undefined} */\r\n    let atMarker\r\n\r\n    while (++index <= length) {\r\n      const event = events[index]\r\n\r\n      switch (event[1].type) {\r\n        case types.listUnordered:\r\n        case types.listOrdered:\r\n        case types.blockQuote: {\r\n          if (event[0] === 'enter') {\r\n            containerBalance++\r\n          } else {\r\n            containerBalance--\r\n          }\r\n\r\n          atMarker = undefined\r\n\r\n          break\r\n        }\r\n\r\n        case types.lineEndingBlank: {\r\n          if (event[0] === 'enter') {\r\n            if (\r\n              listItem &&\r\n              !atMarker &&\r\n              !containerBalance &&\r\n              !firstBlankLineIndex\r\n            ) {\r\n              firstBlankLineIndex = index\r\n            }\r\n\r\n            atMarker = undefined\r\n          }\r\n\r\n          break\r\n        }\r\n\r\n        case types.linePrefix:\r\n        case types.listItemValue:\r\n        case types.listItemMarker:\r\n        case types.listItemPrefix:\r\n        case types.listItemPrefixWhitespace: {\r\n          // Empty.\r\n\r\n          break\r\n        }\r\n\r\n        default: {\r\n          atMarker = undefined\r\n        }\r\n      }\r\n\r\n      if (\r\n        (!containerBalance &&\r\n          event[0] === 'enter' &&\r\n          event[1].type === types.listItemPrefix) ||\r\n        (containerBalance === -1 &&\r\n          event[0] === 'exit' &&\r\n          (event[1].type === types.listUnordered ||\r\n            event[1].type === types.listOrdered))\r\n      ) {\r\n        if (listItem) {\r\n          let tailIndex = index\r\n          lineIndex = undefined\r\n\r\n          while (tailIndex--) {\r\n            const tailEvent = events[tailIndex]\r\n\r\n            if (\r\n              tailEvent[1].type === types.lineEnding ||\r\n              tailEvent[1].type === types.lineEndingBlank\r\n            ) {\r\n              if (tailEvent[0] === 'exit') continue\r\n\r\n              if (lineIndex) {\r\n                events[lineIndex][1].type = types.lineEndingBlank\r\n                listSpread = true\r\n              }\r\n\r\n              tailEvent[1].type = types.lineEnding\r\n              lineIndex = tailIndex\r\n            } else if (\r\n              tailEvent[1].type === types.linePrefix ||\r\n              tailEvent[1].type === types.blockQuotePrefix ||\r\n              tailEvent[1].type === types.blockQuotePrefixWhitespace ||\r\n              tailEvent[1].type === types.blockQuoteMarker ||\r\n              tailEvent[1].type === types.listItemIndent\r\n            ) {\r\n              // Empty\r\n            } else {\r\n              break\r\n            }\r\n          }\r\n\r\n          if (\r\n            firstBlankLineIndex &&\r\n            (!lineIndex || firstBlankLineIndex < lineIndex)\r\n          ) {\r\n            listItem._spread = true\r\n          }\r\n\r\n          // Fix position.\r\n          listItem.end = Object.assign(\r\n            {},\r\n            lineIndex ? events[lineIndex][1].start : event[1].end\r\n          )\r\n\r\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\r\n          index++\r\n          length++\r\n        }\r\n\r\n        // Create a new list item.\r\n        if (event[1].type === types.listItemPrefix) {\r\n          /** @type {Token} */\r\n          const item = {\r\n            type: 'listItem',\r\n            _spread: false,\r\n            start: Object.assign({}, event[1].start),\r\n            // @ts-expect-error: we’ll add `end` in a second.\r\n            end: undefined\r\n          }\r\n          listItem = item\r\n          events.splice(index, 0, ['enter', item, event[2]])\r\n          index++\r\n          length++\r\n          firstBlankLineIndex = undefined\r\n          atMarker = true\r\n        }\r\n      }\r\n    }\r\n\r\n    events[start][1]._spread = listSpread\r\n    return length\r\n  }\r\n\r\n  /**\r\n   * Create an opener handle.\r\n   *\r\n   * @param {(token: Token) => Nodes} create\r\n   *   Create a node.\r\n   * @param {Handle | undefined} [and]\r\n   *   Optional function to also run.\r\n   * @returns {Handle}\r\n   *   Handle.\r\n   */\r\n  function opener(create, and) {\r\n    return open\r\n\r\n    /**\r\n     * @this {CompileContext}\r\n     * @param {Token} token\r\n     * @returns {undefined}\r\n     */\r\n    function open(token) {\r\n      enter.call(this, create(token), token)\r\n      if (and) and.call(this, token)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @returns {undefined}\r\n   */\r\n  function buffer() {\r\n    this.stack.push({type: 'fragment', children: []})\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   *   Context.\r\n   * @param {Nodes} node\r\n   *   Node to enter.\r\n   * @param {Token} token\r\n   *   Corresponding token.\r\n   * @param {OnEnterError | undefined} [errorHandler]\r\n   *   Handle the case where this token is open, but it is closed by something else.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  function enter(node, token, errorHandler) {\r\n    const parent = this.stack[this.stack.length - 1]\r\n    assert(parent, 'expected `parent`')\r\n    assert('children' in parent, 'expected `parent`')\r\n    /** @type {Array<Nodes>} */\r\n    const siblings = parent.children\r\n    siblings.push(node)\r\n    this.stack.push(node)\r\n    this.tokenStack.push([token, errorHandler])\r\n    node.position = {\r\n      start: point(token.start),\r\n      // @ts-expect-error: `end` will be patched later.\r\n      end: undefined\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a closer handle.\r\n   *\r\n   * @param {Handle | undefined} [and]\r\n   *   Optional function to also run.\r\n   * @returns {Handle}\r\n   *   Handle.\r\n   */\r\n  function closer(and) {\r\n    return close\r\n\r\n    /**\r\n     * @this {CompileContext}\r\n     * @param {Token} token\r\n     * @returns {undefined}\r\n     */\r\n    function close(token) {\r\n      if (and) and.call(this, token)\r\n      exit.call(this, token)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   *   Context.\r\n   * @param {Token} token\r\n   *   Corresponding token.\r\n   * @param {OnExitError | undefined} [onExitError]\r\n   *   Handle the case where another token is open.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  function exit(token, onExitError) {\r\n    const node = this.stack.pop()\r\n    assert(node, 'expected `node`')\r\n    const open = this.tokenStack.pop()\r\n\r\n    if (!open) {\r\n      throw new Error(\r\n        'Cannot close `' +\r\n          token.type +\r\n          '` (' +\r\n          stringifyPosition({start: token.start, end: token.end}) +\r\n          '): it’s not open'\r\n      )\r\n    } else if (open[0].type !== token.type) {\r\n      if (onExitError) {\r\n        onExitError.call(this, token, open[0])\r\n      } else {\r\n        const handler = open[1] || defaultOnError\r\n        handler.call(this, token, open[0])\r\n      }\r\n    }\r\n\r\n    assert(node.type !== 'fragment', 'unexpected fragment `exit`ed')\r\n    assert(node.position, 'expected `position` to be defined')\r\n    node.position.end = point(token.end)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @returns {string}\r\n   */\r\n  function resume() {\r\n    return toString(this.stack.pop())\r\n  }\r\n\r\n  //\r\n  // Handlers.\r\n  //\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistordered() {\r\n    this.data.expectingFirstListItemValue = true\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistitemvalue(token) {\r\n    if (this.data.expectingFirstListItemValue) {\r\n      const ancestor = this.stack[this.stack.length - 2]\r\n      assert(ancestor, 'expected nodes on stack')\r\n      assert(ancestor.type === 'list', 'expected list on stack')\r\n      ancestor.start = Number.parseInt(\r\n        this.sliceSerialize(token),\r\n        constants.numericBaseDecimal\r\n      )\r\n      this.data.expectingFirstListItemValue = undefined\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfenceinfo() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'code', 'expected code on stack')\r\n    node.lang = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfencemeta() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'code', 'expected code on stack')\r\n    node.meta = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfence() {\r\n    // Exit if this is the closing fence.\r\n    if (this.data.flowCodeInside) return\r\n    this.buffer()\r\n    this.data.flowCodeInside = true\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefenced() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'code', 'expected code on stack')\r\n\r\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\r\n    this.data.flowCodeInside = undefined\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodeindented() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'code', 'expected code on stack')\r\n\r\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitionlabelstring(token) {\r\n    const label = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'definition', 'expected definition on stack')\r\n\r\n    node.label = label\r\n    node.identifier = normalizeIdentifier(\r\n      this.sliceSerialize(token)\r\n    ).toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitiontitlestring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'definition', 'expected definition on stack')\r\n\r\n    node.title = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitiondestinationstring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'definition', 'expected definition on stack')\r\n\r\n    node.url = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitatxheadingsequence(token) {\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'heading', 'expected heading on stack')\r\n\r\n    if (!node.depth) {\r\n      const depth = this.sliceSerialize(token).length\r\n\r\n      assert(\r\n        depth === 1 ||\r\n          depth === 2 ||\r\n          depth === 3 ||\r\n          depth === 4 ||\r\n          depth === 5 ||\r\n          depth === 6,\r\n        'expected `depth` between `1` and `6`'\r\n      )\r\n\r\n      node.depth = depth\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheadingtext() {\r\n    this.data.setextHeadingSlurpLineEnding = true\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheadinglinesequence(token) {\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'heading', 'expected heading on stack')\r\n\r\n    node.depth =\r\n      this.sliceSerialize(token).codePointAt(0) === codes.equalsTo ? 1 : 2\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheading() {\r\n    this.data.setextHeadingSlurpLineEnding = undefined\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onenterdata(token) {\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert('children' in node, 'expected parent on stack')\r\n    /** @type {Array<Nodes>} */\r\n    const siblings = node.children\r\n\r\n    let tail = siblings[siblings.length - 1]\r\n\r\n    if (!tail || tail.type !== 'text') {\r\n      // Add a new text node.\r\n      tail = text()\r\n      tail.position = {\r\n        start: point(token.start),\r\n        // @ts-expect-error: we’ll add `end` later.\r\n        end: undefined\r\n      }\r\n      siblings.push(tail)\r\n    }\r\n\r\n    this.stack.push(tail)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitdata(token) {\r\n    const tail = this.stack.pop()\r\n    assert(tail, 'expected a `node` to be on the stack')\r\n    assert('value' in tail, 'expected a `literal` to be on the stack')\r\n    assert(tail.position, 'expected `node` to have an open position')\r\n    tail.value += this.sliceSerialize(token)\r\n    tail.position.end = point(token.end)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlineending(token) {\r\n    const context = this.stack[this.stack.length - 1]\r\n    assert(context, 'expected `node`')\r\n\r\n    // If we’re at a hard break, include the line ending in there.\r\n    if (this.data.atHardBreak) {\r\n      assert('children' in context, 'expected `parent`')\r\n      const tail = context.children[context.children.length - 1]\r\n      assert(tail.position, 'expected tail to have a starting position')\r\n      tail.position.end = point(token.end)\r\n      this.data.atHardBreak = undefined\r\n      return\r\n    }\r\n\r\n    if (\r\n      !this.data.setextHeadingSlurpLineEnding &&\r\n      config.canContainEols.includes(context.type)\r\n    ) {\r\n      onenterdata.call(this, token)\r\n      onexitdata.call(this, token)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithardbreak() {\r\n    this.data.atHardBreak = true\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithtmlflow() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'html', 'expected html on stack')\r\n\r\n    node.value = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithtmltext() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'html', 'expected html on stack')\r\n\r\n    node.value = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitcodetext() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'inlineCode', 'expected inline code on stack')\r\n\r\n    node.value = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlink() {\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'link', 'expected link on stack')\r\n\r\n    // Note: there are also `identifier` and `label` fields on this link node!\r\n    // These are used / cleaned here.\r\n\r\n    // To do: clean.\r\n    if (this.data.inReference) {\r\n      /** @type {ReferenceType} */\r\n      const referenceType = this.data.referenceType || 'shortcut'\r\n\r\n      node.type += 'Reference'\r\n      // @ts-expect-error: mutate.\r\n      node.referenceType = referenceType\r\n      // @ts-expect-error: mutate.\r\n      delete node.url\r\n      delete node.title\r\n    } else {\r\n      // @ts-expect-error: mutate.\r\n      delete node.identifier\r\n      // @ts-expect-error: mutate.\r\n      delete node.label\r\n    }\r\n\r\n    this.data.referenceType = undefined\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitimage() {\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'image', 'expected image on stack')\r\n\r\n    // Note: there are also `identifier` and `label` fields on this link node!\r\n    // These are used / cleaned here.\r\n\r\n    // To do: clean.\r\n    if (this.data.inReference) {\r\n      /** @type {ReferenceType} */\r\n      const referenceType = this.data.referenceType || 'shortcut'\r\n\r\n      node.type += 'Reference'\r\n      // @ts-expect-error: mutate.\r\n      node.referenceType = referenceType\r\n      // @ts-expect-error: mutate.\r\n      delete node.url\r\n      delete node.title\r\n    } else {\r\n      // @ts-expect-error: mutate.\r\n      delete node.identifier\r\n      // @ts-expect-error: mutate.\r\n      delete node.label\r\n    }\r\n\r\n    this.data.referenceType = undefined\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlabeltext(token) {\r\n    const string = this.sliceSerialize(token)\r\n    const ancestor = this.stack[this.stack.length - 2]\r\n    assert(ancestor, 'expected ancestor on stack')\r\n    assert(\r\n      ancestor.type === 'image' || ancestor.type === 'link',\r\n      'expected image or link on stack'\r\n    )\r\n\r\n    // @ts-expect-error: stash this on the node, as it might become a reference\r\n    // later.\r\n    ancestor.label = decodeString(string)\r\n    // @ts-expect-error: same as above.\r\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlabel() {\r\n    const fragment = this.stack[this.stack.length - 1]\r\n    assert(fragment, 'expected node on stack')\r\n    assert(fragment.type === 'fragment', 'expected fragment on stack')\r\n    const value = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(\r\n      node.type === 'image' || node.type === 'link',\r\n      'expected image or link on stack'\r\n    )\r\n\r\n    // Assume a reference.\r\n    this.data.inReference = true\r\n\r\n    if (node.type === 'link') {\r\n      /** @type {Array<PhrasingContent>} */\r\n      const children = fragment.children\r\n\r\n      node.children = children\r\n    } else {\r\n      node.alt = value\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresourcedestinationstring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(\r\n      node.type === 'image' || node.type === 'link',\r\n      'expected image or link on stack'\r\n    )\r\n    node.url = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresourcetitlestring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(\r\n      node.type === 'image' || node.type === 'link',\r\n      'expected image or link on stack'\r\n    )\r\n    node.title = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresource() {\r\n    this.data.inReference = undefined\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onenterreference() {\r\n    this.data.referenceType = 'collapsed'\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitreferencestring(token) {\r\n    const label = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(\r\n      node.type === 'image' || node.type === 'link',\r\n      'expected image reference or link reference on stack'\r\n    )\r\n\r\n    // @ts-expect-error: stash this on the node, as it might become a reference\r\n    // later.\r\n    node.label = label\r\n    // @ts-expect-error: same as above.\r\n    node.identifier = normalizeIdentifier(\r\n      this.sliceSerialize(token)\r\n    ).toLowerCase()\r\n    this.data.referenceType = 'full'\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitcharacterreferencemarker(token) {\r\n    assert(\r\n      token.type === 'characterReferenceMarkerNumeric' ||\r\n        token.type === 'characterReferenceMarkerHexadecimal'\r\n    )\r\n    this.data.characterReferenceType = token.type\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcharacterreferencevalue(token) {\r\n    const data = this.sliceSerialize(token)\r\n    const type = this.data.characterReferenceType\r\n    /** @type {string} */\r\n    let value\r\n\r\n    if (type) {\r\n      value = decodeNumericCharacterReference(\r\n        data,\r\n        type === types.characterReferenceMarkerNumeric\r\n          ? constants.numericBaseDecimal\r\n          : constants.numericBaseHexadecimal\r\n      )\r\n      this.data.characterReferenceType = undefined\r\n    } else {\r\n      const result = decodeNamedCharacterReference(data)\r\n      assert(result !== false, 'expected reference to decode')\r\n      value = result\r\n    }\r\n\r\n    const tail = this.stack[this.stack.length - 1]\r\n    assert(tail, 'expected `node`')\r\n    assert('value' in tail, 'expected `node.value`')\r\n    tail.value += value\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcharacterreference(token) {\r\n    const tail = this.stack.pop()\r\n    assert(tail, 'expected `node`')\r\n    assert(tail.position, 'expected `node.position`')\r\n    tail.position.end = point(token.end)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitautolinkprotocol(token) {\r\n    onexitdata.call(this, token)\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'link', 'expected link on stack')\r\n\r\n    node.url = this.sliceSerialize(token)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitautolinkemail(token) {\r\n    onexitdata.call(this, token)\r\n    const node = this.stack[this.stack.length - 1]\r\n    assert(node, 'expected node on stack')\r\n    assert(node.type === 'link', 'expected link on stack')\r\n\r\n    node.url = 'mailto:' + this.sliceSerialize(token)\r\n  }\r\n\r\n  //\r\n  // Creaters.\r\n  //\r\n\r\n  /** @returns {Blockquote} */\r\n  function blockQuote() {\r\n    return {type: 'blockquote', children: []}\r\n  }\r\n\r\n  /** @returns {Code} */\r\n  function codeFlow() {\r\n    return {type: 'code', lang: null, meta: null, value: ''}\r\n  }\r\n\r\n  /** @returns {InlineCode} */\r\n  function codeText() {\r\n    return {type: 'inlineCode', value: ''}\r\n  }\r\n\r\n  /** @returns {Definition} */\r\n  function definition() {\r\n    return {\r\n      type: 'definition',\r\n      identifier: '',\r\n      label: null,\r\n      title: null,\r\n      url: ''\r\n    }\r\n  }\r\n\r\n  /** @returns {Emphasis} */\r\n  function emphasis() {\r\n    return {type: 'emphasis', children: []}\r\n  }\r\n\r\n  /** @returns {Heading} */\r\n  function heading() {\r\n    return {\r\n      type: 'heading',\r\n      // @ts-expect-error `depth` will be set later.\r\n      depth: 0,\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /** @returns {Break} */\r\n  function hardBreak() {\r\n    return {type: 'break'}\r\n  }\r\n\r\n  /** @returns {Html} */\r\n  function html() {\r\n    return {type: 'html', value: ''}\r\n  }\r\n\r\n  /** @returns {Image} */\r\n  function image() {\r\n    return {type: 'image', title: null, url: '', alt: null}\r\n  }\r\n\r\n  /** @returns {Link} */\r\n  function link() {\r\n    return {type: 'link', title: null, url: '', children: []}\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   * @returns {List}\r\n   */\r\n  function list(token) {\r\n    return {\r\n      type: 'list',\r\n      ordered: token.type === 'listOrdered',\r\n      start: null,\r\n      spread: token._spread,\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   * @returns {ListItem}\r\n   */\r\n  function listItem(token) {\r\n    return {\r\n      type: 'listItem',\r\n      spread: token._spread,\r\n      checked: null,\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /** @returns {Paragraph} */\r\n  function paragraph() {\r\n    return {type: 'paragraph', children: []}\r\n  }\r\n\r\n  /** @returns {Strong} */\r\n  function strong() {\r\n    return {type: 'strong', children: []}\r\n  }\r\n\r\n  /** @returns {Text} */\r\n  function text() {\r\n    return {type: 'text', value: ''}\r\n  }\r\n\r\n  /** @returns {ThematicBreak} */\r\n  function thematicBreak() {\r\n    return {type: 'thematicBreak'}\r\n  }\r\n}\r\n\r\n/**\r\n * Copy a point-like value.\r\n *\r\n * @param {Point} d\r\n *   Point-like value.\r\n * @returns {Point}\r\n *   unist point.\r\n */\r\nfunction point(d) {\r\n  return {line: d.line, column: d.column, offset: d.offset}\r\n}\r\n\r\n/**\r\n * @param {Config} combined\r\n * @param {Array<Array<Extension> | Extension>} extensions\r\n * @returns {undefined}\r\n */\r\nfunction configure(combined, extensions) {\r\n  let index = -1\r\n\r\n  while (++index < extensions.length) {\r\n    const value = extensions[index]\r\n\r\n    if (Array.isArray(value)) {\r\n      configure(combined, value)\r\n    } else {\r\n      extension(combined, value)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Config} combined\r\n * @param {Extension} extension\r\n * @returns {undefined}\r\n */\r\nfunction extension(combined, extension) {\r\n  /** @type {keyof Extension} */\r\n  let key\r\n\r\n  for (key in extension) {\r\n    if (own.call(extension, key)) {\r\n      switch (key) {\r\n        case 'canContainEols': {\r\n          const right = extension[key]\r\n          if (right) {\r\n            combined[key].push(...right)\r\n          }\r\n\r\n          break\r\n        }\r\n\r\n        case 'transforms': {\r\n          const right = extension[key]\r\n          if (right) {\r\n            combined[key].push(...right)\r\n          }\r\n\r\n          break\r\n        }\r\n\r\n        case 'enter':\r\n        case 'exit': {\r\n          const right = extension[key]\r\n          if (right) {\r\n            Object.assign(combined[key], right)\r\n          }\r\n\r\n          break\r\n        }\r\n        // No default\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** @type {OnEnterError} */\r\nfunction defaultOnError(left, right) {\r\n  if (left) {\r\n    throw new Error(\r\n      'Cannot close `' +\r\n        left.type +\r\n        '` (' +\r\n        stringifyPosition({start: left.start, end: left.end}) +\r\n        '): a different token (`' +\r\n        right.type +\r\n        '`, ' +\r\n        stringifyPosition({start: right.start, end: right.end}) +\r\n        ') is open'\r\n    )\r\n  } else {\r\n    throw new Error(\r\n      'Cannot close document, a token (`' +\r\n        right.type +\r\n        '`, ' +\r\n        stringifyPosition({start: right.start, end: right.end}) +\r\n        ') is still open'\r\n    )\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\r\n * @typedef {import('unified').Parser<Root>} Parser\r\n * @typedef {import('unified').Processor<Root>} Processor\r\n */\r\n\r\n/**\r\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\r\n */\r\n\r\nimport {fromMarkdown} from 'mdast-util-from-markdown'\r\n\r\n/**\r\n * Aadd support for parsing from markdown.\r\n *\r\n * @param {Readonly<Options> | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nexport default function remarkParse(options) {\r\n  /** @type {Processor} */\r\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\r\n  const self = this\r\n\r\n  self.parser = parser\r\n\r\n  /**\r\n   * @type {Parser}\r\n   */\r\n  function parser(doc) {\r\n    return fromMarkdown(doc, {\r\n      ...self.data('settings'),\r\n      ...options,\r\n      // Note: these options are not in the readme.\r\n      // The goal is for them to be set by plugins on `data` instead of being\r\n      // passed by users.\r\n      extensions: self.data('micromarkExtensions') || [],\r\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\r\n    })\r\n  }\r\n}\r\n", "/**\r\n * @callback Handler\r\n *   Handle a value, with a certain ID field set to a certain value.\r\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\r\n *   place on the `handlers` record.\r\n * @param {...any} parameters\r\n *   Arbitrary parameters passed to the zwitch.\r\n *   The first will be an object with a certain ID field set to a certain value.\r\n * @returns {any}\r\n *   Anything!\r\n */\r\n\r\n/**\r\n * @callback UnknownHandler\r\n *   Handle values that do have a certain ID field, but it’s set to a value\r\n *   that is not listed in the `handlers` record.\r\n * @param {unknown} value\r\n *   An object with a certain ID field set to an unknown value.\r\n * @param {...any} rest\r\n *   Arbitrary parameters passed to the zwitch.\r\n * @returns {any}\r\n *   Anything!\r\n */\r\n\r\n/**\r\n * @callback InvalidHandler\r\n *   Handle values that do not have a certain ID field.\r\n * @param {unknown} value\r\n *   Any unknown value.\r\n * @param {...any} rest\r\n *   Arbitrary parameters passed to the zwitch.\r\n * @returns {void|null|undefined|never}\r\n *   This should crash or return nothing.\r\n */\r\n\r\n/**\r\n * @template {InvalidHandler} [Invalid=InvalidHandler]\r\n * @template {UnknownHandler} [Unknown=UnknownHandler]\r\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\r\n * @typedef Options\r\n *   Configuration (required).\r\n * @property {Invalid} [invalid]\r\n *   Handler to use for invalid values.\r\n * @property {Unknown} [unknown]\r\n *   Handler to use for unknown values.\r\n * @property {Handlers} [handlers]\r\n *   Handlers to use.\r\n */\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * Handle values based on a field.\r\n *\r\n * @template {InvalidHandler} [Invalid=InvalidHandler]\r\n * @template {UnknownHandler} [Unknown=UnknownHandler]\r\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\r\n * @param {string} key\r\n *   Field to switch on.\r\n * @param {Options<Invalid, Unknown, Handlers>} [options]\r\n *   Configuration (required).\r\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\r\n */\r\nexport function zwitch(key, options) {\r\n  const settings = options || {}\r\n\r\n  /**\r\n   * Handle one value.\r\n   *\r\n   * Based on the bound `key`, a respective handler will be called.\r\n   * If `value` is not an object, or doesn’t have a `key` property, the special\r\n   * “invalid” handler will be called.\r\n   * If `value` has an unknown `key`, the special “unknown” handler will be\r\n   * called.\r\n   *\r\n   * All arguments, and the context object, are passed through to the handler,\r\n   * and it’s result is returned.\r\n   *\r\n   * @this {unknown}\r\n   *   Any context object.\r\n   * @param {unknown} [value]\r\n   *   Any value.\r\n   * @param {...unknown} parameters\r\n   *   Arbitrary parameters passed to the zwitch.\r\n   * @property {Handler} invalid\r\n   *   Handle for values that do not have a certain ID field.\r\n   * @property {Handler} unknown\r\n   *   Handle values that do have a certain ID field, but it’s set to a value\r\n   *   that is not listed in the `handlers` record.\r\n   * @property {Handlers} handlers\r\n   *   Record of handlers.\r\n   * @returns {unknown}\r\n   *   Anything.\r\n   */\r\n  function one(value, ...parameters) {\r\n    /** @type {Handler|undefined} */\r\n    let fn = one.invalid\r\n    const handlers = one.handlers\r\n\r\n    if (value && own.call(value, key)) {\r\n      // @ts-expect-error Indexable.\r\n      const id = String(value[key])\r\n      // @ts-expect-error Indexable.\r\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\r\n    }\r\n\r\n    if (fn) {\r\n      return fn.call(this, value, ...parameters)\r\n    }\r\n  }\r\n\r\n  one.handlers = settings.handlers || {}\r\n  one.invalid = settings.invalid\r\n  one.unknown = settings.unknown\r\n\r\n  // @ts-expect-error: matches!\r\n  return one\r\n}\r\n", "/**\r\n * @typedef {import('./types.js').Options} Options\r\n * @typedef {import('./types.js').State} State\r\n */\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * @param {State} base\r\n * @param {Options} extension\r\n * @returns {State}\r\n */\r\nexport function configure(base, extension) {\r\n  let index = -1\r\n  /** @type {keyof Options} */\r\n  let key\r\n\r\n  // First do subextensions.\r\n  if (extension.extensions) {\r\n    while (++index < extension.extensions.length) {\r\n      configure(base, extension.extensions[index])\r\n    }\r\n  }\r\n\r\n  for (key in extension) {\r\n    if (own.call(extension, key)) {\r\n      switch (key) {\r\n        case 'extensions': {\r\n          // Empty.\r\n          break\r\n        }\r\n\r\n        /* c8 ignore next 4 */\r\n        case 'unsafe': {\r\n          list(base[key], extension[key])\r\n          break\r\n        }\r\n\r\n        case 'join': {\r\n          list(base[key], extension[key])\r\n          break\r\n        }\r\n\r\n        case 'handlers': {\r\n          map(base[key], extension[key])\r\n          break\r\n        }\r\n\r\n        default: {\r\n          // @ts-expect-error: matches.\r\n          base.options[key] = extension[key]\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return base\r\n}\r\n\r\n/**\r\n * @template T\r\n * @param {Array<T>} left\r\n * @param {Array<T> | null | undefined} right\r\n */\r\nfunction list(left, right) {\r\n  if (right) {\r\n    left.push(...right)\r\n  }\r\n}\r\n\r\n/**\r\n * @template T\r\n * @param {Record<string, T>} left\r\n * @param {Record<string, T> | null | undefined} right\r\n */\r\nfunction map(left, right) {\r\n  if (right) {\r\n    Object.assign(left, right)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Blockquote} Blockquote\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').Map} Map\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {Blockquote} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function blockquote(node, _, state, info) {\r\n  const exit = state.enter('blockquote')\r\n  const tracker = state.createTracker(info)\r\n  tracker.move('> ')\r\n  tracker.shift(2)\r\n  const value = state.indentLines(\r\n    state.containerFlow(node, tracker.current()),\r\n    map\r\n  )\r\n  exit()\r\n  return value\r\n}\r\n\r\n/** @type {Map} */\r\nfunction map(line, _, blank) {\r\n  return '>' + (blank ? '' : ' ') + line\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').ConstructName} ConstructName\r\n * @typedef {import('../types.js').Unsafe} Unsafe\r\n */\r\n\r\n/**\r\n * @param {Array<ConstructName>} stack\r\n * @param {Unsafe} pattern\r\n * @returns {boolean}\r\n */\r\nexport function patternInScope(stack, pattern) {\r\n  return (\r\n    listInScope(stack, pattern.inConstruct, true) &&\r\n    !listInScope(stack, pattern.notInConstruct, false)\r\n  )\r\n}\r\n\r\n/**\r\n * @param {Array<ConstructName>} stack\r\n * @param {Unsafe['inConstruct']} list\r\n * @param {boolean} none\r\n * @returns {boolean}\r\n */\r\nfunction listInScope(stack, list, none) {\r\n  if (typeof list === 'string') {\r\n    list = [list]\r\n  }\r\n\r\n  if (!list || list.length === 0) {\r\n    return none\r\n  }\r\n\r\n  let index = -1\r\n\r\n  while (++index < list.length) {\r\n    if (stack.includes(list[index])) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Break} Break\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {patternInScope} from '../util/pattern-in-scope.js'\r\n\r\n/**\r\n * @param {Break} _\r\n * @param {Parents | undefined} _1\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function hardBreak(_, _1, state, info) {\r\n  let index = -1\r\n\r\n  while (++index < state.unsafe.length) {\r\n    // If we can’t put eols in this construct (setext headings, tables), use a\r\n    // space instead.\r\n    if (\r\n      state.unsafe[index].character === '\\n' &&\r\n      patternInScope(state.stack, state.unsafe[index])\r\n    ) {\r\n      return /[ \\t]/.test(info.before) ? '' : ' '\r\n    }\r\n  }\r\n\r\n  return '\\\\\\n'\r\n}\r\n", "/**\r\n * Get the count of the longest repeating streak of `substring` in `value`.\r\n *\r\n * @param {string} value\r\n *   Content to search in.\r\n * @param {string} substring\r\n *   Substring to look for, typically one character.\r\n * @returns {number}\r\n *   Count of most frequent adjacent `substring`s in `value`.\r\n */\r\nexport function longestStreak(value, substring) {\r\n  const source = String(value)\r\n  let index = source.indexOf(substring)\r\n  let expected = index\r\n  let count = 0\r\n  let max = 0\r\n\r\n  if (typeof substring !== 'string') {\r\n    throw new TypeError('Expected substring')\r\n  }\r\n\r\n  while (index !== -1) {\r\n    if (index === expected) {\r\n      if (++count > max) {\r\n        max = count\r\n      }\r\n    } else {\r\n      count = 1\r\n    }\r\n\r\n    expected = index + substring.length\r\n    index = source.indexOf(substring, expected)\r\n  }\r\n\r\n  return max\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Code} Code\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {Code} node\r\n * @param {State} state\r\n * @returns {boolean}\r\n */\r\nexport function formatCodeAsIndented(node, state) {\r\n  return Boolean(\r\n    state.options.fences === false &&\r\n      node.value &&\r\n      // If there’s no info…\r\n      !node.lang &&\r\n      // And there’s a non-whitespace character…\r\n      /[^ \\r\\n]/.test(node.value) &&\r\n      // And the value doesn’t start or end in a blank…\r\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['fence'], null | undefined>}\r\n */\r\nexport function checkFence(state) {\r\n  const marker = state.options.fence || '`'\r\n\r\n  if (marker !== '`' && marker !== '~') {\r\n    throw new Error(\r\n      'Cannot serialize code with `' +\r\n        marker +\r\n        '` for `options.fence`, expected `` ` `` or `~`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Code} Code\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').Map} Map\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {longestStreak} from 'longest-streak'\r\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\r\nimport {checkFence} from '../util/check-fence.js'\r\n\r\n/**\r\n * @param {Code} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function code(node, _, state, info) {\r\n  const marker = checkFence(state)\r\n  const raw = node.value || ''\r\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\r\n\r\n  if (formatCodeAsIndented(node, state)) {\r\n    const exit = state.enter('codeIndented')\r\n    const value = state.indentLines(raw, map)\r\n    exit()\r\n    return value\r\n  }\r\n\r\n  const tracker = state.createTracker(info)\r\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\r\n  const exit = state.enter('codeFenced')\r\n  let value = tracker.move(sequence)\r\n\r\n  if (node.lang) {\r\n    const subexit = state.enter(`codeFencedLang${suffix}`)\r\n    value += tracker.move(\r\n      state.safe(node.lang, {\r\n        before: value,\r\n        after: ' ',\r\n        encode: ['`'],\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    subexit()\r\n  }\r\n\r\n  if (node.lang && node.meta) {\r\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\r\n    value += tracker.move(' ')\r\n    value += tracker.move(\r\n      state.safe(node.meta, {\r\n        before: value,\r\n        after: '\\n',\r\n        encode: ['`'],\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    subexit()\r\n  }\r\n\r\n  value += tracker.move('\\n')\r\n\r\n  if (raw) {\r\n    value += tracker.move(raw + '\\n')\r\n  }\r\n\r\n  value += tracker.move(sequence)\r\n  exit()\r\n  return value\r\n}\r\n\r\n/** @type {Map} */\r\nfunction map(line, _, blank) {\r\n  return (blank ? '' : '    ') + line\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['quote'], null | undefined>}\r\n */\r\nexport function checkQuote(state) {\r\n  const marker = state.options.quote || '\"'\r\n\r\n  if (marker !== '\"' && marker !== \"'\") {\r\n    throw new Error(\r\n      'Cannot serialize title with `' +\r\n        marker +\r\n        '` for `options.quote`, expected `\"`, or `\\'`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Definition} Definition\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkQuote} from '../util/check-quote.js'\r\n\r\n/**\r\n * @param {Definition} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function definition(node, _, state, info) {\r\n  const quote = checkQuote(state)\r\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\r\n  const exit = state.enter('definition')\r\n  let subexit = state.enter('label')\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move('[')\r\n  value += tracker.move(\r\n    state.safe(state.associationId(node), {\r\n      before: value,\r\n      after: ']',\r\n      ...tracker.current()\r\n    })\r\n  )\r\n  value += tracker.move(']: ')\r\n\r\n  subexit()\r\n\r\n  if (\r\n    // If there’s no url, or…\r\n    !node.url ||\r\n    // If there are control characters or whitespace.\r\n    /[\\0- \\u007F]/.test(node.url)\r\n  ) {\r\n    subexit = state.enter('destinationLiteral')\r\n    value += tracker.move('<')\r\n    value += tracker.move(\r\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\r\n    )\r\n    value += tracker.move('>')\r\n  } else {\r\n    // No whitespace, raw is prettier.\r\n    subexit = state.enter('destinationRaw')\r\n    value += tracker.move(\r\n      state.safe(node.url, {\r\n        before: value,\r\n        after: node.title ? ' ' : '\\n',\r\n        ...tracker.current()\r\n      })\r\n    )\r\n  }\r\n\r\n  subexit()\r\n\r\n  if (node.title) {\r\n    subexit = state.enter(`title${suffix}`)\r\n    value += tracker.move(' ' + quote)\r\n    value += tracker.move(\r\n      state.safe(node.title, {\r\n        before: value,\r\n        after: quote,\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    value += tracker.move(quote)\r\n    subexit()\r\n  }\r\n\r\n  exit()\r\n\r\n  return value\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['emphasis'], null | undefined>}\r\n */\r\nexport function checkEmphasis(state) {\r\n  const marker = state.options.emphasis || '*'\r\n\r\n  if (marker !== '*' && marker !== '_') {\r\n    throw new Error(\r\n      'Cannot serialize emphasis with `' +\r\n        marker +\r\n        '` for `options.emphasis`, expected `*`, or `_`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Emphasis} Emphasis\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkEmphasis} from '../util/check-emphasis.js'\r\n\r\nemphasis.peek = emphasisPeek\r\n\r\n// To do: there are cases where emphasis cannot “form” depending on the\r\n// previous or next character of sequences.\r\n// There’s no way around that though, except for injecting zero-width stuff.\r\n// Do we need to safeguard against that?\r\n/**\r\n * @param {Emphasis} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function emphasis(node, _, state, info) {\r\n  const marker = checkEmphasis(state)\r\n  const exit = state.enter('emphasis')\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move(marker)\r\n  value += tracker.move(\r\n    state.containerPhrasing(node, {\r\n      before: value,\r\n      after: marker,\r\n      ...tracker.current()\r\n    })\r\n  )\r\n  value += tracker.move(marker)\r\n  exit()\r\n  return value\r\n}\r\n\r\n/**\r\n * @param {Emphasis} _\r\n * @param {Parents | undefined} _1\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nfunction emphasisPeek(_, _1, state) {\r\n  return state.options.emphasis || '*'\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Parent} Parent\r\n */\r\n\r\n/**\r\n * @template Fn\r\n * @template Fallback\r\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\r\n */\r\n\r\n/**\r\n * @callback Check\r\n *   Check that an arbitrary value is a node.\r\n * @param {unknown} this\r\n *   The given context.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean}\r\n *   Whether this is a node and passes a test.\r\n *\r\n * @typedef {Record<string, unknown> | Node} Props\r\n *   Object to check for equivalence.\r\n *\r\n *   Note: `Node` is included as it is common but is not indexable.\r\n *\r\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\r\n *   Check for an arbitrary node.\r\n *\r\n * @callback TestFunction\r\n *   Check if a node passes a test.\r\n * @param {unknown} this\r\n *   The given context.\r\n * @param {Node} node\r\n *   A node.\r\n * @param {number | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean | undefined | void}\r\n *   Whether this node passes the test.\r\n *\r\n *   Note: `void` is included until TS sees no return as `undefined`.\r\n */\r\n\r\n/**\r\n * Check if `node` is a `Node` and whether it passes the given test.\r\n *\r\n * @param {unknown} node\r\n *   Thing to check, typically `Node`.\r\n * @param {Test} test\r\n *   A check for a specific node.\r\n * @param {number | null | undefined} index\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} parent\r\n *   The node’s parent.\r\n * @param {unknown} context\r\n *   Context object (`this`) to pass to `test` functions.\r\n * @returns {boolean}\r\n *   Whether `node` is a node and passes a test.\r\n */\r\nexport const is =\r\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\r\n  /**\r\n   * @type {(\r\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\r\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\r\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\r\n   *   ((node?: null | undefined) => false) &\r\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\r\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {unknown} [node]\r\n     * @param {Test} [test]\r\n     * @param {number | null | undefined} [index]\r\n     * @param {Parent | null | undefined} [parent]\r\n     * @param {unknown} [context]\r\n     * @returns {boolean}\r\n     */\r\n    // eslint-disable-next-line max-params\r\n    function (node, test, index, parent, context) {\r\n      const check = convert(test)\r\n\r\n      if (\r\n        index !== undefined &&\r\n        index !== null &&\r\n        (typeof index !== 'number' ||\r\n          index < 0 ||\r\n          index === Number.POSITIVE_INFINITY)\r\n      ) {\r\n        throw new Error('Expected positive finite index')\r\n      }\r\n\r\n      if (\r\n        parent !== undefined &&\r\n        parent !== null &&\r\n        (!is(parent) || !parent.children)\r\n      ) {\r\n        throw new Error('Expected parent node')\r\n      }\r\n\r\n      if (\r\n        (parent === undefined || parent === null) !==\r\n        (index === undefined || index === null)\r\n      ) {\r\n        throw new Error('Expected both parent and index')\r\n      }\r\n\r\n      return looksLikeANode(node)\r\n        ? check.call(context, node, index, parent)\r\n        : false\r\n    }\r\n  )\r\n\r\n/**\r\n * Generate an assertion from a test.\r\n *\r\n * Useful if you’re going to test many nodes, for example when creating a\r\n * utility where something else passes a compatible test.\r\n *\r\n * The created function is a bit faster because it expects valid input only:\r\n * a `node`, `index`, and `parent`.\r\n *\r\n * @param {Test} test\r\n *   *   when nullish, checks if `node` is a `Node`.\r\n *   *   when `string`, works like passing `(node) => node.type === test`.\r\n *   *   when `function` checks if function passed the node is true.\r\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\r\n *   *   when `array`, checks if any one of the subtests pass.\r\n * @returns {Check}\r\n *   An assertion.\r\n */\r\nexport const convert =\r\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\r\n  /**\r\n   * @type {(\r\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\r\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\r\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\r\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\r\n   *   ((test?: Test) => Check)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Test} [test]\r\n     * @returns {Check}\r\n     */\r\n    function (test) {\r\n      if (test === null || test === undefined) {\r\n        return ok\r\n      }\r\n\r\n      if (typeof test === 'function') {\r\n        return castFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'object') {\r\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'string') {\r\n        return typeFactory(test)\r\n      }\r\n\r\n      throw new Error('Expected function, string, or object as test')\r\n    }\r\n  )\r\n\r\n/**\r\n * @param {Array<Props | TestFunction | string>} tests\r\n * @returns {Check}\r\n */\r\nfunction anyFactory(tests) {\r\n  /** @type {Array<Check>} */\r\n  const checks = []\r\n  let index = -1\r\n\r\n  while (++index < tests.length) {\r\n    checks[index] = convert(tests[index])\r\n  }\r\n\r\n  return castFactory(any)\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @type {TestFunction}\r\n   */\r\n  function any(...parameters) {\r\n    let index = -1\r\n\r\n    while (++index < checks.length) {\r\n      if (checks[index].apply(this, parameters)) return true\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Turn an object into a test for a node with a certain fields.\r\n *\r\n * @param {Props} check\r\n * @returns {Check}\r\n */\r\nfunction propsFactory(check) {\r\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\r\n\r\n  return castFactory(all)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   * @returns {boolean}\r\n   */\r\n  function all(node) {\r\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\r\n      /** @type {unknown} */ (node)\r\n    )\r\n\r\n    /** @type {string} */\r\n    let key\r\n\r\n    for (key in check) {\r\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\r\n    }\r\n\r\n    return true\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a string into a test for a node with a certain type.\r\n *\r\n * @param {string} check\r\n * @returns {Check}\r\n */\r\nfunction typeFactory(check) {\r\n  return castFactory(type)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   */\r\n  function type(node) {\r\n    return node && node.type === check\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a custom test into a test for a node that passes that test.\r\n *\r\n * @param {TestFunction} testFunction\r\n * @returns {Check}\r\n */\r\nfunction castFactory(testFunction) {\r\n  return check\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @type {Check}\r\n   */\r\n  function check(value, index, parent) {\r\n    return Boolean(\r\n      looksLikeANode(value) &&\r\n        testFunction.call(\r\n          this,\r\n          value,\r\n          typeof index === 'number' ? index : undefined,\r\n          parent || undefined\r\n        )\r\n    )\r\n  }\r\n}\r\n\r\nfunction ok() {\r\n  return true\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n * @returns {value is Node}\r\n */\r\nfunction looksLikeANode(value) {\r\n  return value !== null && typeof value === 'object' && 'type' in value\r\n}\r\n", "/**\r\n * @param {string} d\r\n * @returns {string}\r\n */\r\nexport function color(d) {\r\n  return d\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} UnistNode\r\n * @typedef {import('unist').Parent} UnistParent\r\n */\r\n\r\n/**\r\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\r\n *   Test from `unist-util-is`.\r\n *\r\n *   Note: we have remove and add `undefined`, because otherwise when generating\r\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\r\n *   which doesn’t work when publishing on npm.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Fn extends (value: any) => value is infer Thing\r\n *   ? Thing\r\n *   : Fallback\r\n * )} Predicate\r\n *   Get the value of a type guard `Fn`.\r\n * @template Fn\r\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\r\n * @template Fallback\r\n *   Value to yield if `Fn` is not a type guard.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Check extends null | undefined // No test.\r\n *   ? Value\r\n *   : Value extends {type: Check} // String (type) test.\r\n *   ? Value\r\n *   : Value extends Check // Partial test.\r\n *   ? Value\r\n *   : Check extends Function // Function test.\r\n *   ? Predicate<Check, Value> extends Value\r\n *     ? Predicate<Check, Value>\r\n *     : never\r\n *   : never // Some other test?\r\n * )} MatchesOne\r\n *   Check whether a node matches a primitive check in the type system.\r\n * @template Value\r\n *   Value; typically unist `Node`.\r\n * @template Check\r\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Check extends Array<any>\r\n *   ? MatchesOne<Value, Check[keyof Check]>\r\n *   : MatchesOne<Value, Check>\r\n * )} Matches\r\n *   Check whether a node matches a check in the type system.\r\n * @template Value\r\n *   Value; typically unist `Node`.\r\n * @template Check\r\n *   Value; typically `unist-util-is`-compatible test.\r\n */\r\n\r\n/**\r\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\r\n *   Number; capped reasonably.\r\n */\r\n\r\n/**\r\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\r\n *   Increment a number in the type system.\r\n * @template {Uint} [I=0]\r\n *   Index.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Node extends UnistParent\r\n *   ? Node extends {children: Array<infer Children>}\r\n *     ? Child extends Children ? Node : never\r\n *     : never\r\n *   : never\r\n * )} InternalParent\r\n *   Collect nodes that can be parents of `Child`.\r\n * @template {UnistNode} Node\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\r\n *   Collect nodes in `Tree` that can be parents of `Child`.\r\n * @template {UnistNode} Tree\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Depth extends Max\r\n *   ? never\r\n *   :\r\n *     | InternalParent<Node, Child>\r\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\r\n * )} InternalAncestor\r\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\r\n * @template {UnistNode} Node\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n * @template {Uint} [Max=10]\r\n *   Max; searches up to this depth.\r\n * @template {Uint} [Depth=0]\r\n *   Current depth.\r\n */\r\n\r\n/**\r\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\r\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\r\n * @template {UnistNode} Tree\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Tree extends UnistParent\r\n *     ? Depth extends Max\r\n *       ? Tree\r\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\r\n *     : Tree\r\n * )} InclusiveDescendant\r\n *   Collect all (inclusive) descendants of `Tree`.\r\n *\r\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\r\n *   > recurse without actually running into an infinite loop, which the\r\n *   > previous version did.\r\n *   >\r\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\r\n *   > passed, but it doesn’t improve performance.\r\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\r\n *   > Using up to `10` doesn’t hurt or help either.\r\n * @template {UnistNode} Tree\r\n *   Tree type.\r\n * @template {Uint} [Max=10]\r\n *   Max; searches up to this depth.\r\n * @template {Uint} [Depth=0]\r\n *   Current depth.\r\n */\r\n\r\n/**\r\n * @typedef {'skip' | boolean} Action\r\n *   Union of the action types.\r\n *\r\n * @typedef {number} Index\r\n *   Move to the sibling at `index` next (after node itself is completely\r\n *   traversed).\r\n *\r\n *   Useful if mutating the tree, such as removing the node the visitor is\r\n *   currently on, or any of its previous siblings.\r\n *   Results less than 0 or greater than or equal to `children.length` stop\r\n *   traversing the parent.\r\n *\r\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\r\n *   List with one or two values, the first an action, the second an index.\r\n *\r\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\r\n *   Any value that can be returned from a visitor.\r\n */\r\n\r\n/**\r\n * @callback Visitor\r\n *   Handle a node (matching `test`, if given).\r\n *\r\n *   Visitors are free to transform `node`.\r\n *   They can also transform the parent of node (the last of `ancestors`).\r\n *\r\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\r\n *   descendants to be walked (which is a bug).\r\n *\r\n *   When adding or removing previous siblings of `node` (or next siblings, in\r\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\r\n *   sibling to traverse after `node` is traversed.\r\n *   Adding or removing next siblings of `node` (or previous siblings, in case\r\n *   of reverse) is handled as expected without needing to return a new `Index`.\r\n *\r\n *   Removing the children property of an ancestor still results in them being\r\n *   traversed.\r\n * @param {Visited} node\r\n *   Found node.\r\n * @param {Array<VisitedParents>} ancestors\r\n *   Ancestors of `node`.\r\n * @returns {VisitorResult}\r\n *   What to do next.\r\n *\r\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\r\n *   An `Action` is treated as a tuple of `[Action]`.\r\n *\r\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\r\n *   When the `Action` is `EXIT`, that action can be returned.\r\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\r\n * @template {UnistNode} [Visited=UnistNode]\r\n *   Visited node type.\r\n * @template {UnistParent} [VisitedParents=UnistParent]\r\n *   Ancestor type.\r\n */\r\n\r\n/**\r\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\r\n *   Build a typed `Visitor` function from a tree and a test.\r\n *\r\n *   It will infer which values are passed as `node` and which as `parents`.\r\n * @template {UnistNode} [Tree=UnistNode]\r\n *   Tree type.\r\n * @template {Test} [Check=Test]\r\n *   Test type.\r\n */\r\n\r\nimport {convert} from 'unist-util-is'\r\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\r\n\r\n/** @type {Readonly<ActionTuple>} */\r\nconst empty = []\r\n\r\n/**\r\n * Continue traversing as normal.\r\n */\r\nexport const CONTINUE = true\r\n\r\n/**\r\n * Stop traversing immediately.\r\n */\r\nexport const EXIT = false\r\n\r\n/**\r\n * Do not traverse this node’s children.\r\n */\r\nexport const SKIP = 'skip'\r\n\r\n/**\r\n * Visit nodes, with ancestral information.\r\n *\r\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\r\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\r\n *\r\n * You can choose for which nodes `visitor` is called by passing a `test`.\r\n * For complex tests, you should test yourself in `visitor`, as it will be\r\n * faster and will have improved type information.\r\n *\r\n * Walking the tree is an intensive task.\r\n * Make use of the return values of the visitor when possible.\r\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\r\n * to check if a node matches, and then perform different operations.\r\n *\r\n * You can change the tree.\r\n * See `Visitor` for more info.\r\n *\r\n * @overload\r\n * @param {Tree} tree\r\n * @param {Check} check\r\n * @param {BuildVisitor<Tree, Check>} visitor\r\n * @param {boolean | null | undefined} [reverse]\r\n * @returns {undefined}\r\n *\r\n * @overload\r\n * @param {Tree} tree\r\n * @param {BuildVisitor<Tree>} visitor\r\n * @param {boolean | null | undefined} [reverse]\r\n * @returns {undefined}\r\n *\r\n * @param {UnistNode} tree\r\n *   Tree to traverse.\r\n * @param {Visitor | Test} test\r\n *   `unist-util-is`-compatible test\r\n * @param {Visitor | boolean | null | undefined} [visitor]\r\n *   Handle each node.\r\n * @param {boolean | null | undefined} [reverse]\r\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\r\n * @returns {undefined}\r\n *   Nothing.\r\n *\r\n * @template {UnistNode} Tree\r\n *   Node type.\r\n * @template {Test} Check\r\n *   `unist-util-is`-compatible test.\r\n */\r\nexport function visitParents(tree, test, visitor, reverse) {\r\n  /** @type {Test} */\r\n  let check\r\n\r\n  if (typeof test === 'function' && typeof visitor !== 'function') {\r\n    reverse = visitor\r\n    // @ts-expect-error no visitor given, so `visitor` is test.\r\n    visitor = test\r\n  } else {\r\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\r\n    check = test\r\n  }\r\n\r\n  const is = convert(check)\r\n  const step = reverse ? -1 : 1\r\n\r\n  factory(tree, undefined, [])()\r\n\r\n  /**\r\n   * @param {UnistNode} node\r\n   * @param {number | undefined} index\r\n   * @param {Array<UnistParent>} parents\r\n   */\r\n  function factory(node, index, parents) {\r\n    const value = /** @type {Record<string, unknown>} */ (\r\n      node && typeof node === 'object' ? node : {}\r\n    )\r\n\r\n    if (typeof value.type === 'string') {\r\n      const name =\r\n        // `hast`\r\n        typeof value.tagName === 'string'\r\n          ? value.tagName\r\n          : // `xast`\r\n          typeof value.name === 'string'\r\n          ? value.name\r\n          : undefined\r\n\r\n      Object.defineProperty(visit, 'name', {\r\n        value:\r\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\r\n      })\r\n    }\r\n\r\n    return visit\r\n\r\n    function visit() {\r\n      /** @type {Readonly<ActionTuple>} */\r\n      let result = empty\r\n      /** @type {Readonly<ActionTuple>} */\r\n      let subresult\r\n      /** @type {number} */\r\n      let offset\r\n      /** @type {Array<UnistParent>} */\r\n      let grandparents\r\n\r\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\r\n        // @ts-expect-error: `visitor` is now a visitor.\r\n        result = toResult(visitor(node, parents))\r\n\r\n        if (result[0] === EXIT) {\r\n          return result\r\n        }\r\n      }\r\n\r\n      if ('children' in node && node.children) {\r\n        const nodeAsParent = /** @type {UnistParent} */ (node)\r\n\r\n        if (nodeAsParent.children && result[0] !== SKIP) {\r\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\r\n          grandparents = parents.concat(nodeAsParent)\r\n\r\n          while (offset > -1 && offset < nodeAsParent.children.length) {\r\n            const child = nodeAsParent.children[offset]\r\n\r\n            subresult = factory(child, offset, grandparents)()\r\n\r\n            if (subresult[0] === EXIT) {\r\n              return subresult\r\n            }\r\n\r\n            offset =\r\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\r\n          }\r\n        }\r\n      }\r\n\r\n      return result\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a return value into a clean result.\r\n *\r\n * @param {VisitorResult} value\r\n *   Valid return values from visitors.\r\n * @returns {Readonly<ActionTuple>}\r\n *   Clean result.\r\n */\r\nfunction toResult(value) {\r\n  if (Array.isArray(value)) {\r\n    return value\r\n  }\r\n\r\n  if (typeof value === 'number') {\r\n    return [CONTINUE, value]\r\n  }\r\n\r\n  return value === null || value === undefined ? empty : [value]\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} UnistNode\r\n * @typedef {import('unist').Parent} UnistParent\r\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\r\n */\r\n\r\n/**\r\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\r\n *   Test from `unist-util-is`.\r\n *\r\n *   Note: we have remove and add `undefined`, because otherwise when generating\r\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\r\n *   which doesn’t work when publishing on npm.\r\n */\r\n\r\n// To do: use types from `unist-util-visit-parents` when it’s released.\r\n\r\n/**\r\n * @typedef {(\r\n *   Fn extends (value: any) => value is infer Thing\r\n *   ? Thing\r\n *   : Fallback\r\n * )} Predicate\r\n *   Get the value of a type guard `Fn`.\r\n * @template Fn\r\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\r\n * @template Fallback\r\n *   Value to yield if `Fn` is not a type guard.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Check extends null | undefined // No test.\r\n *   ? Value\r\n *   : Value extends {type: Check} // String (type) test.\r\n *   ? Value\r\n *   : Value extends Check // Partial test.\r\n *   ? Value\r\n *   : Check extends Function // Function test.\r\n *   ? Predicate<Check, Value> extends Value\r\n *     ? Predicate<Check, Value>\r\n *     : never\r\n *   : never // Some other test?\r\n * )} MatchesOne\r\n *   Check whether a node matches a primitive check in the type system.\r\n * @template Value\r\n *   Value; typically unist `Node`.\r\n * @template Check\r\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Check extends Array<any>\r\n *   ? MatchesOne<Value, Check[keyof Check]>\r\n *   : MatchesOne<Value, Check>\r\n * )} Matches\r\n *   Check whether a node matches a check in the type system.\r\n * @template Value\r\n *   Value; typically unist `Node`.\r\n * @template Check\r\n *   Value; typically `unist-util-is`-compatible test.\r\n */\r\n\r\n/**\r\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\r\n *   Number; capped reasonably.\r\n */\r\n\r\n/**\r\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\r\n *   Increment a number in the type system.\r\n * @template {Uint} [I=0]\r\n *   Index.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Node extends UnistParent\r\n *   ? Node extends {children: Array<infer Children>}\r\n *     ? Child extends Children ? Node : never\r\n *     : never\r\n *   : never\r\n * )} InternalParent\r\n *   Collect nodes that can be parents of `Child`.\r\n * @template {UnistNode} Node\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\r\n *   Collect nodes in `Tree` that can be parents of `Child`.\r\n * @template {UnistNode} Tree\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Depth extends Max\r\n *   ? never\r\n *   :\r\n *     | InternalParent<Node, Child>\r\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\r\n * )} InternalAncestor\r\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\r\n * @template {UnistNode} Node\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n * @template {Uint} [Max=10]\r\n *   Max; searches up to this depth.\r\n * @template {Uint} [Depth=0]\r\n *   Current depth.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Tree extends UnistParent\r\n *     ? Depth extends Max\r\n *       ? Tree\r\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\r\n *     : Tree\r\n * )} InclusiveDescendant\r\n *   Collect all (inclusive) descendants of `Tree`.\r\n *\r\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\r\n *   > recurse without actually running into an infinite loop, which the\r\n *   > previous version did.\r\n *   >\r\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\r\n *   > passed, but it doesn’t improve performance.\r\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\r\n *   > Using up to `10` doesn’t hurt or help either.\r\n * @template {UnistNode} Tree\r\n *   Tree type.\r\n * @template {Uint} [Max=10]\r\n *   Max; searches up to this depth.\r\n * @template {Uint} [Depth=0]\r\n *   Current depth.\r\n */\r\n\r\n/**\r\n * @callback Visitor\r\n *   Handle a node (matching `test`, if given).\r\n *\r\n *   Visitors are free to transform `node`.\r\n *   They can also transform `parent`.\r\n *\r\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\r\n *   descendants to be walked (which is a bug).\r\n *\r\n *   When adding or removing previous siblings of `node` (or next siblings, in\r\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\r\n *   sibling to traverse after `node` is traversed.\r\n *   Adding or removing next siblings of `node` (or previous siblings, in case\r\n *   of reverse) is handled as expected without needing to return a new `Index`.\r\n *\r\n *   Removing the children property of `parent` still results in them being\r\n *   traversed.\r\n * @param {Visited} node\r\n *   Found node.\r\n * @param {Visited extends UnistNode ? number | undefined : never} index\r\n *   Index of `node` in `parent`.\r\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\r\n *   Parent of `node`.\r\n * @returns {VisitorResult}\r\n *   What to do next.\r\n *\r\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\r\n *   An `Action` is treated as a tuple of `[Action]`.\r\n *\r\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\r\n *   When the `Action` is `EXIT`, that action can be returned.\r\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\r\n * @template {UnistNode} [Visited=UnistNode]\r\n *   Visited node type.\r\n * @template {UnistParent} [Ancestor=UnistParent]\r\n *   Ancestor type.\r\n */\r\n\r\n/**\r\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\r\n *   Build a typed `Visitor` function from a node and all possible parents.\r\n *\r\n *   It will infer which values are passed as `node` and which as `parent`.\r\n * @template {UnistNode} Visited\r\n *   Node type.\r\n * @template {UnistParent} Ancestor\r\n *   Parent type.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   BuildVisitorFromMatch<\r\n *     Matches<Descendant, Check>,\r\n *     Extract<Descendant, UnistParent>\r\n *   >\r\n * )} BuildVisitorFromDescendants\r\n *   Build a typed `Visitor` function from a list of descendants and a test.\r\n *\r\n *   It will infer which values are passed as `node` and which as `parent`.\r\n * @template {UnistNode} Descendant\r\n *   Node type.\r\n * @template {Test} Check\r\n *   Test type.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   BuildVisitorFromDescendants<\r\n *     InclusiveDescendant<Tree>,\r\n *     Check\r\n *   >\r\n * )} BuildVisitor\r\n *   Build a typed `Visitor` function from a tree and a test.\r\n *\r\n *   It will infer which values are passed as `node` and which as `parent`.\r\n * @template {UnistNode} [Tree=UnistNode]\r\n *   Node type.\r\n * @template {Test} [Check=Test]\r\n *   Test type.\r\n */\r\n\r\nimport {visitParents} from 'unist-util-visit-parents'\r\n\r\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\r\n\r\n/**\r\n * Visit nodes.\r\n *\r\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\r\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\r\n *\r\n * You can choose for which nodes `visitor` is called by passing a `test`.\r\n * For complex tests, you should test yourself in `visitor`, as it will be\r\n * faster and will have improved type information.\r\n *\r\n * Walking the tree is an intensive task.\r\n * Make use of the return values of the visitor when possible.\r\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\r\n * to check if a node matches, and then perform different operations.\r\n *\r\n * You can change the tree.\r\n * See `Visitor` for more info.\r\n *\r\n * @overload\r\n * @param {Tree} tree\r\n * @param {Check} check\r\n * @param {BuildVisitor<Tree, Check>} visitor\r\n * @param {boolean | null | undefined} [reverse]\r\n * @returns {undefined}\r\n *\r\n * @overload\r\n * @param {Tree} tree\r\n * @param {BuildVisitor<Tree>} visitor\r\n * @param {boolean | null | undefined} [reverse]\r\n * @returns {undefined}\r\n *\r\n * @param {UnistNode} tree\r\n *   Tree to traverse.\r\n * @param {Visitor | Test} testOrVisitor\r\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\r\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\r\n *   Handle each node (when test is omitted, pass `reverse`).\r\n * @param {boolean | null | undefined} [maybeReverse=false]\r\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\r\n * @returns {undefined}\r\n *   Nothing.\r\n *\r\n * @template {UnistNode} Tree\r\n *   Node type.\r\n * @template {Test} Check\r\n *   `unist-util-is`-compatible test.\r\n */\r\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\r\n  /** @type {boolean | null | undefined} */\r\n  let reverse\r\n  /** @type {Test} */\r\n  let test\r\n  /** @type {Visitor} */\r\n  let visitor\r\n\r\n  if (\r\n    typeof testOrVisitor === 'function' &&\r\n    typeof visitorOrReverse !== 'function'\r\n  ) {\r\n    test = undefined\r\n    visitor = testOrVisitor\r\n    reverse = visitorOrReverse\r\n  } else {\r\n    // @ts-expect-error: assume the overload with test was given.\r\n    test = testOrVisitor\r\n    // @ts-expect-error: assume the overload with test was given.\r\n    visitor = visitorOrReverse\r\n    reverse = maybeReverse\r\n  }\r\n\r\n  visitParents(tree, test, overload, reverse)\r\n\r\n  /**\r\n   * @param {UnistNode} node\r\n   * @param {Array<UnistParent>} parents\r\n   */\r\n  function overload(node, parents) {\r\n    const parent = parents[parents.length - 1]\r\n    const index = parent ? parent.children.indexOf(node) : undefined\r\n    return visitor(node, index, parent)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Heading} Heading\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {EXIT, visit} from 'unist-util-visit'\r\nimport {toString} from 'mdast-util-to-string'\r\n\r\n/**\r\n * @param {Heading} node\r\n * @param {State} state\r\n * @returns {boolean}\r\n */\r\nexport function formatHeadingAsSetext(node, state) {\r\n  let literalWithBreak = false\r\n\r\n  // Look for literals with a line break.\r\n  // Note that this also\r\n  visit(node, function (node) {\r\n    if (\r\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\r\n      node.type === 'break'\r\n    ) {\r\n      literalWithBreak = true\r\n      return EXIT\r\n    }\r\n  })\r\n\r\n  return Boolean(\r\n    (!node.depth || node.depth < 3) &&\r\n      toString(node) &&\r\n      (state.options.setext || literalWithBreak)\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Heading} Heading\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\r\n\r\n/**\r\n * @param {Heading} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function heading(node, _, state, info) {\r\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\r\n  const tracker = state.createTracker(info)\r\n\r\n  if (formatHeadingAsSetext(node, state)) {\r\n    const exit = state.enter('headingSetext')\r\n    const subexit = state.enter('phrasing')\r\n    const value = state.containerPhrasing(node, {\r\n      ...tracker.current(),\r\n      before: '\\n',\r\n      after: '\\n'\r\n    })\r\n    subexit()\r\n    exit()\r\n\r\n    return (\r\n      value +\r\n      '\\n' +\r\n      (rank === 1 ? '=' : '-').repeat(\r\n        // The whole size…\r\n        value.length -\r\n          // Minus the position of the character after the last EOL (or\r\n          // 0 if there is none)…\r\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\r\n      )\r\n    )\r\n  }\r\n\r\n  const sequence = '#'.repeat(rank)\r\n  const exit = state.enter('headingAtx')\r\n  const subexit = state.enter('phrasing')\r\n\r\n  // Note: for proper tracking, we should reset the output positions when there\r\n  // is no content returned, because then the space is not output.\r\n  // Practically, in that case, there is no content, so it doesn’t matter that\r\n  // we’ve tracked one too many characters.\r\n  tracker.move(sequence + ' ')\r\n\r\n  let value = state.containerPhrasing(node, {\r\n    before: '# ',\r\n    after: '\\n',\r\n    ...tracker.current()\r\n  })\r\n\r\n  if (/^[\\t ]/.test(value)) {\r\n    // To do: what effect has the character reference on tracking?\r\n    value =\r\n      '&#x' +\r\n      value.charCodeAt(0).toString(16).toUpperCase() +\r\n      ';' +\r\n      value.slice(1)\r\n  }\r\n\r\n  value = value ? sequence + ' ' + value : sequence\r\n\r\n  if (state.options.closeAtx) {\r\n    value += ' ' + sequence\r\n  }\r\n\r\n  subexit()\r\n  exit()\r\n\r\n  return value\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Html} Html\r\n */\r\n\r\nhtml.peek = htmlPeek\r\n\r\n/**\r\n * @param {Html} node\r\n * @returns {string}\r\n */\r\nexport function html(node) {\r\n  return node.value || ''\r\n}\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction htmlPeek() {\r\n  return '<'\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Image} Image\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkQuote} from '../util/check-quote.js'\r\n\r\nimage.peek = imagePeek\r\n\r\n/**\r\n * @param {Image} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function image(node, _, state, info) {\r\n  const quote = checkQuote(state)\r\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\r\n  const exit = state.enter('image')\r\n  let subexit = state.enter('label')\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move('![')\r\n  value += tracker.move(\r\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\r\n  )\r\n  value += tracker.move('](')\r\n\r\n  subexit()\r\n\r\n  if (\r\n    // If there’s no url but there is a title…\r\n    (!node.url && node.title) ||\r\n    // If there are control characters or whitespace.\r\n    /[\\0- \\u007F]/.test(node.url)\r\n  ) {\r\n    subexit = state.enter('destinationLiteral')\r\n    value += tracker.move('<')\r\n    value += tracker.move(\r\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\r\n    )\r\n    value += tracker.move('>')\r\n  } else {\r\n    // No whitespace, raw is prettier.\r\n    subexit = state.enter('destinationRaw')\r\n    value += tracker.move(\r\n      state.safe(node.url, {\r\n        before: value,\r\n        after: node.title ? ' ' : ')',\r\n        ...tracker.current()\r\n      })\r\n    )\r\n  }\r\n\r\n  subexit()\r\n\r\n  if (node.title) {\r\n    subexit = state.enter(`title${suffix}`)\r\n    value += tracker.move(' ' + quote)\r\n    value += tracker.move(\r\n      state.safe(node.title, {\r\n        before: value,\r\n        after: quote,\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    value += tracker.move(quote)\r\n    subexit()\r\n  }\r\n\r\n  value += tracker.move(')')\r\n  exit()\r\n\r\n  return value\r\n}\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction imagePeek() {\r\n  return '!'\r\n}\r\n", "/**\r\n * @typedef {import('mdast').ImageReference} ImageReference\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimageReference.peek = imageReferencePeek\r\n\r\n/**\r\n * @param {ImageReference} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function imageReference(node, _, state, info) {\r\n  const type = node.referenceType\r\n  const exit = state.enter('imageReference')\r\n  let subexit = state.enter('label')\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move('![')\r\n  const alt = state.safe(node.alt, {\r\n    before: value,\r\n    after: ']',\r\n    ...tracker.current()\r\n  })\r\n  value += tracker.move(alt + '][')\r\n\r\n  subexit()\r\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\r\n  const stack = state.stack\r\n  state.stack = []\r\n  subexit = state.enter('reference')\r\n  // Note: for proper tracking, we should reset the output positions when we end\r\n  // up making a `shortcut` reference, because then there is no brace output.\r\n  // Practically, in that case, there is no content, so it doesn’t matter that\r\n  // we’ve tracked one too many characters.\r\n  const reference = state.safe(state.associationId(node), {\r\n    before: value,\r\n    after: ']',\r\n    ...tracker.current()\r\n  })\r\n  subexit()\r\n  state.stack = stack\r\n  exit()\r\n\r\n  if (type === 'full' || !alt || alt !== reference) {\r\n    value += tracker.move(reference + ']')\r\n  } else if (type === 'shortcut') {\r\n    // Remove the unwanted `[`.\r\n    value = value.slice(0, -1)\r\n  } else {\r\n    value += tracker.move(']')\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction imageReferencePeek() {\r\n  return '!'\r\n}\r\n", "/**\r\n * @typedef {import('mdast').InlineCode} InlineCode\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\ninlineCode.peek = inlineCodePeek\r\n\r\n/**\r\n * @param {InlineCode} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nexport function inlineCode(node, _, state) {\r\n  let value = node.value || ''\r\n  let sequence = '`'\r\n  let index = -1\r\n\r\n  // If there is a single grave accent on its own in the code, use a fence of\r\n  // two.\r\n  // If there are two in a row, use one.\r\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\r\n    sequence += '`'\r\n  }\r\n\r\n  // If this is not just spaces or eols (tabs don’t count), and either the\r\n  // first or last character are a space, eol, or tick, then pad with spaces.\r\n  if (\r\n    /[^ \\r\\n]/.test(value) &&\r\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\r\n  ) {\r\n    value = ' ' + value + ' '\r\n  }\r\n\r\n  // We have a potential problem: certain characters after eols could result in\r\n  // blocks being seen.\r\n  // For example, if someone injected the string `'\\n# b'`, then that would\r\n  // result in an ATX heading.\r\n  // We can’t escape characters in `inlineCode`, but because eols are\r\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\r\n  // them out.\r\n  while (++index < state.unsafe.length) {\r\n    const pattern = state.unsafe[index]\r\n    const expression = state.compilePattern(pattern)\r\n    /** @type {RegExpExecArray | null} */\r\n    let match\r\n\r\n    // Only look for `atBreak`s.\r\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\r\n    // CR.\r\n    if (!pattern.atBreak) continue\r\n\r\n    while ((match = expression.exec(value))) {\r\n      let position = match.index\r\n\r\n      // Support CRLF (patterns only look for one of the characters).\r\n      if (\r\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\r\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\r\n      ) {\r\n        position--\r\n      }\r\n\r\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\r\n    }\r\n  }\r\n\r\n  return sequence + value + sequence\r\n}\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction inlineCodePeek() {\r\n  return '`'\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {toString} from 'mdast-util-to-string'\r\n\r\n/**\r\n * @param {Link} node\r\n * @param {State} state\r\n * @returns {boolean}\r\n */\r\nexport function formatLinkAsAutolink(node, state) {\r\n  const raw = toString(node)\r\n\r\n  return Boolean(\r\n    !state.options.resourceLink &&\r\n      // If there’s a url…\r\n      node.url &&\r\n      // And there’s a no title…\r\n      !node.title &&\r\n      // And the content of `node` is a single text node…\r\n      node.children &&\r\n      node.children.length === 1 &&\r\n      node.children[0].type === 'text' &&\r\n      // And if the url is the same as the content…\r\n      (raw === node.url || 'mailto:' + raw === node.url) &&\r\n      // And that starts w/ a protocol…\r\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\r\n      // And that doesn’t contain ASCII control codes (character escapes and\r\n      // references don’t work), space, or angle brackets…\r\n      !/[\\0- <>\\u007F]/.test(node.url)\r\n  )\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Exit} Exit\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkQuote} from '../util/check-quote.js'\r\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\r\n\r\nlink.peek = linkPeek\r\n\r\n/**\r\n * @param {Link} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function link(node, _, state, info) {\r\n  const quote = checkQuote(state)\r\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\r\n  const tracker = state.createTracker(info)\r\n  /** @type {Exit} */\r\n  let exit\r\n  /** @type {Exit} */\r\n  let subexit\r\n\r\n  if (formatLinkAsAutolink(node, state)) {\r\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\r\n    const stack = state.stack\r\n    state.stack = []\r\n    exit = state.enter('autolink')\r\n    let value = tracker.move('<')\r\n    value += tracker.move(\r\n      state.containerPhrasing(node, {\r\n        before: value,\r\n        after: '>',\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    value += tracker.move('>')\r\n    exit()\r\n    state.stack = stack\r\n    return value\r\n  }\r\n\r\n  exit = state.enter('link')\r\n  subexit = state.enter('label')\r\n  let value = tracker.move('[')\r\n  value += tracker.move(\r\n    state.containerPhrasing(node, {\r\n      before: value,\r\n      after: '](',\r\n      ...tracker.current()\r\n    })\r\n  )\r\n  value += tracker.move('](')\r\n  subexit()\r\n\r\n  if (\r\n    // If there’s no url but there is a title…\r\n    (!node.url && node.title) ||\r\n    // If there are control characters or whitespace.\r\n    /[\\0- \\u007F]/.test(node.url)\r\n  ) {\r\n    subexit = state.enter('destinationLiteral')\r\n    value += tracker.move('<')\r\n    value += tracker.move(\r\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\r\n    )\r\n    value += tracker.move('>')\r\n  } else {\r\n    // No whitespace, raw is prettier.\r\n    subexit = state.enter('destinationRaw')\r\n    value += tracker.move(\r\n      state.safe(node.url, {\r\n        before: value,\r\n        after: node.title ? ' ' : ')',\r\n        ...tracker.current()\r\n      })\r\n    )\r\n  }\r\n\r\n  subexit()\r\n\r\n  if (node.title) {\r\n    subexit = state.enter(`title${suffix}`)\r\n    value += tracker.move(' ' + quote)\r\n    value += tracker.move(\r\n      state.safe(node.title, {\r\n        before: value,\r\n        after: quote,\r\n        ...tracker.current()\r\n      })\r\n    )\r\n    value += tracker.move(quote)\r\n    subexit()\r\n  }\r\n\r\n  value += tracker.move(')')\r\n\r\n  exit()\r\n  return value\r\n}\r\n\r\n/**\r\n * @param {Link} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nfunction linkPeek(node, _, state) {\r\n  return formatLinkAsAutolink(node, state) ? '<' : '['\r\n}\r\n", "/**\r\n * @typedef {import('mdast').LinkReference} LinkReference\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nlinkReference.peek = linkReferencePeek\r\n\r\n/**\r\n * @param {LinkReference} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function linkReference(node, _, state, info) {\r\n  const type = node.referenceType\r\n  const exit = state.enter('linkReference')\r\n  let subexit = state.enter('label')\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move('[')\r\n  const text = state.containerPhrasing(node, {\r\n    before: value,\r\n    after: ']',\r\n    ...tracker.current()\r\n  })\r\n  value += tracker.move(text + '][')\r\n\r\n  subexit()\r\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\r\n  const stack = state.stack\r\n  state.stack = []\r\n  subexit = state.enter('reference')\r\n  // Note: for proper tracking, we should reset the output positions when we end\r\n  // up making a `shortcut` reference, because then there is no brace output.\r\n  // Practically, in that case, there is no content, so it doesn’t matter that\r\n  // we’ve tracked one too many characters.\r\n  const reference = state.safe(state.associationId(node), {\r\n    before: value,\r\n    after: ']',\r\n    ...tracker.current()\r\n  })\r\n  subexit()\r\n  state.stack = stack\r\n  exit()\r\n\r\n  if (type === 'full' || !text || text !== reference) {\r\n    value += tracker.move(reference + ']')\r\n  } else if (type === 'shortcut') {\r\n    // Remove the unwanted `[`.\r\n    value = value.slice(0, -1)\r\n  } else {\r\n    value += tracker.move(']')\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n/**\r\n * @returns {string}\r\n */\r\nfunction linkReferencePeek() {\r\n  return '['\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['bullet'], null | undefined>}\r\n */\r\nexport function checkBullet(state) {\r\n  const marker = state.options.bullet || '*'\r\n\r\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\r\n    throw new Error(\r\n      'Cannot serialize items with `' +\r\n        marker +\r\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkBullet} from './check-bullet.js'\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['bullet'], null | undefined>}\r\n */\r\nexport function checkBulletOther(state) {\r\n  const bullet = checkBullet(state)\r\n  const bulletOther = state.options.bulletOther\r\n\r\n  if (!bulletOther) {\r\n    return bullet === '*' ? '-' : '*'\r\n  }\r\n\r\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\r\n    throw new Error(\r\n      'Cannot serialize items with `' +\r\n        bulletOther +\r\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\r\n    )\r\n  }\r\n\r\n  if (bulletOther === bullet) {\r\n    throw new Error(\r\n      'Expected `bullet` (`' +\r\n        bullet +\r\n        '`) and `bulletOther` (`' +\r\n        bulletOther +\r\n        '`) to be different'\r\n    )\r\n  }\r\n\r\n  return bulletOther\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\r\n */\r\nexport function checkBulletOrdered(state) {\r\n  const marker = state.options.bulletOrdered || '.'\r\n\r\n  if (marker !== '.' && marker !== ')') {\r\n    throw new Error(\r\n      'Cannot serialize items with `' +\r\n        marker +\r\n        '` for `options.bulletOrdered`, expected `.` or `)`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['rule'], null | undefined>}\r\n */\r\nexport function checkRule(state) {\r\n  const marker = state.options.rule || '*'\r\n\r\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\r\n    throw new Error(\r\n      'Cannot serialize rules with `' +\r\n        marker +\r\n        '` for `options.rule`, expected `*`, `-`, or `_`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n", "/**\r\n * @typedef {import('mdast').List} List\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkBullet} from '../util/check-bullet.js'\r\nimport {checkBulletOther} from '../util/check-bullet-other.js'\r\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\r\nimport {checkRule} from '../util/check-rule.js'\r\n\r\n/**\r\n * @param {List} node\r\n * @param {Parents | undefined} parent\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function list(node, parent, state, info) {\r\n  const exit = state.enter('list')\r\n  const bulletCurrent = state.bulletCurrent\r\n  /** @type {string} */\r\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\r\n  /** @type {string} */\r\n  const bulletOther = node.ordered\r\n    ? bullet === '.'\r\n      ? ')'\r\n      : '.'\r\n    : checkBulletOther(state)\r\n  let useDifferentMarker =\r\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\r\n\r\n  if (!node.ordered) {\r\n    const firstListItem = node.children ? node.children[0] : undefined\r\n\r\n    // If there’s an empty first list item directly in two list items,\r\n    // we have to use a different bullet:\r\n    //\r\n    // ```markdown\r\n    // * - *\r\n    // ```\r\n    //\r\n    // …because otherwise it would become one big thematic break.\r\n    if (\r\n      // Bullet could be used as a thematic break marker:\r\n      (bullet === '*' || bullet === '-') &&\r\n      // Empty first list item:\r\n      firstListItem &&\r\n      (!firstListItem.children || !firstListItem.children[0]) &&\r\n      // Directly in two other list items:\r\n      state.stack[state.stack.length - 1] === 'list' &&\r\n      state.stack[state.stack.length - 2] === 'listItem' &&\r\n      state.stack[state.stack.length - 3] === 'list' &&\r\n      state.stack[state.stack.length - 4] === 'listItem' &&\r\n      // That are each the first child.\r\n      state.indexStack[state.indexStack.length - 1] === 0 &&\r\n      state.indexStack[state.indexStack.length - 2] === 0 &&\r\n      state.indexStack[state.indexStack.length - 3] === 0\r\n    ) {\r\n      useDifferentMarker = true\r\n    }\r\n\r\n    // If there’s a thematic break at the start of the first list item,\r\n    // we have to use a different bullet:\r\n    //\r\n    // ```markdown\r\n    // * ---\r\n    // ```\r\n    //\r\n    // …because otherwise it would become one big thematic break.\r\n    if (checkRule(state) === bullet && firstListItem) {\r\n      let index = -1\r\n\r\n      while (++index < node.children.length) {\r\n        const item = node.children[index]\r\n\r\n        if (\r\n          item &&\r\n          item.type === 'listItem' &&\r\n          item.children &&\r\n          item.children[0] &&\r\n          item.children[0].type === 'thematicBreak'\r\n        ) {\r\n          useDifferentMarker = true\r\n          break\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (useDifferentMarker) {\r\n    bullet = bulletOther\r\n  }\r\n\r\n  state.bulletCurrent = bullet\r\n  const value = state.containerFlow(node, info)\r\n  state.bulletLastUsed = bullet\r\n  state.bulletCurrent = bulletCurrent\r\n  exit()\r\n  return value\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\r\n */\r\nexport function checkListItemIndent(state) {\r\n  const style = state.options.listItemIndent || 'one'\r\n\r\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\r\n    throw new Error(\r\n      'Cannot serialize items with `' +\r\n        style +\r\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\r\n    )\r\n  }\r\n\r\n  return style\r\n}\r\n", "/**\r\n * @typedef {import('mdast').ListItem} ListItem\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').Map} Map\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkBullet} from '../util/check-bullet.js'\r\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\r\n\r\n/**\r\n * @param {ListItem} node\r\n * @param {Parents | undefined} parent\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function listItem(node, parent, state, info) {\r\n  const listItemIndent = checkListItemIndent(state)\r\n  let bullet = state.bulletCurrent || checkBullet(state)\r\n\r\n  // Add the marker value for ordered lists.\r\n  if (parent && parent.type === 'list' && parent.ordered) {\r\n    bullet =\r\n      (typeof parent.start === 'number' && parent.start > -1\r\n        ? parent.start\r\n        : 1) +\r\n      (state.options.incrementListMarker === false\r\n        ? 0\r\n        : parent.children.indexOf(node)) +\r\n      bullet\r\n  }\r\n\r\n  let size = bullet.length + 1\r\n\r\n  if (\r\n    listItemIndent === 'tab' ||\r\n    (listItemIndent === 'mixed' &&\r\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\r\n  ) {\r\n    size = Math.ceil(size / 4) * 4\r\n  }\r\n\r\n  const tracker = state.createTracker(info)\r\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\r\n  tracker.shift(size)\r\n  const exit = state.enter('listItem')\r\n  const value = state.indentLines(\r\n    state.containerFlow(node, tracker.current()),\r\n    map\r\n  )\r\n  exit()\r\n\r\n  return value\r\n\r\n  /** @type {Map} */\r\n  function map(line, index, blank) {\r\n    if (index) {\r\n      return (blank ? '' : ' '.repeat(size)) + line\r\n    }\r\n\r\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Paragraph} Paragraph\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {Paragraph} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function paragraph(node, _, state, info) {\r\n  const exit = state.enter('paragraph')\r\n  const subexit = state.enter('phrasing')\r\n  const value = state.containerPhrasing(node, info)\r\n  subexit()\r\n  exit()\r\n  return value\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Html} Html\r\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\r\n */\r\n\r\nimport {convert} from 'unist-util-is'\r\n\r\n/**\r\n * Check if the given value is *phrasing content*.\r\n *\r\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\r\n *\r\n * @param node\r\n *   Thing to check, typically `Node`.\r\n * @returns\r\n *   Whether `value` is phrasing content.\r\n */\r\n\r\nexport const phrasing =\r\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\r\n  (\r\n    convert([\r\n      'break',\r\n      'delete',\r\n      'emphasis',\r\n      // To do: next major: removed since footnotes were added to GFM.\r\n      'footnote',\r\n      'footnoteReference',\r\n      'image',\r\n      'imageReference',\r\n      'inlineCode',\r\n      // Enabled by `mdast-util-math`:\r\n      'inlineMath',\r\n      'link',\r\n      'linkReference',\r\n      // Enabled by `mdast-util-mdx`:\r\n      'mdxJsxTextElement',\r\n      // Enabled by `mdast-util-mdx`:\r\n      'mdxTextExpression',\r\n      'strong',\r\n      'text',\r\n      // Enabled by `mdast-util-directive`:\r\n      'textDirective'\r\n    ])\r\n  )\r\n", "/**\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {phrasing} from 'mdast-util-phrasing'\r\n\r\n/**\r\n * @param {Root} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function root(node, _, state, info) {\r\n  // Note: `html` nodes are ambiguous.\r\n  const hasPhrasing = node.children.some(function (d) {\r\n    return phrasing(d)\r\n  })\r\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\r\n  return fn.call(state, node, info)\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['strong'], null | undefined>}\r\n */\r\nexport function checkStrong(state) {\r\n  const marker = state.options.strong || '*'\r\n\r\n  if (marker !== '*' && marker !== '_') {\r\n    throw new Error(\r\n      'Cannot serialize strong with `' +\r\n        marker +\r\n        '` for `options.strong`, expected `*`, or `_`'\r\n    )\r\n  }\r\n\r\n  return marker\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('mdast').Strong} Strong\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkStrong} from '../util/check-strong.js'\r\n\r\nstrong.peek = strongPeek\r\n\r\n// To do: there are cases where emphasis cannot “form” depending on the\r\n// previous or next character of sequences.\r\n// There’s no way around that though, except for injecting zero-width stuff.\r\n// Do we need to safeguard against that?\r\n/**\r\n * @param {Strong} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function strong(node, _, state, info) {\r\n  const marker = checkStrong(state)\r\n  const exit = state.enter('strong')\r\n  const tracker = state.createTracker(info)\r\n  let value = tracker.move(marker + marker)\r\n  value += tracker.move(\r\n    state.containerPhrasing(node, {\r\n      before: value,\r\n      after: marker,\r\n      ...tracker.current()\r\n    })\r\n  )\r\n  value += tracker.move(marker + marker)\r\n  exit()\r\n  return value\r\n}\r\n\r\n/**\r\n * @param {Strong} _\r\n * @param {Parents | undefined} _1\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nfunction strongPeek(_, _1, state) {\r\n  return state.options.strong || '*'\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('mdast').Text} Text\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {Text} node\r\n * @param {Parents | undefined} _\r\n * @param {State} state\r\n * @param {Info} info\r\n * @returns {string}\r\n */\r\nexport function text(node, _, state, info) {\r\n  return state.safe(node.value, info)\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Options} Options\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * @param {State} state\r\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\r\n */\r\nexport function checkRuleRepetition(state) {\r\n  const repetition = state.options.ruleRepetition || 3\r\n\r\n  if (repetition < 3) {\r\n    throw new Error(\r\n      'Cannot serialize rules with repetition `' +\r\n        repetition +\r\n        '` for `options.ruleRepetition`, expected `3` or more'\r\n    )\r\n  }\r\n\r\n  return repetition\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Parents} Parents\r\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\r\nimport {checkRule} from '../util/check-rule.js'\r\n\r\n/**\r\n * @param {ThematicBreak} _\r\n * @param {Parents | undefined} _1\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nexport function thematicBreak(_, _1, state) {\r\n  const value = (\r\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\r\n  ).repeat(checkRuleRepetition(state))\r\n\r\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\r\n}\r\n", "import {blockquote} from './blockquote.js'\r\nimport {hardBreak} from './break.js'\r\nimport {code} from './code.js'\r\nimport {definition} from './definition.js'\r\nimport {emphasis} from './emphasis.js'\r\nimport {heading} from './heading.js'\r\nimport {html} from './html.js'\r\nimport {image} from './image.js'\r\nimport {imageReference} from './image-reference.js'\r\nimport {inlineCode} from './inline-code.js'\r\nimport {link} from './link.js'\r\nimport {linkReference} from './link-reference.js'\r\nimport {list} from './list.js'\r\nimport {listItem} from './list-item.js'\r\nimport {paragraph} from './paragraph.js'\r\nimport {root} from './root.js'\r\nimport {strong} from './strong.js'\r\nimport {text} from './text.js'\r\nimport {thematicBreak} from './thematic-break.js'\r\n\r\n/**\r\n * Default (CommonMark) handlers.\r\n */\r\nexport const handle = {\r\n  blockquote,\r\n  break: hardBreak,\r\n  code,\r\n  definition,\r\n  emphasis,\r\n  hardBreak,\r\n  heading,\r\n  html,\r\n  image,\r\n  imageReference,\r\n  inlineCode,\r\n  link,\r\n  linkReference,\r\n  list,\r\n  listItem,\r\n  paragraph,\r\n  root,\r\n  strong,\r\n  text,\r\n  thematicBreak\r\n}\r\n", "/**\r\n * @typedef {import('./types.js').Join} Join\r\n */\r\n\r\nimport {formatCodeAsIndented} from './util/format-code-as-indented.js'\r\nimport {formatHeadingAsSetext} from './util/format-heading-as-setext.js'\r\n\r\n/** @type {Array<Join>} */\r\nexport const join = [joinDefaults]\r\n\r\n/** @type {Join} */\r\nfunction joinDefaults(left, right, parent, state) {\r\n  // Indented code after list or another indented code.\r\n  if (\r\n    right.type === 'code' &&\r\n    formatCodeAsIndented(right, state) &&\r\n    (left.type === 'list' ||\r\n      (left.type === right.type && formatCodeAsIndented(left, state)))\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  // Join children of a list or an item.\r\n  // In which case, `parent` has a `spread` field.\r\n  if ('spread' in parent && typeof parent.spread === 'boolean') {\r\n    if (\r\n      left.type === 'paragraph' &&\r\n      // Two paragraphs.\r\n      (left.type === right.type ||\r\n        right.type === 'definition' ||\r\n        // Paragraph followed by a setext heading.\r\n        (right.type === 'heading' && formatHeadingAsSetext(right, state)))\r\n    ) {\r\n      return\r\n    }\r\n\r\n    return parent.spread ? 1 : 0\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('./types.js').ConstructName} ConstructName\r\n * @typedef {import('./types.js').Unsafe} Unsafe\r\n */\r\n\r\n/**\r\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\r\n * contain things like attention (emphasis, strong), images, or links.\r\n * So they sort of cancel each other out.\r\n * Note: could use a better name.\r\n *\r\n * @type {Array<ConstructName>}\r\n */\r\nconst fullPhrasingSpans = [\r\n  'autolink',\r\n  'destinationLiteral',\r\n  'destinationRaw',\r\n  'reference',\r\n  'titleQuote',\r\n  'titleApostrophe'\r\n]\r\n\r\n/** @type {Array<Unsafe>} */\r\nexport const unsafe = [\r\n  {character: '\\t', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\r\n  {character: '\\t', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\r\n  {\r\n    character: '\\t',\r\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\r\n  },\r\n  {\r\n    character: '\\r',\r\n    inConstruct: [\r\n      'codeFencedLangGraveAccent',\r\n      'codeFencedLangTilde',\r\n      'codeFencedMetaGraveAccent',\r\n      'codeFencedMetaTilde',\r\n      'destinationLiteral',\r\n      'headingAtx'\r\n    ]\r\n  },\r\n  {\r\n    character: '\\n',\r\n    inConstruct: [\r\n      'codeFencedLangGraveAccent',\r\n      'codeFencedLangTilde',\r\n      'codeFencedMetaGraveAccent',\r\n      'codeFencedMetaTilde',\r\n      'destinationLiteral',\r\n      'headingAtx'\r\n    ]\r\n  },\r\n  {character: ' ', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\r\n  {character: ' ', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\r\n  {\r\n    character: ' ',\r\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\r\n  },\r\n  // An exclamation mark can start an image, if it is followed by a link or\r\n  // a link reference.\r\n  {\r\n    character: '!',\r\n    after: '\\\\[',\r\n    inConstruct: 'phrasing',\r\n    notInConstruct: fullPhrasingSpans\r\n  },\r\n  // A quote can break out of a title.\r\n  {character: '\"', inConstruct: 'titleQuote'},\r\n  // A number sign could start an ATX heading if it starts a line.\r\n  {atBreak: true, character: '#'},\r\n  {character: '#', inConstruct: 'headingAtx', after: '(?:[\\r\\n]|$)'},\r\n  // Dollar sign and percentage are not used in markdown.\r\n  // An ampersand could start a character reference.\r\n  {character: '&', after: '[#A-Za-z]', inConstruct: 'phrasing'},\r\n  // An apostrophe can break out of a title.\r\n  {character: \"'\", inConstruct: 'titleApostrophe'},\r\n  // A left paren could break out of a destination raw.\r\n  {character: '(', inConstruct: 'destinationRaw'},\r\n  // A left paren followed by `]` could make something into a link or image.\r\n  {\r\n    before: '\\\\]',\r\n    character: '(',\r\n    inConstruct: 'phrasing',\r\n    notInConstruct: fullPhrasingSpans\r\n  },\r\n  // A right paren could start a list item or break out of a destination\r\n  // raw.\r\n  {atBreak: true, before: '\\\\d+', character: ')'},\r\n  {character: ')', inConstruct: 'destinationRaw'},\r\n  // An asterisk can start thematic breaks, list items, emphasis, strong.\r\n  {atBreak: true, character: '*', after: '(?:[ \\t\\r\\n*])'},\r\n  {character: '*', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\r\n  // A plus sign could start a list item.\r\n  {atBreak: true, character: '+', after: '(?:[ \\t\\r\\n])'},\r\n  // A dash can start thematic breaks, list items, and setext heading\r\n  // underlines.\r\n  {atBreak: true, character: '-', after: '(?:[ \\t\\r\\n-])'},\r\n  // A dot could start a list item.\r\n  {atBreak: true, before: '\\\\d+', character: '.', after: '(?:[ \\t\\r\\n]|$)'},\r\n  // Slash, colon, and semicolon are not used in markdown for constructs.\r\n  // A less than can start html (flow or text) or an autolink.\r\n  // HTML could start with an exclamation mark (declaration, cdata, comment),\r\n  // slash (closing tag), question mark (instruction), or a letter (tag).\r\n  // An autolink also starts with a letter.\r\n  // Finally, it could break out of a destination literal.\r\n  {atBreak: true, character: '<', after: '[!/?A-Za-z]'},\r\n  {\r\n    character: '<',\r\n    after: '[!/?A-Za-z]',\r\n    inConstruct: 'phrasing',\r\n    notInConstruct: fullPhrasingSpans\r\n  },\r\n  {character: '<', inConstruct: 'destinationLiteral'},\r\n  // An equals to can start setext heading underlines.\r\n  {atBreak: true, character: '='},\r\n  // A greater than can start block quotes and it can break out of a\r\n  // destination literal.\r\n  {atBreak: true, character: '>'},\r\n  {character: '>', inConstruct: 'destinationLiteral'},\r\n  // Question mark and at sign are not used in markdown for constructs.\r\n  // A left bracket can start definitions, references, labels,\r\n  {atBreak: true, character: '['},\r\n  {character: '[', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\r\n  {character: '[', inConstruct: ['label', 'reference']},\r\n  // A backslash can start an escape (when followed by punctuation) or a\r\n  // hard break (when followed by an eol).\r\n  // Note: typical escapes are handled in `safe`!\r\n  {character: '\\\\', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\r\n  // A right bracket can exit labels.\r\n  {character: ']', inConstruct: ['label', 'reference']},\r\n  // Caret is not used in markdown for constructs.\r\n  // An underscore can start emphasis, strong, or a thematic break.\r\n  {atBreak: true, character: '_'},\r\n  {character: '_', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\r\n  // A grave accent can start code (fenced or text), or it can break out of\r\n  // a grave accent code fence.\r\n  {atBreak: true, character: '`'},\r\n  {\r\n    character: '`',\r\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedMetaGraveAccent']\r\n  },\r\n  {character: '`', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\r\n  // Left brace, vertical bar, right brace are not used in markdown for\r\n  // constructs.\r\n  // A tilde can start code (fenced).\r\n  {atBreak: true, character: '~'}\r\n]\r\n", "/**\r\n * @typedef {import('../types.js').AssociationId} AssociationId\r\n */\r\n\r\nimport {decodeString} from 'micromark-util-decode-string'\r\n\r\n/**\r\n * Get an identifier from an association to match it to others.\r\n *\r\n * Associations are nodes that match to something else through an ID:\r\n * <https://github.com/syntax-tree/mdast#association>.\r\n *\r\n * The `label` of an association is the string value: character escapes and\r\n * references work, and casing is intact.\r\n * The `identifier` is used to match one association to another:\r\n * controversially, character escapes and references don’t work in this\r\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\r\n *\r\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\r\n * matches `a b`.\r\n * So, we do prefer the label when figuring out how we’re going to serialize:\r\n * it has whitespace, casing, and we can ignore most useless character\r\n * escapes and all character references.\r\n *\r\n * @type {AssociationId}\r\n */\r\nexport function association(node) {\r\n  if (node.label || !node.identifier) {\r\n    return node.label || ''\r\n  }\r\n\r\n  return decodeString(node.identifier)\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').CompilePattern} CompilePattern\r\n */\r\n\r\n/**\r\n * @type {CompilePattern}\r\n */\r\nexport function compilePattern(pattern) {\r\n  if (!pattern._compiled) {\r\n    const before =\r\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\r\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\r\n\r\n    pattern._compiled = new RegExp(\r\n      (before ? '(' + before + ')' : '') +\r\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\r\n        pattern.character +\r\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\r\n      'g'\r\n    )\r\n  }\r\n\r\n  return pattern._compiled\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').Handle} Handle\r\n * @typedef {import('../types.js').Info} Info\r\n * @typedef {import('../types.js').PhrasingParents} PhrasingParents\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\n/**\r\n * Serialize the children of a parent that contains phrasing children.\r\n *\r\n * These children will be joined flush together.\r\n *\r\n * @param {PhrasingParents} parent\r\n *   Parent of flow nodes.\r\n * @param {State} state\r\n *   Info passed around about the current state.\r\n * @param {Info} info\r\n *   Info on where we are in the document we are generating.\r\n * @returns {string}\r\n *   Serialized children, joined together.\r\n */\r\nexport function containerPhrasing(parent, state, info) {\r\n  const indexStack = state.indexStack\r\n  const children = parent.children || []\r\n  /** @type {Array<string>} */\r\n  const results = []\r\n  let index = -1\r\n  let before = info.before\r\n\r\n  indexStack.push(-1)\r\n  let tracker = state.createTracker(info)\r\n\r\n  while (++index < children.length) {\r\n    const child = children[index]\r\n    /** @type {string} */\r\n    let after\r\n\r\n    indexStack[indexStack.length - 1] = index\r\n\r\n    if (index + 1 < children.length) {\r\n      /** @type {Handle} */\r\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\r\n      let handle = state.handle.handlers[children[index + 1].type]\r\n      /** @type {Handle} */\r\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\r\n      if (handle && handle.peek) handle = handle.peek\r\n      after = handle\r\n        ? handle(children[index + 1], parent, state, {\r\n            before: '',\r\n            after: '',\r\n            ...tracker.current()\r\n          }).charAt(0)\r\n        : ''\r\n    } else {\r\n      after = info.after\r\n    }\r\n\r\n    // In some cases, html (text) can be found in phrasing right after an eol.\r\n    // When we’d serialize that, in most cases that would be seen as html\r\n    // (flow).\r\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\r\n    // reasonable approach: replace that eol with a space.\r\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\r\n    if (\r\n      results.length > 0 &&\r\n      (before === '\\r' || before === '\\n') &&\r\n      child.type === 'html'\r\n    ) {\r\n      results[results.length - 1] = results[results.length - 1].replace(\r\n        /(\\r?\\n|\\r)$/,\r\n        ' '\r\n      )\r\n      before = ' '\r\n\r\n      // To do: does this work to reset tracker?\r\n      tracker = state.createTracker(info)\r\n      tracker.move(results.join(''))\r\n    }\r\n\r\n    results.push(\r\n      tracker.move(\r\n        state.handle(child, parent, state, {\r\n          ...tracker.current(),\r\n          before,\r\n          after\r\n        })\r\n      )\r\n    )\r\n\r\n    before = results[results.length - 1].slice(-1)\r\n  }\r\n\r\n  indexStack.pop()\r\n\r\n  return results.join('')\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').FlowParents} FlowParents\r\n * @typedef {import('../types.js').FlowChildren} FlowChildren\r\n * @typedef {import('../types.js').State} State\r\n * @typedef {import('../types.js').TrackFields} TrackFields\r\n */\r\n\r\n/**\r\n * @param {FlowParents} parent\r\n *   Parent of flow nodes.\r\n * @param {State} state\r\n *   Info passed around about the current state.\r\n * @param {TrackFields} info\r\n *   Info on where we are in the document we are generating.\r\n * @returns {string}\r\n *   Serialized children, joined by (blank) lines.\r\n */\r\nexport function containerFlow(parent, state, info) {\r\n  const indexStack = state.indexStack\r\n  const children = parent.children || []\r\n  const tracker = state.createTracker(info)\r\n  /** @type {Array<string>} */\r\n  const results = []\r\n  let index = -1\r\n\r\n  indexStack.push(-1)\r\n\r\n  while (++index < children.length) {\r\n    const child = children[index]\r\n\r\n    indexStack[indexStack.length - 1] = index\r\n\r\n    results.push(\r\n      tracker.move(\r\n        state.handle(child, parent, state, {\r\n          before: '\\n',\r\n          after: '\\n',\r\n          ...tracker.current()\r\n        })\r\n      )\r\n    )\r\n\r\n    if (child.type !== 'list') {\r\n      state.bulletLastUsed = undefined\r\n    }\r\n\r\n    if (index < children.length - 1) {\r\n      results.push(\r\n        tracker.move(between(child, children[index + 1], parent, state))\r\n      )\r\n    }\r\n  }\r\n\r\n  indexStack.pop()\r\n\r\n  return results.join('')\r\n}\r\n\r\n/**\r\n * @param {FlowChildren} left\r\n * @param {FlowChildren} right\r\n * @param {FlowParents} parent\r\n * @param {State} state\r\n * @returns {string}\r\n */\r\nfunction between(left, right, parent, state) {\r\n  let index = state.join.length\r\n\r\n  while (index--) {\r\n    const result = state.join[index](left, right, parent, state)\r\n\r\n    if (result === true || result === 1) {\r\n      break\r\n    }\r\n\r\n    if (typeof result === 'number') {\r\n      return '\\n'.repeat(1 + result)\r\n    }\r\n\r\n    if (result === false) {\r\n      return '\\n\\n<!---->\\n\\n'\r\n    }\r\n  }\r\n\r\n  return '\\n\\n'\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').IndentLines} IndentLines\r\n */\r\n\r\nconst eol = /\\r?\\n|\\r/g\r\n\r\n/**\r\n * @type {IndentLines}\r\n */\r\nexport function indentLines(value, map) {\r\n  /** @type {Array<string>} */\r\n  const result = []\r\n  let start = 0\r\n  let line = 0\r\n  /** @type {RegExpExecArray | null} */\r\n  let match\r\n\r\n  while ((match = eol.exec(value))) {\r\n    one(value.slice(start, match.index))\r\n    result.push(match[0])\r\n    start = match.index + match[0].length\r\n    line++\r\n  }\r\n\r\n  one(value.slice(start))\r\n\r\n  return result.join('')\r\n\r\n  /**\r\n   * @param {string} value\r\n   */\r\n  function one(value) {\r\n    result.push(map(value, line, !value))\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').SafeConfig} SafeConfig\r\n * @typedef {import('../types.js').State} State\r\n */\r\n\r\nimport {patternInScope} from './pattern-in-scope.js'\r\n\r\n/**\r\n * Make a string safe for embedding in markdown constructs.\r\n *\r\n * In markdown, almost all punctuation characters can, in certain cases,\r\n * result in something.\r\n * Whether they do is highly subjective to where they happen and in what\r\n * they happen.\r\n *\r\n * To solve this, `mdast-util-to-markdown` tracks:\r\n *\r\n * * Characters before and after something;\r\n * * What “constructs” we are in.\r\n *\r\n * This information is then used by this function to escape or encode\r\n * special characters.\r\n *\r\n * @param {State} state\r\n *   Info passed around about the current state.\r\n * @param {string | null | undefined} input\r\n *   Raw value to make safe.\r\n * @param {SafeConfig} config\r\n *   Configuration.\r\n * @returns {string}\r\n *   Serialized markdown safe for embedding.\r\n */\r\nexport function safe(state, input, config) {\r\n  const value = (config.before || '') + (input || '') + (config.after || '')\r\n  /** @type {Array<number>} */\r\n  const positions = []\r\n  /** @type {Array<string>} */\r\n  const result = []\r\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\r\n  const infos = {}\r\n  let index = -1\r\n\r\n  while (++index < state.unsafe.length) {\r\n    const pattern = state.unsafe[index]\r\n\r\n    if (!patternInScope(state.stack, pattern)) {\r\n      continue\r\n    }\r\n\r\n    const expression = state.compilePattern(pattern)\r\n    /** @type {RegExpExecArray | null} */\r\n    let match\r\n\r\n    while ((match = expression.exec(value))) {\r\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\r\n      const after = 'after' in pattern\r\n      const position = match.index + (before ? match[1].length : 0)\r\n\r\n      if (positions.includes(position)) {\r\n        if (infos[position].before && !before) {\r\n          infos[position].before = false\r\n        }\r\n\r\n        if (infos[position].after && !after) {\r\n          infos[position].after = false\r\n        }\r\n      } else {\r\n        positions.push(position)\r\n        infos[position] = {before, after}\r\n      }\r\n    }\r\n  }\r\n\r\n  positions.sort(numerical)\r\n\r\n  let start = config.before ? config.before.length : 0\r\n  const end = value.length - (config.after ? config.after.length : 0)\r\n  index = -1\r\n\r\n  while (++index < positions.length) {\r\n    const position = positions[index]\r\n\r\n    // Character before or after matched:\r\n    if (position < start || position >= end) {\r\n      continue\r\n    }\r\n\r\n    // If this character is supposed to be escaped because it has a condition on\r\n    // the next character, and the next character is definitly being escaped,\r\n    // then skip this escape.\r\n    if (\r\n      (position + 1 < end &&\r\n        positions[index + 1] === position + 1 &&\r\n        infos[position].after &&\r\n        !infos[position + 1].before &&\r\n        !infos[position + 1].after) ||\r\n      (positions[index - 1] === position - 1 &&\r\n        infos[position].before &&\r\n        !infos[position - 1].before &&\r\n        !infos[position - 1].after)\r\n    ) {\r\n      continue\r\n    }\r\n\r\n    if (start !== position) {\r\n      // If we have to use a character reference, an ampersand would be more\r\n      // correct, but as backslashes only care about punctuation, either will\r\n      // do the trick\r\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\r\n    }\r\n\r\n    start = position\r\n\r\n    if (\r\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\r\n      (!config.encode || !config.encode.includes(value.charAt(position)))\r\n    ) {\r\n      // Character escape.\r\n      result.push('\\\\')\r\n    } else {\r\n      // Character reference.\r\n      result.push(\r\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\r\n      )\r\n      start++\r\n    }\r\n  }\r\n\r\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\r\n\r\n  return result.join('')\r\n}\r\n\r\n/**\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number}\r\n */\r\nfunction numerical(a, b) {\r\n  return a - b\r\n}\r\n\r\n/**\r\n * @param {string} value\r\n * @param {string} after\r\n * @returns {string}\r\n */\r\nfunction escapeBackslashes(value, after) {\r\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\r\n  /** @type {Array<number>} */\r\n  const positions = []\r\n  /** @type {Array<string>} */\r\n  const results = []\r\n  const whole = value + after\r\n  let index = -1\r\n  let start = 0\r\n  /** @type {RegExpExecArray | null} */\r\n  let match\r\n\r\n  while ((match = expression.exec(whole))) {\r\n    positions.push(match.index)\r\n  }\r\n\r\n  while (++index < positions.length) {\r\n    if (start !== positions[index]) {\r\n      results.push(value.slice(start, positions[index]))\r\n    }\r\n\r\n    results.push('\\\\')\r\n    start = positions[index]\r\n  }\r\n\r\n  results.push(value.slice(start))\r\n\r\n  return results.join('')\r\n}\r\n", "/**\r\n * @typedef {import('../types.js').CreateTracker} CreateTracker\r\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\r\n * @typedef {import('../types.js').TrackMove} TrackMove\r\n * @typedef {import('../types.js').TrackShift} TrackShift\r\n */\r\n\r\n/**\r\n * Track positional info in the output.\r\n *\r\n * @type {CreateTracker}\r\n */\r\nexport function track(config) {\r\n  // Defaults are used to prevent crashes when older utilities somehow activate\r\n  // this code.\r\n  /* c8 ignore next 5 */\r\n  const options = config || {}\r\n  const now = options.now || {}\r\n  let lineShift = options.lineShift || 0\r\n  let line = now.line || 1\r\n  let column = now.column || 1\r\n\r\n  return {move, current, shift}\r\n\r\n  /**\r\n   * Get the current tracked info.\r\n   *\r\n   * @type {TrackCurrent}\r\n   */\r\n  function current() {\r\n    return {now: {line, column}, lineShift}\r\n  }\r\n\r\n  /**\r\n   * Define an increased line shift (the typical indent for lines).\r\n   *\r\n   * @type {TrackShift}\r\n   */\r\n  function shift(value) {\r\n    lineShift += value\r\n  }\r\n\r\n  /**\r\n   * Move past some generated markdown.\r\n   *\r\n   * @type {TrackMove}\r\n   */\r\n  function move(input) {\r\n    // eslint-disable-next-line unicorn/prefer-default-parameters\r\n    const value = input || ''\r\n    const chunks = value.split(/\\r?\\n|\\r/g)\r\n    const tail = chunks[chunks.length - 1]\r\n    line += chunks.length - 1\r\n    column =\r\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\r\n    return value\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Nodes} Nodes\r\n * @typedef {import('./types.js').Enter} Enter\r\n * @typedef {import('./types.js').Info} Info\r\n * @typedef {import('./types.js').Join} Join\r\n * @typedef {import('./types.js').FlowParents} FlowParents\r\n * @typedef {import('./types.js').Options} Options\r\n * @typedef {import('./types.js').PhrasingParents} PhrasingParents\r\n * @typedef {import('./types.js').SafeConfig} SafeConfig\r\n * @typedef {import('./types.js').State} State\r\n * @typedef {import('./types.js').TrackFields} TrackFields\r\n */\r\n\r\nimport {zwitch} from 'zwitch'\r\nimport {configure} from './configure.js'\r\nimport {handle as handlers} from './handle/index.js'\r\nimport {join} from './join.js'\r\nimport {unsafe} from './unsafe.js'\r\nimport {association} from './util/association.js'\r\nimport {compilePattern} from './util/compile-pattern.js'\r\nimport {containerPhrasing} from './util/container-phrasing.js'\r\nimport {containerFlow} from './util/container-flow.js'\r\nimport {indentLines} from './util/indent-lines.js'\r\nimport {safe} from './util/safe.js'\r\nimport {track} from './util/track.js'\r\n\r\n/**\r\n * Turn an mdast syntax tree into markdown.\r\n *\r\n * @param {Nodes} tree\r\n *   Tree to serialize.\r\n * @param {Options} [options]\r\n *   Configuration (optional).\r\n * @returns {string}\r\n *   Serialized markdown representing `tree`.\r\n */\r\nexport function toMarkdown(tree, options = {}) {\r\n  /** @type {State} */\r\n  const state = {\r\n    enter,\r\n    indentLines,\r\n    associationId: association,\r\n    containerPhrasing: containerPhrasingBound,\r\n    containerFlow: containerFlowBound,\r\n    createTracker: track,\r\n    compilePattern,\r\n    safe: safeBound,\r\n    stack: [],\r\n    unsafe: [...unsafe],\r\n    join: [...join],\r\n    // @ts-expect-error: GFM / frontmatter are typed in `mdast` but not defined\r\n    // here.\r\n    handlers: {...handlers},\r\n    options: {},\r\n    indexStack: [],\r\n    // @ts-expect-error: add `handle` in a second.\r\n    handle: undefined\r\n  }\r\n\r\n  configure(state, options)\r\n\r\n  if (state.options.tightDefinitions) {\r\n    state.join.push(joinDefinition)\r\n  }\r\n\r\n  state.handle = zwitch('type', {\r\n    invalid,\r\n    unknown,\r\n    handlers: state.handlers\r\n  })\r\n\r\n  let result = state.handle(tree, undefined, state, {\r\n    before: '\\n',\r\n    after: '\\n',\r\n    now: {line: 1, column: 1},\r\n    lineShift: 0\r\n  })\r\n\r\n  if (\r\n    result &&\r\n    result.charCodeAt(result.length - 1) !== 10 &&\r\n    result.charCodeAt(result.length - 1) !== 13\r\n  ) {\r\n    result += '\\n'\r\n  }\r\n\r\n  return result\r\n\r\n  /** @type {Enter} */\r\n  function enter(name) {\r\n    state.stack.push(name)\r\n    return exit\r\n\r\n    /**\r\n     * @returns {undefined}\r\n     */\r\n    function exit() {\r\n      state.stack.pop()\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n * @returns {never}\r\n */\r\nfunction invalid(value) {\r\n  throw new Error('Cannot handle value `' + value + '`, expected node')\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n * @returns {never}\r\n */\r\nfunction unknown(value) {\r\n  // Always a node.\r\n  const node = /** @type {Nodes} */ (value)\r\n  throw new Error('Cannot handle unknown node `' + node.type + '`')\r\n}\r\n\r\n/** @type {Join} */\r\nfunction joinDefinition(left, right) {\r\n  // No blank line between adjacent definitions.\r\n  if (left.type === 'definition' && left.type === right.type) {\r\n    return 0\r\n  }\r\n}\r\n\r\n/**\r\n * Serialize the children of a parent that contains phrasing children.\r\n *\r\n * These children will be joined flush together.\r\n *\r\n * @this {State}\r\n *   Info passed around about the current state.\r\n * @param {PhrasingParents} parent\r\n *   Parent of flow nodes.\r\n * @param {Info} info\r\n *   Info on where we are in the document we are generating.\r\n * @returns {string}\r\n *   Serialized children, joined together.\r\n */\r\nfunction containerPhrasingBound(parent, info) {\r\n  return containerPhrasing(parent, this, info)\r\n}\r\n\r\n/**\r\n * Serialize the children of a parent that contains flow children.\r\n *\r\n * These children will typically be joined by blank lines.\r\n * What they are joined by exactly is defined by `Join` functions.\r\n *\r\n * @this {State}\r\n *   Info passed around about the current state.\r\n * @param {FlowParents} parent\r\n *   Parent of flow nodes.\r\n * @param {TrackFields} info\r\n *   Info on where we are in the document we are generating.\r\n * @returns {string}\r\n *   Serialized children, joined by (blank) lines.\r\n */\r\nfunction containerFlowBound(parent, info) {\r\n  return containerFlow(parent, this, info)\r\n}\r\n\r\n/**\r\n * Make a string safe for embedding in markdown constructs.\r\n *\r\n * In markdown, almost all punctuation characters can, in certain cases,\r\n * result in something.\r\n * Whether they do is highly subjective to where they happen and in what\r\n * they happen.\r\n *\r\n * To solve this, `mdast-util-to-markdown` tracks:\r\n *\r\n * * Characters before and after something;\r\n * * What “constructs” we are in.\r\n *\r\n * This information is then used by this function to escape or encode\r\n * special characters.\r\n *\r\n * @this {State}\r\n *   Info passed around about the current state.\r\n * @param {string | null | undefined} value\r\n *   Raw value to make safe.\r\n * @param {SafeConfig} config\r\n *   Configuration.\r\n * @returns {string}\r\n *   Serialized markdown safe for embedding.\r\n */\r\nfunction safeBound(value, config) {\r\n  return safe(this, value, config)\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownOptions\r\n * @typedef {import('unified').Compiler<Root, string>} Compiler\r\n * @typedef {import('unified').Processor<undefined, undefined, undefined, Root, string>} Processor\r\n */\r\n\r\n/**\r\n * @typedef {Omit<ToMarkdownOptions, 'extensions'>} Options\r\n */\r\n\r\nimport {toMarkdown} from 'mdast-util-to-markdown'\r\n\r\n/**\r\n * Add support for serializing to markdown.\r\n *\r\n * @param {Readonly<Options> | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nexport default function remarkStringify(options) {\r\n  /** @type {Processor} */\r\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\r\n  const self = this\r\n\r\n  self.compiler = compiler\r\n\r\n  /**\r\n   * @type {Compiler}\r\n   */\r\n  function compiler(tree) {\r\n    return toMarkdown(tree, {\r\n      ...self.data('settings'),\r\n      ...options,\r\n      // Note: this option is not in the readme.\r\n      // The goal is for it to be set by plugins on `data` instead of being\r\n      // passed by users.\r\n      extensions: self.data('toMarkdownExtensions') || []\r\n    })\r\n  }\r\n}\r\n", "/**\r\n * Throw a given error.\r\n *\r\n * @param {Error|null|undefined} [error]\r\n *   Maybe error.\r\n * @returns {asserts error is null|undefined}\r\n */\r\nexport function bail(error) {\r\n  if (error) {\r\n    throw error\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('trough').Pipeline} Pipeline\r\n *\r\n * @typedef {import('unist').Node} Node\r\n *\r\n * @typedef {import('vfile').Compatible} Compatible\r\n * @typedef {import('vfile').Value} Value\r\n *\r\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\r\n * @typedef {import('../index.js').Data} Data\r\n * @typedef {import('../index.js').Settings} Settings\r\n */\r\n\r\n/**\r\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\r\n *   Acceptable results from compilers.\r\n *\r\n *   To register custom results, add them to\r\n *   {@linkcode CompileResultMap}.\r\n */\r\n\r\n/**\r\n * @template {Node} [Tree=Node]\r\n *   The node that the compiler receives (default: `Node`).\r\n * @template {CompileResults} [Result=CompileResults]\r\n *   The thing that the compiler yields (default: `CompileResults`).\r\n * @callback Compiler\r\n *   A **compiler** handles the compiling of a syntax tree to something else\r\n *   (in most cases, text) (TypeScript type).\r\n *\r\n *   It is used in the stringify phase and called with a {@linkcode Node}\r\n *   and {@linkcode VFile} representation of the document to compile.\r\n *   It should return the textual representation of the given tree (typically\r\n *   `string`).\r\n *\r\n *   > **Note**: unified typically compiles by serializing: most compilers\r\n *   > return `string` (or `Uint8Array`).\r\n *   > Some compilers, such as the one configured with\r\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\r\n *   > React tree).\r\n *   > If you’re using a compiler that doesn’t serialize, expect different\r\n *   > result values.\r\n *   >\r\n *   > To register custom results in TypeScript, add them to\r\n *   > {@linkcode CompileResultMap}.\r\n *\r\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\r\n * @param {Tree} tree\r\n *   Tree to compile.\r\n * @param {VFile} file\r\n *   File associated with `tree`.\r\n * @returns {Result}\r\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\r\n *   something else (for `file.result`).\r\n */\r\n\r\n/**\r\n * @template {Node} [Tree=Node]\r\n *   The node that the parser yields (default: `Node`)\r\n * @callback Parser\r\n *   A **parser** handles the parsing of text to a syntax tree.\r\n *\r\n *   It is used in the parse phase and is called with a `string` and\r\n *   {@linkcode VFile} of the document to parse.\r\n *   It must return the syntax tree representation of the given file\r\n *   ({@linkcode Node}).\r\n * @param {string} document\r\n *   Document to parse.\r\n * @param {VFile} file\r\n *   File associated with `document`.\r\n * @returns {Tree}\r\n *   Node representing the given file.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Plugin<Array<any>, any, any> |\r\n *   PluginTuple<Array<any>, any, any> |\r\n *   Preset\r\n * )} Pluggable\r\n *   Union of the different ways to add plugins and settings.\r\n */\r\n\r\n/**\r\n * @typedef {Array<Pluggable>} PluggableList\r\n *   List of plugins and presets.\r\n */\r\n\r\n// Note: we can’t use `callback` yet as it messes up `this`:\r\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\r\n/**\r\n * @template {Array<unknown>} [PluginParameters=[]]\r\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\r\n * @template {Node | string | undefined} [Input=Node]\r\n *   Value that is expected as input (default: `Node`).\r\n *\r\n *   *   If the plugin returns a {@linkcode Transformer}, this\r\n *       should be the node it expects.\r\n *   *   If the plugin sets a {@linkcode Parser}, this should be\r\n *       `string`.\r\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\r\n *       node it expects.\r\n * @template [Output=Input]\r\n *   Value that is yielded as output (default: `Input`).\r\n *\r\n *   *   If the plugin returns a {@linkcode Transformer}, this\r\n *       should be the node that that yields.\r\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\r\n *       node that it yields.\r\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\r\n *       result it yields.\r\n * @typedef {(\r\n *   (this: Processor, ...parameters: PluginParameters) =>\r\n *     Input extends string ? // Parser.\r\n *        Output extends Node | undefined ? undefined | void : never :\r\n *     Output extends CompileResults ? // Compiler.\r\n *        Input extends Node | undefined ? undefined | void : never :\r\n *     Transformer<\r\n *       Input extends Node ? Input : Node,\r\n *       Output extends Node ? Output : Node\r\n *     > | undefined | void\r\n * )} Plugin\r\n *   Single plugin.\r\n *\r\n *   Plugins configure the processors they are applied on in the following\r\n *   ways:\r\n *\r\n *   *   they change the processor, such as the parser, the compiler, or by\r\n *       configuring data\r\n *   *   they specify how to handle trees and files\r\n *\r\n *   In practice, they are functions that can receive options and configure the\r\n *   processor (`this`).\r\n *\r\n *   > **Note**: plugins are called when the processor is *frozen*, not when\r\n *   > they are applied.\r\n */\r\n\r\n/**\r\n * Tuple of a plugin and its configuration.\r\n *\r\n * The first item is a plugin, the rest are its parameters.\r\n *\r\n * @template {Array<unknown>} [TupleParameters=[]]\r\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\r\n * @template {Node | string | undefined} [Input=undefined]\r\n *   Value that is expected as input (optional).\r\n *\r\n *   *   If the plugin returns a {@linkcode Transformer}, this\r\n *       should be the node it expects.\r\n *   *   If the plugin sets a {@linkcode Parser}, this should be\r\n *       `string`.\r\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\r\n *       node it expects.\r\n * @template [Output=undefined] (optional).\r\n *   Value that is yielded as output.\r\n *\r\n *   *   If the plugin returns a {@linkcode Transformer}, this\r\n *       should be the node that that yields.\r\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\r\n *       node that it yields.\r\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\r\n *       result it yields.\r\n * @typedef {(\r\n *   [\r\n *     plugin: Plugin<TupleParameters, Input, Output>,\r\n *     ...parameters: TupleParameters\r\n *   ]\r\n * )} PluginTuple\r\n */\r\n\r\n/**\r\n * @typedef Preset\r\n *   Sharable configuration.\r\n *\r\n *   They can contain plugins and settings.\r\n * @property {PluggableList | undefined} [plugins]\r\n *   List of plugins and presets (optional).\r\n * @property {Settings | undefined} [settings]\r\n *   Shared settings for parsers and compilers (optional).\r\n */\r\n\r\n/**\r\n * @template {VFile} [File=VFile]\r\n *   The file that the callback receives (default: `VFile`).\r\n * @callback ProcessCallback\r\n *   Callback called when the process is done.\r\n *\r\n *   Called with either an error or a result.\r\n * @param {Error | undefined} [error]\r\n *   Fatal error (optional).\r\n * @param {File | undefined} [file]\r\n *   Processed file (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\n\r\n/**\r\n * @template {Node} [Tree=Node]\r\n *   The tree that the callback receives (default: `Node`).\r\n * @callback RunCallback\r\n *   Callback called when transformers are done.\r\n *\r\n *   Called with either an error or results.\r\n * @param {Error | undefined} [error]\r\n *   Fatal error (optional).\r\n * @param {Tree | undefined} [tree]\r\n *   Transformed tree (optional).\r\n * @param {VFile | undefined} [file]\r\n *   File (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\n\r\n/**\r\n * @template {Node} [Output=Node]\r\n *   Node type that the transformer yields (default: `Node`).\r\n * @callback TransformCallback\r\n *   Callback passed to transforms.\r\n *\r\n *   If the signature of a `transformer` accepts a third argument, the\r\n *   transformer may perform asynchronous operations, and must call it.\r\n * @param {Error | undefined} [error]\r\n *   Fatal error to stop the process (optional).\r\n * @param {Output | undefined} [tree]\r\n *   New, changed, tree (optional).\r\n * @param {VFile | undefined} [file]\r\n *   New, changed, file (optional).\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\n\r\n/**\r\n * @template {Node} [Input=Node]\r\n *   Node type that the transformer expects (default: `Node`).\r\n * @template {Node} [Output=Input]\r\n *   Node type that the transformer yields (default: `Input`).\r\n * @callback Transformer\r\n *   Transformers handle syntax trees and files.\r\n *\r\n *   They are functions that are called each time a syntax tree and file are\r\n *   passed through the run phase.\r\n *   When an error occurs in them (either because it’s thrown, returned,\r\n *   rejected, or passed to `next`), the process stops.\r\n *\r\n *   The run phase is handled by [`trough`][trough], see its documentation for\r\n *   the exact semantics of these functions.\r\n *\r\n *   > **Note**: you should likely ignore `next`: don’t accept it.\r\n *   > it supports callback-style async work.\r\n *   > But promises are likely easier to reason about.\r\n *\r\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\r\n * @param {Input} tree\r\n *   Tree to handle.\r\n * @param {VFile} file\r\n *   File to handle.\r\n * @param {TransformCallback<Output>} next\r\n *   Callback.\r\n * @returns {(\r\n *   Promise<Output | undefined | void> |\r\n *   Promise<never> | // For some reason this is needed separately.\r\n *   Output |\r\n *   Error |\r\n *   undefined |\r\n *   void\r\n * )}\r\n *   If you accept `next`, nothing.\r\n *   Otherwise:\r\n *\r\n *   *   `Error` — fatal error to stop the process\r\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\r\n *       same tree\r\n *   *   `Promise<Node>` or `Node` — new, changed, tree\r\n */\r\n\r\n/**\r\n * @template {Node | undefined} ParseTree\r\n *   Output of `parse`.\r\n * @template {Node | undefined} HeadTree\r\n *   Input for `run`.\r\n * @template {Node | undefined} TailTree\r\n *   Output for `run`.\r\n * @template {Node | undefined} CompileTree\r\n *   Input of `stringify`.\r\n * @template {CompileResults | undefined} CompileResult\r\n *   Output of `stringify`.\r\n * @template {Node | string | undefined} Input\r\n *   Input of plugin.\r\n * @template Output\r\n *   Output of plugin (optional).\r\n * @typedef {(\r\n *   Input extends string\r\n *     ? Output extends Node | undefined\r\n *       ? // Parser.\r\n *         Processor<\r\n *           Output extends undefined ? ParseTree : Output,\r\n *           HeadTree,\r\n *           TailTree,\r\n *           CompileTree,\r\n *           CompileResult\r\n *         >\r\n *       : // Unknown.\r\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\r\n *     : Output extends CompileResults\r\n *     ? Input extends Node | undefined\r\n *       ? // Compiler.\r\n *         Processor<\r\n *           ParseTree,\r\n *           HeadTree,\r\n *           TailTree,\r\n *           Input extends undefined ? CompileTree : Input,\r\n *           Output extends undefined ? CompileResult : Output\r\n *         >\r\n *       : // Unknown.\r\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\r\n *     : Input extends Node | undefined\r\n *     ? Output extends Node | undefined\r\n *       ? // Transform.\r\n *         Processor<\r\n *           ParseTree,\r\n *           HeadTree extends undefined ? Input : HeadTree,\r\n *           Output extends undefined ? TailTree : Output,\r\n *           CompileTree,\r\n *           CompileResult\r\n *         >\r\n *       : // Unknown.\r\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\r\n *     : // Unknown.\r\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\r\n * )} UsePlugin\r\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\r\n */\r\n\r\n/**\r\n * @template {CompileResults | undefined} Result\r\n *   Node type that the transformer yields.\r\n * @typedef {(\r\n *   Result extends Value | undefined ?\r\n *     VFile :\r\n *     VFile & {result: Result}\r\n *   )} VFileWithOutput\r\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\r\n *\r\n *   If a result that is not acceptable on a `VFile` is used, that will\r\n *   be stored on the `result` field of {@linkcode VFile}.\r\n */\r\n\r\nimport {bail} from 'bail'\r\nimport extend from 'extend'\r\nimport {ok as assert} from 'devlop'\r\nimport isPlainObj from 'is-plain-obj'\r\nimport {trough} from 'trough'\r\nimport {VFile} from 'vfile'\r\nimport {CallableInstance} from './callable-instance.js'\r\n\r\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\r\n\r\n// To do: we could start yielding `never` in TS when a parser is missing and\r\n// `parse` is called.\r\n// Currently, we allow directly setting `processor.parser`, which is untyped.\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * @template {Node | undefined} [ParseTree=undefined]\r\n *   Output of `parse` (optional).\r\n * @template {Node | undefined} [HeadTree=undefined]\r\n *   Input for `run` (optional).\r\n * @template {Node | undefined} [TailTree=undefined]\r\n *   Output for `run` (optional).\r\n * @template {Node | undefined} [CompileTree=undefined]\r\n *   Input of `stringify` (optional).\r\n * @template {CompileResults | undefined} [CompileResult=undefined]\r\n *   Output of `stringify` (optional).\r\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\r\n */\r\nexport class Processor extends CallableInstance {\r\n  /**\r\n   * Create a processor.\r\n   */\r\n  constructor() {\r\n    // If `Processor()` is called (w/o new), `copy` is called instead.\r\n    super('copy')\r\n\r\n    /**\r\n     * Compiler to use (deprecated).\r\n     *\r\n     * @deprecated\r\n     *   Use `compiler` instead.\r\n     * @type {(\r\n     *   Compiler<\r\n     *     CompileTree extends undefined ? Node : CompileTree,\r\n     *     CompileResult extends undefined ? CompileResults : CompileResult\r\n     *   > |\r\n     *   undefined\r\n     * )}\r\n     */\r\n    this.Compiler = undefined\r\n\r\n    /**\r\n     * Parser to use (deprecated).\r\n     *\r\n     * @deprecated\r\n     *   Use `parser` instead.\r\n     * @type {(\r\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\r\n     *   undefined\r\n     * )}\r\n     */\r\n    this.Parser = undefined\r\n\r\n    // Note: the following fields are considered private.\r\n    // However, they are needed for tests, and TSC generates an untyped\r\n    // `private freezeIndex` field for, which trips `type-coverage` up.\r\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\r\n    /**\r\n     * Internal list of configured plugins.\r\n     *\r\n     * @deprecated\r\n     *   This is a private internal property and should not be used.\r\n     * @type {Array<PluginTuple<Array<unknown>>>}\r\n     */\r\n    this.attachers = []\r\n\r\n    /**\r\n     * Compiler to use.\r\n     *\r\n     * @type {(\r\n     *   Compiler<\r\n     *     CompileTree extends undefined ? Node : CompileTree,\r\n     *     CompileResult extends undefined ? CompileResults : CompileResult\r\n     *   > |\r\n     *   undefined\r\n     * )}\r\n     */\r\n    this.compiler = undefined\r\n\r\n    /**\r\n     * Internal state to track where we are while freezing.\r\n     *\r\n     * @deprecated\r\n     *   This is a private internal property and should not be used.\r\n     * @type {number}\r\n     */\r\n    this.freezeIndex = -1\r\n\r\n    /**\r\n     * Internal state to track whether we’re frozen.\r\n     *\r\n     * @deprecated\r\n     *   This is a private internal property and should not be used.\r\n     * @type {boolean | undefined}\r\n     */\r\n    this.frozen = undefined\r\n\r\n    /**\r\n     * Internal state.\r\n     *\r\n     * @deprecated\r\n     *   This is a private internal property and should not be used.\r\n     * @type {Data}\r\n     */\r\n    this.namespace = {}\r\n\r\n    /**\r\n     * Parser to use.\r\n     *\r\n     * @type {(\r\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\r\n     *   undefined\r\n     * )}\r\n     */\r\n    this.parser = undefined\r\n\r\n    /**\r\n     * Internal list of configured transformers.\r\n     *\r\n     * @deprecated\r\n     *   This is a private internal property and should not be used.\r\n     * @type {Pipeline}\r\n     */\r\n    this.transformers = trough()\r\n  }\r\n\r\n  /**\r\n   * Copy a processor.\r\n   *\r\n   * @deprecated\r\n   *   This is a private internal method and should not be used.\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\r\n   *   configured to work the same as its ancestor.\r\n   *   When the descendant processor is configured in the future it does not\r\n   *   affect the ancestral processor.\r\n   */\r\n  copy() {\r\n    // Cast as the type parameters will be the same after attaching.\r\n    const destination =\r\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\r\n        new Processor()\r\n      )\r\n    let index = -1\r\n\r\n    while (++index < this.attachers.length) {\r\n      const attacher = this.attachers[index]\r\n      destination.use(...attacher)\r\n    }\r\n\r\n    destination.data(extend(true, {}, this.namespace))\r\n\r\n    return destination\r\n  }\r\n\r\n  /**\r\n   * Configure the processor with info available to all plugins.\r\n   * Information is stored in an object.\r\n   *\r\n   * Typically, options can be given to a specific plugin, but sometimes it\r\n   * makes sense to have information shared with several plugins.\r\n   * For example, a list of HTML elements that are self-closing, which is\r\n   * needed during all phases.\r\n   *\r\n   * > **Note**: setting information cannot occur on *frozen* processors.\r\n   * > Call the processor first to create a new unfrozen processor.\r\n   *\r\n   * > **Note**: to register custom data in TypeScript, augment the\r\n   * > {@linkcode Data} interface.\r\n   *\r\n   * @example\r\n   *   This example show how to get and set info:\r\n   *\r\n   *   ```js\r\n   *   import {unified} from 'unified'\r\n   *\r\n   *   const processor = unified().data('alpha', 'bravo')\r\n   *\r\n   *   processor.data('alpha') // => 'bravo'\r\n   *\r\n   *   processor.data() // => {alpha: 'bravo'}\r\n   *\r\n   *   processor.data({charlie: 'delta'})\r\n   *\r\n   *   processor.data() // => {charlie: 'delta'}\r\n   *   ```\r\n   *\r\n   * @template {keyof Data} Key\r\n   *\r\n   * @overload\r\n   * @returns {Data}\r\n   *\r\n   * @overload\r\n   * @param {Data} dataset\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *\r\n   * @overload\r\n   * @param {Key} key\r\n   * @returns {Data[Key]}\r\n   *\r\n   * @overload\r\n   * @param {Key} key\r\n   * @param {Data[Key]} value\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *\r\n   * @param {Data | Key} [key]\r\n   *   Key to get or set, or entire dataset to set, or nothing to get the\r\n   *   entire dataset (optional).\r\n   * @param {Data[Key]} [value]\r\n   *   Value to set (optional).\r\n   * @returns {unknown}\r\n   *   The current processor when setting, the value at `key` when getting, or\r\n   *   the entire dataset when getting without key.\r\n   */\r\n  data(key, value) {\r\n    if (typeof key === 'string') {\r\n      // Set `key`.\r\n      if (arguments.length === 2) {\r\n        assertUnfrozen('data', this.frozen)\r\n        this.namespace[key] = value\r\n        return this\r\n      }\r\n\r\n      // Get `key`.\r\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\r\n    }\r\n\r\n    // Set space.\r\n    if (key) {\r\n      assertUnfrozen('data', this.frozen)\r\n      this.namespace = key\r\n      return this\r\n    }\r\n\r\n    // Get space.\r\n    return this.namespace\r\n  }\r\n\r\n  /**\r\n   * Freeze a processor.\r\n   *\r\n   * Frozen processors are meant to be extended and not to be configured\r\n   * directly.\r\n   *\r\n   * When a processor is frozen it cannot be unfrozen.\r\n   * New processors working the same way can be created by calling the\r\n   * processor.\r\n   *\r\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\r\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\r\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\r\n   *\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *   The current processor.\r\n   */\r\n  freeze() {\r\n    if (this.frozen) {\r\n      return this\r\n    }\r\n\r\n    // Cast so that we can type plugins easier.\r\n    // Plugins are supposed to be usable on different processors, not just on\r\n    // this exact processor.\r\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\r\n\r\n    while (++this.freezeIndex < this.attachers.length) {\r\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\r\n\r\n      if (options[0] === false) {\r\n        continue\r\n      }\r\n\r\n      if (options[0] === true) {\r\n        options[0] = undefined\r\n      }\r\n\r\n      const transformer = attacher.call(self, ...options)\r\n\r\n      if (typeof transformer === 'function') {\r\n        this.transformers.use(transformer)\r\n      }\r\n    }\r\n\r\n    this.frozen = true\r\n    this.freezeIndex = Number.POSITIVE_INFINITY\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Parse text to a syntax tree.\r\n   *\r\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\r\n   * > phases.\r\n   *\r\n   * @param {Compatible | undefined} [file]\r\n   *   file to parse (optional); typically `string` or `VFile`; any value\r\n   *   accepted as `x` in `new VFile(x)`.\r\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\r\n   *   Syntax tree representing `file`.\r\n   */\r\n  parse(file) {\r\n    this.freeze()\r\n    const realFile = vfile(file)\r\n    const parser = this.parser || this.Parser\r\n    assertParser('parse', parser)\r\n    return parser(String(realFile), realFile)\r\n  }\r\n\r\n  /**\r\n   * Process the given file as configured on the processor.\r\n   *\r\n   * > **Note**: `process` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `process` performs the parse, run, and stringify phases.\r\n   *\r\n   * @overload\r\n   * @param {Compatible | undefined} file\r\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\r\n   * @returns {undefined}\r\n   *\r\n   * @overload\r\n   * @param {Compatible | undefined} [file]\r\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\r\n   *\r\n   * @param {Compatible | undefined} [file]\r\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\r\n   *   `x` in `new VFile(x)`.\r\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\r\n   *   Callback (optional).\r\n   * @returns {Promise<VFile> | undefined}\r\n   *   Nothing if `done` is given.\r\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\r\n   *   processed file.\r\n   *\r\n   *   The parsed, transformed, and compiled value is available at\r\n   *   `file.value` (see note).\r\n   *\r\n   *   > **Note**: unified typically compiles by serializing: most\r\n   *   > compilers return `string` (or `Uint8Array`).\r\n   *   > Some compilers, such as the one configured with\r\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\r\n   *   > React tree).\r\n   *   > If you’re using a compiler that doesn’t serialize, expect different\r\n   *   > result values.\r\n   *   >\r\n   *   > To register custom results in TypeScript, add them to\r\n   *   > {@linkcode CompileResultMap}.\r\n   *\r\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\r\n   */\r\n  process(file, done) {\r\n    const self = this\r\n\r\n    this.freeze()\r\n    assertParser('process', this.parser || this.Parser)\r\n    assertCompiler('process', this.compiler || this.Compiler)\r\n\r\n    return done ? executor(undefined, done) : new Promise(executor)\r\n\r\n    // Note: `void`s needed for TS.\r\n    /**\r\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\r\n     * @param {(error: Error | undefined) => undefined | void} reject\r\n     * @returns {undefined}\r\n     */\r\n    function executor(resolve, reject) {\r\n      const realFile = vfile(file)\r\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\r\n      // input of the first transform).\r\n      const parseTree =\r\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\r\n          /** @type {unknown} */ (self.parse(realFile))\r\n        )\r\n\r\n      self.run(parseTree, realFile, function (error, tree, file) {\r\n        if (error || !tree || !file) {\r\n          return realDone(error)\r\n        }\r\n\r\n        // Assume `TailTree` (the output of the last transform) matches\r\n        // `CompileTree` (the input of the compiler).\r\n        const compileTree =\r\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\r\n            /** @type {unknown} */ (tree)\r\n          )\r\n\r\n        const compileResult = self.stringify(compileTree, file)\r\n\r\n        if (looksLikeAValue(compileResult)) {\r\n          file.value = compileResult\r\n        } else {\r\n          file.result = compileResult\r\n        }\r\n\r\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\r\n      })\r\n\r\n      /**\r\n       * @param {Error | undefined} error\r\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\r\n       * @returns {undefined}\r\n       */\r\n      function realDone(error, file) {\r\n        if (error || !file) {\r\n          reject(error)\r\n        } else if (resolve) {\r\n          resolve(file)\r\n        } else {\r\n          assert(done, '`done` is defined if `resolve` is not')\r\n          done(undefined, file)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process the given file as configured on the processor.\r\n   *\r\n   * An error is thrown if asynchronous transforms are configured.\r\n   *\r\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\r\n   *\r\n   * @param {Compatible | undefined} [file]\r\n   *   File (optional); typically `string` or `VFile`; any value accepted as\r\n   *   `x` in `new VFile(x)`.\r\n   * @returns {VFileWithOutput<CompileResult>}\r\n   *   The processed file.\r\n   *\r\n   *   The parsed, transformed, and compiled value is available at\r\n   *   `file.value` (see note).\r\n   *\r\n   *   > **Note**: unified typically compiles by serializing: most\r\n   *   > compilers return `string` (or `Uint8Array`).\r\n   *   > Some compilers, such as the one configured with\r\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\r\n   *   > React tree).\r\n   *   > If you’re using a compiler that doesn’t serialize, expect different\r\n   *   > result values.\r\n   *   >\r\n   *   > To register custom results in TypeScript, add them to\r\n   *   > {@linkcode CompileResultMap}.\r\n   *\r\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\r\n   */\r\n  processSync(file) {\r\n    /** @type {boolean} */\r\n    let complete = false\r\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\r\n    let result\r\n\r\n    this.freeze()\r\n    assertParser('processSync', this.parser || this.Parser)\r\n    assertCompiler('processSync', this.compiler || this.Compiler)\r\n\r\n    this.process(file, realDone)\r\n    assertDone('processSync', 'process', complete)\r\n    assert(result, 'we either bailed on an error or have a tree')\r\n\r\n    return result\r\n\r\n    /**\r\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\r\n     */\r\n    function realDone(error, file) {\r\n      complete = true\r\n      bail(error)\r\n      result = file\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run *transformers* on a syntax tree.\r\n   *\r\n   * > **Note**: `run` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `run` performs the run phase, not other phases.\r\n   *\r\n   * @overload\r\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\r\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\r\n   * @returns {undefined}\r\n   *\r\n   * @overload\r\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\r\n   * @param {Compatible | undefined} file\r\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\r\n   * @returns {undefined}\r\n   *\r\n   * @overload\r\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\r\n   * @param {Compatible | undefined} [file]\r\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\r\n   *\r\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\r\n   *   Tree to transform and inspect.\r\n   * @param {(\r\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\r\n   *   Compatible\r\n   * )} [file]\r\n   *   File associated with `node` (optional); any value accepted as `x` in\r\n   *   `new VFile(x)`.\r\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\r\n   *   Callback (optional).\r\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\r\n   *   Nothing if `done` is given.\r\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\r\n   *   transformed tree.\r\n   */\r\n  run(tree, file, done) {\r\n    assertNode(tree)\r\n    this.freeze()\r\n\r\n    const transformers = this.transformers\r\n\r\n    if (!done && typeof file === 'function') {\r\n      done = file\r\n      file = undefined\r\n    }\r\n\r\n    return done ? executor(undefined, done) : new Promise(executor)\r\n\r\n    // Note: `void`s needed for TS.\r\n    /**\r\n     * @param {(\r\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\r\n     *   undefined\r\n     * )} resolve\r\n     * @param {(error: Error) => undefined | void} reject\r\n     * @returns {undefined}\r\n     */\r\n    function executor(resolve, reject) {\r\n      assert(\r\n        typeof file !== 'function',\r\n        '`file` can’t be a `done` anymore, we checked'\r\n      )\r\n      const realFile = vfile(file)\r\n      transformers.run(tree, realFile, realDone)\r\n\r\n      /**\r\n       * @param {Error | undefined} error\r\n       * @param {Node} outputTree\r\n       * @param {VFile} file\r\n       * @returns {undefined}\r\n       */\r\n      function realDone(error, outputTree, file) {\r\n        const resultingTree =\r\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\r\n            outputTree || tree\r\n          )\r\n\r\n        if (error) {\r\n          reject(error)\r\n        } else if (resolve) {\r\n          resolve(resultingTree)\r\n        } else {\r\n          assert(done, '`done` is defined if `resolve` is not')\r\n          done(undefined, resultingTree, file)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run *transformers* on a syntax tree.\r\n   *\r\n   * An error is thrown if asynchronous transforms are configured.\r\n   *\r\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `runSync` performs the run phase, not other phases.\r\n   *\r\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\r\n   *   Tree to transform and inspect.\r\n   * @param {Compatible | undefined} [file]\r\n   *   File associated with `node` (optional); any value accepted as `x` in\r\n   *   `new VFile(x)`.\r\n   * @returns {TailTree extends undefined ? Node : TailTree}\r\n   *   Transformed tree.\r\n   */\r\n  runSync(tree, file) {\r\n    /** @type {boolean} */\r\n    let complete = false\r\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\r\n    let result\r\n\r\n    this.run(tree, file, realDone)\r\n\r\n    assertDone('runSync', 'run', complete)\r\n    assert(result, 'we either bailed on an error or have a tree')\r\n    return result\r\n\r\n    /**\r\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\r\n     */\r\n    function realDone(error, tree) {\r\n      bail(error)\r\n      result = tree\r\n      complete = true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compile a syntax tree.\r\n   *\r\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\r\n   *\r\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\r\n   * > or other phases.\r\n   *\r\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\r\n   *   Tree to compile.\r\n   * @param {Compatible | undefined} [file]\r\n   *   File associated with `node` (optional); any value accepted as `x` in\r\n   *   `new VFile(x)`.\r\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\r\n   *   Textual representation of the tree (see note).\r\n   *\r\n   *   > **Note**: unified typically compiles by serializing: most compilers\r\n   *   > return `string` (or `Uint8Array`).\r\n   *   > Some compilers, such as the one configured with\r\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\r\n   *   > React tree).\r\n   *   > If you’re using a compiler that doesn’t serialize, expect different\r\n   *   > result values.\r\n   *   >\r\n   *   > To register custom results in TypeScript, add them to\r\n   *   > {@linkcode CompileResultMap}.\r\n   *\r\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\r\n   */\r\n  stringify(tree, file) {\r\n    this.freeze()\r\n    const realFile = vfile(file)\r\n    const compiler = this.compiler || this.Compiler\r\n    assertCompiler('stringify', compiler)\r\n    assertNode(tree)\r\n\r\n    return compiler(tree, realFile)\r\n  }\r\n\r\n  /**\r\n   * Configure the processor to use a plugin, a list of usable values, or a\r\n   * preset.\r\n   *\r\n   * If the processor is already using a plugin, the previous plugin\r\n   * configuration is changed based on the options that are passed in.\r\n   * In other words, the plugin is not added a second time.\r\n   *\r\n   * > **Note**: `use` cannot be called on *frozen* processors.\r\n   * > Call the processor first to create a new unfrozen processor.\r\n   *\r\n   * @example\r\n   *   There are many ways to pass plugins to `.use()`.\r\n   *   This example gives an overview:\r\n   *\r\n   *   ```js\r\n   *   import {unified} from 'unified'\r\n   *\r\n   *   unified()\r\n   *     // Plugin with options:\r\n   *     .use(pluginA, {x: true, y: true})\r\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\r\n   *     .use(pluginA, {y: false, z: true})\r\n   *     // Plugins:\r\n   *     .use([pluginB, pluginC])\r\n   *     // Two plugins, the second with options:\r\n   *     .use([pluginD, [pluginE, {}]])\r\n   *     // Preset with plugins and settings:\r\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\r\n   *     // Settings only:\r\n   *     .use({settings: {position: false}})\r\n   *   ```\r\n   *\r\n   * @template {Array<unknown>} [Parameters=[]]\r\n   * @template {Node | string | undefined} [Input=undefined]\r\n   * @template [Output=Input]\r\n   *\r\n   * @overload\r\n   * @param {Preset | null | undefined} [preset]\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *\r\n   * @overload\r\n   * @param {PluggableList} list\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *\r\n   * @overload\r\n   * @param {Plugin<Parameters, Input, Output>} plugin\r\n   * @param {...(Parameters | [boolean])} parameters\r\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\r\n   *\r\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\r\n   *   Usable value.\r\n   * @param {...unknown} parameters\r\n   *   Parameters, when a plugin is given as a usable value.\r\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\r\n   *   Current processor.\r\n   */\r\n  use(value, ...parameters) {\r\n    const attachers = this.attachers\r\n    const namespace = this.namespace\r\n\r\n    assertUnfrozen('use', this.frozen)\r\n\r\n    if (value === null || value === undefined) {\r\n      // Empty.\r\n    } else if (typeof value === 'function') {\r\n      addPlugin(value, parameters)\r\n    } else if (typeof value === 'object') {\r\n      if (Array.isArray(value)) {\r\n        addList(value)\r\n      } else {\r\n        addPreset(value)\r\n      }\r\n    } else {\r\n      throw new TypeError('Expected usable value, not `' + value + '`')\r\n    }\r\n\r\n    return this\r\n\r\n    /**\r\n     * @param {Pluggable} value\r\n     * @returns {undefined}\r\n     */\r\n    function add(value) {\r\n      if (typeof value === 'function') {\r\n        addPlugin(value, [])\r\n      } else if (typeof value === 'object') {\r\n        if (Array.isArray(value)) {\r\n          const [plugin, ...parameters] =\r\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\r\n          addPlugin(plugin, parameters)\r\n        } else {\r\n          addPreset(value)\r\n        }\r\n      } else {\r\n        throw new TypeError('Expected usable value, not `' + value + '`')\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {Preset} result\r\n     * @returns {undefined}\r\n     */\r\n    function addPreset(result) {\r\n      if (!('plugins' in result) && !('settings' in result)) {\r\n        throw new Error(\r\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\r\n        )\r\n      }\r\n\r\n      addList(result.plugins)\r\n\r\n      if (result.settings) {\r\n        namespace.settings = extend(true, namespace.settings, result.settings)\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {PluggableList | null | undefined} plugins\r\n     * @returns {undefined}\r\n     */\r\n    function addList(plugins) {\r\n      let index = -1\r\n\r\n      if (plugins === null || plugins === undefined) {\r\n        // Empty.\r\n      } else if (Array.isArray(plugins)) {\r\n        while (++index < plugins.length) {\r\n          const thing = plugins[index]\r\n          add(thing)\r\n        }\r\n      } else {\r\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {Plugin} plugin\r\n     * @param {Array<unknown>} parameters\r\n     * @returns {undefined}\r\n     */\r\n    function addPlugin(plugin, parameters) {\r\n      let index = -1\r\n      let entryIndex = -1\r\n\r\n      while (++index < attachers.length) {\r\n        if (attachers[index][0] === plugin) {\r\n          entryIndex = index\r\n          break\r\n        }\r\n      }\r\n\r\n      if (entryIndex === -1) {\r\n        attachers.push([plugin, ...parameters])\r\n      }\r\n      // Only set if there was at least a `primary` value, otherwise we’d change\r\n      // `arguments.length`.\r\n      else if (parameters.length > 0) {\r\n        let [primary, ...rest] = parameters\r\n        const currentPrimary = attachers[entryIndex][1]\r\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\r\n          primary = extend(true, currentPrimary, primary)\r\n        }\r\n\r\n        attachers[entryIndex] = [plugin, primary, ...rest]\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Note: this returns a *callable* instance.\r\n// That’s why it’s documented as a function.\r\n/**\r\n * Create a new processor.\r\n *\r\n * @example\r\n *   This example shows how a new processor can be created (from `remark`) and linked\r\n *   to **stdin**(4) and **stdout**(4).\r\n *\r\n *   ```js\r\n *   import process from 'node:process'\r\n *   import concatStream from 'concat-stream'\r\n *   import {remark} from 'remark'\r\n *\r\n *   process.stdin.pipe(\r\n *     concatStream(function (buf) {\r\n *       process.stdout.write(String(remark().processSync(buf)))\r\n *     })\r\n *   )\r\n *   ```\r\n *\r\n * @returns\r\n *   New *unfrozen* processor (`processor`).\r\n *\r\n *   This processor is configured to work the same as its ancestor.\r\n *   When the descendant processor is configured in the future it does not\r\n *   affect the ancestral processor.\r\n */\r\nexport const unified = new Processor().freeze()\r\n\r\n/**\r\n * Assert a parser is available.\r\n *\r\n * @param {string} name\r\n * @param {unknown} value\r\n * @returns {asserts value is Parser}\r\n */\r\nfunction assertParser(name, value) {\r\n  if (typeof value !== 'function') {\r\n    throw new TypeError('Cannot `' + name + '` without `parser`')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert a compiler is available.\r\n *\r\n * @param {string} name\r\n * @param {unknown} value\r\n * @returns {asserts value is Compiler}\r\n */\r\nfunction assertCompiler(name, value) {\r\n  if (typeof value !== 'function') {\r\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert the processor is not frozen.\r\n *\r\n * @param {string} name\r\n * @param {unknown} frozen\r\n * @returns {asserts frozen is false}\r\n */\r\nfunction assertUnfrozen(name, frozen) {\r\n  if (frozen) {\r\n    throw new Error(\r\n      'Cannot call `' +\r\n        name +\r\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Assert `node` is a unist node.\r\n *\r\n * @param {unknown} node\r\n * @returns {asserts node is Node}\r\n */\r\nfunction assertNode(node) {\r\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\r\n  // type-coverage:ignore-next-line\r\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\r\n    throw new TypeError('Expected node, got `' + node + '`')\r\n    // Fine.\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that `complete` is `true`.\r\n *\r\n * @param {string} name\r\n * @param {string} asyncName\r\n * @param {unknown} complete\r\n * @returns {asserts complete is true}\r\n */\r\nfunction assertDone(name, asyncName, complete) {\r\n  if (!complete) {\r\n    throw new Error(\r\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Compatible | undefined} [value]\r\n * @returns {VFile}\r\n */\r\nfunction vfile(value) {\r\n  return looksLikeAVFile(value) ? value : new VFile(value)\r\n}\r\n\r\n/**\r\n * @param {Compatible | undefined} [value]\r\n * @returns {value is VFile}\r\n */\r\nfunction looksLikeAVFile(value) {\r\n  return Boolean(\r\n    value &&\r\n      typeof value === 'object' &&\r\n      'message' in value &&\r\n      'messages' in value\r\n  )\r\n}\r\n\r\n/**\r\n * @param {unknown} [value]\r\n * @returns {value is Value}\r\n */\r\nfunction looksLikeAValue(value) {\r\n  return typeof value === 'string' || isUint8Array(value)\r\n}\r\n\r\n/**\r\n * Assert `value` is an `Uint8Array`.\r\n *\r\n * @param {unknown} value\r\n *   thing.\r\n * @returns {value is Uint8Array}\r\n *   Whether `value` is an `Uint8Array`.\r\n */\r\nfunction isUint8Array(value) {\r\n  return Boolean(\r\n    value &&\r\n      typeof value === 'object' &&\r\n      'byteLength' in value &&\r\n      'byteOffset' in value\r\n  )\r\n}\r\n", "export default function isPlainObject(value) {\r\n\tif (typeof value !== 'object' || value === null) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst prototype = Object.getPrototypeOf(value);\r\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\r\n}\r\n", "// To do: remove `void`s\r\n// To do: remove `null` from output of our APIs, allow it as user APIs.\r\n\r\n/**\r\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\r\n *   Callback.\r\n *\r\n * @typedef {(...input: Array<any>) => any} Middleware\r\n *   Ware.\r\n *\r\n * @typedef Pipeline\r\n *   Pipeline.\r\n * @property {Run} run\r\n *   Run the pipeline.\r\n * @property {Use} use\r\n *   Add middleware.\r\n *\r\n * @typedef {(...input: Array<any>) => void} Run\r\n *   Call all middleware.\r\n *\r\n *   Calls `done` on completion with either an error or the output of the\r\n *   last middleware.\r\n *\r\n *   > 👉 **Note**: as the length of input defines whether async functions get a\r\n *   > `next` function,\r\n *   > it’s recommended to keep `input` at one value normally.\r\n\r\n *\r\n * @typedef {(fn: Middleware) => Pipeline} Use\r\n *   Add middleware.\r\n */\r\n\r\n/**\r\n * Create new middleware.\r\n *\r\n * @returns {Pipeline}\r\n *   Pipeline.\r\n */\r\nexport function trough() {\r\n  /** @type {Array<Middleware>} */\r\n  const fns = []\r\n  /** @type {Pipeline} */\r\n  const pipeline = {run, use}\r\n\r\n  return pipeline\r\n\r\n  /** @type {Run} */\r\n  function run(...values) {\r\n    let middlewareIndex = -1\r\n    /** @type {Callback} */\r\n    const callback = values.pop()\r\n\r\n    if (typeof callback !== 'function') {\r\n      throw new TypeError('Expected function as last argument, not ' + callback)\r\n    }\r\n\r\n    next(null, ...values)\r\n\r\n    /**\r\n     * Run the next `fn`, or we’re done.\r\n     *\r\n     * @param {Error | null | undefined} error\r\n     * @param {Array<any>} output\r\n     */\r\n    function next(error, ...output) {\r\n      const fn = fns[++middlewareIndex]\r\n      let index = -1\r\n\r\n      if (error) {\r\n        callback(error)\r\n        return\r\n      }\r\n\r\n      // Copy non-nullish input into values.\r\n      while (++index < values.length) {\r\n        if (output[index] === null || output[index] === undefined) {\r\n          output[index] = values[index]\r\n        }\r\n      }\r\n\r\n      // Save the newly created `output` for the next call.\r\n      values = output\r\n\r\n      // Next or done.\r\n      if (fn) {\r\n        wrap(fn, next)(...output)\r\n      } else {\r\n        callback(null, ...output)\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @type {Use} */\r\n  function use(middelware) {\r\n    if (typeof middelware !== 'function') {\r\n      throw new TypeError(\r\n        'Expected `middelware` to be a function, not ' + middelware\r\n      )\r\n    }\r\n\r\n    fns.push(middelware)\r\n    return pipeline\r\n  }\r\n}\r\n\r\n/**\r\n * Wrap `middleware` into a uniform interface.\r\n *\r\n * You can pass all input to the resulting function.\r\n * `callback` is then called with the output of `middleware`.\r\n *\r\n * If `middleware` accepts more arguments than the later given in input,\r\n * an extra `done` function is passed to it after that input,\r\n * which must be called by `middleware`.\r\n *\r\n * The first value in `input` is the main input value.\r\n * All other input values are the rest input values.\r\n * The values given to `callback` are the input values,\r\n * merged with every non-nullish output value.\r\n *\r\n * * if `middleware` throws an error,\r\n *   returns a promise that is rejected,\r\n *   or calls the given `done` function with an error,\r\n *   `callback` is called with that error\r\n * * if `middleware` returns a value or returns a promise that is resolved,\r\n *   that value is the main output value\r\n * * if `middleware` calls `done`,\r\n *   all non-nullish values except for the first one (the error) overwrite the\r\n *   output values\r\n *\r\n * @param {Middleware} middleware\r\n *   Function to wrap.\r\n * @param {Callback} callback\r\n *   Callback called with the output of `middleware`.\r\n * @returns {Run}\r\n *   Wrapped middleware.\r\n */\r\nexport function wrap(middleware, callback) {\r\n  /** @type {boolean} */\r\n  let called\r\n\r\n  return wrapped\r\n\r\n  /**\r\n   * Call `middleware`.\r\n   * @this {any}\r\n   * @param {Array<any>} parameters\r\n   * @returns {void}\r\n   */\r\n  function wrapped(...parameters) {\r\n    const fnExpectsCallback = middleware.length > parameters.length\r\n    /** @type {any} */\r\n    let result\r\n\r\n    if (fnExpectsCallback) {\r\n      parameters.push(done)\r\n    }\r\n\r\n    try {\r\n      result = middleware.apply(this, parameters)\r\n    } catch (error) {\r\n      const exception = /** @type {Error} */ (error)\r\n\r\n      // Well, this is quite the pickle.\r\n      // `middleware` received a callback and called it synchronously, but that\r\n      // threw an error.\r\n      // The only thing left to do is to throw the thing instead.\r\n      if (fnExpectsCallback && called) {\r\n        throw exception\r\n      }\r\n\r\n      return done(exception)\r\n    }\r\n\r\n    if (!fnExpectsCallback) {\r\n      if (result && result.then && typeof result.then === 'function') {\r\n        result.then(then, done)\r\n      } else if (result instanceof Error) {\r\n        done(result)\r\n      } else {\r\n        then(result)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call `callback`, only once.\r\n   *\r\n   * @type {Callback}\r\n   */\r\n  function done(error, ...output) {\r\n    if (!called) {\r\n      called = true\r\n      callback(error, ...output)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call `done` with one value.\r\n   *\r\n   * @param {any} [value]\r\n   */\r\n  function then(value) {\r\n    done(null, value)\r\n  }\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Point} Point\r\n * @typedef {import('unist').Position} Position\r\n */\r\n\r\n/**\r\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\r\n *\r\n * @typedef Options\r\n *   Configuration.\r\n * @property {Array<Node> | null | undefined} [ancestors]\r\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\r\n * @property {Error | null | undefined} [cause]\r\n *   Original error cause of the message (optional).\r\n * @property {Point | Position | null | undefined} [place]\r\n *   Place of message (optional).\r\n * @property {string | null | undefined} [ruleId]\r\n *   Category of message (optional, example: `'my-rule'`).\r\n * @property {string | null | undefined} [source]\r\n *   Namespace of who sent the message (optional, example: `'my-package'`).\r\n */\r\n\r\nimport {stringifyPosition} from 'unist-util-stringify-position'\r\n\r\n/**\r\n * Message.\r\n */\r\nexport class VFileMessage extends Error {\r\n  /**\r\n   * Create a message for `reason`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Options | null | undefined} [options]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns\r\n   *   Instance of `VFileMessage`.\r\n   */\r\n  // eslint-disable-next-line complexity\r\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\r\n    super()\r\n\r\n    if (typeof optionsOrParentOrPlace === 'string') {\r\n      origin = optionsOrParentOrPlace\r\n      optionsOrParentOrPlace = undefined\r\n    }\r\n\r\n    /** @type {string} */\r\n    let reason = ''\r\n    /** @type {Options} */\r\n    let options = {}\r\n    let legacyCause = false\r\n\r\n    if (optionsOrParentOrPlace) {\r\n      // Point.\r\n      if (\r\n        'line' in optionsOrParentOrPlace &&\r\n        'column' in optionsOrParentOrPlace\r\n      ) {\r\n        options = {place: optionsOrParentOrPlace}\r\n      }\r\n      // Position.\r\n      else if (\r\n        'start' in optionsOrParentOrPlace &&\r\n        'end' in optionsOrParentOrPlace\r\n      ) {\r\n        options = {place: optionsOrParentOrPlace}\r\n      }\r\n      // Node.\r\n      else if ('type' in optionsOrParentOrPlace) {\r\n        options = {\r\n          ancestors: [optionsOrParentOrPlace],\r\n          place: optionsOrParentOrPlace.position\r\n        }\r\n      }\r\n      // Options.\r\n      else {\r\n        options = {...optionsOrParentOrPlace}\r\n      }\r\n    }\r\n\r\n    if (typeof causeOrReason === 'string') {\r\n      reason = causeOrReason\r\n    }\r\n    // Error.\r\n    else if (!options.cause && causeOrReason) {\r\n      legacyCause = true\r\n      reason = causeOrReason.message\r\n      options.cause = causeOrReason\r\n    }\r\n\r\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\r\n      const index = origin.indexOf(':')\r\n\r\n      if (index === -1) {\r\n        options.ruleId = origin\r\n      } else {\r\n        options.source = origin.slice(0, index)\r\n        options.ruleId = origin.slice(index + 1)\r\n      }\r\n    }\r\n\r\n    if (!options.place && options.ancestors && options.ancestors) {\r\n      const parent = options.ancestors[options.ancestors.length - 1]\r\n\r\n      if (parent) {\r\n        options.place = parent.position\r\n      }\r\n    }\r\n\r\n    const start =\r\n      options.place && 'start' in options.place\r\n        ? options.place.start\r\n        : options.place\r\n\r\n    /* eslint-disable no-unused-expressions */\r\n    /**\r\n     * Stack of ancestor nodes surrounding the message.\r\n     *\r\n     * @type {Array<Node> | undefined}\r\n     */\r\n    this.ancestors = options.ancestors || undefined\r\n\r\n    /**\r\n     * Original error cause of the message.\r\n     *\r\n     * @type {Error | undefined}\r\n     */\r\n    this.cause = options.cause || undefined\r\n\r\n    /**\r\n     * Starting column of message.\r\n     *\r\n     * @type {number | undefined}\r\n     */\r\n    this.column = start ? start.column : undefined\r\n\r\n    /**\r\n     * State of problem.\r\n     *\r\n     * * `true` — error, file not usable\r\n     * * `false` — warning, change may be needed\r\n     * * `undefined` — change likely not needed\r\n     *\r\n     * @type {boolean | null | undefined}\r\n     */\r\n    this.fatal = undefined\r\n\r\n    /**\r\n     * Path of a file (used throughout the `VFile` ecosystem).\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.file\r\n\r\n    // Field from `Error`.\r\n    /**\r\n     * Reason for message.\r\n     *\r\n     * @type {string}\r\n     */\r\n    this.message = reason\r\n\r\n    /**\r\n     * Starting line of error.\r\n     *\r\n     * @type {number | undefined}\r\n     */\r\n    this.line = start ? start.line : undefined\r\n\r\n    // Field from `Error`.\r\n    /**\r\n     * Serialized positional info of message.\r\n     *\r\n     * On normal errors, this would be something like `ParseError`, buit in\r\n     * `VFile` messages we use this space to show where an error happened.\r\n     */\r\n    this.name = stringifyPosition(options.place) || '1:1'\r\n\r\n    /**\r\n     * Place of message.\r\n     *\r\n     * @type {Point | Position | undefined}\r\n     */\r\n    this.place = options.place || undefined\r\n\r\n    /**\r\n     * Reason for message, should use markdown.\r\n     *\r\n     * @type {string}\r\n     */\r\n    this.reason = this.message\r\n\r\n    /**\r\n     * Category of message (example: `'my-rule'`).\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.ruleId = options.ruleId || undefined\r\n\r\n    /**\r\n     * Namespace of message (example: `'my-package'`).\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.source = options.source || undefined\r\n\r\n    // Field from `Error`.\r\n    /**\r\n     * Stack of message.\r\n     *\r\n     * This is used by normal errors to show where something happened in\r\n     * programming code, irrelevant for `VFile` messages,\r\n     *\r\n     * @type {string}\r\n     */\r\n    this.stack =\r\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\r\n        ? options.cause.stack\r\n        : ''\r\n\r\n    // The following fields are “well known”.\r\n    // Not standard.\r\n    // Feel free to add other non-standard fields to your messages.\r\n\r\n    /**\r\n     * Specify the source value that’s being reported, which is deemed\r\n     * incorrect.\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.actual\r\n\r\n    /**\r\n     * Suggest acceptable values that can be used instead of `actual`.\r\n     *\r\n     * @type {Array<string> | undefined}\r\n     */\r\n    this.expected\r\n\r\n    /**\r\n     * Long form description of the message (you should use markdown).\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.note\r\n\r\n    /**\r\n     * Link to docs for the message.\r\n     *\r\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\r\n     * > to `new URL(x)`.\r\n     *\r\n     * @type {string | undefined}\r\n     */\r\n    this.url\r\n    /* eslint-enable no-unused-expressions */\r\n  }\r\n}\r\n\r\nVFileMessage.prototype.file = ''\r\nVFileMessage.prototype.name = ''\r\nVFileMessage.prototype.reason = ''\r\nVFileMessage.prototype.message = ''\r\nVFileMessage.prototype.stack = ''\r\nVFileMessage.prototype.column = undefined\r\nVFileMessage.prototype.line = undefined\r\nVFileMessage.prototype.ancestors = undefined\r\nVFileMessage.prototype.cause = undefined\r\nVFileMessage.prototype.fatal = undefined\r\nVFileMessage.prototype.place = undefined\r\nVFileMessage.prototype.ruleId = undefined\r\nVFileMessage.prototype.source = undefined\r\n", "// A derivative work based on:\r\n// <https://github.com/browserify/path-browserify>.\r\n// Which is licensed:\r\n//\r\n// MIT License\r\n//\r\n// Copyright (c) 2013 James Halliday\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\r\n// this software and associated documentation files (the \"Software\"), to deal in\r\n// the Software without restriction, including without limitation the rights to\r\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\n// the Software, and to permit persons to whom the Software is furnished to do so,\r\n// subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n// A derivative work based on:\r\n//\r\n// Parts of that are extracted from Node’s internal `path` module:\r\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\r\n// Which is licensed:\r\n//\r\n// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\r\n\r\n/* eslint-disable max-depth, complexity */\r\n\r\n/**\r\n * Get the basename from a path.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @param {string | null | undefined} [extname]\r\n *   Extension to strip.\r\n * @returns {string}\r\n *   Stem or basename.\r\n */\r\nfunction basename(path, extname) {\r\n  if (extname !== undefined && typeof extname !== 'string') {\r\n    throw new TypeError('\"ext\" argument must be a string')\r\n  }\r\n\r\n  assertPath(path)\r\n  let start = 0\r\n  let end = -1\r\n  let index = path.length\r\n  /** @type {boolean | undefined} */\r\n  let seenNonSlash\r\n\r\n  if (\r\n    extname === undefined ||\r\n    extname.length === 0 ||\r\n    extname.length > path.length\r\n  ) {\r\n    while (index--) {\r\n      if (path.codePointAt(index) === 47 /* `/` */) {\r\n        // If we reached a path separator that was not part of a set of path\r\n        // separators at the end of the string, stop now.\r\n        if (seenNonSlash) {\r\n          start = index + 1\r\n          break\r\n        }\r\n      } else if (end < 0) {\r\n        // We saw the first non-path separator, mark this as the end of our\r\n        // path component.\r\n        seenNonSlash = true\r\n        end = index + 1\r\n      }\r\n    }\r\n\r\n    return end < 0 ? '' : path.slice(start, end)\r\n  }\r\n\r\n  if (extname === path) {\r\n    return ''\r\n  }\r\n\r\n  let firstNonSlashEnd = -1\r\n  let extnameIndex = extname.length - 1\r\n\r\n  while (index--) {\r\n    if (path.codePointAt(index) === 47 /* `/` */) {\r\n      // If we reached a path separator that was not part of a set of path\r\n      // separators at the end of the string, stop now.\r\n      if (seenNonSlash) {\r\n        start = index + 1\r\n        break\r\n      }\r\n    } else {\r\n      if (firstNonSlashEnd < 0) {\r\n        // We saw the first non-path separator, remember this index in case\r\n        // we need it if the extension ends up not matching.\r\n        seenNonSlash = true\r\n        firstNonSlashEnd = index + 1\r\n      }\r\n\r\n      if (extnameIndex > -1) {\r\n        // Try to match the explicit extension.\r\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\r\n          if (extnameIndex < 0) {\r\n            // We matched the extension, so mark this as the end of our path\r\n            // component\r\n            end = index\r\n          }\r\n        } else {\r\n          // Extension does not match, so our result is the entire path\r\n          // component\r\n          extnameIndex = -1\r\n          end = firstNonSlashEnd\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (start === end) {\r\n    end = firstNonSlashEnd\r\n  } else if (end < 0) {\r\n    end = path.length\r\n  }\r\n\r\n  return path.slice(start, end)\r\n}\r\n\r\n/**\r\n * Get the dirname from a path.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @returns {string}\r\n *   File path.\r\n */\r\nfunction dirname(path) {\r\n  assertPath(path)\r\n\r\n  if (path.length === 0) {\r\n    return '.'\r\n  }\r\n\r\n  let end = -1\r\n  let index = path.length\r\n  /** @type {boolean | undefined} */\r\n  let unmatchedSlash\r\n\r\n  // Prefix `--` is important to not run on `0`.\r\n  while (--index) {\r\n    if (path.codePointAt(index) === 47 /* `/` */) {\r\n      if (unmatchedSlash) {\r\n        end = index\r\n        break\r\n      }\r\n    } else if (!unmatchedSlash) {\r\n      // We saw the first non-path separator\r\n      unmatchedSlash = true\r\n    }\r\n  }\r\n\r\n  return end < 0\r\n    ? path.codePointAt(0) === 47 /* `/` */\r\n      ? '/'\r\n      : '.'\r\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\r\n      ? '//'\r\n      : path.slice(0, end)\r\n}\r\n\r\n/**\r\n * Get an extname from a path.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @returns {string}\r\n *   Extname.\r\n */\r\nfunction extname(path) {\r\n  assertPath(path)\r\n\r\n  let index = path.length\r\n\r\n  let end = -1\r\n  let startPart = 0\r\n  let startDot = -1\r\n  // Track the state of characters (if any) we see before our first dot and\r\n  // after any path separator we find.\r\n  let preDotState = 0\r\n  /** @type {boolean | undefined} */\r\n  let unmatchedSlash\r\n\r\n  while (index--) {\r\n    const code = path.codePointAt(index)\r\n\r\n    if (code === 47 /* `/` */) {\r\n      // If we reached a path separator that was not part of a set of path\r\n      // separators at the end of the string, stop now.\r\n      if (unmatchedSlash) {\r\n        startPart = index + 1\r\n        break\r\n      }\r\n\r\n      continue\r\n    }\r\n\r\n    if (end < 0) {\r\n      // We saw the first non-path separator, mark this as the end of our\r\n      // extension.\r\n      unmatchedSlash = true\r\n      end = index + 1\r\n    }\r\n\r\n    if (code === 46 /* `.` */) {\r\n      // If this is our first dot, mark it as the start of our extension.\r\n      if (startDot < 0) {\r\n        startDot = index\r\n      } else if (preDotState !== 1) {\r\n        preDotState = 1\r\n      }\r\n    } else if (startDot > -1) {\r\n      // We saw a non-dot and non-path separator before our dot, so we should\r\n      // have a good chance at having a non-empty extension.\r\n      preDotState = -1\r\n    }\r\n  }\r\n\r\n  if (\r\n    startDot < 0 ||\r\n    end < 0 ||\r\n    // We saw a non-dot character immediately before the dot.\r\n    preDotState === 0 ||\r\n    // The (right-most) trimmed path component is exactly `..`.\r\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\r\n  ) {\r\n    return ''\r\n  }\r\n\r\n  return path.slice(startDot, end)\r\n}\r\n\r\n/**\r\n * Join segments from a path.\r\n *\r\n * @param {Array<string>} segments\r\n *   Path segments.\r\n * @returns {string}\r\n *   File path.\r\n */\r\nfunction join(...segments) {\r\n  let index = -1\r\n  /** @type {string | undefined} */\r\n  let joined\r\n\r\n  while (++index < segments.length) {\r\n    assertPath(segments[index])\r\n\r\n    if (segments[index]) {\r\n      joined =\r\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\r\n    }\r\n  }\r\n\r\n  return joined === undefined ? '.' : normalize(joined)\r\n}\r\n\r\n/**\r\n * Normalize a basic file path.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @returns {string}\r\n *   File path.\r\n */\r\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\r\n// manually removed from it.\r\nfunction normalize(path) {\r\n  assertPath(path)\r\n\r\n  const absolute = path.codePointAt(0) === 47 /* `/` */\r\n\r\n  // Normalize the path according to POSIX rules.\r\n  let value = normalizeString(path, !absolute)\r\n\r\n  if (value.length === 0 && !absolute) {\r\n    value = '.'\r\n  }\r\n\r\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\r\n    value += '/'\r\n  }\r\n\r\n  return absolute ? '/' + value : value\r\n}\r\n\r\n/**\r\n * Resolve `.` and `..` elements in a path with directory names.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @param {boolean} allowAboveRoot\r\n *   Whether `..` can move above root.\r\n * @returns {string}\r\n *   File path.\r\n */\r\nfunction normalizeString(path, allowAboveRoot) {\r\n  let result = ''\r\n  let lastSegmentLength = 0\r\n  let lastSlash = -1\r\n  let dots = 0\r\n  let index = -1\r\n  /** @type {number | undefined} */\r\n  let code\r\n  /** @type {number} */\r\n  let lastSlashIndex\r\n\r\n  while (++index <= path.length) {\r\n    if (index < path.length) {\r\n      code = path.codePointAt(index)\r\n    } else if (code === 47 /* `/` */) {\r\n      break\r\n    } else {\r\n      code = 47 /* `/` */\r\n    }\r\n\r\n    if (code === 47 /* `/` */) {\r\n      if (lastSlash === index - 1 || dots === 1) {\r\n        // Empty.\r\n      } else if (lastSlash !== index - 1 && dots === 2) {\r\n        if (\r\n          result.length < 2 ||\r\n          lastSegmentLength !== 2 ||\r\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\r\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\r\n        ) {\r\n          if (result.length > 2) {\r\n            lastSlashIndex = result.lastIndexOf('/')\r\n\r\n            if (lastSlashIndex !== result.length - 1) {\r\n              if (lastSlashIndex < 0) {\r\n                result = ''\r\n                lastSegmentLength = 0\r\n              } else {\r\n                result = result.slice(0, lastSlashIndex)\r\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\r\n              }\r\n\r\n              lastSlash = index\r\n              dots = 0\r\n              continue\r\n            }\r\n          } else if (result.length > 0) {\r\n            result = ''\r\n            lastSegmentLength = 0\r\n            lastSlash = index\r\n            dots = 0\r\n            continue\r\n          }\r\n        }\r\n\r\n        if (allowAboveRoot) {\r\n          result = result.length > 0 ? result + '/..' : '..'\r\n          lastSegmentLength = 2\r\n        }\r\n      } else {\r\n        if (result.length > 0) {\r\n          result += '/' + path.slice(lastSlash + 1, index)\r\n        } else {\r\n          result = path.slice(lastSlash + 1, index)\r\n        }\r\n\r\n        lastSegmentLength = index - lastSlash - 1\r\n      }\r\n\r\n      lastSlash = index\r\n      dots = 0\r\n    } else if (code === 46 /* `.` */ && dots > -1) {\r\n      dots++\r\n    } else {\r\n      dots = -1\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Make sure `path` is a string.\r\n *\r\n * @param {string} path\r\n *   File path.\r\n * @returns {asserts path is string}\r\n *   Nothing.\r\n */\r\nfunction assertPath(path) {\r\n  if (typeof path !== 'string') {\r\n    throw new TypeError(\r\n      'Path must be a string. Received ' + JSON.stringify(path)\r\n    )\r\n  }\r\n}\r\n\r\n/* eslint-enable max-depth, complexity */\r\n", "// Somewhat based on:\r\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\r\n// But I don’t think one tiny line of code can be copyrighted. 😅\r\nexport const minproc = {cwd}\r\n\r\nfunction cwd() {\r\n  return '/'\r\n}\r\n", "/**\r\n * Checks if a value has the shape of a WHATWG URL object.\r\n *\r\n * Using a symbol or instanceof would not be able to recognize URL objects\r\n * coming from other implementations (e.g. in Electron), so instead we are\r\n * checking some well known properties for a lack of a better test.\r\n *\r\n * We use `href` and `protocol` as they are the only properties that are\r\n * easy to retrieve and calculate due to the lazy nature of the getters.\r\n *\r\n * We check for auth attribute to distinguish legacy url instance with\r\n * WHATWG URL instance.\r\n *\r\n * @param {unknown} fileUrlOrPath\r\n *   File path or URL.\r\n * @returns {fileUrlOrPath is URL}\r\n *   Whether it’s a URL.\r\n */\r\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\r\nexport function isUrl(fileUrlOrPath) {\r\n  return Boolean(\r\n    fileUrlOrPath !== null &&\r\n      typeof fileUrlOrPath === 'object' &&\r\n      'href' in fileUrlOrPath &&\r\n      fileUrlOrPath.href &&\r\n      'protocol' in fileUrlOrPath &&\r\n      fileUrlOrPath.protocol &&\r\n      // @ts-expect-error: indexing is fine.\r\n      fileUrlOrPath.auth === undefined\r\n  )\r\n}\r\n", "import {isUrl} from './minurl.shared.js'\r\n\r\nexport {isUrl} from './minurl.shared.js'\r\n\r\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\r\n\r\n/**\r\n * @param {URL | string} path\r\n *   File URL.\r\n * @returns {string}\r\n *   File URL.\r\n */\r\nexport function urlToPath(path) {\r\n  if (typeof path === 'string') {\r\n    path = new URL(path)\r\n  } else if (!isUrl(path)) {\r\n    /** @type {NodeJS.ErrnoException} */\r\n    const error = new TypeError(\r\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\r\n        path +\r\n        '`'\r\n    )\r\n    error.code = 'ERR_INVALID_ARG_TYPE'\r\n    throw error\r\n  }\r\n\r\n  if (path.protocol !== 'file:') {\r\n    /** @type {NodeJS.ErrnoException} */\r\n    const error = new TypeError('The URL must be of scheme file')\r\n    error.code = 'ERR_INVALID_URL_SCHEME'\r\n    throw error\r\n  }\r\n\r\n  return getPathFromURLPosix(path)\r\n}\r\n\r\n/**\r\n * Get a path from a POSIX URL.\r\n *\r\n * @param {URL} url\r\n *   URL.\r\n * @returns {string}\r\n *   File path.\r\n */\r\nfunction getPathFromURLPosix(url) {\r\n  if (url.hostname !== '') {\r\n    /** @type {NodeJS.ErrnoException} */\r\n    const error = new TypeError(\r\n      'File URL host must be \"localhost\" or empty on darwin'\r\n    )\r\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\r\n    throw error\r\n  }\r\n\r\n  const pathname = url.pathname\r\n  let index = -1\r\n\r\n  while (++index < pathname.length) {\r\n    if (\r\n      pathname.codePointAt(index) === 37 /* `%` */ &&\r\n      pathname.codePointAt(index + 1) === 50 /* `2` */\r\n    ) {\r\n      const third = pathname.codePointAt(index + 2)\r\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\r\n        /** @type {NodeJS.ErrnoException} */\r\n        const error = new TypeError(\r\n          'File URL path must not include encoded / characters'\r\n        )\r\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\r\n        throw error\r\n      }\r\n    }\r\n  }\r\n\r\n  return decodeURIComponent(pathname)\r\n}\r\n", "/**\r\n * @import {Node, Point, Position} from 'unist'\r\n * @import {Options as MessageOptions} from 'vfile-message'\r\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\r\n */\r\n\r\n/**\r\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\r\n */\r\n\r\nimport {VFileMessage} from 'vfile-message'\r\nimport {minpath} from '#minpath'\r\nimport {minproc} from '#minproc'\r\nimport {urlToPath, isUrl} from '#minurl'\r\n\r\n/**\r\n * Order of setting (least specific to most), we need this because otherwise\r\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\r\n * stem can be set.\r\n */\r\nconst order = /** @type {const} */ ([\r\n  'history',\r\n  'path',\r\n  'basename',\r\n  'stem',\r\n  'extname',\r\n  'dirname'\r\n])\r\n\r\nexport class VFile {\r\n  /**\r\n   * Create a new virtual file.\r\n   *\r\n   * `options` is treated as:\r\n   *\r\n   * *   `string` or `Uint8Array` — `{value: options}`\r\n   * *   `URL` — `{path: options}`\r\n   * *   `VFile` — shallow copies its data over to the new file\r\n   * *   `object` — all fields are shallow copied over to the new file\r\n   *\r\n   * Path related fields are set in the following order (least specific to\r\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\r\n   * `dirname`.\r\n   *\r\n   * You cannot set `dirname` or `extname` without setting either `history`,\r\n   * `path`, `basename`, or `stem` too.\r\n   *\r\n   * @param {Compatible | null | undefined} [value]\r\n   *   File value.\r\n   * @returns\r\n   *   New instance.\r\n   */\r\n  constructor(value) {\r\n    /** @type {Options | VFile} */\r\n    let options\r\n\r\n    if (!value) {\r\n      options = {}\r\n    } else if (isUrl(value)) {\r\n      options = {path: value}\r\n    } else if (typeof value === 'string' || isUint8Array(value)) {\r\n      options = {value}\r\n    } else {\r\n      options = value\r\n    }\r\n\r\n    /* eslint-disable no-unused-expressions */\r\n\r\n    /**\r\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\r\n     *\r\n     * @type {string}\r\n     */\r\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\r\n    // the empty string will be overridden in the next block.\r\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\r\n\r\n    /**\r\n     * Place to store custom info (default: `{}`).\r\n     *\r\n     * It’s OK to store custom data directly on the file but moving it to\r\n     * `data` is recommended.\r\n     *\r\n     * @type {Data}\r\n     */\r\n    this.data = {}\r\n\r\n    /**\r\n     * List of file paths the file moved between.\r\n     *\r\n     * The first is the original path and the last is the current path.\r\n     *\r\n     * @type {Array<string>}\r\n     */\r\n    this.history = []\r\n\r\n    /**\r\n     * List of messages associated with the file.\r\n     *\r\n     * @type {Array<VFileMessage>}\r\n     */\r\n    this.messages = []\r\n\r\n    /**\r\n     * Raw value.\r\n     *\r\n     * @type {Value}\r\n     */\r\n    this.value\r\n\r\n    // The below are non-standard, they are “well-known”.\r\n    // As in, used in several tools.\r\n    /**\r\n     * Source map.\r\n     *\r\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\r\n     * module.\r\n     *\r\n     * @type {Map | null | undefined}\r\n     */\r\n    this.map\r\n\r\n    /**\r\n     * Custom, non-string, compiled, representation.\r\n     *\r\n     * This is used by unified to store non-string results.\r\n     * One example is when turning markdown into React nodes.\r\n     *\r\n     * @type {unknown}\r\n     */\r\n    this.result\r\n\r\n    /**\r\n     * Whether a file was saved to disk.\r\n     *\r\n     * This is used by vfile reporters.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    this.stored\r\n    /* eslint-enable no-unused-expressions */\r\n\r\n    // Set path related properties in the correct order.\r\n    let index = -1\r\n\r\n    while (++index < order.length) {\r\n      const field = order[index]\r\n\r\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\r\n      // `vfile`s too.\r\n      if (\r\n        field in options &&\r\n        options[field] !== undefined &&\r\n        options[field] !== null\r\n      ) {\r\n        // @ts-expect-error: TS doesn’t understand basic reality.\r\n        this[field] = field === 'history' ? [...options[field]] : options[field]\r\n      }\r\n    }\r\n\r\n    /** @type {string} */\r\n    let field\r\n\r\n    // Set non-path related properties.\r\n    for (field in options) {\r\n      // @ts-expect-error: fine to set other things.\r\n      if (!order.includes(field)) {\r\n        // @ts-expect-error: fine to set other things.\r\n        this[field] = options[field]\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the basename (including extname) (example: `'index.min.js'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Basename.\r\n   */\r\n  get basename() {\r\n    return typeof this.path === 'string'\r\n      ? minpath.basename(this.path)\r\n      : undefined\r\n  }\r\n\r\n  /**\r\n   * Set basename (including extname) (`'index.min.js'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be nullified (use `file.path = file.dirname` instead).\r\n   *\r\n   * @param {string} basename\r\n   *   Basename.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set basename(basename) {\r\n    assertNonEmpty(basename, 'basename')\r\n    assertPart(basename, 'basename')\r\n    this.path = minpath.join(this.dirname || '', basename)\r\n  }\r\n\r\n  /**\r\n   * Get the parent path (example: `'~'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Dirname.\r\n   */\r\n  get dirname() {\r\n    return typeof this.path === 'string'\r\n      ? minpath.dirname(this.path)\r\n      : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the parent path (example: `'~'`).\r\n   *\r\n   * Cannot be set if there’s no `path` yet.\r\n   *\r\n   * @param {string | undefined} dirname\r\n   *   Dirname.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set dirname(dirname) {\r\n    assertPath(this.basename, 'dirname')\r\n    this.path = minpath.join(dirname || '', this.basename)\r\n  }\r\n\r\n  /**\r\n   * Get the extname (including dot) (example: `'.js'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Extname.\r\n   */\r\n  get extname() {\r\n    return typeof this.path === 'string'\r\n      ? minpath.extname(this.path)\r\n      : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the extname (including dot) (example: `'.js'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be set if there’s no `path` yet.\r\n   *\r\n   * @param {string | undefined} extname\r\n   *   Extname.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set extname(extname) {\r\n    assertPart(extname, 'extname')\r\n    assertPath(this.dirname, 'extname')\r\n\r\n    if (extname) {\r\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\r\n        throw new Error('`extname` must start with `.`')\r\n      }\r\n\r\n      if (extname.includes('.', 1)) {\r\n        throw new Error('`extname` cannot contain multiple dots')\r\n      }\r\n    }\r\n\r\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\r\n  }\r\n\r\n  /**\r\n   * Get the full path (example: `'~/index.min.js'`).\r\n   *\r\n   * @returns {string}\r\n   *   Path.\r\n   */\r\n  get path() {\r\n    return this.history[this.history.length - 1]\r\n  }\r\n\r\n  /**\r\n   * Set the full path (example: `'~/index.min.js'`).\r\n   *\r\n   * Cannot be nullified.\r\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\r\n   * be turned into a path with `url.fileURLToPath`.\r\n   *\r\n   * @param {URL | string} path\r\n   *   Path.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set path(path) {\r\n    if (isUrl(path)) {\r\n      path = urlToPath(path)\r\n    }\r\n\r\n    assertNonEmpty(path, 'path')\r\n\r\n    if (this.path !== path) {\r\n      this.history.push(path)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\r\n   *\r\n   * @returns {string | undefined}\r\n   *   Stem.\r\n   */\r\n  get stem() {\r\n    return typeof this.path === 'string'\r\n      ? minpath.basename(this.path, this.extname)\r\n      : undefined\r\n  }\r\n\r\n  /**\r\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\r\n   *\r\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\r\n   * on windows).\r\n   * Cannot be nullified (use `file.path = file.dirname` instead).\r\n   *\r\n   * @param {string} stem\r\n   *   Stem.\r\n   * @returns {undefined}\r\n   *   Nothing.\r\n   */\r\n  set stem(stem) {\r\n    assertNonEmpty(stem, 'stem')\r\n    assertPart(stem, 'stem')\r\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\r\n  }\r\n\r\n  // Normal prototypal methods.\r\n  /**\r\n   * Create a fatal message for `reason` associated with the file.\r\n   *\r\n   * The `fatal` field of the message is set to `true` (error; file not usable)\r\n   * and the `file` field is set to the current file path.\r\n   * The message is added to the `messages` field on `file`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {MessageOptions | null | undefined} [options]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {never}\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {never}\r\n   *   Never.\r\n   * @throws {VFileMessage}\r\n   *   Message.\r\n   */\r\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\r\n    // @ts-expect-error: the overloads are fine.\r\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\r\n\r\n    message.fatal = true\r\n\r\n    throw message\r\n  }\r\n\r\n  /**\r\n   * Create an info message for `reason` associated with the file.\r\n   *\r\n   * The `fatal` field of the message is set to `undefined` (info; change\r\n   * likely not needed) and the `file` field is set to the current file path.\r\n   * The message is added to the `messages` field on `file`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {MessageOptions | null | undefined} [options]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {VFileMessage}\r\n   *   Message.\r\n   */\r\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\r\n    // @ts-expect-error: the overloads are fine.\r\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\r\n\r\n    message.fatal = undefined\r\n\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Create a message for `reason` associated with the file.\r\n   *\r\n   * The `fatal` field of the message is set to `false` (warning; change may be\r\n   * needed) and the `file` field is set to the current file path.\r\n   * The message is added to the `messages` field on `file`.\r\n   *\r\n   * > 🪦 **Note**: also has obsolete signatures.\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {MessageOptions | null | undefined} [options]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {string} reason\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Node | NodeLike | null | undefined} parent\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {Point | Position | null | undefined} place\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @overload\r\n   * @param {Error | VFileMessage} cause\r\n   * @param {string | null | undefined} [origin]\r\n   * @returns {VFileMessage}\r\n   *\r\n   * @param {Error | VFileMessage | string} causeOrReason\r\n   *   Reason for message, should use markdown.\r\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\r\n   *   Configuration (optional).\r\n   * @param {string | null | undefined} [origin]\r\n   *   Place in code where the message originates (example:\r\n   *   `'my-package:my-rule'` or `'my-rule'`).\r\n   * @returns {VFileMessage}\r\n   *   Message.\r\n   */\r\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\r\n    const message = new VFileMessage(\r\n      // @ts-expect-error: the overloads are fine.\r\n      causeOrReason,\r\n      optionsOrParentOrPlace,\r\n      origin\r\n    )\r\n\r\n    if (this.path) {\r\n      message.name = this.path + ':' + message.name\r\n      message.file = this.path\r\n    }\r\n\r\n    message.fatal = false\r\n\r\n    this.messages.push(message)\r\n\r\n    return message\r\n  }\r\n\r\n  /**\r\n   * Serialize the file.\r\n   *\r\n   * > **Note**: which encodings are supported depends on the engine.\r\n   * > For info on Node.js, see:\r\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\r\n   *\r\n   * @param {string | null | undefined} [encoding='utf8']\r\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\r\n   *   (default: `'utf-8'`).\r\n   * @returns {string}\r\n   *   Serialized file.\r\n   */\r\n  toString(encoding) {\r\n    if (this.value === undefined) {\r\n      return ''\r\n    }\r\n\r\n    if (typeof this.value === 'string') {\r\n      return this.value\r\n    }\r\n\r\n    const decoder = new TextDecoder(encoding || undefined)\r\n    return decoder.decode(this.value)\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\r\n *\r\n * @param {string | null | undefined} part\r\n *   File path part.\r\n * @param {string} name\r\n *   Part name.\r\n * @returns {undefined}\r\n *   Nothing.\r\n */\r\nfunction assertPart(part, name) {\r\n  if (part && part.includes(minpath.sep)) {\r\n    throw new Error(\r\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that `part` is not empty.\r\n *\r\n * @param {string | undefined} part\r\n *   Thing.\r\n * @param {string} name\r\n *   Part name.\r\n * @returns {asserts part is string}\r\n *   Nothing.\r\n */\r\nfunction assertNonEmpty(part, name) {\r\n  if (!part) {\r\n    throw new Error('`' + name + '` cannot be empty')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert `path` exists.\r\n *\r\n * @param {string | undefined} path\r\n *   Path.\r\n * @param {string} name\r\n *   Dependency name.\r\n * @returns {asserts path is string}\r\n *   Nothing.\r\n */\r\nfunction assertPath(path, name) {\r\n  if (!path) {\r\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\r\n  }\r\n}\r\n\r\n/**\r\n * Assert `value` is an `Uint8Array`.\r\n *\r\n * @param {unknown} value\r\n *   thing.\r\n * @returns {value is Uint8Array}\r\n *   Whether `value` is an `Uint8Array`.\r\n */\r\nfunction isUint8Array(value) {\r\n  return Boolean(\r\n    value &&\r\n      typeof value === 'object' &&\r\n      'byteLength' in value &&\r\n      'byteOffset' in value\r\n  )\r\n}\r\n", "export const CallableInstance =\r\n  /**\r\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\r\n   */\r\n  (\r\n    /** @type {unknown} */\r\n    (\r\n      /**\r\n       * @this {Function}\r\n       * @param {string | symbol} property\r\n       * @returns {(...parameters: Array<unknown>) => unknown}\r\n       */\r\n      function (property) {\r\n        const self = this\r\n        const constr = self.constructor\r\n        const proto = /** @type {Record<string | symbol, Function>} */ (\r\n          // Prototypes do exist.\r\n          // type-coverage:ignore-next-line\r\n          constr.prototype\r\n        )\r\n        const value = proto[property]\r\n        /** @type {(...parameters: Array<unknown>) => unknown} */\r\n        const apply = function () {\r\n          return value.apply(apply, arguments)\r\n        }\r\n\r\n        Object.setPrototypeOf(apply, proto)\r\n\r\n        // Not needed for us in `unified`: we only call this on the `copy`\r\n        // function,\r\n        // and we don't need to add its fields (`length`, `name`)\r\n        // over.\r\n        // See also: GH-246.\r\n        // const names = Object.getOwnPropertyNames(value)\r\n        //\r\n        // for (const p of names) {\r\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\r\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\r\n        // }\r\n\r\n        return apply\r\n      }\r\n    )\r\n  )\r\n", "import { stackOverFlow } from '@milkdown/exception'\n\n/// The element of the stack, which holds an array of nodes.\nexport abstract class StackElement<Node> {\n  /// A method that can `push` a node into the element.\n  abstract push(node: Node, ...rest: Node[]): void\n}\n\n/// The stack that is used to store the elements.\n///\n/// > Generally, you don't need to use this class directly.\n///\n/// When using the stack, users can call `stack.open` to push a new element into the stack.\n/// And use `stack.push` to push a node into the top element.\n/// Then use `stack.close` to close the top element and pop it.\n///\n/// For example: `stack.open(A).push(B).push(C).close()` will generate a structure like `A(B, C)`.\nexport class Stack<Node, Element extends StackElement<Node>> {\n  protected elements: Element[] = []\n\n  /// Get the size of the stack.\n  size = (): number => {\n    return this.elements.length\n  }\n\n  /// Get the top element of the stack.\n  top = (): Element | undefined => {\n    return this.elements.at(-1)\n  }\n\n  /// Push a node into the top element.\n  push = (node: Node): void => {\n    this.top()?.push(node)\n  }\n\n  /// Push a new element.\n  open = (node: Element): void => {\n    this.elements.push(node)\n  }\n\n  /// Close the top element and pop it.\n  close = (): Element => {\n    const el = this.elements.pop()\n    if (!el)\n      throw stackOverFlow()\n\n    return el\n  }\n}\n", "import type { Attrs, Node, NodeType } from '@milkdown/prose/model'\nimport { StackElement } from '../utility'\n\nexport class ParserStackElement extends StackElement<Node> {\n  constructor(public type: NodeType, public content: Node[], public attrs?: Attrs) {\n    super()\n  }\n\n  push(node: Node, ...rest: Node[]) {\n    this.content.push(node, ...rest)\n  }\n\n  pop(): Node | undefined {\n    return this.content.pop()\n  }\n\n  static create(type: NodeType, content: Node[], attrs?: Attrs) {\n    return new ParserStackElement(type, content, attrs)\n  }\n}\n", "import type { Attrs, MarkType, Node, NodeType, Schema } from '@milkdown/prose/model'\nimport { createNodeInParserFail, parserMatchError, stackOverFlow } from '@milkdown/exception'\nimport { Mark } from '@milkdown/prose/model'\nimport type { MarkSchema, MarkdownNode, NodeSchema, RemarkParser } from '../utility'\nimport { Stack } from '../utility'\n\nimport { ParserStackElement } from './stack-element'\nimport type { Parser } from './types'\n\n/// A state machine for parser. Transform remark AST into prosemirror state.\nexport class ParserState extends Stack<Node, ParserStackElement> {\n  /// The schema in current editor.\n  readonly schema: Schema\n\n  /// @internal\n  #marks: readonly Mark[] = Mark.none\n\n  /// Create a parser from schema and remark instance.\n  ///\n  /// ```typescript\n  /// const parser = ParserState.create(schema, remark)\n  /// const prosemirrorNode = parser(SomeMarkdownText)\n  /// ```\n  static create = (schema: Schema, remark: RemarkParser): Parser => {\n    const state = new this(schema)\n    return (text) => {\n      state.run(remark, text)\n      return state.toDoc()\n    }\n  }\n\n  /// @internal\n  protected constructor(schema: Schema) {\n    super()\n    this.schema = schema\n  }\n\n  /// @internal\n  #hasText = (node: Node): node is Node & { text: string } => node.isText\n\n  /// @internal\n  #maybeMerge = (a: Node, b: Node): Node | undefined => {\n    if (this.#hasText(a) && this.#hasText(b) && Mark.sameSet(a.marks, b.marks))\n      return this.schema.text(a.text + b.text, a.marks)\n\n    return undefined\n  }\n\n  /// @internal\n  #matchTarget = (node: MarkdownNode): NodeType | MarkType => {\n    const result = Object.values({ ...this.schema.nodes, ...this.schema.marks })\n      .find((x): x is (NodeType | MarkType) => {\n        const spec = x.spec as NodeSchema | MarkSchema\n        return spec.parseMarkdown.match(node)\n      })\n\n    if (!result)\n      throw parserMatchError(node)\n\n    return result\n  }\n\n  /// @internal\n  #runNode = (node: MarkdownNode) => {\n    const type = this.#matchTarget(node)\n    const spec = type.spec as NodeSchema | MarkSchema\n\n    spec.parseMarkdown.runner(this, node, type as NodeType & MarkType)\n  }\n\n  /// Inject root node for prosemirror state.\n  injectRoot = (node: MarkdownNode, nodeType: NodeType, attrs?: Attrs) => {\n    this.openNode(nodeType, attrs)\n    this.next(node.children)\n\n    return this\n  }\n\n  /// Open a new node, the next operations will\n  /// add nodes into that new node until `closeNode` is called.\n  openNode = (nodeType: NodeType, attrs?: Attrs) => {\n    this.open(ParserStackElement.create(nodeType, [], attrs))\n    return this\n  }\n\n  /// @internal\n  #closeNodeAndPush = (): Node => {\n    this.#marks = Mark.none\n    const element = this.close()\n\n    return this.#addNodeAndPush(element.type, element.attrs, element.content)\n  }\n\n  /// Close the current node and push it into the parent node.\n  closeNode = () => {\n    this.#closeNodeAndPush()\n    return this\n  }\n\n  /// @internal\n  #addNodeAndPush = (nodeType: NodeType, attrs?: Attrs, content?: Node[]): Node => {\n    const node = nodeType.createAndFill(attrs, content, this.#marks)\n    if (!node)\n      throw createNodeInParserFail(nodeType, attrs, content)\n\n    this.push(node)\n\n    return node\n  }\n\n  /// Add a node into current node.\n  addNode = (nodeType: NodeType, attrs?: Attrs, content?: Node[]) => {\n    this.#addNodeAndPush(nodeType, attrs, content)\n    return this\n  }\n\n  /// Open a new mark, the next nodes added will have that mark.\n  openMark = (markType: MarkType, attrs?: Attrs) => {\n    const mark = markType.create(attrs)\n\n    this.#marks = mark.addToSet(this.#marks)\n    return this\n  }\n\n  /// Close a opened mark.\n  closeMark = (markType: MarkType) => {\n    this.#marks = markType.removeFromSet(this.#marks)\n    return this\n  }\n\n  /// Add a text node into current node.\n  addText = (text: string) => {\n    const topElement = this.top()\n    if (!topElement)\n      throw stackOverFlow()\n\n    const prevNode = topElement.pop()\n    const currNode = this.schema.text(text, this.#marks)\n\n    if (!prevNode) {\n      topElement.push(currNode)\n      return this\n    }\n\n    const merged = this.#maybeMerge(prevNode, currNode)\n    if (merged) {\n      topElement.push(merged)\n      return this\n    }\n    topElement.push(prevNode, currNode)\n    return this\n  }\n\n  /// @internal\n  build = (): Node => {\n    let doc: Node | undefined\n\n    do\n      doc = this.#closeNodeAndPush()\n    while (this.size())\n\n    return doc\n  }\n\n  /// Give the node or node list back to the state and\n  /// the state will find a proper runner (by `match` method in parser spec) to handle it.\n  next = (nodes: MarkdownNode | MarkdownNode[] = []) => {\n    [nodes].flat().forEach(node => this.#runNode(node))\n    return this\n  }\n\n  /// Build the current state into a [prosemirror document](https://prosemirror.net/docs/ref/#model.Document_Structure).\n  toDoc = () => this.build()\n\n  /// Transform a markdown string into prosemirror state.\n  run = (remark: RemarkParser, markdown: string) => {\n    const tree = remark.runSync(remark.parse(markdown), markdown) as MarkdownNode\n    this.next(tree)\n\n    return this\n  }\n}\n", "import type { MarkdownNode } from '..'\nimport type { JSONRecord } from '../utility'\nimport { StackElement } from '../utility'\n\nexport class SerializerStackElement extends StackElement<MarkdownNode> {\n  constructor(\n    public type: string,\n    public children?: MarkdownNode[],\n    public value?: string,\n    public props: JSONRecord = {},\n  ) {\n    super()\n  }\n\n  static create = (\n    type: string,\n    children?: MarkdownNode[],\n    value?: string,\n    props: JSONRecord = {},\n  ) => new SerializerStackElement(type, children, value, props)\n\n  push = (node: MarkdownNode, ...rest: MarkdownNode[]) => {\n    if (!this.children)\n      this.children = []\n\n    this.children.push(node, ...rest)\n  }\n\n  pop = (): MarkdownNode | undefined => this.children?.pop()\n}\n", "import { serializerMatchError } from '@milkdown/exception'\nimport type { Fragment, MarkType, Node, NodeType, Schema } from '@milkdown/prose/model'\nimport { Mark } from '@milkdown/prose/model'\n\nimport type { JSONRecord, MarkSchema, MarkdownNode, NodeSchema, RemarkParser, Root } from '../utility'\nimport { Stack } from '../utility'\nimport { SerializerStackElement } from './stack-element'\nimport type { Serializer } from './types'\n\nconst isFragment = (x: Node | Fragment): x is Fragment => Object.prototype.hasOwnProperty.call(x, 'size')\n\n/// State for serializer.\n/// Transform prosemirror state into remark AST.\nexport class SerializerState extends Stack<MarkdownNode, SerializerStackElement> {\n  /// @internal\n  #marks: readonly Mark[] = Mark.none\n  /// Get the schema of state.\n  readonly schema: Schema\n\n  /// Create a serializer from schema and remark instance.\n  ///\n  /// ```typescript\n  /// const serializer = SerializerState.create(schema, remark)\n  /// const markdown = parser(prosemirrorDoc)\n  /// ```\n  static create = (schema: Schema, remark: RemarkParser): Serializer => {\n    const state = new this(schema)\n    return (content: Node) => {\n      state.run(content)\n      return state.toString(remark)\n    }\n  }\n\n  /// @internal\n  constructor(schema: Schema) {\n    super()\n    this.schema = schema\n  }\n\n  /// @internal\n  #matchTarget = (node: Node | Mark): NodeType | MarkType => {\n    const result = Object.values({ ...this.schema.nodes, ...this.schema.marks })\n      .find((x): x is (NodeType | MarkType) => {\n        const spec = x.spec as NodeSchema | MarkSchema\n        return spec.toMarkdown.match(node as Node & Mark)\n      })\n\n    if (!result)\n      throw serializerMatchError(node.type)\n\n    return result\n  }\n\n  /// @internal\n  #runProseNode = (node: Node) => {\n    const type = this.#matchTarget(node)\n    const spec = type.spec as NodeSchema\n    return spec.toMarkdown.runner(this, node)\n  }\n\n  /// @internal\n  #runProseMark = (mark: Mark, node: Node) => {\n    const type = this.#matchTarget(mark)\n    const spec = type.spec as MarkSchema\n    return spec.toMarkdown.runner(this, mark, node)\n  }\n\n  /// @internal\n  #runNode = (node: Node) => {\n    const { marks } = node\n    const getPriority = (x: Mark) => x.type.spec.priority ?? 50\n    const tmp = [...marks].sort((a, b) => getPriority(a) - getPriority(b))\n    const unPreventNext = tmp.every(mark => !this.#runProseMark(mark, node))\n    if (unPreventNext)\n      this.#runProseNode(node)\n\n    marks.forEach(mark => this.#closeMark(mark))\n  }\n\n  /// @internal\n  #searchType = (child: MarkdownNode, type: string): MarkdownNode => {\n    if (child.type === type)\n      return child\n\n    if (child.children?.length !== 1)\n      return child\n\n    const searchNode = (node: MarkdownNode): MarkdownNode | null => {\n      if (node.type === type)\n        return node\n\n      if (node.children?.length !== 1)\n        return null\n\n      const [firstChild] = node.children\n      if (!firstChild)\n        return null\n\n      return searchNode(firstChild)\n    }\n\n    const target = searchNode(child)\n\n    if (!target)\n      return child\n\n    const tmp = target.children ? [...target.children] : undefined\n    const node = { ...child, children: tmp }\n    node.children = tmp\n    target.children = [node]\n\n    return target\n  }\n\n  /// @internal\n  #maybeMergeChildren = (node: MarkdownNode): MarkdownNode => {\n    const { children } = node\n    if (!children)\n      return node\n\n    node.children = children.reduce((nextChildren, child, index) => {\n      if (index === 0)\n        return [child]\n\n      const last = nextChildren.at(-1)\n      if (last && last.isMark && child.isMark) {\n        child = this.#searchType(child, last.type)\n        const { children: currChildren, ...currRest } = child\n        const { children: prevChildren, ...prevRest } = last\n        if (\n          child.type === last.type\n          && currChildren\n          && prevChildren\n          && JSON.stringify(currRest) === JSON.stringify(prevRest)\n        ) {\n          const next = {\n            ...prevRest,\n            children: [...prevChildren, ...currChildren],\n          }\n          return nextChildren\n            .slice(0, -1)\n            .concat(this.#maybeMergeChildren(next))\n        }\n      }\n      return nextChildren.concat(child)\n    }, [] as MarkdownNode[])\n\n    return node\n  }\n\n  /// @internal\n  #createMarkdownNode = (element: SerializerStackElement) => {\n    const node: MarkdownNode = {\n      ...element.props,\n      type: element.type,\n    }\n\n    if (element.children)\n      node.children = element.children\n\n    if (element.value)\n      node.value = element.value\n\n    return node\n  }\n\n  /// Open a new node, the next operations will\n  /// add nodes into that new node until `closeNode` is called.\n  openNode = (type: string, value?: string, props?: JSONRecord) => {\n    this.open(SerializerStackElement.create(type, undefined, value, props))\n    return this\n  }\n\n  #moveSpaces = (element: SerializerStackElement, onPush: () => MarkdownNode) => {\n    let startSpaces = ''\n    let endSpaces = ''\n    const children = element.children\n    let first = -1\n    let last = -1\n    const findIndex = (node: MarkdownNode[]) => {\n      if (!node)\n        return\n      node.forEach((child, index) => {\n        if (child.type === 'text' && child.value) {\n          if (first < 0)\n            first = index\n\n          last = index\n        }\n      })\n    }\n\n    if (children) {\n      findIndex(children)\n      const lastChild = children?.[last] as MarkdownNode & { value: string } | undefined\n      const firstChild = children?.[first] as MarkdownNode & { value: string } | undefined\n      if (lastChild && lastChild.value.endsWith(' ')) {\n        endSpaces = lastChild.value.match(/ +$/)![0]\n        lastChild.value = lastChild.value.trimEnd()\n      }\n      if (firstChild && firstChild.value.startsWith(' ')) {\n        startSpaces = firstChild.value.match(/^ +/)![0]\n        firstChild.value = firstChild.value.trimStart()\n      }\n    }\n\n    if (startSpaces.length)\n      this.#addNodeAndPush('text', undefined, startSpaces)\n\n    const result = onPush()\n\n    if (endSpaces.length)\n      this.#addNodeAndPush('text', undefined, endSpaces)\n\n    return result\n  }\n\n  /// @internal\n  #closeNodeAndPush = (trim: boolean = false): MarkdownNode => {\n    const element = this.close()\n\n    const onPush = () => this.#addNodeAndPush(element.type, element.children, element.value, element.props)\n\n    if (trim)\n      return this.#moveSpaces(element, onPush)\n\n    return onPush()\n  }\n\n  /// Close the current node and push it into the parent node.\n  closeNode = () => {\n    this.#closeNodeAndPush()\n    return this\n  }\n\n  /// @internal\n  #addNodeAndPush = (type: string, children?: MarkdownNode[], value?: string, props?: JSONRecord): MarkdownNode => {\n    const element = SerializerStackElement.create(type, children, value, props)\n    const node: MarkdownNode = this.#maybeMergeChildren(this.#createMarkdownNode(element))\n    this.push(node)\n    return node\n  }\n\n  /// Add a node into current node.\n  addNode = (type: string, children?: MarkdownNode[], value?: string, props?: JSONRecord) => {\n    this.#addNodeAndPush(type, children, value, props)\n    return this\n  }\n\n  /// @internal\n  #openMark = (mark: Mark, type: string, value?: string, props?: JSONRecord) => {\n    const isIn = mark.isInSet(this.#marks)\n\n    if (isIn)\n      return this\n\n    this.#marks = mark.addToSet(this.#marks)\n    return this.openNode(type, value, { ...props, isMark: true })\n  }\n\n  /// @internal\n  #closeMark = (mark: Mark): void => {\n    const isIn = mark.isInSet(this.#marks)\n\n    if (!isIn)\n      return\n\n    this.#marks = mark.type.removeFromSet(this.#marks)\n    this.#closeNodeAndPush(true)\n  }\n\n  /// Open a new mark, the next nodes added will have that mark.\n  /// The mark will be closed automatically.\n  withMark = (mark: Mark, type: string, value?: string, props?: JSONRecord) => {\n    this.#openMark(mark, type, value, props)\n    return this\n  }\n\n  /// Close a opened mark.\n  /// In most cases you don't need this because\n  /// marks will be closed automatically.\n  closeMark = (mark: Mark) => {\n    this.#closeMark(mark)\n    return this\n  }\n\n  /// @internal\n  build = (): MarkdownNode => {\n    let doc: MarkdownNode | null = null\n    do\n      doc = this.#closeNodeAndPush()\n    while (this.size())\n\n    return doc\n  }\n\n  /// Give the node or node list back to the state and\n  /// the state will find a proper runner (by `match` method in serializer spec) to handle it.\n  next = (nodes: Node | Fragment) => {\n    if (isFragment(nodes)) {\n      nodes.forEach((node) => {\n        this.#runNode(node)\n      })\n      return this\n    }\n    this.#runNode(nodes)\n    return this\n  }\n\n  /// Use a remark parser to serialize current AST stored.\n  override toString = (remark: RemarkParser): string => remark.stringify(this.build() as Root)\n\n  /// Transform a prosemirror node tree into remark AST.\n  run = (tree: Node) => {\n    this.next(tree)\n\n    return this\n  }\n}\n", "/**\n * Copy paste from:\n * https://github.com/ProseMirror/prosemirror-view/blob/master/src/browser.ts\n */\n\nconst nav = typeof navigator != 'undefined' ? navigator : null\nconst doc = typeof document != 'undefined' ? document : null\nconst agent = (nav && nav.userAgent) || ''\n\nconst ie_edge = /Edge\\/(\\d+)/.exec(agent)\nconst ie_upto10 = /MSIE \\d/.exec(agent)\nconst ie_11up = /Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(agent)\n\nexport const ie = !!(ie_upto10 || ie_11up || ie_edge)\nexport const ie_version = ie_upto10\n  ? (document as typeof document & { documentMode: unknown }).documentMode\n  : ie_11up\n    ? +ie_11up[1]!\n    : ie_edge\n      ? +ie_edge[1]!\n      : 0\nexport const gecko = !ie && /gecko\\/(\\d+)/i.test(agent)\nexport const gecko_version = gecko && +(/Firefox\\/(\\d+)/.exec(agent) || [0, 0])[1]\n\nconst _chrome = !ie && /Chrome\\/(\\d+)/.exec(agent)\nexport const chrome = !!_chrome\nexport const chrome_version = _chrome ? +_chrome[1]! : 0\nexport const safari = !ie && !!nav && /Apple Computer/.test(nav.vendor)\n// Is true for both iOS and iPadOS for convenience\nexport const ios = safari && (/Mobile\\/\\w+/.test(agent) || (!!nav && nav.maxTouchPoints > 2))\nexport const mac = ios || (nav ? /Mac/.test(nav.platform) : false)\nexport const android = /Android \\d/.test(agent)\nexport const webkit = !!doc && 'webkitFontSmoothing' in doc.documentElement.style\nexport const webkit_version = webkit ? +(/\\bAppleWebKit\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0\n", "import type { InputRule } from '../../inputrules'\nimport type { EditorState, TextSelection, Transaction } from '../../state'\nimport { Plugin, PluginKey } from '../../state'\nimport type { EditorView } from '../../view'\n\nfunction run(view: EditorView, from: number, to: number, text: string, rules: InputRule[], plugin: Plugin) {\n  if (view.composing)\n    return false\n  const state = view.state\n  const $from = state.doc.resolve(from)\n  if ($from.parent.type.spec.code)\n    return false\n  const textBefore\n        = $from.parent.textBetween(Math.max(0, $from.parentOffset - 500), $from.parentOffset, undefined, '\\uFFFC') + text\n  for (let i = 0; i < rules.length; i++) {\n    const match = (rules[i] as { match: RegExp }).match.exec(textBefore)\n    const tr\n            = match\n            && match[0]\n            && (\n              rules[i] as { handler: (state: EditorState, match: string[], from: number, to: number) => Transaction }\n            ).handler(state, match, from - (match[0].length - text.length), to)\n    if (!tr)\n      continue\n    view.dispatch(tr.setMeta(plugin, { transform: tr, from, to, text }))\n    return true\n  }\n  return false\n}\n\nexport const customInputRulesKey = new PluginKey('MILKDOWN_CUSTOM_INPUTRULES')\nexport function customInputRules({ rules }: { rules: InputRule[] }): Plugin {\n  const plugin: Plugin = new Plugin({\n    key: customInputRulesKey,\n    isInputRules: true,\n\n    state: {\n      init() {\n        return null\n      },\n      apply(this: typeof plugin, tr, prev) {\n        const stored = tr.getMeta(this)\n        if (stored)\n          return stored\n        return (tr.selectionSet || tr.docChanged) ? null : prev\n      },\n    },\n    props: {\n      handleTextInput(view, from, to, text) {\n        return run(view, from, to, text, rules, plugin)\n      },\n      handleDOMEvents: {\n        compositionend: (view) => {\n          setTimeout(() => {\n            const { $cursor } = view.state.selection as TextSelection\n            if ($cursor)\n              run(view, $cursor.pos, $cursor.pos, '', rules, plugin)\n          })\n          return false\n        },\n      },\n      handleKeyDown(view, event) {\n        if (event.key !== 'Enter')\n          return false\n        const { $cursor } = view.state.selection as TextSelection\n        if ($cursor)\n          return run(view, $cursor.pos, $cursor.pos, '\\n', rules, plugin)\n        return false\n      },\n    },\n  })\n  return plugin\n}\n", "import { InputRule } from '../../inputrules'\nimport type { Mark, MarkType } from '../../model'\nimport type { Captured, Options } from './common'\n\n/// Create an input rule for a mark.\nexport function markRule(regexp: RegExp, markType: MarkType, options: Options = {}): InputRule {\n  return new InputRule(regexp, (state, match, start, end) => {\n    const { tr } = state\n    const matchLength = match.length\n\n    let group = match[matchLength - 1]\n    let fullMatch = match[0]\n    let initialStoredMarks: readonly Mark[] = []\n\n    let markEnd = end\n\n    const captured: Captured = {\n      group,\n      fullMatch,\n      start,\n      end,\n    }\n\n    const result = options.updateCaptured?.(captured)\n    Object.assign(captured, result);\n\n    ({ group, fullMatch, start, end } = captured)\n\n    if (fullMatch === null)\n      return null\n\n    if (group?.trim() === '')\n      return null\n\n    if (group) {\n      const startSpaces = fullMatch.search(/\\S/)\n      const textStart = start + fullMatch.indexOf(group)\n      const textEnd = textStart + group.length\n\n      initialStoredMarks = tr.storedMarks ?? []\n\n      if (textEnd < end)\n        tr.delete(textEnd, end)\n\n      if (textStart > start)\n        tr.delete(start + startSpaces, textStart)\n\n      markEnd = start + startSpaces + group.length\n\n      const attrs = options.getAttr?.(match)\n\n      tr.addMark(start, markEnd, markType.create(attrs))\n      tr.setStoredMarks(initialStoredMarks)\n\n      options.beforeDispatch?.({ match, start, end, tr })\n    }\n\n    return tr\n  })\n}\n", "import { InputRule } from '../../inputrules'\nimport type { NodeType } from '../../model'\nimport type { Captured, Options } from './common'\n\n/// Create an input rule for a node.\nexport function nodeRule(regexp: RegExp, nodeType: NodeType, options: Options = {}): InputRule {\n  return new InputRule(regexp, (state, match, start, end) => {\n    const { tr } = state\n    let group: string | undefined = match[1]\n    let fullMatch = match[0]\n\n    const captured: Captured = {\n      group,\n      fullMatch,\n      start,\n      end,\n    }\n\n    const result = options.updateCaptured?.(captured)\n    Object.assign(captured, result);\n\n    ({ group, fullMatch, start, end } = captured)\n\n    if (fullMatch === null)\n      return null\n\n    if (!group || group.trim() === '')\n      return null\n\n    const attrs = options.getAttr?.(match)\n    const node = nodeType.createAndFill(attrs)\n\n    if (node) {\n      tr.replaceRangeWith(nodeType.isBlock ? tr.doc.resolve(start).before() : start, end, node)\n      options.beforeDispatch?.({ match: [fullMatch, group ?? ''], start, end, tr })\n    }\n\n    return tr\n  })\n}\n", "import { expectDomTypeError, missingRootElement } from '@milkdown/exception'\n\nimport type { EditorView } from '../../view'\n\ntype Point = [top: number, left: number]\n\nexport function calculateNodePosition(view: EditorView, target: HTMLElement, handler: (selectedRect: DOMRect, targetRect: DOMRect, parentRect: DOMRect) => Point) {\n  const state = view.state\n  const { from } = state.selection\n\n  const { node } = view.domAtPos(from)\n  const element = node instanceof Text ? node.parentElement : node\n  if (!(element instanceof HTMLElement))\n    throw expectDomTypeError(element)\n\n  const selectedNodeRect = element.getBoundingClientRect()\n  const targetNodeRect = target.getBoundingClientRect()\n  const parent = target.parentElement\n  if (!parent)\n    throw expectDomTypeError(parent)\n\n  const parentNodeRect = parent.getBoundingClientRect()\n\n  const [top, left] = handler(selectedNodeRect, targetNodeRect, parentNodeRect)\n\n  target.style.top = `${top}px`\n  target.style.left = `${left}px`\n}\n\ninterface Rect {\n  left: number\n  right: number\n  top: number\n  bottom: number\n}\n\nexport function calculateTextPosition(view: EditorView, target: HTMLElement, handler: (start: Rect, end: Rect, targetRect: DOMRect, parentRect: DOMRect) => Point) {\n  const state = view.state\n  const { from, to } = state.selection\n  const start = view.coordsAtPos(from)\n  const end = view.coordsAtPos(to)\n\n  const targetNodeRect = target.getBoundingClientRect()\n  const parent = target.parentElement\n  if (!parent)\n    throw missingRootElement()\n\n  const parentNodeRect = parent.getBoundingClientRect()\n\n  const [top, left] = handler(start, end, targetNodeRect, parentNodeRect)\n\n  target.style.top = `${top}px`\n  target.style.left = `${left}px`\n}\n\nfunction minMax(value = 0, min = 0, max = 0): number {\n  return Math.min(Math.max(value, min), max)\n}\n\nexport function posToDOMRect(view: EditorView, from: number, to: number): DOMRect {\n  const minPos = 0\n  const maxPos = view.state.doc.content.size\n  const resolvedFrom = minMax(from, minPos, maxPos)\n  const resolvedEnd = minMax(to, minPos, maxPos)\n  const start = view.coordsAtPos(resolvedFrom)\n  const end = view.coordsAtPos(resolvedEnd, -1)\n  const top = Math.min(start.top, end.top)\n  const bottom = Math.max(start.bottom, end.bottom)\n  const left = Math.min(start.left, end.left)\n  const right = Math.max(start.right, end.right)\n  const width = right - left\n  const height = bottom - top\n  const x = left\n  const y = top\n  const data = {\n    top,\n    bottom,\n    left,\n    right,\n    width,\n    height,\n    x,\n    y,\n  }\n\n  return {\n    ...data,\n    toJSON: () => data,\n  }\n}\n", "import type { NodeType, Node as ProseNode } from '../../model'\nimport type { Transaction } from '../../state'\n\nexport function cloneTr(tr: Transaction): Transaction {\n  return Object.assign(Object.create(tr), tr).setTime(Date.now())\n}\n\nexport function equalNodeType(nodeType: NodeType | NodeType[], node: ProseNode) {\n  return (Array.isArray(nodeType) && nodeType.includes(node.type)) || node.type === nodeType\n}\n", "import type { MarkType, Node, NodeType, ResolvedPos } from '../../model'\nimport type { Predicate } from './types'\n\nexport interface NodeWithPos { pos: number, node: Node }\nexport interface NodeWithFromTo { from: number, to: number, node: Node }\n\nexport function flatten(node: Node, descend = true): NodeWithPos[] {\n  const result: NodeWithPos[] = []\n  node.descendants((child, pos) => {\n    result.push({ node: child, pos })\n    if (!descend)\n      return false\n\n    return undefined\n  })\n  return result\n}\n\nexport function findChildren(predicate: Predicate) {\n  return (node: Node, descend?: boolean): NodeWithPos[] =>\n    flatten(node, descend).filter(child => predicate(child.node))\n}\n\nexport function findChildrenByMark(node: Node, markType: MarkType, descend?: boolean): NodeWithPos[] {\n  return findChildren(child => Boolean(markType.isInSet(child.marks)))(node, descend)\n}\n\nexport function findParent(predicate: Predicate) {\n  return ($pos: ResolvedPos): NodeWithFromTo | undefined => {\n    for (let depth = $pos.depth; depth > 0; depth -= 1) {\n      const node = $pos.node(depth)\n\n      if (predicate(node)) {\n        const from = $pos.before(depth)\n        const to = $pos.after(depth)\n        return {\n          from,\n          to,\n          node,\n        }\n      }\n    }\n\n    return undefined\n  }\n}\n\nexport function findParentNodeType(\n  $pos: ResolvedPos,\n  nodeType: NodeType,\n) {\n  return findParent(node => node.type === nodeType)($pos)\n}\n", "import { getAtomFromSchemaFail } from '@milkdown/exception'\n\nimport type { MarkType, NodeType, Schema } from '../../model'\n\nexport function getNodeFromSchema(type: string, schema: Schema): NodeType {\n  const target = schema.nodes[type]\n\n  if (!target)\n    throw getAtomFromSchemaFail('node', type)\n\n  return target\n}\n\nexport function getMarkFromSchema(type: string, schema: Schema): MarkType {\n  const target = schema.marks[type]\n\n  if (!target)\n    throw getAtomFromSchemaFail('mark', type)\n\n  return target\n}\n", "import type { NodeType, Node as ProseNode, ResolvedPos } from '../../model'\nimport type { Selection } from '../../state'\nimport { NodeSelection } from '../../state'\nimport { equalNodeType } from './helper'\nimport type { Predicate } from './types'\n\nexport interface ContentNodeWithPos { pos: number, start: number, depth: number, node: ProseNode }\n\nexport function findParentNodeClosestToPos(predicate: Predicate) {\n  return ($pos: ResolvedPos): ContentNodeWithPos | undefined => {\n    for (let i = $pos.depth; i > 0; i--) {\n      const node = $pos.node(i)\n      if (predicate(node)) {\n        return {\n          pos: i > 0 ? $pos.before(i) : 0,\n          start: $pos.start(i),\n          depth: i,\n          node,\n        }\n      }\n    }\n\n    return undefined\n  }\n}\n\nexport function findParentNode(predicate: Predicate) {\n  return (selection: Selection): ContentNodeWithPos | undefined => {\n    return findParentNodeClosestToPos(predicate)(selection.$from)\n  }\n}\n\nexport function findSelectedNodeOfType(selection: Selection, nodeType: NodeType): ContentNodeWithPos | undefined {\n  if (!(selection instanceof NodeSelection))\n    return\n\n  const { node, $from } = selection\n  if (equalNodeType(nodeType, node))\n    return { node, pos: $from.pos, start: $from.start($from.depth), depth: $from.depth }\n\n  return undefined\n}\n", "import { liftTarget, replaceStep, ReplaceStep, canJoin, joinPoint, canSplit, ReplaceAroundStep, findWrapping } from 'prosemirror-transform';\r\nimport { Slice, Fragment } from 'prosemirror-model';\r\nimport { NodeSelection, Selection, TextSelection, AllSelection, SelectionRange } from 'prosemirror-state';\r\n\r\n/**\r\nDelete the selection, if there is one.\r\n*/\r\nconst deleteSelection = (state, dispatch) => {\r\n    if (state.selection.empty)\r\n        return false;\r\n    if (dispatch)\r\n        dispatch(state.tr.deleteSelection().scrollIntoView());\r\n    return true;\r\n};\r\nfunction atBlockStart(state, view) {\r\n    let { $cursor } = state.selection;\r\n    if (!$cursor || (view ? !view.endOfTextblock(\"backward\", state)\r\n        : $cursor.parentOffset > 0))\r\n        return null;\r\n    return $cursor;\r\n}\r\n/**\r\nIf the selection is empty and at the start of a textblock, try to\r\nreduce the distance between that block and the one before it—if\r\nthere's a block directly before it that can be joined, join them.\r\nIf not, try to move the selected block closer to the next one in\r\nthe document structure by lifting it out of its parent or moving it\r\ninto a parent of the previous block. Will use the view for accurate\r\n(bidi-aware) start-of-textblock detection if given.\r\n*/\r\nconst joinBackward = (state, dispatch, view) => {\r\n    let $cursor = atBlockStart(state, view);\r\n    if (!$cursor)\r\n        return false;\r\n    let $cut = findCutBefore($cursor);\r\n    // If there is no node before this, try to lift\r\n    if (!$cut) {\r\n        let range = $cursor.blockRange(), target = range && liftTarget(range);\r\n        if (target == null)\r\n            return false;\r\n        if (dispatch)\r\n            dispatch(state.tr.lift(range, target).scrollIntoView());\r\n        return true;\r\n    }\r\n    let before = $cut.nodeBefore;\r\n    // Apply the joining algorithm\r\n    if (deleteBarrier(state, $cut, dispatch, -1))\r\n        return true;\r\n    // If the node below has no content and the node above is\r\n    // selectable, delete the node below and select the one above.\r\n    if ($cursor.parent.content.size == 0 &&\r\n        (textblockAt(before, \"end\") || NodeSelection.isSelectable(before))) {\r\n        for (let depth = $cursor.depth;; depth--) {\r\n            let delStep = replaceStep(state.doc, $cursor.before(depth), $cursor.after(depth), Slice.empty);\r\n            if (delStep && delStep.slice.size < delStep.to - delStep.from) {\r\n                if (dispatch) {\r\n                    let tr = state.tr.step(delStep);\r\n                    tr.setSelection(textblockAt(before, \"end\")\r\n                        ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1)\r\n                        : NodeSelection.create(tr.doc, $cut.pos - before.nodeSize));\r\n                    dispatch(tr.scrollIntoView());\r\n                }\r\n                return true;\r\n            }\r\n            if (depth == 1 || $cursor.node(depth - 1).childCount > 1)\r\n                break;\r\n        }\r\n    }\r\n    // If the node before is an atom, delete it\r\n    if (before.isAtom && $cut.depth == $cursor.depth - 1) {\r\n        if (dispatch)\r\n            dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView());\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n/**\r\nA more limited form of [`joinBackward`]($commands.joinBackward)\r\nthat only tries to join the current textblock to the one before\r\nit, if the cursor is at the start of a textblock.\r\n*/\r\nconst joinTextblockBackward = (state, dispatch, view) => {\r\n    let $cursor = atBlockStart(state, view);\r\n    if (!$cursor)\r\n        return false;\r\n    let $cut = findCutBefore($cursor);\r\n    return $cut ? joinTextblocksAround(state, $cut, dispatch) : false;\r\n};\r\n/**\r\nA more limited form of [`joinForward`]($commands.joinForward)\r\nthat only tries to join the current textblock to the one after\r\nit, if the cursor is at the end of a textblock.\r\n*/\r\nconst joinTextblockForward = (state, dispatch, view) => {\r\n    let $cursor = atBlockEnd(state, view);\r\n    if (!$cursor)\r\n        return false;\r\n    let $cut = findCutAfter($cursor);\r\n    return $cut ? joinTextblocksAround(state, $cut, dispatch) : false;\r\n};\r\nfunction joinTextblocksAround(state, $cut, dispatch) {\r\n    let before = $cut.nodeBefore, beforeText = before, beforePos = $cut.pos - 1;\r\n    for (; !beforeText.isTextblock; beforePos--) {\r\n        if (beforeText.type.spec.isolating)\r\n            return false;\r\n        let child = beforeText.lastChild;\r\n        if (!child)\r\n            return false;\r\n        beforeText = child;\r\n    }\r\n    let after = $cut.nodeAfter, afterText = after, afterPos = $cut.pos + 1;\r\n    for (; !afterText.isTextblock; afterPos++) {\r\n        if (afterText.type.spec.isolating)\r\n            return false;\r\n        let child = afterText.firstChild;\r\n        if (!child)\r\n            return false;\r\n        afterText = child;\r\n    }\r\n    let step = replaceStep(state.doc, beforePos, afterPos, Slice.empty);\r\n    if (!step || step.from != beforePos ||\r\n        step instanceof ReplaceStep && step.slice.size >= afterPos - beforePos)\r\n        return false;\r\n    if (dispatch) {\r\n        let tr = state.tr.step(step);\r\n        tr.setSelection(TextSelection.create(tr.doc, beforePos));\r\n        dispatch(tr.scrollIntoView());\r\n    }\r\n    return true;\r\n}\r\nfunction textblockAt(node, side, only = false) {\r\n    for (let scan = node; scan; scan = (side == \"start\" ? scan.firstChild : scan.lastChild)) {\r\n        if (scan.isTextblock)\r\n            return true;\r\n        if (only && scan.childCount != 1)\r\n            return false;\r\n    }\r\n    return false;\r\n}\r\n/**\r\nWhen the selection is empty and at the start of a textblock, select\r\nthe node before that textblock, if possible. This is intended to be\r\nbound to keys like backspace, after\r\n[`joinBackward`](https://prosemirror.net/docs/ref/#commands.joinBackward) or other deleting\r\ncommands, as a fall-back behavior when the schema doesn't allow\r\ndeletion at the selected point.\r\n*/\r\nconst selectNodeBackward = (state, dispatch, view) => {\r\n    let { $head, empty } = state.selection, $cut = $head;\r\n    if (!empty)\r\n        return false;\r\n    if ($head.parent.isTextblock) {\r\n        if (view ? !view.endOfTextblock(\"backward\", state) : $head.parentOffset > 0)\r\n            return false;\r\n        $cut = findCutBefore($head);\r\n    }\r\n    let node = $cut && $cut.nodeBefore;\r\n    if (!node || !NodeSelection.isSelectable(node))\r\n        return false;\r\n    if (dispatch)\r\n        dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView());\r\n    return true;\r\n};\r\nfunction findCutBefore($pos) {\r\n    if (!$pos.parent.type.spec.isolating)\r\n        for (let i = $pos.depth - 1; i >= 0; i--) {\r\n            if ($pos.index(i) > 0)\r\n                return $pos.doc.resolve($pos.before(i + 1));\r\n            if ($pos.node(i).type.spec.isolating)\r\n                break;\r\n        }\r\n    return null;\r\n}\r\nfunction atBlockEnd(state, view) {\r\n    let { $cursor } = state.selection;\r\n    if (!$cursor || (view ? !view.endOfTextblock(\"forward\", state)\r\n        : $cursor.parentOffset < $cursor.parent.content.size))\r\n        return null;\r\n    return $cursor;\r\n}\r\n/**\r\nIf the selection is empty and the cursor is at the end of a\r\ntextblock, try to reduce or remove the boundary between that block\r\nand the one after it, either by joining them or by moving the other\r\nblock closer to this one in the tree structure. Will use the view\r\nfor accurate start-of-textblock detection if given.\r\n*/\r\nconst joinForward = (state, dispatch, view) => {\r\n    let $cursor = atBlockEnd(state, view);\r\n    if (!$cursor)\r\n        return false;\r\n    let $cut = findCutAfter($cursor);\r\n    // If there is no node after this, there's nothing to do\r\n    if (!$cut)\r\n        return false;\r\n    let after = $cut.nodeAfter;\r\n    // Try the joining algorithm\r\n    if (deleteBarrier(state, $cut, dispatch, 1))\r\n        return true;\r\n    // If the node above has no content and the node below is\r\n    // selectable, delete the node above and select the one below.\r\n    if ($cursor.parent.content.size == 0 &&\r\n        (textblockAt(after, \"start\") || NodeSelection.isSelectable(after))) {\r\n        let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);\r\n        if (delStep && delStep.slice.size < delStep.to - delStep.from) {\r\n            if (dispatch) {\r\n                let tr = state.tr.step(delStep);\r\n                tr.setSelection(textblockAt(after, \"start\") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1)\r\n                    : NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)));\r\n                dispatch(tr.scrollIntoView());\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    // If the next node is an atom, delete it\r\n    if (after.isAtom && $cut.depth == $cursor.depth - 1) {\r\n        if (dispatch)\r\n            dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView());\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n/**\r\nWhen the selection is empty and at the end of a textblock, select\r\nthe node coming after that textblock, if possible. This is intended\r\nto be bound to keys like delete, after\r\n[`joinForward`](https://prosemirror.net/docs/ref/#commands.joinForward) and similar deleting\r\ncommands, to provide a fall-back behavior when the schema doesn't\r\nallow deletion at the selected point.\r\n*/\r\nconst selectNodeForward = (state, dispatch, view) => {\r\n    let { $head, empty } = state.selection, $cut = $head;\r\n    if (!empty)\r\n        return false;\r\n    if ($head.parent.isTextblock) {\r\n        if (view ? !view.endOfTextblock(\"forward\", state) : $head.parentOffset < $head.parent.content.size)\r\n            return false;\r\n        $cut = findCutAfter($head);\r\n    }\r\n    let node = $cut && $cut.nodeAfter;\r\n    if (!node || !NodeSelection.isSelectable(node))\r\n        return false;\r\n    if (dispatch)\r\n        dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView());\r\n    return true;\r\n};\r\nfunction findCutAfter($pos) {\r\n    if (!$pos.parent.type.spec.isolating)\r\n        for (let i = $pos.depth - 1; i >= 0; i--) {\r\n            let parent = $pos.node(i);\r\n            if ($pos.index(i) + 1 < parent.childCount)\r\n                return $pos.doc.resolve($pos.after(i + 1));\r\n            if (parent.type.spec.isolating)\r\n                break;\r\n        }\r\n    return null;\r\n}\r\n/**\r\nJoin the selected block or, if there is a text selection, the\r\nclosest ancestor block of the selection that can be joined, with\r\nthe sibling above it.\r\n*/\r\nconst joinUp = (state, dispatch) => {\r\n    let sel = state.selection, nodeSel = sel instanceof NodeSelection, point;\r\n    if (nodeSel) {\r\n        if (sel.node.isTextblock || !canJoin(state.doc, sel.from))\r\n            return false;\r\n        point = sel.from;\r\n    }\r\n    else {\r\n        point = joinPoint(state.doc, sel.from, -1);\r\n        if (point == null)\r\n            return false;\r\n    }\r\n    if (dispatch) {\r\n        let tr = state.tr.join(point);\r\n        if (nodeSel)\r\n            tr.setSelection(NodeSelection.create(tr.doc, point - state.doc.resolve(point).nodeBefore.nodeSize));\r\n        dispatch(tr.scrollIntoView());\r\n    }\r\n    return true;\r\n};\r\n/**\r\nJoin the selected block, or the closest ancestor of the selection\r\nthat can be joined, with the sibling after it.\r\n*/\r\nconst joinDown = (state, dispatch) => {\r\n    let sel = state.selection, point;\r\n    if (sel instanceof NodeSelection) {\r\n        if (sel.node.isTextblock || !canJoin(state.doc, sel.to))\r\n            return false;\r\n        point = sel.to;\r\n    }\r\n    else {\r\n        point = joinPoint(state.doc, sel.to, 1);\r\n        if (point == null)\r\n            return false;\r\n    }\r\n    if (dispatch)\r\n        dispatch(state.tr.join(point).scrollIntoView());\r\n    return true;\r\n};\r\n/**\r\nLift the selected block, or the closest ancestor block of the\r\nselection that can be lifted, out of its parent node.\r\n*/\r\nconst lift = (state, dispatch) => {\r\n    let { $from, $to } = state.selection;\r\n    let range = $from.blockRange($to), target = range && liftTarget(range);\r\n    if (target == null)\r\n        return false;\r\n    if (dispatch)\r\n        dispatch(state.tr.lift(range, target).scrollIntoView());\r\n    return true;\r\n};\r\n/**\r\nIf the selection is in a node whose type has a truthy\r\n[`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, replace the\r\nselection with a newline character.\r\n*/\r\nconst newlineInCode = (state, dispatch) => {\r\n    let { $head, $anchor } = state.selection;\r\n    if (!$head.parent.type.spec.code || !$head.sameParent($anchor))\r\n        return false;\r\n    if (dispatch)\r\n        dispatch(state.tr.insertText(\"\\n\").scrollIntoView());\r\n    return true;\r\n};\r\nfunction defaultBlockAt(match) {\r\n    for (let i = 0; i < match.edgeCount; i++) {\r\n        let { type } = match.edge(i);\r\n        if (type.isTextblock && !type.hasRequiredAttrs())\r\n            return type;\r\n    }\r\n    return null;\r\n}\r\n/**\r\nWhen the selection is in a node with a truthy\r\n[`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, create a\r\ndefault block after the code block, and move the cursor there.\r\n*/\r\nconst exitCode = (state, dispatch) => {\r\n    let { $head, $anchor } = state.selection;\r\n    if (!$head.parent.type.spec.code || !$head.sameParent($anchor))\r\n        return false;\r\n    let above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt(above.contentMatchAt(after));\r\n    if (!type || !above.canReplaceWith(after, after, type))\r\n        return false;\r\n    if (dispatch) {\r\n        let pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill());\r\n        tr.setSelection(Selection.near(tr.doc.resolve(pos), 1));\r\n        dispatch(tr.scrollIntoView());\r\n    }\r\n    return true;\r\n};\r\n/**\r\nIf a block node is selected, create an empty paragraph before (if\r\nit is its parent's first child) or after it.\r\n*/\r\nconst createParagraphNear = (state, dispatch) => {\r\n    let sel = state.selection, { $from, $to } = sel;\r\n    if (sel instanceof AllSelection || $from.parent.inlineContent || $to.parent.inlineContent)\r\n        return false;\r\n    let type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()));\r\n    if (!type || !type.isTextblock)\r\n        return false;\r\n    if (dispatch) {\r\n        let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos;\r\n        let tr = state.tr.insert(side, type.createAndFill());\r\n        tr.setSelection(TextSelection.create(tr.doc, side + 1));\r\n        dispatch(tr.scrollIntoView());\r\n    }\r\n    return true;\r\n};\r\n/**\r\nIf the cursor is in an empty textblock that can be lifted, lift the\r\nblock.\r\n*/\r\nconst liftEmptyBlock = (state, dispatch) => {\r\n    let { $cursor } = state.selection;\r\n    if (!$cursor || $cursor.parent.content.size)\r\n        return false;\r\n    if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {\r\n        let before = $cursor.before();\r\n        if (canSplit(state.doc, before)) {\r\n            if (dispatch)\r\n                dispatch(state.tr.split(before).scrollIntoView());\r\n            return true;\r\n        }\r\n    }\r\n    let range = $cursor.blockRange(), target = range && liftTarget(range);\r\n    if (target == null)\r\n        return false;\r\n    if (dispatch)\r\n        dispatch(state.tr.lift(range, target).scrollIntoView());\r\n    return true;\r\n};\r\n/**\r\nCreate a variant of [`splitBlock`](https://prosemirror.net/docs/ref/#commands.splitBlock) that uses\r\na custom function to determine the type of the newly split off block.\r\n*/\r\nfunction splitBlockAs(splitNode) {\r\n    return (state, dispatch) => {\r\n        let { $from, $to } = state.selection;\r\n        if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {\r\n            if (!$from.parentOffset || !canSplit(state.doc, $from.pos))\r\n                return false;\r\n            if (dispatch)\r\n                dispatch(state.tr.split($from.pos).scrollIntoView());\r\n            return true;\r\n        }\r\n        if (!$from.parent.isBlock)\r\n            return false;\r\n        let atEnd = $to.parentOffset == $to.parent.content.size;\r\n        let tr = state.tr;\r\n        if (state.selection instanceof TextSelection || state.selection instanceof AllSelection)\r\n            tr.deleteSelection();\r\n        let deflt = $from.depth == 0 ? null : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));\r\n        let splitType = splitNode && splitNode($to.parent, atEnd, $from);\r\n        let types = splitType ? [splitType] : atEnd && deflt ? [{ type: deflt }] : undefined;\r\n        let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);\r\n        if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)) {\r\n            if (deflt)\r\n                types = [{ type: deflt }];\r\n            can = true;\r\n        }\r\n        if (!can)\r\n            return false;\r\n        tr.split(tr.mapping.map($from.pos), 1, types);\r\n        if (!atEnd && !$from.parentOffset && $from.parent.type != deflt) {\r\n            let first = tr.mapping.map($from.before()), $first = tr.doc.resolve(first);\r\n            if (deflt && $from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt))\r\n                tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);\r\n        }\r\n        if (dispatch)\r\n            dispatch(tr.scrollIntoView());\r\n        return true;\r\n    };\r\n}\r\n/**\r\nSplit the parent block of the selection. If the selection is a text\r\nselection, also delete its content.\r\n*/\r\nconst splitBlock = splitBlockAs();\r\n/**\r\nActs like [`splitBlock`](https://prosemirror.net/docs/ref/#commands.splitBlock), but without\r\nresetting the set of active marks at the cursor.\r\n*/\r\nconst splitBlockKeepMarks = (state, dispatch) => {\r\n    return splitBlock(state, dispatch && (tr => {\r\n        let marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks());\r\n        if (marks)\r\n            tr.ensureMarks(marks);\r\n        dispatch(tr);\r\n    }));\r\n};\r\n/**\r\nMove the selection to the node wrapping the current selection, if\r\nany. (Will not select the document node.)\r\n*/\r\nconst selectParentNode = (state, dispatch) => {\r\n    let { $from, to } = state.selection, pos;\r\n    let same = $from.sharedDepth(to);\r\n    if (same == 0)\r\n        return false;\r\n    pos = $from.before(same);\r\n    if (dispatch)\r\n        dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)));\r\n    return true;\r\n};\r\n/**\r\nSelect the whole document.\r\n*/\r\nconst selectAll = (state, dispatch) => {\r\n    if (dispatch)\r\n        dispatch(state.tr.setSelection(new AllSelection(state.doc)));\r\n    return true;\r\n};\r\nfunction joinMaybeClear(state, $pos, dispatch) {\r\n    let before = $pos.nodeBefore, after = $pos.nodeAfter, index = $pos.index();\r\n    if (!before || !after || !before.type.compatibleContent(after.type))\r\n        return false;\r\n    if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {\r\n        if (dispatch)\r\n            dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView());\r\n        return true;\r\n    }\r\n    if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos)))\r\n        return false;\r\n    if (dispatch)\r\n        dispatch(state.tr.join($pos.pos).scrollIntoView());\r\n    return true;\r\n}\r\nfunction deleteBarrier(state, $cut, dispatch, dir) {\r\n    let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match;\r\n    let isolated = before.type.spec.isolating || after.type.spec.isolating;\r\n    if (!isolated && joinMaybeClear(state, $cut, dispatch))\r\n        return true;\r\n    let canDelAfter = !isolated && $cut.parent.canReplace($cut.index(), $cut.index() + 1);\r\n    if (canDelAfter &&\r\n        (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) &&\r\n        match.matchType(conn[0] || after.type).validEnd) {\r\n        if (dispatch) {\r\n            let end = $cut.pos + after.nodeSize, wrap = Fragment.empty;\r\n            for (let i = conn.length - 1; i >= 0; i--)\r\n                wrap = Fragment.from(conn[i].create(null, wrap));\r\n            wrap = Fragment.from(before.copy(wrap));\r\n            let tr = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new Slice(wrap, 1, 0), conn.length, true));\r\n            let $joinAt = tr.doc.resolve(end + 2 * conn.length);\r\n            if ($joinAt.nodeAfter && $joinAt.nodeAfter.type == before.type &&\r\n                canJoin(tr.doc, $joinAt.pos))\r\n                tr.join($joinAt.pos);\r\n            dispatch(tr.scrollIntoView());\r\n        }\r\n        return true;\r\n    }\r\n    let selAfter = after.type.spec.isolating || (dir > 0 && isolated) ? null : Selection.findFrom($cut, 1);\r\n    let range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && liftTarget(range);\r\n    if (target != null && target >= $cut.depth) {\r\n        if (dispatch)\r\n            dispatch(state.tr.lift(range, target).scrollIntoView());\r\n        return true;\r\n    }\r\n    if (canDelAfter && textblockAt(after, \"start\", true) && textblockAt(before, \"end\")) {\r\n        let at = before, wrap = [];\r\n        for (;;) {\r\n            wrap.push(at);\r\n            if (at.isTextblock)\r\n                break;\r\n            at = at.lastChild;\r\n        }\r\n        let afterText = after, afterDepth = 1;\r\n        for (; !afterText.isTextblock; afterText = afterText.firstChild)\r\n            afterDepth++;\r\n        if (at.canReplace(at.childCount, at.childCount, afterText.content)) {\r\n            if (dispatch) {\r\n                let end = Fragment.empty;\r\n                for (let i = wrap.length - 1; i >= 0; i--)\r\n                    end = Fragment.from(wrap[i].copy(end));\r\n                let tr = state.tr.step(new ReplaceAroundStep($cut.pos - wrap.length, $cut.pos + after.nodeSize, $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth, new Slice(end, wrap.length, 0), 0, true));\r\n                dispatch(tr.scrollIntoView());\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction selectTextblockSide(side) {\r\n    return function (state, dispatch) {\r\n        let sel = state.selection, $pos = side < 0 ? sel.$from : sel.$to;\r\n        let depth = $pos.depth;\r\n        while ($pos.node(depth).isInline) {\r\n            if (!depth)\r\n                return false;\r\n            depth--;\r\n        }\r\n        if (!$pos.node(depth).isTextblock)\r\n            return false;\r\n        if (dispatch)\r\n            dispatch(state.tr.setSelection(TextSelection.create(state.doc, side < 0 ? $pos.start(depth) : $pos.end(depth))));\r\n        return true;\r\n    };\r\n}\r\n/**\r\nMoves the cursor to the start of current text block.\r\n*/\r\nconst selectTextblockStart = selectTextblockSide(-1);\r\n/**\r\nMoves the cursor to the end of current text block.\r\n*/\r\nconst selectTextblockEnd = selectTextblockSide(1);\r\n// Parameterized commands\r\n/**\r\nWrap the selection in a node of the given type with the given\r\nattributes.\r\n*/\r\nfunction wrapIn(nodeType, attrs = null) {\r\n    return function (state, dispatch) {\r\n        let { $from, $to } = state.selection;\r\n        let range = $from.blockRange($to), wrapping = range && findWrapping(range, nodeType, attrs);\r\n        if (!wrapping)\r\n            return false;\r\n        if (dispatch)\r\n            dispatch(state.tr.wrap(range, wrapping).scrollIntoView());\r\n        return true;\r\n    };\r\n}\r\n/**\r\nReturns a command that tries to set the selected textblocks to the\r\ngiven node type with the given attributes.\r\n*/\r\nfunction setBlockType(nodeType, attrs = null) {\r\n    return function (state, dispatch) {\r\n        let applicable = false;\r\n        for (let i = 0; i < state.selection.ranges.length && !applicable; i++) {\r\n            let { $from: { pos: from }, $to: { pos: to } } = state.selection.ranges[i];\r\n            state.doc.nodesBetween(from, to, (node, pos) => {\r\n                if (applicable)\r\n                    return false;\r\n                if (!node.isTextblock || node.hasMarkup(nodeType, attrs))\r\n                    return;\r\n                if (node.type == nodeType) {\r\n                    applicable = true;\r\n                }\r\n                else {\r\n                    let $pos = state.doc.resolve(pos), index = $pos.index();\r\n                    applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType);\r\n                }\r\n            });\r\n        }\r\n        if (!applicable)\r\n            return false;\r\n        if (dispatch) {\r\n            let tr = state.tr;\r\n            for (let i = 0; i < state.selection.ranges.length; i++) {\r\n                let { $from: { pos: from }, $to: { pos: to } } = state.selection.ranges[i];\r\n                tr.setBlockType(from, to, nodeType, attrs);\r\n            }\r\n            dispatch(tr.scrollIntoView());\r\n        }\r\n        return true;\r\n    };\r\n}\r\nfunction markApplies(doc, ranges, type, enterAtoms) {\r\n    for (let i = 0; i < ranges.length; i++) {\r\n        let { $from, $to } = ranges[i];\r\n        let can = $from.depth == 0 ? doc.inlineContent && doc.type.allowsMarkType(type) : false;\r\n        doc.nodesBetween($from.pos, $to.pos, (node, pos) => {\r\n            if (can || !enterAtoms && node.isAtom && node.isInline && pos >= $from.pos && pos + node.nodeSize <= $to.pos)\r\n                return false;\r\n            can = node.inlineContent && node.type.allowsMarkType(type);\r\n        });\r\n        if (can)\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\nfunction removeInlineAtoms(ranges) {\r\n    let result = [];\r\n    for (let i = 0; i < ranges.length; i++) {\r\n        let { $from, $to } = ranges[i];\r\n        $from.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {\r\n            if (node.isAtom && node.content.size && node.isInline && pos >= $from.pos && pos + node.nodeSize <= $to.pos) {\r\n                if (pos + 1 > $from.pos)\r\n                    result.push(new SelectionRange($from, $from.doc.resolve(pos + 1)));\r\n                $from = $from.doc.resolve(pos + 1 + node.content.size);\r\n                return false;\r\n            }\r\n        });\r\n        if ($from.pos < $to.pos)\r\n            result.push(new SelectionRange($from, $to));\r\n    }\r\n    return result;\r\n}\r\n/**\r\nCreate a command function that toggles the given mark with the\r\ngiven attributes. Will return `false` when the current selection\r\ndoesn't support that mark. This will remove the mark if any marks\r\nof that type exist in the selection, or add it otherwise. If the\r\nselection is empty, this applies to the [stored\r\nmarks](https://prosemirror.net/docs/ref/#state.EditorState.storedMarks) instead of a range of the\r\ndocument.\r\n*/\r\nfunction toggleMark(markType, attrs = null, options) {\r\n    let removeWhenPresent = (options && options.removeWhenPresent) !== false;\r\n    let enterAtoms = (options && options.enterInlineAtoms) !== false;\r\n    return function (state, dispatch) {\r\n        let { empty, $cursor, ranges } = state.selection;\r\n        if ((empty && !$cursor) || !markApplies(state.doc, ranges, markType, enterAtoms))\r\n            return false;\r\n        if (dispatch) {\r\n            if ($cursor) {\r\n                if (markType.isInSet(state.storedMarks || $cursor.marks()))\r\n                    dispatch(state.tr.removeStoredMark(markType));\r\n                else\r\n                    dispatch(state.tr.addStoredMark(markType.create(attrs)));\r\n            }\r\n            else {\r\n                let add, tr = state.tr;\r\n                if (!enterAtoms)\r\n                    ranges = removeInlineAtoms(ranges);\r\n                if (removeWhenPresent) {\r\n                    add = !ranges.some(r => state.doc.rangeHasMark(r.$from.pos, r.$to.pos, markType));\r\n                }\r\n                else {\r\n                    add = !ranges.every(r => {\r\n                        let missing = false;\r\n                        tr.doc.nodesBetween(r.$from.pos, r.$to.pos, (node, pos, parent) => {\r\n                            if (missing)\r\n                                return false;\r\n                            missing = !markType.isInSet(node.marks) && !!parent && parent.type.allowsMarkType(markType) &&\r\n                                !(node.isText && /^\\s*$/.test(node.textBetween(Math.max(0, r.$from.pos - pos), Math.min(node.nodeSize, r.$to.pos - pos))));\r\n                        });\r\n                        return !missing;\r\n                    });\r\n                }\r\n                for (let i = 0; i < ranges.length; i++) {\r\n                    let { $from, $to } = ranges[i];\r\n                    if (!add) {\r\n                        tr.removeMark($from.pos, $to.pos, markType);\r\n                    }\r\n                    else {\r\n                        let from = $from.pos, to = $to.pos, start = $from.nodeAfter, end = $to.nodeBefore;\r\n                        let spaceStart = start && start.isText ? /^\\s*/.exec(start.text)[0].length : 0;\r\n                        let spaceEnd = end && end.isText ? /\\s*$/.exec(end.text)[0].length : 0;\r\n                        if (from + spaceStart < to) {\r\n                            from += spaceStart;\r\n                            to -= spaceEnd;\r\n                        }\r\n                        tr.addMark(from, to, markType.create(attrs));\r\n                    }\r\n                }\r\n                dispatch(tr.scrollIntoView());\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n}\r\nfunction wrapDispatchForJoin(dispatch, isJoinable) {\r\n    return (tr) => {\r\n        if (!tr.isGeneric)\r\n            return dispatch(tr);\r\n        let ranges = [];\r\n        for (let i = 0; i < tr.mapping.maps.length; i++) {\r\n            let map = tr.mapping.maps[i];\r\n            for (let j = 0; j < ranges.length; j++)\r\n                ranges[j] = map.map(ranges[j]);\r\n            map.forEach((_s, _e, from, to) => ranges.push(from, to));\r\n        }\r\n        // Figure out which joinable points exist inside those ranges,\r\n        // by checking all node boundaries in their parent nodes.\r\n        let joinable = [];\r\n        for (let i = 0; i < ranges.length; i += 2) {\r\n            let from = ranges[i], to = ranges[i + 1];\r\n            let $from = tr.doc.resolve(from), depth = $from.sharedDepth(to), parent = $from.node(depth);\r\n            for (let index = $from.indexAfter(depth), pos = $from.after(depth + 1); pos <= to; ++index) {\r\n                let after = parent.maybeChild(index);\r\n                if (!after)\r\n                    break;\r\n                if (index && joinable.indexOf(pos) == -1) {\r\n                    let before = parent.child(index - 1);\r\n                    if (before.type == after.type && isJoinable(before, after))\r\n                        joinable.push(pos);\r\n                }\r\n                pos += after.nodeSize;\r\n            }\r\n        }\r\n        // Join the joinable points\r\n        joinable.sort((a, b) => a - b);\r\n        for (let i = joinable.length - 1; i >= 0; i--) {\r\n            if (canJoin(tr.doc, joinable[i]))\r\n                tr.join(joinable[i]);\r\n        }\r\n        dispatch(tr);\r\n    };\r\n}\r\n/**\r\nWrap a command so that, when it produces a transform that causes\r\ntwo joinable nodes to end up next to each other, those are joined.\r\nNodes are considered joinable when they are of the same type and\r\nwhen the `isJoinable` predicate returns true for them or, if an\r\narray of strings was passed, if their node type name is in that\r\narray.\r\n*/\r\nfunction autoJoin(command, isJoinable) {\r\n    let canJoin = Array.isArray(isJoinable) ? (node) => isJoinable.indexOf(node.type.name) > -1\r\n        : isJoinable;\r\n    return (state, dispatch, view) => command(state, dispatch && wrapDispatchForJoin(dispatch, canJoin), view);\r\n}\r\n/**\r\nCombine a number of command functions into a single function (which\r\ncalls them one by one until one returns true).\r\n*/\r\nfunction chainCommands(...commands) {\r\n    return function (state, dispatch, view) {\r\n        for (let i = 0; i < commands.length; i++)\r\n            if (commands[i](state, dispatch, view))\r\n                return true;\r\n        return false;\r\n    };\r\n}\r\nlet backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward);\r\nlet del = chainCommands(deleteSelection, joinForward, selectNodeForward);\r\n/**\r\nA basic keymap containing bindings not specific to any schema.\r\nBinds the following keys (when multiple commands are listed, they\r\nare chained with [`chainCommands`](https://prosemirror.net/docs/ref/#commands.chainCommands)):\r\n\r\n* **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`\r\n* **Mod-Enter** to `exitCode`\r\n* **Backspace** and **Mod-Backspace** to `deleteSelection`, `joinBackward`, `selectNodeBackward`\r\n* **Delete** and **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\r\n* **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\r\n* **Mod-a** to `selectAll`\r\n*/\r\nconst pcBaseKeymap = {\r\n    \"Enter\": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),\r\n    \"Mod-Enter\": exitCode,\r\n    \"Backspace\": backspace,\r\n    \"Mod-Backspace\": backspace,\r\n    \"Shift-Backspace\": backspace,\r\n    \"Delete\": del,\r\n    \"Mod-Delete\": del,\r\n    \"Mod-a\": selectAll\r\n};\r\n/**\r\nA copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,\r\n**Ctrl-d** like Delete, **Alt-Backspace** like Ctrl-Backspace, and\r\n**Ctrl-Alt-Backspace**, **Alt-Delete**, and **Alt-d** like\r\nCtrl-Delete.\r\n*/\r\nconst macBaseKeymap = {\r\n    \"Ctrl-h\": pcBaseKeymap[\"Backspace\"],\r\n    \"Alt-Backspace\": pcBaseKeymap[\"Mod-Backspace\"],\r\n    \"Ctrl-d\": pcBaseKeymap[\"Delete\"],\r\n    \"Ctrl-Alt-Backspace\": pcBaseKeymap[\"Mod-Delete\"],\r\n    \"Alt-Delete\": pcBaseKeymap[\"Mod-Delete\"],\r\n    \"Alt-d\": pcBaseKeymap[\"Mod-Delete\"],\r\n    \"Ctrl-a\": selectTextblockStart,\r\n    \"Ctrl-e\": selectTextblockEnd\r\n};\r\nfor (let key in pcBaseKeymap)\r\n    macBaseKeymap[key] = pcBaseKeymap[key];\r\nconst mac = typeof navigator != \"undefined\" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform)\r\n    // @ts-ignore\r\n    : typeof os != \"undefined\" && os.platform ? os.platform() == \"darwin\" : false;\r\n/**\r\nDepending on the detected platform, this will hold\r\n[`pcBasekeymap`](https://prosemirror.net/docs/ref/#commands.pcBaseKeymap) or\r\n[`macBaseKeymap`](https://prosemirror.net/docs/ref/#commands.macBaseKeymap).\r\n*/\r\nconst baseKeymap = mac ? macBaseKeymap : pcBaseKeymap;\r\n\r\nexport { autoJoin, baseKeymap, chainCommands, createParagraphNear, deleteSelection, exitCode, joinBackward, joinDown, joinForward, joinTextblockBackward, joinTextblockForward, joinUp, lift, liftEmptyBlock, macBaseKeymap, newlineInCode, pcBaseKeymap, selectAll, selectNodeBackward, selectNodeForward, selectParentNode, selectTextblockEnd, selectTextblockStart, setBlockType, splitBlock, splitBlockAs, splitBlockKeepMarks, toggleMark, wrapIn };\r\n", "import { keyName, base } from 'w3c-keyname';\r\nimport { Plugin } from 'prosemirror-state';\r\n\r\nconst mac = typeof navigator != \"undefined\" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;\r\nfunction normalizeKeyName(name) {\r\n    let parts = name.split(/-(?!$)/), result = parts[parts.length - 1];\r\n    if (result == \"Space\")\r\n        result = \" \";\r\n    let alt, ctrl, shift, meta;\r\n    for (let i = 0; i < parts.length - 1; i++) {\r\n        let mod = parts[i];\r\n        if (/^(cmd|meta|m)$/i.test(mod))\r\n            meta = true;\r\n        else if (/^a(lt)?$/i.test(mod))\r\n            alt = true;\r\n        else if (/^(c|ctrl|control)$/i.test(mod))\r\n            ctrl = true;\r\n        else if (/^s(hift)?$/i.test(mod))\r\n            shift = true;\r\n        else if (/^mod$/i.test(mod)) {\r\n            if (mac)\r\n                meta = true;\r\n            else\r\n                ctrl = true;\r\n        }\r\n        else\r\n            throw new Error(\"Unrecognized modifier name: \" + mod);\r\n    }\r\n    if (alt)\r\n        result = \"Alt-\" + result;\r\n    if (ctrl)\r\n        result = \"Ctrl-\" + result;\r\n    if (meta)\r\n        result = \"Meta-\" + result;\r\n    if (shift)\r\n        result = \"Shift-\" + result;\r\n    return result;\r\n}\r\nfunction normalize(map) {\r\n    let copy = Object.create(null);\r\n    for (let prop in map)\r\n        copy[normalizeKeyName(prop)] = map[prop];\r\n    return copy;\r\n}\r\nfunction modifiers(name, event, shift = true) {\r\n    if (event.altKey)\r\n        name = \"Alt-\" + name;\r\n    if (event.ctrlKey)\r\n        name = \"Ctrl-\" + name;\r\n    if (event.metaKey)\r\n        name = \"Meta-\" + name;\r\n    if (shift && event.shiftKey)\r\n        name = \"Shift-\" + name;\r\n    return name;\r\n}\r\n/**\r\nCreate a keymap plugin for the given set of bindings.\r\n\r\nBindings should map key names to [command](https://prosemirror.net/docs/ref/#commands)-style\r\nfunctions, which will be called with `(EditorState, dispatch,\r\nEditorView)` arguments, and should return true when they've handled\r\nthe key. Note that the view argument isn't part of the command\r\nprotocol, but can be used as an escape hatch if a binding needs to\r\ndirectly interact with the UI.\r\n\r\nKey names may be strings like `\"Shift-Ctrl-Enter\"`—a key\r\nidentifier prefixed with zero or more modifiers. Key identifiers\r\nare based on the strings that can appear in\r\n[`KeyEvent.key`](https:developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).\r\nUse lowercase letters to refer to letter keys (or uppercase letters\r\nif you want shift to be held). You may use `\"Space\"` as an alias\r\nfor the `\" \"` name.\r\n\r\nModifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or\r\n`a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or\r\n`Meta-`) are recognized. For characters that are created by holding\r\nshift, the `Shift-` prefix is implied, and should not be added\r\nexplicitly.\r\n\r\nYou can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on\r\nother platforms.\r\n\r\nYou can add multiple keymap plugins to an editor. The order in\r\nwhich they appear determines their precedence (the ones early in\r\nthe array get to dispatch first).\r\n*/\r\nfunction keymap(bindings) {\r\n    return new Plugin({ props: { handleKeyDown: keydownHandler(bindings) } });\r\n}\r\n/**\r\nGiven a set of bindings (using the same format as\r\n[`keymap`](https://prosemirror.net/docs/ref/#keymap.keymap)), return a [keydown\r\nhandler](https://prosemirror.net/docs/ref/#view.EditorProps.handleKeyDown) that handles them.\r\n*/\r\nfunction keydownHandler(bindings) {\r\n    let map = normalize(bindings);\r\n    return function (view, event) {\r\n        let name = keyName(event), baseName, direct = map[modifiers(name, event)];\r\n        if (direct && direct(view.state, view.dispatch, view))\r\n            return true;\r\n        // A character key\r\n        if (name.length == 1 && name != \" \") {\r\n            if (event.shiftKey) {\r\n                // In case the name was already modified by shift, try looking\r\n                // it up without its shift modifier\r\n                let noShift = map[modifiers(name, event, false)];\r\n                if (noShift && noShift(view.state, view.dispatch, view))\r\n                    return true;\r\n            }\r\n            if ((event.shiftKey || event.altKey || event.metaKey || name.charCodeAt(0) > 127) &&\r\n                (baseName = base[event.keyCode]) && baseName != name) {\r\n                // Try falling back to the keyCode when there's a modifier\r\n                // active or the character produced isn't ASCII, and our table\r\n                // produces a different name from the the keyCode. See #668,\r\n                // #1060\r\n                let fromCode = map[modifiers(baseName, event)];\r\n                if (fromCode && fromCode(view.state, view.dispatch, view))\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n}\r\n\r\nexport { keydownHandler, keymap };\r\n", "import type { Meta, MilkdownPlugin } from '@milkdown/ctx'\n\nexport function withMeta<T extends MilkdownPlugin>(plugin: T, meta: Partial<Meta> & Pick<Meta, 'displayName'>): T {\n  plugin.meta = {\n    package: '@milkdown/core',\n    group: 'System',\n    ...meta,\n  }\n\n  return plugin\n}\n", "import type { Options } from 'remark-stringify'\n\nexport const remarkHandlers: Required<Options>['handlers'] = {\n  strong: (node, _, state, info) => {\n    const marker = node.marker || state.options.strong || '*'\n    const exit = state.enter('strong')\n    const tracker = state.createTracker(info)\n    let value = tracker.move(marker + marker)\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: marker,\n        ...tracker.current(),\n      }),\n    )\n    value += tracker.move(marker + marker)\n    exit()\n    return value\n  },\n  emphasis: (node, _, state, info) => {\n    const marker = node.marker || state.options.emphasis || '*'\n    const exit = state.enter('emphasis')\n    const tracker = state.createTracker(info)\n    let value = tracker.move(marker)\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: marker,\n        ...tracker.current(),\n      }),\n    )\n    value += tracker.move(marker)\n    exit()\n    return value\n  },\n}\n", "import { createSlice } from '@milkdown/ctx'\nimport type { EditorState, Plugin } from '@milkdown/prose/state'\nimport type { EditorView, MarkViewConstructor, NodeViewConstructor } from '@milkdown/prose/view'\nimport type { SliceType, TimerType } from '@milkdown/ctx'\nimport type { InputRule } from '@milkdown/prose/inputrules'\nimport type { RemarkParser, RemarkPlugin } from '@milkdown/transformer'\nimport remarkParse from 'remark-parse'\nimport type { Options } from 'remark-stringify'\nimport remarkStringify from 'remark-stringify'\nimport { unified } from 'unified'\nimport type { Editor } from '../editor'\nimport { remarkHandlers } from '../__internal__'\n\n/// A slice which contains the editor view instance.\nexport const editorViewCtx = createSlice({} as EditorView, 'editorView')\n\n/// A slice which contains the editor state.\nexport const editorStateCtx = createSlice({} as EditorState, 'editorState')\n\n/// A slice which stores timers that need to be waited for before starting to run the plugin.\n/// By default, it's `[ConfigReady]`.\nexport const initTimerCtx = createSlice([] as TimerType[], 'initTimer')\n\n/// A slice which stores the editor instance.\nexport const editorCtx = createSlice({} as Editor, 'editor')\n\n/// A slice which stores the input rules.\nexport const inputRulesCtx = createSlice([] as InputRule[], 'inputRules')\n\n/// A slice which stores the prosemirror plugins.\nexport const prosePluginsCtx = createSlice([] as Plugin[], 'prosePlugins')\n\n/// A slice which stores the remark plugins.\nexport const remarkPluginsCtx = createSlice([] as RemarkPlugin[], 'remarkPlugins')\n\ntype NodeView = [nodeId: string, view: NodeViewConstructor]\n\n/// A slice which stores the prosemirror node views.\nexport const nodeViewCtx = createSlice([] as NodeView[], 'nodeView')\n\ntype MarkView = [nodeId: string, view: MarkViewConstructor]\n\n/// A slice which stores the prosemirror mark views.\nexport const markViewCtx = createSlice([] as MarkView[], 'markView')\n\n/// A slice which stores the remark instance.\nexport const remarkCtx: SliceType<RemarkParser, 'remark'> = createSlice(unified().use(remarkParse).use(remarkStringify), 'remark')\n\n/// A slice which stores the remark stringify options.\nexport const remarkStringifyOptionsCtx = createSlice({\n  handlers: remarkHandlers,\n} as Options, 'remarkStringifyOptions')\n", "import type { Ctx, MilkdownPlugin } from '@milkdown/ctx'\nimport { createTimer } from '@milkdown/ctx'\nimport { withMeta } from '../__internal__'\n\n/// @internal\nexport type Config = (ctx: Ctx) => void | Promise<void>\n\n/// The timer which will be resolved when the config plugin is ready.\nexport const ConfigReady = createTimer('ConfigReady')\n\n/// The config plugin.\n/// This plugin will load all user configs.\nexport function config(configure: Config): MilkdownPlugin {\n  const plugin: MilkdownPlugin = (ctx) => {\n    ctx.record(ConfigReady)\n\n    return async () => {\n      await configure(ctx)\n      ctx.done(ConfigReady)\n\n      return () => {\n        ctx.clearTimer(ConfigReady)\n      }\n    }\n  }\n\n  withMeta(plugin, {\n    displayName: 'Config',\n  })\n\n  return plugin\n}\n", "import type { MilkdownPlugin } from '@milkdown/ctx'\nimport { createTimer } from '@milkdown/ctx'\nimport remarkParse from 'remark-parse'\nimport remarkStringify from 'remark-stringify'\nimport { unified } from 'unified'\n\nimport type { Editor } from '../editor'\nimport { remarkHandlers, withMeta } from '../__internal__'\nimport { ConfigReady } from './config'\nimport {\n  editorCtx,\n  initTimerCtx,\n  inputRulesCtx,\n  markViewCtx,\n  nodeViewCtx,\n  prosePluginsCtx,\n  remarkCtx,\n  remarkPluginsCtx,\n  remarkStringifyOptionsCtx,\n} from './atoms'\n\n/// The timer which will be resolved when the init plugin is ready.\nexport const InitReady = createTimer('InitReady')\n\n/// The init plugin.\n/// This plugin prepare slices that needed by other plugins. And create a remark instance.\n///\n/// This plugin will wait for the config plugin.\nexport function init(editor: Editor): MilkdownPlugin {\n  const plugin: MilkdownPlugin = (ctx) => {\n    ctx.inject(editorCtx, editor)\n      .inject(prosePluginsCtx, [])\n      .inject(remarkPluginsCtx, [])\n      .inject(inputRulesCtx, [])\n      .inject(nodeViewCtx, [])\n      .inject(markViewCtx, [])\n      .inject(remarkStringifyOptionsCtx, {\n        handlers: remarkHandlers,\n      })\n      .inject(remarkCtx, unified().use(remarkParse).use(remarkStringify))\n      .inject(initTimerCtx, [ConfigReady])\n      .record(InitReady)\n\n    return async () => {\n      await ctx.waitTimers(initTimerCtx)\n      const options = ctx.get(remarkStringifyOptionsCtx)\n      ctx.set(remarkCtx, unified().use(remarkParse).use(remarkStringify, options))\n\n      ctx.done(InitReady)\n\n      return () => {\n        ctx.remove(editorCtx)\n          .remove(prosePluginsCtx)\n          .remove(remarkPluginsCtx)\n          .remove(inputRulesCtx)\n          .remove(nodeViewCtx)\n          .remove(markViewCtx)\n          .remove(remarkStringifyOptionsCtx)\n          .remove(remarkCtx)\n          .remove(initTimerCtx)\n          .clearTimer(InitReady)\n      }\n    }\n  }\n  withMeta(plugin, {\n    displayName: 'Init',\n  })\n\n  return plugin\n}\n", "import type { MilkdownPlugin, TimerType } from '@milkdown/ctx'\nimport { createSlice, createTimer } from '@milkdown/ctx'\nimport { Schema } from '@milkdown/prose/model'\nimport type { MarkSchema, NodeSchema, RemarkParser } from '@milkdown/transformer'\n\nimport { withMeta } from '../__internal__'\nimport { InitReady } from './init'\nimport { remarkCtx, remarkPluginsCtx } from './atoms'\n\n/// The timer which will be resolved when the schema plugin is ready.\nexport const SchemaReady = createTimer('SchemaReady')\n\n/// A slice which stores timers that need to be waited for before starting to run the plugin.\n/// By default, it's `[InitReady]`.\nexport const schemaTimerCtx = createSlice([] as TimerType[], 'schemaTimer')\n\n/// A slice which contains the schema.\nexport const schemaCtx = createSlice({} as Schema, 'schema')\n\n/// A slice which stores the nodes spec.\nexport const nodesCtx = createSlice([] as Array<[string, NodeSchema]>, 'nodes')\n\n/// A slice which stores the marks spec.\nexport const marksCtx = createSlice([] as Array<[string, MarkSchema]>, 'marks')\n\nfunction extendPriority<T extends NodeSchema | MarkSchema>(x: T): T {\n  return {\n    ...x,\n    parseDOM: x.parseDOM?.map(rule => ({ priority: x.priority, ...rule })),\n  }\n}\n\n/// The schema plugin.\n/// This plugin will load all nodes spec and marks spec and create a schema.\n///\n/// This plugin will wait for the init plugin.\nexport const schema: MilkdownPlugin = (ctx) => {\n  ctx\n    .inject(schemaCtx, {} as Schema)\n    .inject(nodesCtx, [])\n    .inject(marksCtx, [])\n    .inject(schemaTimerCtx, [InitReady])\n    .record(SchemaReady)\n\n  return async () => {\n    await ctx.waitTimers(schemaTimerCtx)\n\n    const remark = ctx.get(remarkCtx)\n    const remarkPlugins = ctx.get(remarkPluginsCtx)\n\n    const processor = remarkPlugins.reduce((acc: RemarkParser, plug) => acc.use(plug.plugin, plug.options) as unknown as RemarkParser, remark)\n    ctx.set(remarkCtx, processor)\n\n    const nodes = Object.fromEntries(ctx.get(nodesCtx).map(([key, x]) => [key, extendPriority(x)]))\n    const marks = Object.fromEntries(ctx.get(marksCtx).map(([key, x]) => [key, extendPriority(x)]))\n    const schema = new Schema({ nodes, marks })\n\n    ctx.set(schemaCtx, schema)\n\n    ctx.done(SchemaReady)\n\n    return () => {\n      ctx.remove(schemaCtx).remove(nodesCtx).remove(marksCtx).remove(schemaTimerCtx).clearTimer(SchemaReady)\n    }\n  }\n}\n\nwithMeta(schema, {\n  displayName: 'Schema',\n})\n", "import type { Ctx, MilkdownPlugin, SliceType } from '@milkdown/ctx'\nimport { Container, createSlice, createTimer } from '@milkdown/ctx'\nimport { callCommandBeforeEditorView } from '@milkdown/exception'\nimport type { Command } from '@milkdown/prose/state'\n\nimport { withMeta } from '../__internal__'\nimport { SchemaReady } from './schema'\nimport { editorViewCtx } from './atoms'\n\n/// @internal\nexport type Cmd<T = undefined> = (payload?: T) => Command\n\n/// @internal\nexport type CmdKey<T = undefined> = SliceType<Cmd<T>>\n\ntype InferParams<T> = T extends CmdKey<infer U> ? U : never\n\n/// The command manager.\n/// This manager will manage all commands in editor.\n/// Generally, you don't need to use this manager directly.\n/// You can use the `$command` and `$commandAsync` in `@milkdown/utils` to create and call a command.\nexport class CommandManager {\n  /// @internal\n  #container = new Container()\n\n  /// @internal\n  #ctx: Ctx | null = null\n\n  /// @internal\n  setCtx = (ctx: Ctx) => {\n    this.#ctx = ctx\n  }\n\n  get ctx() {\n    return this.#ctx\n  }\n\n  /// Register a command into the manager.\n  create<T>(meta: CmdKey<T>, value: Cmd<T>) {\n    const slice = meta.create(this.#container.sliceMap)\n    slice.set(value)\n    return slice\n  }\n\n  /// Get a command from the manager.\n  get<T extends CmdKey<any>>(slice: string): Cmd<InferParams<T>>\n  get<T>(slice: CmdKey<T>): Cmd<T>\n  get(slice: string | CmdKey<any>): Cmd<any>\n  get(slice: string | CmdKey<any>): Cmd<any> {\n    return this.#container.get(slice).get()\n  }\n\n  /// Remove a command from the manager.\n  remove<T extends CmdKey<any>>(slice: string): void\n  remove<T>(slice: CmdKey<T>): void\n  remove(slice: string | CmdKey<any>): void\n  remove(slice: string | CmdKey<any>): void {\n    return this.#container.remove(slice)\n  }\n\n  /// Call a registered command.\n  call<T extends CmdKey<any>>(slice: string, payload?: InferParams<T>): boolean\n  call<T>(slice: CmdKey<T>, payload?: T): boolean\n  call(slice: string | CmdKey<any>, payload?: any): boolean\n  call(slice: string | CmdKey<any>, payload?: any): boolean {\n    if (this.#ctx == null)\n      throw callCommandBeforeEditorView()\n\n    const cmd = this.get(slice)\n    const command = cmd(payload)\n    const view = this.#ctx.get(editorViewCtx)\n    return command(view.state, view.dispatch, view)\n  }\n}\n\n/// Create a command key, which is a slice type that contains a command.\nexport function createCmdKey<T = undefined>(key = 'cmdKey'): CmdKey<T> {\n  return createSlice((() => () => false) as Cmd<T>, key)\n}\n\n/// A slice which contains the command manager.\nexport const commandsCtx = createSlice(new CommandManager(), 'commands')\n\n/// A slice which stores timers that need to be waited for before starting to run the plugin.\n/// By default, it's `[SchemaReady]`.\nexport const commandsTimerCtx = createSlice([SchemaReady], 'commandsTimer')\n\n/// The timer which will be resolved when the commands plugin is ready.\nexport const CommandsReady = createTimer('CommandsReady')\n\n/// The commands plugin.\n/// This plugin will create a command manager.\n///\n/// This plugin will wait for the schema plugin.\nexport const commands: MilkdownPlugin = (ctx) => {\n  const cmd = new CommandManager()\n  cmd.setCtx(ctx)\n  ctx.inject(commandsCtx, cmd).inject(commandsTimerCtx, [SchemaReady]).record(CommandsReady)\n  return async () => {\n    await ctx.waitTimers(commandsTimerCtx)\n\n    ctx.done(CommandsReady)\n\n    return () => {\n      ctx.remove(commandsCtx).remove(commandsTimerCtx).clearTimer(CommandsReady)\n    }\n  }\n}\n\nwithMeta(commands, {\n  displayName: 'Commands',\n})\n", "import type { MilkdownPlugin, TimerType } from '@milkdown/ctx'\nimport { createSlice, createTimer } from '@milkdown/ctx'\nimport { ctxCallOutOfScope } from '@milkdown/exception'\nimport type { Parser } from '@milkdown/transformer'\nimport { ParserState } from '@milkdown/transformer'\n\nimport { withMeta } from '../__internal__'\nimport { remarkCtx } from './atoms'\nimport { SchemaReady, schemaCtx } from './schema'\n\n/// The timer which will be resolved when the parser plugin is ready.\nexport const ParserReady = createTimer('ParserReady')\n\nconst outOfScope = (() => {\n  throw ctxCallOutOfScope()\n}) as Parser\n\n/// A slice which contains the parser.\nexport const parserCtx = createSlice(outOfScope, 'parser')\n\n/// A slice which stores timers that need to be waited for before starting to run the plugin.\n/// By default, it's `[SchemaReady]`.\nexport const parserTimerCtx = createSlice([] as TimerType[], 'parserTimer')\n\n/// The parser plugin.\n/// This plugin will create a parser.\n///\n/// This plugin will wait for the schema plugin.\nexport const parser: MilkdownPlugin = (ctx) => {\n  ctx.inject(parserCtx, outOfScope).inject(parserTimerCtx, [SchemaReady]).record(ParserReady)\n\n  return async () => {\n    await ctx.waitTimers(parserTimerCtx)\n    const remark = ctx.get(remarkCtx)\n    const schema = ctx.get(schemaCtx)\n\n    ctx.set(parserCtx, ParserState.create(schema, remark))\n    ctx.done(ParserReady)\n    return () => {\n      ctx.remove(parserCtx).remove(parserTimerCtx).clearTimer(ParserReady)\n    }\n  }\n}\n\nwithMeta(parser, {\n  displayName: 'Parser',\n})\n", "import type { MilkdownPlugin, TimerType } from '@milkdown/ctx'\nimport { createSlice, createTimer } from '@milkdown/ctx'\nimport type { Serializer } from '@milkdown/transformer'\nimport { SerializerState } from '@milkdown/transformer'\n\nimport { ctxCallOutOfScope } from '@milkdown/exception'\nimport { withMeta } from '../__internal__'\nimport { remarkCtx } from './atoms'\nimport { SchemaReady, schemaCtx } from './schema'\n\n/// The timer which will be resolved when the serializer plugin is ready.\nexport const SerializerReady = createTimer('SerializerReady')\n\n/// A slice which stores timers that need to be waited for before starting to run the plugin.\n/// By default, it's `[SchemaReady]`.\nexport const serializerTimerCtx = createSlice([] as TimerType[], 'serializerTimer')\n\nconst outOfScope = (() => {\n  throw ctxCallOutOfScope()\n}) as Serializer\n\n/// A slice which contains the serializer.\nexport const serializerCtx = createSlice<Serializer, 'serializer'>(outOfScope, 'serializer')\n\n/// The serializer plugin.\n/// This plugin will create a serializer.\n///\n/// This plugin will wait for the schema plugin.\nexport const serializer: MilkdownPlugin = (ctx) => {\n  ctx\n    .inject(serializerCtx, outOfScope)\n    .inject(serializerTimerCtx, [SchemaReady])\n    .record(SerializerReady)\n\n  return async () => {\n    await ctx.waitTimers(serializerTimerCtx)\n    const remark = ctx.get(remarkCtx)\n    const schema = ctx.get(schemaCtx)\n\n    ctx.set(serializerCtx, SerializerState.create(schema, remark))\n    ctx.done(SerializerReady)\n\n    return () => {\n      ctx.remove(serializerCtx).remove(serializerTimerCtx).clearTimer(SerializerReady)\n    }\n  }\n}\n\nwithMeta(serializer, {\n  displayName: 'Serializer',\n})\n", "import type { MilkdownPlugin, TimerType } from '@milkdown/ctx'\nimport { createSlice, createTimer } from '@milkdown/ctx'\nimport { docTypeError } from '@milkdown/exception'\nimport { customInputRules as createInputRules } from '@milkdown/prose'\nimport { baseKeymap, chainCommands, deleteSelection, joinBackward, selectNodeBackward } from '@milkdown/prose/commands'\nimport { undoInputRule } from '@milkdown/prose/inputrules'\nimport { keymap as createKeymap } from '@milkdown/prose/keymap'\nimport type { Schema } from '@milkdown/prose/model'\nimport { DOMParser, Node } from '@milkdown/prose/model'\nimport type { Command } from '@milkdown/prose/state'\nimport { EditorState, Plugin, PluginKey } from '@milkdown/prose/state'\nimport type { JSONRecord, Parser } from '@milkdown/transformer'\n\nimport { withMeta } from '../__internal__'\nimport { ParserReady, parserCtx } from './parser'\nimport { schemaCtx } from './schema'\nimport { SerializerReady } from './serializer'\nimport { CommandsReady } from './commands'\nimport { editorStateCtx, inputRulesCtx, prosePluginsCtx } from './atoms'\n\n/// @internal\nexport type DefaultValue = string | { type: 'html', dom: HTMLElement } | { type: 'json', value: JSONRecord }\ntype StateOptions = Parameters<typeof EditorState.create>[0]\ntype StateOptionsOverride = (prev: StateOptions) => StateOptions\n\n/// A slice which contains the default value of the editor.\n/// Can be markdown string, html string or json.\nexport const defaultValueCtx = createSlice('' as DefaultValue, 'defaultValue')\n\n/// A slice which contains the options which is used to create the editor state.\nexport const editorStateOptionsCtx = createSlice<StateOptionsOverride>(x => x, 'stateOptions')\n\n/// A slice which stores timers that need to be waited for before starting to run the plugin.\n/// By default, it's `[ParserReady, SerializerReady, CommandsReady]`.\nexport const editorStateTimerCtx = createSlice([] as TimerType[], 'editorStateTimer')\n\n/// The timer which will be resolved when the editor state plugin is ready.\nexport const EditorStateReady = createTimer('EditorStateReady')\n\n/// @internal\nexport function getDoc(defaultValue: DefaultValue, parser: Parser, schema: Schema) {\n  if (typeof defaultValue === 'string')\n    return parser(defaultValue)\n\n  if (defaultValue.type === 'html')\n    return DOMParser.fromSchema(schema).parse(defaultValue.dom)\n\n  if (defaultValue.type === 'json')\n    return Node.fromJSON(schema, defaultValue.value)\n\n  throw docTypeError(defaultValue)\n}\n\nconst key = new PluginKey('MILKDOWN_STATE_TRACKER')\n\nfunction overrideBaseKeymap(keymap: Record<string, Command>) {\n  const handleBackspace = chainCommands(\n    undoInputRule,\n    deleteSelection,\n    joinBackward,\n    selectNodeBackward,\n  )\n  keymap.Backspace = handleBackspace\n  return keymap\n}\n\n/// The editor state plugin.\n/// This plugin will create a prosemirror editor state.\n///\n/// This plugin will wait for the parser plugin, serializer plugin and commands plugin.\nexport const editorState: MilkdownPlugin = (ctx) => {\n  ctx.inject(defaultValueCtx, '')\n    .inject(editorStateCtx, {} as EditorState)\n    .inject(editorStateOptionsCtx, x => x)\n    .inject(editorStateTimerCtx, [ParserReady, SerializerReady, CommandsReady])\n    .record(EditorStateReady)\n\n  return async () => {\n    await ctx.waitTimers(editorStateTimerCtx)\n\n    const schema = ctx.get(schemaCtx)\n    const parser = ctx.get(parserCtx)\n    const rules = ctx.get(inputRulesCtx)\n    const optionsOverride = ctx.get(editorStateOptionsCtx)\n    const prosePlugins = ctx.get(prosePluginsCtx)\n    const defaultValue = ctx.get(defaultValueCtx)\n    const doc = getDoc(defaultValue, parser, schema)\n\n    const plugins = [\n      ...prosePlugins,\n      new Plugin({\n        key,\n        state: {\n          init: () => {\n            // do nothing\n          },\n          apply: (_tr, _value, _oldState, newState) => {\n            ctx.set(editorStateCtx, newState)\n          },\n        },\n      }),\n      createInputRules({ rules }),\n      createKeymap(overrideBaseKeymap(baseKeymap)),\n    ]\n\n    ctx.set(prosePluginsCtx, plugins)\n\n    const options = optionsOverride({\n      schema,\n      doc,\n      plugins,\n    })\n\n    const state = EditorState.create(options)\n    ctx.set(editorStateCtx, state)\n    ctx.done(EditorStateReady)\n\n    return () => {\n      ctx.remove(defaultValueCtx)\n        .remove(editorStateCtx)\n        .remove(editorStateOptionsCtx)\n        .remove(editorStateTimerCtx)\n        .clearTimer(EditorStateReady)\n    }\n  }\n}\n\nwithMeta(editorState, {\n  displayName: 'EditorState',\n})\n", "import type { Ctx, MilkdownPlugin, TimerType } from '@milkdown/ctx'\nimport { createSlice, createTimer } from '@milkdown/ctx'\nimport { Plugin, PluginKey } from '@milkdown/prose/state'\nimport type { DirectEditorProps } from '@milkdown/prose/view'\nimport { EditorView } from '@milkdown/prose/view'\n\nimport { withMeta } from '../__internal__'\nimport { EditorStateReady } from './editor-state'\nimport { InitReady } from './init'\nimport { editorStateCtx, editorViewCtx, markViewCtx, nodeViewCtx, prosePluginsCtx } from './atoms'\n\ntype EditorOptions = Omit<DirectEditorProps, 'state'>\n\ntype RootType = Node | undefined | null | string\n\n/// The timer which will be resolved when the editor view plugin is ready.\nexport const EditorViewReady = createTimer('EditorViewReady')\n\n/// A slice which stores timers that need to be waited for before starting to run the plugin.\n/// By default, it's `[EditorStateReady]`.\nexport const editorViewTimerCtx = createSlice([] as TimerType[], 'editorViewTimer')\n\n/// A slice which contains the editor view options which will be passed to the editor view.\nexport const editorViewOptionsCtx = createSlice({} as Partial<EditorOptions>, 'editorViewOptions')\n\n/// A slice which contains the value to get the root element.\n/// Can be a selector string, a node or null.\n/// If it's null, the editor will be created in the body.\nexport const rootCtx = createSlice(null as RootType, 'root')\n\n/// A slice which contains the actually root element.\nexport const rootDOMCtx = createSlice(null as unknown as HTMLElement, 'rootDOM')\n\n/// A slice which contains the root element attributes.\n/// You can add attributes to the root element by this slice.\nexport const rootAttrsCtx = createSlice({} as Record<string, string>, 'rootAttrs')\n\nfunction createViewContainer(root: Node, ctx: Ctx) {\n  const container = document.createElement('div')\n  container.className = 'milkdown'\n  root.appendChild(container)\n  ctx.set(rootDOMCtx, container)\n\n  const attrs = ctx.get(rootAttrsCtx)\n  Object.entries(attrs).forEach(([key, value]) => container.setAttribute(key, value))\n\n  return container\n}\n\nfunction prepareViewDom(dom: Element) {\n  dom.classList.add('editor')\n  dom.setAttribute('role', 'textbox')\n}\n\nconst key = new PluginKey('MILKDOWN_VIEW_CLEAR')\n\n/// The editor view plugin.\n/// This plugin will create an editor view.\n///\n/// This plugin will wait for the editor state plugin.\nexport const editorView: MilkdownPlugin = (ctx) => {\n  ctx.inject(rootCtx, document.body)\n    .inject(editorViewCtx, {} as EditorView)\n    .inject(editorViewOptionsCtx, {})\n    .inject(rootDOMCtx, null as unknown as HTMLElement)\n    .inject(rootAttrsCtx, {})\n    .inject(editorViewTimerCtx, [EditorStateReady])\n    .record(EditorViewReady)\n\n  return async () => {\n    await ctx.wait(InitReady)\n\n    const root = ctx.get(rootCtx) || document.body\n    const el = typeof root === 'string' ? document.querySelector(root) : root\n\n    ctx.update(prosePluginsCtx, xs => [\n      new Plugin({\n        key,\n        view: (editorView) => {\n          const container = el ? createViewContainer(el, ctx) : undefined\n\n          const handleDOM = () => {\n            if (container && el) {\n              const editor = editorView.dom\n              el.replaceChild(container, editor)\n              container.appendChild(editor)\n            }\n          }\n          handleDOM()\n          return {\n            destroy: () => {\n              if (container?.parentNode)\n                container?.parentNode.replaceChild(editorView.dom, container)\n\n              container?.remove()\n            },\n          }\n        },\n      }),\n      ...xs,\n    ])\n\n    await ctx.waitTimers(editorViewTimerCtx)\n\n    const state = ctx.get(editorStateCtx)\n    const options = ctx.get(editorViewOptionsCtx)\n    const nodeViews = Object.fromEntries(ctx.get(nodeViewCtx))\n    const markViews = Object.fromEntries(ctx.get(markViewCtx))\n    const view = new EditorView(el as Node, {\n      state,\n      nodeViews,\n      markViews,\n      ...options,\n    })\n    prepareViewDom(view.dom)\n    ctx.set(editorViewCtx, view)\n    ctx.done(EditorViewReady)\n\n    return () => {\n      view?.destroy()\n      ctx.remove(rootCtx)\n        .remove(editorViewCtx)\n        .remove(editorViewOptionsCtx)\n        .remove(rootDOMCtx)\n        .remove(rootAttrsCtx)\n        .remove(editorViewTimerCtx)\n        .clearTimer(EditorViewReady)\n    }\n  }\n}\n\nwithMeta(editorView, {\n  displayName: 'EditorView',\n})\n", "import type { CtxRunner, MilkdownPlugin, Telemetry } from '@milkdown/ctx'\nimport { Clock, Container, Ctx } from '@milkdown/ctx'\n\nimport type { Config } from '../internal-plugin'\nimport {\n  commands,\n  config,\n  editorState,\n  editorView,\n  init,\n  parser,\n  schema,\n  serializer,\n} from '../internal-plugin'\n\n/// The status of the editor.\nexport enum EditorStatus {\n  /// The editor is not initialized.\n  Idle = 'Idle',\n  /// The editor is creating.\n  OnCreate = 'OnCreate',\n  /// The editor has been created and ready to use.\n  Created = 'Created',\n  /// The editor is destroying.\n  OnDestroy = 'OnDestroy',\n  /// The editor has been destroyed.\n  Destroyed = 'Destroyed',\n}\n\n/// Type for the callback called when editor status changed.\nexport type OnStatusChange = (status: EditorStatus) => void\n\ntype EditorPluginStore = Map<\n  MilkdownPlugin,\n  {\n    ctx: Ctx | undefined\n    handler: CtxRunner | undefined\n    cleanup: ReturnType<CtxRunner>\n  }\n>\n\n/// The milkdown editor class.\nexport class Editor {\n  /// Create a new editor instance.\n  static make() {\n    return new Editor()\n  }\n\n  /// @internal\n  #enableInspector = false\n  /// @internal\n  #status = EditorStatus.Idle\n  /// @internal\n  #configureList: Config[] = []\n  /// @internal\n  #onStatusChange: OnStatusChange = () => undefined\n\n  /// @internal\n  readonly #container = new Container()\n  /// @internal\n  readonly #clock = new Clock()\n\n  /// @internal\n  readonly #usrPluginStore: EditorPluginStore = new Map()\n\n  /// @internal\n  readonly #sysPluginStore: EditorPluginStore = new Map()\n\n  /// @internal\n  readonly #ctx = new Ctx(this.#container, this.#clock)\n\n  /// @internal\n  readonly #loadInternal = () => {\n    const configPlugin = config(async (ctx) => {\n      await Promise.all(this.#configureList.map(fn => fn(ctx)))\n    })\n    const internalPlugins = [\n      schema,\n      parser,\n      serializer,\n      commands,\n      editorState,\n      editorView,\n      init(this),\n      configPlugin,\n    ]\n    this.#prepare(internalPlugins, this.#sysPluginStore)\n  }\n\n  /// @internal\n  readonly #prepare = (plugins: MilkdownPlugin[], store: EditorPluginStore) => {\n    plugins.forEach((plugin) => {\n      const ctx = this.#ctx.produce(this.#enableInspector ? plugin.meta : undefined)\n      const handler = plugin(ctx)\n      store.set(plugin, { ctx, handler, cleanup: undefined })\n    })\n  }\n\n  /// @internal\n  readonly #cleanup = (plugins: MilkdownPlugin[], remove = false) => {\n    return Promise.all(\n      [plugins].flat().map((plugin) => {\n        const loader = this.#usrPluginStore.get(plugin)\n        const cleanup = loader?.cleanup\n        if (remove)\n          this.#usrPluginStore.delete(plugin)\n        else\n          this.#usrPluginStore.set(plugin, { ctx: undefined, handler: undefined, cleanup: undefined })\n\n        if (typeof cleanup === 'function')\n          return cleanup()\n\n        return cleanup\n      }),\n    )\n  }\n\n  /// @internal\n  readonly #cleanupInternal = async () => {\n    await Promise.all([...this.#sysPluginStore.entries()].map(([_, { cleanup }]) => {\n      if (typeof cleanup === 'function')\n        return cleanup()\n\n      return cleanup\n    }))\n    this.#sysPluginStore.clear()\n  }\n\n  /// @internal\n  readonly #setStatus = (status: EditorStatus) => {\n    this.#status = status\n    this.#onStatusChange(status)\n  }\n\n  /// @internal\n  readonly #loadPluginInStore = (store: EditorPluginStore) => {\n    return [...store.entries()].map(async ([key, loader]) => {\n      const { ctx, handler } = loader\n      if (!handler)\n        return\n\n      const cleanup = await handler()\n\n      store.set(key, { ctx, handler, cleanup })\n    })\n  }\n\n  /// Get the ctx of the editor.\n  get ctx() {\n    return this.#ctx\n  }\n\n  /// Get the status of the editor.\n  get status() {\n    return this.#status\n  }\n\n  /// Enable the inspector for the editor.\n  /// You can also pass `false` to disable the inspector.\n  readonly enableInspector = (enable = true) => {\n    this.#enableInspector = enable\n\n    return this\n  }\n\n  /// Subscribe to the status change event for the editor.\n  /// The new subscription will replace the old one.\n  readonly onStatusChange = (onChange: OnStatusChange) => {\n    this.#onStatusChange = onChange\n    return this\n  }\n\n  /// Add a config for the editor.\n  readonly config = (configure: Config) => {\n    this.#configureList.push(configure)\n    return this\n  }\n\n  /// Remove a config for the editor.\n  readonly removeConfig = (configure: Config) => {\n    this.#configureList = this.#configureList.filter(x => x !== configure)\n    return this\n  }\n\n  /// Use a plugin or a list of plugins for the editor.\n  readonly use = (plugins: MilkdownPlugin | MilkdownPlugin[]) => {\n    const _plugins = [plugins].flat()\n    _plugins.flat().forEach((plugin) => {\n      this.#usrPluginStore.set(plugin, {\n        ctx: undefined,\n        handler: undefined,\n        cleanup: undefined,\n      })\n    })\n\n    if (this.#status === EditorStatus.Created)\n      this.#prepare(_plugins, this.#usrPluginStore)\n\n    return this\n  }\n\n  /// Remove a plugin or a list of plugins from the editor.\n  readonly remove = async (plugins: MilkdownPlugin | MilkdownPlugin[]): Promise<Editor> => {\n    if (this.#status === EditorStatus.OnCreate) {\n      console.warn('[Milkdown]: You are trying to remove plugins when the editor is creating, this is not recommended, please check your code.')\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(this.remove(plugins))\n        }, 50)\n      })\n    }\n\n    await this.#cleanup([plugins].flat(), true)\n    return this\n  }\n\n  /// Create the editor with current config and plugins.\n  /// If the editor is already created, it will be recreated.\n  readonly create = async (): Promise<Editor> => {\n    if (this.#status === EditorStatus.OnCreate)\n      return this\n\n    if (this.#status === EditorStatus.Created)\n      await this.destroy()\n\n    this.#setStatus(EditorStatus.OnCreate)\n\n    this.#loadInternal()\n    this.#prepare([...this.#usrPluginStore.keys()], this.#usrPluginStore)\n\n    await Promise.all(\n      [\n        this.#loadPluginInStore(this.#sysPluginStore),\n        this.#loadPluginInStore(this.#usrPluginStore),\n      ].flat(),\n    )\n\n    this.#setStatus(EditorStatus.Created)\n    return this\n  }\n\n  /// Destroy the editor.\n  /// If you want to clear all plugins, set `clearPlugins` to `true`.\n  readonly destroy = async (clearPlugins = false): Promise<Editor> => {\n    if (this.#status === EditorStatus.Destroyed || this.#status === EditorStatus.OnDestroy)\n      return this\n\n    if (this.#status === EditorStatus.OnCreate) {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(this.destroy(clearPlugins))\n        }, 50)\n      })\n    }\n\n    if (clearPlugins)\n      this.#configureList = []\n\n    this.#setStatus(EditorStatus.OnDestroy)\n    await this.#cleanup([...this.#usrPluginStore.keys()], clearPlugins)\n    await this.#cleanupInternal()\n\n    this.#setStatus(EditorStatus.Destroyed)\n    return this\n  }\n\n  /// Call an action with the ctx of the editor.\n  /// This method should be used after the editor is created.\n  readonly action = <T>(action: (ctx: Ctx) => T) => action(this.#ctx)\n\n  /// Get inspections of plugins in editor.\n  /// Make sure you have enabled inspector by `editor.enableInspector()` before calling this method.\n  readonly inspect = (): Telemetry[] => {\n    if (!this.#enableInspector) {\n      console.warn('[Milkdown]: You are trying to collect inspection when inspector is disabled, please enable inspector by `editor.enableInspector()` first.')\n      return []\n    }\n    return [...this.#sysPluginStore.values(), ...this.#usrPluginStore.values()]\n      .map(({ ctx }) => ctx?.inspector?.read())\n      .filter((x): x is Telemetry => Boolean(x))\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAIA,QAAIA,KAAI;AACR,QAAIC,KAAID,KAAI;AACZ,QAAIE,KAAID,KAAI;AACZ,QAAIE,KAAID,KAAI;AACZ,QAAIE,KAAID,KAAI;AACZ,QAAIE,KAAIF,KAAI;AAgBZ,WAAO,UAAU,SAAU,KAAK,SAAS;AACvC,gBAAU,WAAW,CAAC;AACtB,UAAI,OAAO,OAAO;AAClB,UAAI,SAAS,YAAY,IAAI,SAAS,GAAG;AACvC,eAAOG,OAAM,GAAG;AAAA,MAClB,WAAW,SAAS,YAAY,SAAS,GAAG,GAAG;AAC7C,eAAO,QAAQ,OAAO,QAAQ,GAAG,IAAI,SAAS,GAAG;AAAA,MACnD;AACA,YAAM,IAAI;AAAA,QACR,0DACE,KAAK,UAAU,GAAG;AAAA,MACtB;AAAA,IACF;AAUA,aAASA,OAAM,KAAK;AAClB,YAAM,OAAO,GAAG;AAChB,UAAI,IAAI,SAAS,KAAK;AACpB;AAAA,MACF;AACA,UAAI,QAAQ,mIAAmI;AAAA,QAC7I;AAAA,MACF;AACA,UAAI,CAAC,OAAO;AACV;AAAA,MACF;AACA,UAAIC,KAAI,WAAW,MAAM,CAAC,CAAC;AAC3B,UAAI,QAAQ,MAAM,CAAC,KAAK,MAAM,YAAY;AAC1C,cAAQ,MAAM;AAAA,QACZ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAOA,KAAIF;AAAA,QACb,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAOE,KAAIH;AAAA,QACb,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAOG,KAAIJ;AAAA,QACb,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAOI,KAAIL;AAAA,QACb,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAOK,KAAIN;AAAA,QACb,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAOM,KAAIP;AAAA,QACb,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAOO;AAAA,QACT;AACE,iBAAO;AAAA,MACX;AAAA,IACF;AAUA,aAAS,SAAS,IAAI;AACpB,UAAI,QAAQ,KAAK,IAAI,EAAE;AACvB,UAAI,SAASJ,IAAG;AACd,eAAO,KAAK,MAAM,KAAKA,EAAC,IAAI;AAAA,MAC9B;AACA,UAAI,SAASD,IAAG;AACd,eAAO,KAAK,MAAM,KAAKA,EAAC,IAAI;AAAA,MAC9B;AACA,UAAI,SAASD,IAAG;AACd,eAAO,KAAK,MAAM,KAAKA,EAAC,IAAI;AAAA,MAC9B;AACA,UAAI,SAASD,IAAG;AACd,eAAO,KAAK,MAAM,KAAKA,EAAC,IAAI;AAAA,MAC9B;AACA,aAAO,KAAK;AAAA,IACd;AAUA,aAAS,QAAQ,IAAI;AACnB,UAAI,QAAQ,KAAK,IAAI,EAAE;AACvB,UAAI,SAASG,IAAG;AACd,eAAO,OAAO,IAAI,OAAOA,IAAG,KAAK;AAAA,MACnC;AACA,UAAI,SAASD,IAAG;AACd,eAAO,OAAO,IAAI,OAAOA,IAAG,MAAM;AAAA,MACpC;AACA,UAAI,SAASD,IAAG;AACd,eAAO,OAAO,IAAI,OAAOA,IAAG,QAAQ;AAAA,MACtC;AACA,UAAI,SAASD,IAAG;AACd,eAAO,OAAO,IAAI,OAAOA,IAAG,QAAQ;AAAA,MACtC;AACA,aAAO,KAAK;AAAA,IACd;AAMA,aAAS,OAAO,IAAI,OAAOO,IAAG,MAAM;AAClC,UAAI,WAAW,SAASA,KAAI;AAC5B,aAAO,KAAK,MAAM,KAAKA,EAAC,IAAI,MAAM,QAAQ,WAAW,MAAM;AAAA,IAC7D;AAAA;AAAA;;;ACjKA;AAAA;AAMA,aAAS,MAAM,KAAK;AACnB,MAAAC,aAAY,QAAQA;AACpB,MAAAA,aAAY,UAAUA;AACtB,MAAAA,aAAY,SAAS;AACrB,MAAAA,aAAY,UAAUC;AACtB,MAAAD,aAAY,SAAS;AACrB,MAAAA,aAAY,UAAU;AACtB,MAAAA,aAAY,WAAW;AACvB,MAAAA,aAAY,UAAU;AAEtB,aAAO,KAAK,GAAG,EAAE,QAAQ,SAAO;AAC/B,QAAAA,aAAY,GAAG,IAAI,IAAI,GAAG;AAAA,MAC3B,CAAC;AAMD,MAAAA,aAAY,QAAQ,CAAC;AACrB,MAAAA,aAAY,QAAQ,CAAC;AAOrB,MAAAA,aAAY,aAAa,CAAC;AAQ1B,eAAS,YAAY,WAAW;AAC/B,YAAI,OAAO;AAEX,iBAASE,KAAI,GAAGA,KAAI,UAAU,QAAQA,MAAK;AAC1C,kBAAS,QAAQ,KAAK,OAAQ,UAAU,WAAWA,EAAC;AACpD,kBAAQ;AAAA,QACT;AAEA,eAAOF,aAAY,OAAO,KAAK,IAAI,IAAI,IAAIA,aAAY,OAAO,MAAM;AAAA,MACrE;AACA,MAAAA,aAAY,cAAc;AAS1B,eAASA,aAAY,WAAW;AAC/B,YAAI;AACJ,YAAI,iBAAiB;AACrB,YAAI;AACJ,YAAI;AAEJ,iBAASG,UAAS,MAAM;AAEvB,cAAI,CAACA,OAAM,SAAS;AACnB;AAAA,UACD;AAEA,gBAAM,OAAOA;AAGb,gBAAM,OAAO,OAAO,oBAAI,KAAK,CAAC;AAC9B,gBAAM,KAAK,QAAQ,YAAY;AAC/B,eAAK,OAAO;AACZ,eAAK,OAAO;AACZ,eAAK,OAAO;AACZ,qBAAW;AAEX,eAAK,CAAC,IAAIH,aAAY,OAAO,KAAK,CAAC,CAAC;AAEpC,cAAI,OAAO,KAAK,CAAC,MAAM,UAAU;AAEhC,iBAAK,QAAQ,IAAI;AAAA,UAClB;AAGA,cAAII,SAAQ;AACZ,eAAK,CAAC,IAAI,KAAK,CAAC,EAAE,QAAQ,iBAAiB,CAAC,OAAO,WAAW;AAE7D,gBAAI,UAAU,MAAM;AACnB,qBAAO;AAAA,YACR;AACA,YAAAA;AACA,kBAAM,YAAYJ,aAAY,WAAW,MAAM;AAC/C,gBAAI,OAAO,cAAc,YAAY;AACpC,oBAAM,MAAM,KAAKI,MAAK;AACtB,sBAAQ,UAAU,KAAK,MAAM,GAAG;AAGhC,mBAAK,OAAOA,QAAO,CAAC;AACpB,cAAAA;AAAA,YACD;AACA,mBAAO;AAAA,UACR,CAAC;AAGD,UAAAJ,aAAY,WAAW,KAAK,MAAM,IAAI;AAEtC,gBAAM,QAAQ,KAAK,OAAOA,aAAY;AACtC,gBAAM,MAAM,MAAM,IAAI;AAAA,QACvB;AAEA,QAAAG,OAAM,YAAY;AAClB,QAAAA,OAAM,YAAYH,aAAY,UAAU;AACxC,QAAAG,OAAM,QAAQH,aAAY,YAAY,SAAS;AAC/C,QAAAG,OAAM,SAASE;AACf,QAAAF,OAAM,UAAUH,aAAY;AAE5B,eAAO,eAAeG,QAAO,WAAW;AAAA,UACvC,YAAY;AAAA,UACZ,cAAc;AAAA,UACd,KAAK,MAAM;AACV,gBAAI,mBAAmB,MAAM;AAC5B,qBAAO;AAAA,YACR;AACA,gBAAI,oBAAoBH,aAAY,YAAY;AAC/C,gCAAkBA,aAAY;AAC9B,6BAAeA,aAAY,QAAQ,SAAS;AAAA,YAC7C;AAEA,mBAAO;AAAA,UACR;AAAA,UACA,KAAK,CAAAM,OAAK;AACT,6BAAiBA;AAAA,UAClB;AAAA,QACD,CAAC;AAGD,YAAI,OAAON,aAAY,SAAS,YAAY;AAC3C,UAAAA,aAAY,KAAKG,MAAK;AAAA,QACvB;AAEA,eAAOA;AAAA,MACR;AAEA,eAASE,QAAO,WAAW,WAAW;AACrC,cAAM,WAAWL,aAAY,KAAK,aAAa,OAAO,cAAc,cAAc,MAAM,aAAa,SAAS;AAC9G,iBAAS,MAAM,KAAK;AACpB,eAAO;AAAA,MACR;AASA,eAAS,OAAO,YAAY;AAC3B,QAAAA,aAAY,KAAK,UAAU;AAC3B,QAAAA,aAAY,aAAa;AAEzB,QAAAA,aAAY,QAAQ,CAAC;AACrB,QAAAA,aAAY,QAAQ,CAAC;AAErB,YAAIE;AACJ,cAAM,SAAS,OAAO,eAAe,WAAW,aAAa,IAAI,MAAM,QAAQ;AAC/E,cAAM,MAAM,MAAM;AAElB,aAAKA,KAAI,GAAGA,KAAI,KAAKA,MAAK;AACzB,cAAI,CAAC,MAAMA,EAAC,GAAG;AAEd;AAAA,UACD;AAEA,uBAAa,MAAMA,EAAC,EAAE,QAAQ,OAAO,KAAK;AAE1C,cAAI,WAAW,CAAC,MAAM,KAAK;AAC1B,YAAAF,aAAY,MAAM,KAAK,IAAI,OAAO,MAAM,WAAW,MAAM,CAAC,IAAI,GAAG,CAAC;AAAA,UACnE,OAAO;AACN,YAAAA,aAAY,MAAM,KAAK,IAAI,OAAO,MAAM,aAAa,GAAG,CAAC;AAAA,UAC1D;AAAA,QACD;AAAA,MACD;AAQA,eAASC,WAAU;AAClB,cAAM,aAAa;AAAA,UAClB,GAAGD,aAAY,MAAM,IAAI,WAAW;AAAA,UACpC,GAAGA,aAAY,MAAM,IAAI,WAAW,EAAE,IAAI,eAAa,MAAM,SAAS;AAAA,QACvE,EAAE,KAAK,GAAG;AACV,QAAAA,aAAY,OAAO,EAAE;AACrB,eAAO;AAAA,MACR;AASA,eAAS,QAAQ,MAAM;AACtB,YAAI,KAAK,KAAK,SAAS,CAAC,MAAM,KAAK;AAClC,iBAAO;AAAA,QACR;AAEA,YAAIE;AACJ,YAAI;AAEJ,aAAKA,KAAI,GAAG,MAAMF,aAAY,MAAM,QAAQE,KAAI,KAAKA,MAAK;AACzD,cAAIF,aAAY,MAAME,EAAC,EAAE,KAAK,IAAI,GAAG;AACpC,mBAAO;AAAA,UACR;AAAA,QACD;AAEA,aAAKA,KAAI,GAAG,MAAMF,aAAY,MAAM,QAAQE,KAAI,KAAKA,MAAK;AACzD,cAAIF,aAAY,MAAME,EAAC,EAAE,KAAK,IAAI,GAAG;AACpC,mBAAO;AAAA,UACR;AAAA,QACD;AAEA,eAAO;AAAA,MACR;AASA,eAAS,YAAY,QAAQ;AAC5B,eAAO,OAAO,SAAS,EACrB,UAAU,GAAG,OAAO,SAAS,EAAE,SAAS,CAAC,EACzC,QAAQ,WAAW,GAAG;AAAA,MACzB;AASA,eAAS,OAAO,KAAK;AACpB,YAAI,eAAe,OAAO;AACzB,iBAAO,IAAI,SAAS,IAAI;AAAA,QACzB;AACA,eAAO;AAAA,MACR;AAMA,eAAS,UAAU;AAClB,gBAAQ,KAAK,uIAAuI;AAAA,MACrJ;AAEA,MAAAF,aAAY,OAAOA,aAAY,KAAK,CAAC;AAErC,aAAOA;AAAA,IACR;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACjRjB;AAAA;AAMA,YAAQ,aAAa;AACrB,YAAQ,OAAO;AACf,YAAQ,OAAO;AACf,YAAQ,YAAY;AACpB,YAAQ,UAAU,aAAa;AAC/B,YAAQ,UAAW,uBAAM;AACxB,UAAI,SAAS;AAEb,aAAO,MAAM;AACZ,YAAI,CAAC,QAAQ;AACZ,mBAAS;AACT,kBAAQ,KAAK,uIAAuI;AAAA,QACrJ;AAAA,MACD;AAAA,IACD,GAAG;AAMH,YAAQ,SAAS;AAAA,MAChaAAS,YAAY;AAIpB,UAAI,OAAO,WAAW,eAAe,OAAO,YAAY,OAAO,QAAQ,SAAS,cAAc,OAAO,QAAQ,SAAS;AACrH,eAAO;AAAA,MACR;AAGA,UAAI,OAAO,cAAc,eAAe,UAAU,aAAa,UAAU,UAAU,YAAY,EAAE,MAAM,uBAAuB,GAAG;AAChI,eAAO;AAAA,MACR;AAEA,UAAIO;AAIJ,aAAQ,OAAO,aAAa,eAAe,SAAS,mBAAmB,SAAS,gBAAgB,SAAS,SAAS,gBAAgB,MAAM;AAAA,MAEtI,OAAO,WAAW,eAAe,OAAO,YAAY,OAAO,QAAQ,WAAY,OAAO,QAAQ,aAAa,OAAO,QAAQ;AAAA;AAAA,MAG1H,OAAO,cAAc,eAAe,UAAU,cAAcA,KAAI,UAAU,UAAU,YAAY,EAAE,MAAM,gBAAgB,MAAM,SAASA,GAAE,CAAC,GAAG,EAAE,KAAK;AAAA,MAEpJ,OAAO,cAAc,eAAe,UAAU,aAAa,UAAU,UAAU,YAAY,EAAE,MAAM,oBAAoB;AAAA,IAC1H;AAQA,aAAS,WAAW,MAAM;AACzB,WAAK,CAAC,KAAK,KAAK,YAAY,OAAO,MAClC,KAAK,aACJ,KAAK,YAAY,QAAQ,OAC1B,KAAK,CAAC,KACL,KAAK,YAAY,QAAQ,OAC1B,MAAM,OAAO,QAAQ,SAAS,KAAK,IAAI;AAExC,UAAI,CAAC,KAAK,WAAW;AACpB;AAAA,MACD;AAEA,YAAMC,KAAI,YAAY,KAAK;AAC3B,WAAK,OAAO,GAAG,GAAGA,IAAG,gBAAgB;AAKrC,UAAIC,SAAQ;AACZ,UAAI,QAAQ;AACZ,WAAK,CAAC,EAAE,QAAQ,eAAe,WAAS;AACvC,YAAI,UAAU,MAAM;AACnB;AAAA,QACD;AACA,QAAAA;AACA,YAAI,UAAU,MAAM;AAGnB,kBAAQA;AAAA,QACT;AAAA,MACD,CAAC;AAED,WAAK,OAAO,OAAO,GAAGD,EAAC;AAAA,IACxB;AAUA,YAAQ,MAAM,QAAQ,SAAS,QAAQ,QAAQ,MAAM;AAAA,IAAC;AAQtD,aAAS,KAAK,YAAY;AACzB,UAAI;AACH,YAAI,YAAY;AACf,kBAAQ,QAAQ,QAAQ,SAAS,UAAU;AAAA,QAC5C,OAAO;AACN,kBAAQ,QAAQ,WAAW,OAAO;AAAA,QACnC;AAAA,MACD,SAAS,OAAO;AAAA,MAGhB;AAAA,IACD;AAQA,aAAS,OAAO;AACf,UAAI;AACJ,UAAI;AACH,YAAI,QAAQ,QAAQ,QAAQ,OAAO;AAAA,MACpC,SAAS,OAAO;AAAA,MAGhB;AAGA,UAAI,CAAC,KAAK,OAAO,YAAY,eAAe,SAAS,SAAS;AAC7D,YAAI,QAAQ,IAAI;AAAA,MACjB;AAEA,aAAO;AAAA,IACR;AAaA,aAAS,eAAe;AACvB,UAAI;AAGH,eAAO;AAAA,MACR,SAAS,OAAO;AAAA,MAGhB;AAAA,IACD;AAEA,WAAO,UAAU,iBAAoB,OAAO;AAE5C,QAAM,EAAC,WAAU,IAAI,OAAO;AAM5B,eAAW,IAAI,SAAUE,IAAG;AAC3B,UAAI;AACH,eAAO,KAAK,UAAUA,EAAC;AAAA,MACxB,SAAS,OAAO;AACf,eAAO,iCAAiC,MAAM;AAAA,MAC/C;AAAA,IACD;AAAA;AAAA;;;AC9QA;AAAA;AAAA;AAEA,QAAI,SAAS,OAAO,UAAU;AAC9B,QAAI,QAAQ,OAAO,UAAU;AAC7B,QAAI,iBAAiB,OAAO;AAC5B,QAAI,OAAO,OAAO;AAElB,QAAI,UAAU,SAASC,SAAQ,KAAK;AACnC,UAAI,OAAO,MAAM,YAAY,YAAY;AACxC,eAAO,MAAM,QAAQ,GAAG;AAAA,MACzB;AAEA,aAAO,MAAM,KAAK,GAAG,MAAM;AAAA,IAC5B;AAEA,QAAIC,iBAAgB,SAASA,eAAc,KAAK;AAC/C,UAAI,CAAC,OAAO,MAAM,KAAK,GAAG,MAAM,mBAAmB;AAClD,eAAO;AAAA,MACR;AAEA,UAAI,oBAAoB,OAAO,KAAK,KAAK,aAAa;AACtD,UAAI,mBAAmB,IAAI,eAAe,IAAI,YAAY,aAAa,OAAO,KAAK,IAAI,YAAY,WAAW,eAAe;AAE7H,UAAI,IAAI,eAAe,CAAC,qBAAqB,CAAC,kBAAkB;AAC/D,eAAO;AAAA,MACR;AAIA,UAAI;AACJ,WAAK,OAAO,KAAK;AAAA,MAAO;AAExB,aAAO,OAAO,QAAQ,eAAe,OAAO,KAAK,KAAK,GAAG;AAAA,IAC1D;AAGA,QAAI,cAAc,SAASC,aAAY,QAAQ,SAAS;AACvD,UAAI,kBAAkB,QAAQ,SAAS,aAAa;AACnD,uBAAe,QAAQ,QAAQ,MAAM;AAAA,UACpC,YAAY;AAAA,UACZ,cAAc;AAAA,UACd,OAAO,QAAQ;AAAA,UACf,UAAU;AAAA,QACX,CAAC;AAAA,MACF,OAAO;AACN,eAAO,QAAQ,IAAI,IAAI,QAAQ;AAAA,MAChC;AAAA,IACD;AAGA,QAAI,cAAc,SAASC,aAAY,KAAK,MAAM;AACjD,UAAI,SAAS,aAAa;AACzB,YAAI,CAAC,OAAO,KAAK,KAAK,IAAI,GAAG;AAC5B,iBAAO;AAAA,QACR,WAAW,MAAM;AAGhB,iBAAO,KAAK,KAAK,IAAI,EAAE;AAAA,QACxB;AAAA,MACD;AAEA,aAAO,IAAI,IAAI;AAAA,IAChB;AAEA,WAAO,UAAU,SAASC,UAAS;AAClC,UAAI,SAAS,MAAM,KAAK,MAAM,aAAa;AAC3C,UAAI,SAAS,UAAU,CAAC;AACxB,UAAIC,KAAI;AACR,UAAI,SAAS,UAAU;AACvB,UAAI,OAAO;AAGX,UAAI,OAAO,WAAW,WAAW;AAChC,eAAO;AACP,iBAAS,UAAU,CAAC,KAAK,CAAC;AAE1B,QAAAA,KAAI;AAAA,MACL;AACA,UAAI,UAAU,QAAS,OAAO,WAAW,YAAY,OAAO,WAAW,YAAa;AACnF,iBAAS,CAAC;AAAA,MACX;AAEA,aAAOA,KAAI,QAAQ,EAAEA,IAAG;AACvB,kBAAU,UAAUA,EAAC;AAErB,YAAI,WAAW,MAAM;AAEpB,eAAK,QAAQ,SAAS;AACrB,kBAAM,YAAY,QAAQ,IAAI;AAC9B,mBAAO,YAAY,SAAS,IAAI;AAGhC,gBAAI,WAAW,MAAM;AAEpB,kBAAI,QAAQ,SAASJ,eAAc,IAAI,MAAM,cAAc,QAAQ,IAAI,KAAK;AAC3E,oBAAI,aAAa;AAChB,gCAAc;AACd,0BAAQ,OAAO,QAAQ,GAAG,IAAI,MAAM,CAAC;AAAA,gBACtC,OAAO;AACN,0BAAQ,OAAOA,eAAc,GAAG,IAAI,MAAM,CAAC;AAAA,gBAC5C;AAGA,4BAAY,QAAQ,EAAE,MAAY,UAAUG,QAAO,MAAM,OAAO,IAAI,EAAE,CAAC;AAAA,cAGxE,WAAW,OAAO,SAAS,aAAa;AACvC,4BAAY,QAAQ,EAAE,MAAY,UAAU,KAAK,CAAC;AAAA,cACnD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAGA,aAAO;AAAA,IACR;AAAA;AAAA;;;ACpHY,IAAAE,KAAAA,CAAAA,QACVA,GAAA,eAAe,gBACfA,GAAA,kBAAkB,mBAClBA,GAAA,gBAAgB,iBAChBA,GAAA,oBAAoB,qBACpBA,GAAA,yBAAyB,0BACzBA,GAAA,gBAAgB,iBAChBA,GAAA,mBAAmB,oBACnBA,GAAA,uBAAuB,wBACvBA,GAAA,wBAAwB,yBACxBA,GAAA,qBAAqB,sBACrBA,GAAA,8BAA8B,+BAC9BA,GAAA,qBAAqB,sBACrBA,GAAA,sBAAsB,uBACtBA,GAAA,sBAAsB,uBAGtBA,GAAA,aAAa,cACbA,GAAA,gBAAgB,iBAlBNA,KAAAA,KAAA,CAAA,CAAA;ACEL,IAAMC,IAAN,cAA4B,MAAM;EAEvC,YAAYC,IAAiBC,IAAiB;AAC5C,UAAMA,EAAO,GACb,KAAK,OAAO,iBACZ,KAAK,OAAOD;EACd;AACF;ACNA,IAAME,IAAmB,CAACC,IAAWC,OAAoB,OAAOA,MAAU,aAAa,eAAeA;AAAtG,IAEMC,IAAY,CAACC,OAAuB,KAAK,UAAUA,IAAGJ,CAAgB;AAErE,SAASK,EAAaC,IAAe;AACnC,SAAA,IAAIT,EAAcD,EAAU,cAAc,qCAAqCO,EAAUG,EAAI,CAAC,EAAE;AACzG;AAEO,SAASC,EAAgBC,IAAc;AAC5C,SAAO,IAAIX,EAAcD,EAAU,iBAAiB,YAAYY,EAAI,0CAA0C;AAChH;AAEO,SAASC,EAAcD,IAAc;AAC1C,SAAO,IAAIX,EAAcD,EAAU,eAAe,UAAUY,EAAI,0CAA0C;AAC5G;AAEO,SAASE,IAAoB;AAClC,SAAO,IAAIb,EAAcD,EAAU,mBAAmB,8CAA8C;AACtG;AAEO,SAASe,KAA0BC,IAAiB;AACzD,QAAMb,KAAUa,GAAK,OAAO,CAACC,IAAKC,OAAQ;AACxC,QAAI,CAACA;AACI,aAAAD;AAEH,UAAAE,KAAY,CAACX,MACb,MAAM,QAAQA,CAAC,IACTA,EAAgB,IAAI,CAAKY,OAAAD,GAAUC,EAAC,CAAC,EAAE,KAAK,IAAI,IAErDZ,EAAgD,SAC5CD,EAAWC,EAAgD,OAAA,CAAQ,IAEvEA,EAAuB,OACnBD,EAAWC,EAAuB,IAAI,IAEvCA,EAAiC,SAAA;AAE3C,WAAO,GAAGS,EAAG,KAAKE,GAAUD,EAAG,CAAC;EAAA,GAC/B,sDAAsD;AAEzD,SAAO,IAAIjB,EAAcD,EAAU,wBAAwBG,EAAO;AACpE;AAEO,SAASkB,IAAgB;AAC9B,SAAO,IAAIpB,EAAcD,EAAU,eAAe,gDAAgD;AACpG;AAEO,SAASsB,EAAiBC,IAAe;AACvC,SAAA,IAAItB,EAAcD,EAAU,kBAAkB,wCAAwCO,EAAUgB,EAAI,CAAC,GAAG;AACjH;AAEO,SAASC,EAAqBD,IAAe;AAC3C,SAAA,IAAItB,EAAcD,EAAU,sBAAsB,4CAA4CO,EAAUgB,EAAI,CAAC,GAAG;AACzH;AAMO,SAASE,EAAmBC,IAAe;AACzC,SAAA,IAAIC,EAAcC,EAAU,oBAAoB,gCAAgCC,EAAUH,EAAI,CAAC,GAAG;AAC3G;AAEO,SAASI,IAA8B;AAC5C,SAAO,IAAIH;IACTC,EAAU;IACV;EAAA;AAEJ;AASO,SAASG,EAAoBC,IAAc;AAChD,SAAO,IAAIC;IACTC,EAAU;IACN,iDAAiDF,EAAI;EAAA;AAE7D;AAEO,SAASG,EAAoBH,IAAc;AAChD,SAAO,IAAIC;IACTC,EAAU;IACN,iDAAiDF,EAAI;EAAA;AAE7D;;;;;;;;;;;;;;ACpFO,IAAMI,IAAN,MAAgB;EAAhB,cAAA;AAEL,SAAA,WAAA,oBAAyB,IAAA,GAGzB,KAAA,MAAM,CAA+BC,OAA4C;AACzE,YAAAC,KAAU,OAAOD,MAAU,WAC7B,CAAC,GAAG,KAAK,SAAS,OAAA,CAAQ,EAAE,KAAK,CAAKE,MAAAA,EAAE,KAAK,SAASF,EAAK,IAC3D,KAAK,SAAS,IAAIA,GAAM,EAAE;AAE9B,UAAI,CAACC,IAAS;AACZ,cAAME,IAAO,OAAOH,MAAU,WAAWA,KAAQA,GAAM;AACvD,cAAMI,EAAgBD,CAAI;MAC5B;AACO,aAAAF;IAAA,GAIT,KAAA,SAAS,CAA+BD,OAAqC;AACrE,YAAAC,KAAU,OAAOD,MAAU,WAC7B,CAAC,GAAG,KAAK,SAAS,OAAA,CAAQ,EAAE,KAAK,CAAKE,MAAAA,EAAE,KAAK,SAASF,EAAK,IAC3D,KAAK,SAAS,IAAIA,GAAM,EAAE;AAEzBC,MAAAA,MAGL,KAAK,SAAS,OAAOA,GAAQ,KAAK,EAAE;IAAA,GAItC,KAAA,MAAM,CAA+BD,OAC/B,OAAOA,MAAU,WACZ,CAAC,GAAG,KAAK,SAAS,OAAQ,CAAA,EAAE,KAAK,CAAKE,OAAAA,GAAE,KAAK,SAASF,EAAK,IAE7D,KAAK,SAAS,IAAIA,GAAM,EAAE;EACnC;AACF;;;;ACxCO,IAAMK,IAAN,MAAgD;;EAgBrD,YAAYC,IAAqBC,IAAUC,GAAuB;AAXlEC,MAAA,MAAAC,IAAA,MAAA;AAGAD,MAAA,MAAAE,GAAA,MAAA;AAGAF,MAAA,MAAAG,IAAA,MAAA;AANAC,IAAAA,GAAA,MAAAH,IAA0C,CAAA,CAAA,GAM1CG,GAAA,MAAAD,IAAQ,MAAM;AACZE,QAAA,MAAKJ,EAAAA,EAAU,QAAQ,CAAAK,OAAWA,GAAQD,EAAA,MAAKH,CAAAA,CAAM,CAAC;IAAA,CAAA,GAyCxD,KAAA,MAAM,CAACJ,OAAa;AAClBM,MAAAA,GAAA,MAAKF,GAASJ,EAAAA,GACdO,EAAA,MAAKF,EAAAA,EAAL,KAAA,IAAA;IAAW,GAIb,KAAA,MAAM,MAAME,EAAA,MAAKH,CAAAA,GAGjB,KAAA,SAAS,CAACK,OAA4B;AAC/BH,MAAAA,GAAA,MAAAF,GAASK,GAAQF,EAAA,MAAKH,CAAAA,CAAM,CAAA,GACjCG,EAAA,MAAKF,EAAAA,EAAL,KAAA,IAAA;IAAW,GA/CX,KAAK,OAAOJ,GACZK,GAAA,MAAKF,GAASJ,EAAAA,GACJD,GAAA,IAAIE,EAAK,IAAI,IAAI;EAC7B;;;EAIA,GAAGO,IAAgC;AAC5B,WAAAD,EAAA,MAAAJ,EAAAA,EAAU,KAAKK,EAAO,GACpB,MAAM;AACXF,MAAAA,GAAA,MAAKH,IAAYI,EAAA,MAAKJ,EAAAA,EAAU,OAAO,CAAAO,OAAKA,OAAMF,EAAO,CAAA;IAAA;EAE7D;;;;EAKA,KAAKA,IAAgC;AACnC,UAAMG,KAAM,KAAK,GAAG,CAACX,MAAU;AAC7BQ,MAAAA,GAAQR,CAAK,GACTW,GAAAA;IAAA,CACL;AACM,WAAAA;EACT;;EAGA,IAAIH,IAAgC;AAClCF,IAAAA,GAAA,MAAKH,IAAYI,EAAA,MAAKJ,EAAAA,EAAU,OAAO,CAAAO,OAAKA,OAAMF,EAAO,CAAA;EAC3D;;EAGA,SAAS;AACPF,IAAAA,GAAA,MAAKH,IAAY,CAAA,CAAA;EACnB;AAgBF;AA7DEA,KAAA,oBAAA,QAAA,GAGAC,IAAA,oBAAA,QAAA,GAGAC,KAAA,oBAAA,QAAA;AA0DK,IAAMO,IAAN,MAAoD;;;EAYzD,YAAYZ,IAAUJ,IAAS;AAC7B,SAAK,KAAK,OAAO,WAAWA,EAAI,EAAE,GAClC,KAAK,OAAOA,IACZ,KAAK,gBAAgBI,IACrB,KAAK,YAAY,MAAS;AACxB,YAAMa,EAAkB;IAAA;EAE5B;;;EAIA,OAAOd,IAAqBC,KAAW,KAAK,eAA4B;AACtE,WAAO,IAAIF,EAAMC,IAAWC,IAAO,IAAI;EACzC;AACF;AAIO,IAAMc,IAAc,CAAqCd,IAAUJ,OAAY,IAAIgB,EAAUZ,IAAOJ,EAAI;;;;;;;;;;AC1FxG,IAAMmB,IAAN,MAAgB;;EAuBrB,YACEhB,IACAiB,IACAC,GACA;AAzBOf,MAAA,MAAAgB,GAAA,MAAA;AAGAhB,MAAA,MAAAiB,IAAA,MAAA;AAGAjB,MAAA,MAAAkB,GAAA,MAAA;AAGAlB,MAAA,MAAAmB,IAAA,MAAA;AAGAnB,MAAA,MAAAoB,IAAA,MAAA;AAGApB,MAAA,MAAAqB,IAAA,MAAA;AAGArB,MAAA,MAAAsB,IAAA,MAAA;AAgFTtB,MAAA,MAAAuB,GAAA,MAAA;AAKAvB,MAAA,MAAAwB,GAAA,MAAA;AA9FSpB,IAAAA,GAAA,MAAAe,IAAAA,oBAA+C,IAAA,CAAA,GAG/Cf,GAAA,MAAAgB,IAAAA,oBAA+C,IAAA,CAAA,GAG/ChB,GAAA,MAAAiB,IAAAA,oBAA2E,IAAA,CAAA,GAG3EjB,GAAA,MAAAkB,IAAAA,oBAAwD,IAAA,CAAA,GAcjE,KAAA,OAAO,OACE;MACL,UAAUjB,EAAA,MAAKW,CAAAA;MACf,gBAAgB,CAAC,GAAGX,EAAA,MAAKc,EAAAA,CAAe,EAAE,IAAI,CAAU5B,QAAA;QACtD,MAAM,OAAOA,MAAU,WAAWA,KAAQA,GAAM;QAChD,OAAOc,EAAA,MAAKkB,CAAAA,EAAL,KAAA,MAAehC,EAAAA;MAAK,EAC3B;MACF,gBAAgB,CAAC,GAAGc,EAAA,MAAKe,EAAAA,CAAe,EAAE,IAAI,CAAU7B,QAAA;QACtD,MAAM,OAAOA,MAAU,WAAWA,KAAQA,GAAM;QAChD,OAAOc,EAAA,MAAKkB,CAAAA,EAAL,KAAA,MAAehC,EAAAA;MAAK,EAC3B;MACF,gBAAgB,CAAC,GAAGc,EAAA,MAAKgB,EAAAA,CAAe,EAAE,IAAI,CAAC,CAACI,IAAO,EAAE,UAAAC,GAAA,CAAU,OAAO;QACxE,MAAMD,GAAM;QACZ,UAAAC;QACA,QAAQrB,EAAA,MAAKmB,CAAAA,EAAL,KAAA,MAAeC,EAAAA;MAAK,EAC5B;MACF,YAAY,CAAC,GAAGpB,EAAA,MAAKiB,EAAAA,CAAW,EAAE,IAAI,CAAC,CAACG,IAAO,EAAE,UAAAC,GAAA,CAAU,OAAO;QAChE,MAAMD,GAAM;QACZ,UAAAC;QACA,QAAQrB,EAAA,MAAKmB,CAAAA,EAAL,KAAA,MAAeC,EAAAA;MAAK,EAC5B;IAAA,IAKG,KAAA,WAAW,CAACE,OAAyB;AACvCtB,QAAA,MAAAgB,EAAAA,EAAgB,IAAIM,IAAW,EAAE,OAAO,KAAK,IAAI,GAAG,UAAU,EAAG,CAAA;IAAA,GAI/D,KAAA,UAAU,CAACA,OAAyB;AACtCtB,QAAA,MAAAgB,EAAAA,EAAgB,OAAOM,EAAS;IAAA,GAI9B,KAAA,SAAS,CAACA,OAAyB;AAC1C,YAAMF,KAAQpB,EAAA,MAAKgB,EAAAA,EAAgB,IAAIM,EAAS;AAC3CF,MAAAA,OAELA,GAAM,WAAW,KAAK,IAAI,IAAIA,GAAM;IAAA,GAI7B,KAAA,SAAS,CAACE,IAAsBC,OAA2B;AAC5D,YAAAC,KAAQ,KAAK,IAAA;AACnBD,MAAAA,GAAQ,QAAQ,MAAM;AACfvB,UAAA,MAAAiB,EAAAA,EAAY,IAAIK,IAAW,EAAE,UAAU,KAAK,IAAA,IAAQE,GAAA,CAAO;MAAA,CACjE;IAAA,GAIM,KAAA,WAAW,CAACC,OAAkC;AAChDzB,QAAA,MAAAc,EAAAA,EAAgB,IAAIW,EAAS;IAAA,GAI3B,KAAA,WAAW,CAACA,OAAkC;AAChDzB,QAAA,MAAAc,EAAAA,EAAgB,OAAOW,EAAS;IAAA,GAI9B,KAAA,QAAQ,CAACA,OAAkC;AAC7CzB,QAAA,MAAAe,EAAAA,EAAgB,IAAIU,EAAS;IAAA,GAIpC1B,GAAA,MAAAmB,GAAY,CAACO,OACJzB,EAAA,MAAKY,EAAAA,EAAW,IAAIa,EAAS,EAAE,IAAI,CAAA,GAI5C1B,GAAA,MAAAoB,GAAY,CAACG,OACJtB,EAAA,MAAKa,CAAAA,EAAO,IAAIS,EAAS,EAAE,MAAA,GA9ElCvB,GAAA,MAAKa,IAAapB,EAAAA,GAClBO,GAAA,MAAKc,GAASJ,EAAAA,GACdV,GAAA,MAAKY,GAAQD,CAAAA;EACf;AA6EF;AA1GWC,IAAA,oBAAA,QAAA,GAGAC,KAAA,oBAAA,QAAA,GAGAC,IAAA,oBAAA,QAAA,GAGAC,KAAA,oBAAA,QAAA,GAGAC,KAAA,oBAAA,QAAA,GAGAC,KAAA,oBAAA,QAAA,GAGAC,KAAA,oBAAA,QAAA,GAgFTC,IAAA,oBAAA,QAAA,GAKAC,IAAA,oBAAA,QAAA;;;;;AChHK,IAAMO,IAAN,MAAMA,GAAI;;EAWf,YAAYlC,IAAsBiB,IAAcC,GAAa;AATpDf,MAAA,MAAAiB,IAAA,MAAA;AAEAjB,MAAA,MAAAkB,IAAA,MAAA;AAEAlB,MAAA,MAAAgB,GAAA,MAAA;AAEAhB,MAAA,MAAAgC,GAAA,MAAA;AAwBA,SAAA,UAAU,CAACjB,OACdA,MAAQ,OAAO,KAAKA,EAAI,EAAE,SACrB,IAAIgB,GAAI1B,EAAA,MAAKY,EAAAA,GAAYZ,EAAA,MAAKa,EAAAA,GAAQ,EAAE,GAAGH,GAAA,CAAM,IAEnD,MAIA,KAAA,SAAS,CAAIe,IAAyBhC,OAAc;;AAC3D,YAAMP,KAAQuC,GAAU,OAAOzB,EAAA,MAAKY,EAAAA,EAAW,QAAQ;AACvD,aAAInB,MAAS,QACXP,GAAM,IAAIO,EAAK,IAEZmC,KAAA5B,EAAA,MAAA2B,CAAAA,MAAA,QAAAC,GAAY,SAASH,EAAAA,GAEnB;IAAA,GAIA,KAAA,SAAS,CAA+BA,OAAmC;;AAC7E,aAAAzB,EAAA,MAAAY,EAAAA,EAAW,OAAOa,EAAS,IAC3BG,KAAA5B,EAAA,MAAA2B,CAAAA,MAAA,QAAAC,GAAY,SAASH,EAAAA,GACnB;IAAA,GAIA,KAAA,SAAS,CAACH,OAAyB;;AAChC,aAAAA,GAAA,OAAOtB,EAAA,MAAKa,EAAAA,EAAO,KAAK,IAC7Be,KAAA5B,EAAA,MAAA2B,CAAAA,MAAA,QAAAC,GAAY,SAASN,EAAAA,GACnB;IAAA,GAIA,KAAA,aAAa,CAACA,OAAyB;;AACzC,aAAAtB,EAAA,MAAAa,EAAAA,EAAO,OAAOS,EAAS,IACvBM,KAAA5B,EAAA,MAAA2B,CAAAA,MAAA,QAAAC,GAAY,QAAQN,EAAAA,GAClB;IAAA,GAIT,KAAS,aAAa,CAA+BG,OAAmCzB,EAAA,MAAKY,EAAAA,EAAW,IAAIa,EAAS,GAGrH,KAAS,aAAa,CAACH,OAAyBtB,EAAA,MAAKa,EAAAA,EAAO,IAAIS,EAAS,GAGhE,KAAA,MAAM,CAA+BG,OAAgD;;AACvF,cAAAG,KAAA5B,EAAA,MAAA2B,CAAAA,MAAA,QAAAC,GAAY,MAAMH,EAAAA,GAChBzB,EAAA,MAAKY,EAAAA,EAAW,IAAIa,EAAS;IAAA,GAItC,KAAS,MAAM,CAAsBA,OAAmC,KAAK,IAAIA,EAAS,EAAE,IAAA,GAGnF,KAAA,MAAM,CAAsBA,IAAgChC,OAAa,KAAK,IAAIgC,EAAS,EAAE,IAAIhC,EAAK,GAGtG,KAAA,SAAS,CAAsBgC,IAAgCvB,OAA4B,KAAK,IAAIuB,EAAS,EAAE,OAAOvB,EAAO,GAGtI,KAAS,QAAQ,CAACkB,OAAqBpB,EAAA,MAAKa,EAAAA,EAAO,IAAIO,EAAK,GAGnD,KAAA,OAAO,CAACA,OAAqB;;AAC/B,WAAA,MAAMA,EAAK,EAAE,KAAK,IAClBQ,KAAA5B,EAAA,MAAA2B,CAAAA,MAAA,QAAAC,GAAY,OAAOR,EAAAA;IAAK,GAItB,KAAA,OAAO,CAACA,OAAqB;;AACpC,YAAMG,KAAU,KAAK,MAAMH,EAAK,EAAE,MAAM;AACnC,cAAAQ,KAAA5B,EAAA,MAAA2B,CAAAA,MAAA,QAAAC,GAAY,OAAOR,IAAOG,EAAAA,GACxBA;IAAA,GASA,KAAA,aAAa,OAAOrC,OAAkC;AAC7D,YAAM,QAAQ,IAAI,KAAK,IAAIA,EAAK,EAAE,IAAI,CAAAE,OAAK,KAAK,KAAKA,EAAC,CAAC,CAAC;IAAA,GAvGxDW,GAAA,MAAKa,IAAapB,EAAAA,GAClBO,GAAA,MAAKc,IAASJ,EAAAA,GACdV,GAAA,MAAKY,GAAQD,CAAAA,GACTA,KACFX,GAAA,MAAK4B,GAAa,IAAInB,EAAUhB,IAAWiB,IAAOC,CAAI,CAAA;EAC1D;;EAGA,IAAI,OAAO;AACT,WAAOV,EAAA,MAAKW,CAAAA;EACd;;EAGA,IAAI,YAAY;AACd,WAAOX,EAAA,MAAK2B,CAAAA;EACd;AA0FF;AAnHWf,KAAA,oBAAA,QAAA,GAEAC,KAAA,oBAAA,QAAA,GAEAF,IAAA,oBAAA,QAAA,GAEAgB,IAAA,oBAAA,QAAA;AARJ,IAAME,IAANH;ACEA,IAAMI,IAAN,MAAY;EAAZ,cAAA;AAEI,SAAA,QAAA,oBAAsB,IAAA,GAG/B,KAAA,MAAM,CAACV,OAAqB;AAC1B,YAAMV,KAAO,KAAK,MAAM,IAAIU,GAAM,EAAE;AACpC,UAAI,CAACV;AACG,cAAAqB,EAAcX,GAAM,IAAI;AACzB,aAAAV;IAAA,GAIT,KAAA,SAAS,CAACU,OAAqB;AACxB,WAAA,MAAM,OAAOA,GAAM,EAAE;IAAA,GAI5B,KAAA,MAAM,CAACA,OACE,KAAK,MAAM,IAAIA,GAAM,EAAE;EAChC;AACF;;;;;;;ACxBO,IAAMY,IAAN,MAAY;;EAcjB,YAAYvB,IAAiBf,IAAiB;AAT9CC,MAAA,MAAAsC,GAAA,MAAA;AAEAtC,MAAA,MAAAuC,IAAA,MAAA;AAESvC,MAAA,MAAAwC,GAAA,MAAA;AAETxC,MAAA,MAAAyC,IAAA,MAAA;AAsDAzC,MAAA,MAAA0C,GAAA,MAAA;AAMA1C,MAAA,MAAA2C,GAAA,MAAA;AAlEiCvC,IAAAA,GAAA,MAAAkC,GAAA,IAAA,GAEClC,GAAA,MAAAmC,IAAA,IAAA,GAIXnC,GAAA,MAAAqC,IAAA,SAAA,GAkBvB,KAAA,QAAQ,OACNpC,EAAA,MAAKiC,CAAAA,KAALlC,GAAA,MAAKkC,GAAa,IAAI,QAAQ,CAACM,GAASC,OAAW;AAC5CzC,MAAAA,GAAA,MAAAmC,IAAY,CAACO,OAAa;AACvBA,QAAAA,cAAa,eAGfA,GAAE,OAAO,OAAOzC,EAAA,MAAKmC,CAAAA,MACvBpC,GAAA,MAAKqC,IAAU,UAAA,GACfpC,EAAA,MAAKqC,CAAAA,EAAL,KAAA,IAAA,GACAI,GAAE,yBAAyB,GACnBF,EAAAA;MACV,CAAA,GAGFvC,EAAA,MAAKsC,CAAAA,EAAL,KAAA,MAAkB,MAAM;AAClBtC,UAAA,MAAKoC,EAAAA,MAAY,aACnBrC,GAAA,MAAKqC,IAAU,UAAA,GAEjBpC,EAAA,MAAKqC,CAAAA,EAAL,KAAA,IAAA,GACAG,GAAO,IAAI,MAAM,UAAU,KAAK,KAAK,IAAI,WAAW,CAAC;MAAA,CAAA,GAGvDzC,GAAA,MAAKqC,IAAU,SAAA,GACf,iBAAiB,KAAK,KAAK,MAAMpC,EAAA,MAAKkC,EAAAA,CAAS;IAAA,CAChD,CAAA,GAEMlC,EAAA,MAAKiC,CAAAA,IAId,KAAA,OAAO,MAAM;AACX,YAAMS,IAAQ,IAAI,YAAY,KAAK,KAAK,MAAM,EAAE,QAAQ,EAAE,IAAI1C,EAAA,MAAKmC,CAAAA,EAAA,EAAgB,CAAA;AACnF,oBAAcO,CAAK;IAAA,GAIrB3C,GAAA,MAAAsC,GAAkB,MAAM;AAClBrC,QAAA,MAAKkC,EAAAA,KACP,oBAAoB,KAAK,KAAK,MAAMlC,EAAA,MAAKkC,EAAAA,CAAS;IAAA,CAAA,GAItDnC,GAAA,MAAAuC,GAAe,CAACK,MAA0B;AACxC,iBAAW,MAAM;AACLA,UAAAA;MAAA,GACT,KAAK,KAAK,OAAO;IAAA,CAAA,GA3Df5C,GAAA,MAAAoC,GAAe,OAAOzC,GAAK,IAAI,CAAA,GACpC,KAAK,OAAOA,IACNe,GAAA,IAAIf,GAAK,IAAI,IAAI;EACzB;;;EAIA,IAAI,SAAS;AACX,WAAOM,EAAA,MAAKoC,EAAAA;EACd;AAoDF;AAvEEH,IAAA,oBAAA,QAAA,GAEAC,KAAA,oBAAA,QAAA,GAESC,IAAA,oBAAA,QAAA,GAETC,KAAA,oBAAA,QAAA,GAsDAC,IAAA,oBAAA,QAAA,GAMAC,IAAA,oBAAA,QAAA;AAQK,IAAMM,IAAN,MAAgB;;;EAUrB,YAAYvD,IAAcwD,KAAU,KAAM;AAO1C,SAAA,SAAS,CAACpC,MACD,IAAIuB,EAAMvB,GAAO,IAAI,GAP5B,KAAK,KAAK,OAAO,SAASpB,EAAI,EAAE,GAChC,KAAK,OAAOA,IACZ,KAAK,UAAUwD;EACjB;AAMF;AAIa,IAAAC,IAAc,CAACzD,IAAcwD,KAAU,QAAS,IAAID,EAAUvD,IAAMwD,EAAO;;;ACrGxF,IAAM,iBAAN,cAA6B,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBjC,YAAY,SAAS,QAAQ,UAAU,UAAU,WAAW;AAC1D,UAAM,OAAO;AArBf;AAAA;AAAA;AAAA;AAAA,MAA6B;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA,MAA6B;AAAA;AAsB3B,QAAI,MAAM,mBAAmB;AAC3B,YAAM,kBAAkB,MAAM,KAAK,WAAW;AAAA,IAChD;AAKA,SAAK,SAAS;AAKd,SAAK,WAAW;AAKhB,SAAK,YAAY;AAKjB,SAAK,WAAW;AAAA,EAClB;AACF;AA6HO,SAAS,GAAG,OAAO,SAAS;AACjC;AAAA,IACE,QAAQ,KAAK;AAAA,IACb;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAoCA,SAAS,OAAO,MAAM,QAAQ,UAAU,UAAU,gBAAgB,aAAa;AAC7E,MAAI,CAAC,MAAM;AACT,UAAM,uBAAuB,QACzB,cACA,IAAI;AAAA,MACF,eAAe;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA,CAAC;AAAA,IACH;AAAA,EACN;AACF;;;ACjOA,IAAM,eAAe,CAAC;AAef,SAAS,SAAS,OAAO,SAAS;AACvC,QAAM,WAAW,WAAW;AAC5B,QAAM,kBACJ,OAAO,SAAS,oBAAoB,YAChC,SAAS,kBACT;AACN,QAAM,cACJ,OAAO,SAAS,gBAAgB,YAAY,SAAS,cAAc;AAErE,SAAO,IAAI,OAAO,iBAAiB,WAAW;AAChD;AAcA,SAAS,IAAI,OAAO,iBAAiB,aAAa;AAChD,MAAI,KAAK,KAAK,GAAG;AACf,QAAI,WAAW,OAAO;AACpB,aAAO,MAAM,SAAS,UAAU,CAAC,cAAc,KAAK,MAAM;AAAA,IAC5D;AAEA,QAAI,mBAAmB,SAAS,SAAS,MAAM,KAAK;AAClD,aAAO,MAAM;AAAA,IACf;AAEA,QAAI,cAAc,OAAO;AACvB,aAAO,IAAI,MAAM,UAAU,iBAAiB,WAAW;AAAA,IACzD;AAAA,EACF;AAEA,MAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,WAAO,IAAI,OAAO,iBAAiB,WAAW;AAAA,EAChD;AAEA,SAAO;AACT;AAcA,SAAS,IAAIE,SAAQ,iBAAiB,aAAa;AAEjD,QAAM,SAAS,CAAC;AAChB,MAAIC,SAAQ;AAEZ,SAAO,EAAEA,SAAQD,QAAO,QAAQ;AAC9B,WAAOC,MAAK,IAAI,IAAID,QAAOC,MAAK,GAAG,iBAAiB,WAAW;AAAA,EACjE;AAEA,SAAO,OAAO,KAAK,EAAE;AACvB;AAUA,SAAS,KAAK,OAAO;AACnB,SAAO,QAAQ,SAAS,OAAO,UAAU,QAAQ;AACnD;;;ACvGA,IAAM,UAAU,SAAS,cAAc,GAAG;AAMnC,SAAS,8BAA8B,OAAO;AACnD,QAAMC,sBAAqB,MAAM,QAAQ;AACzC,UAAQ,YAAYA;AACpB,QAAM,OAAO,QAAQ;AAUrB,MAAI,KAAK,WAAW,KAAK,SAAS,CAAC,MAAM,MAAgB,UAAU,QAAQ;AACzE,WAAO;AAAA,EACT;AAMA,SAAO,SAASA,sBAAqB,QAAQ;AAC/C;;;ACdO,IAAM;AAAA;AAAA,EAA8B;AAAA,IACzC,gBAAgB;AAAA,IAChB,UAAU;AAAA,IACV,wBAAwB;AAAA,IACxB,eAAe;AAAA,IACf,cAAc;AAAA,IACdiBAAiB;AAAA;AAAA,IACjB,eAAe;AAAA;AAAA,IACf,YAAY;AAAA;AAAA,IACZ,YAAY;AAAA;AAAA,IACZ,aAAa;AAAA;AAAA,IACb,WAAW;AAAA;AAAA,IACX,YAAY;AAAA;AAAA,IACZ,iBAAiB;AAAA;AAAA,IACjB,kBAAkB;AAAA;AAAA,IAClB,UAAU;AAAA;AAAA,IACV,UAAU;AAAA;AAAA,IACV,OAAO;AAAA;AAAA,IACP,MAAM;AAAA;AAAA,IACN,KAAK;AAAA;AAAA,IACL,OAAO;AAAA;AAAA,IACP,QAAQ;AAAA;AAAA,IACR,QAAQ;AAAA;AAAA,IACR,QAAQ;AAAA;AAAA,IACR,QAAQ;AAAA;AAAA,IACR,QAAQ;AAAA;AAAA,IACR,QAAQ;AAAA;AAAA,IACR,QAAQ;AAAA;AAAA,IACR,QAAQ;AAAA;AAAA,IACR,QAAQ;AAAA;AAAA,IACR,QAAQ;AAAA;AAAA,IACR,OAAO;AAAA;AAAA,IACP,WAAW;AAAA;AAAA,IACX,UAAU;AAAA;AAAA,IACV,UAAU;AAAA;AAAA,IACV,aAAa;AAAA;AAAA,IACb,cAAc;AAAA;AAAA,IACdmBAAmB;AAAA;AAAA,IACnB,WAAW;AAAA;AAAA,IACX,oBAAoB;AAAA;AAAA,IACpB,OAAO;AAAA;AAAA,IACP,YAAY;AAAA;AAAA,IACZ,aAAa;AAAA;AAAA,IACbgBAAgB;AAAA;AAAA,IAChB,aAAa;AAAA;AAAA,IACb,iBAAiB;AAAA;AAAA,IACjB,OAAO;AAAA;AAAA,IACP,KAAK;AAAA;AAAA,IAEL,iBAAiB;AAAA;AAAA,IAEjB,sBAAsB;AAAA;AAAA,EACxB;AAAA;;;ACrJO,IAAM;AAAA;AAAA,EAAkC;AAAA,IAC7C,qBAAqB;AAAA;AAAA,IACrB,oBAAoB;AAAA;AAAA,IACpB,+BAA+B;AAAA;AAAA,IAC/B,uBAAuB;AAAA;AAAA,IACvB,uBAAuB;AAAA;AAAA,IACvB,oBAAoB;AAAA;AAAA,IACpB,0BAA0B;AAAA;AAAA,IAC1B,2BAA2B;AAAA;AAAA,IAC3B,kCAAkC;AAAA;AAAA,IAClC,sCAAsC;AAAA;AAAA,IACtC,gCAAgC;AAAA;AAAA,IAChC,2BAA2B;AAAA;AAAA,IAC3B,qBAAqB;AAAA,IACrB,iBAAiB;AAAA,IACjB,oBAAoB;AAAA,IACpB,mBAAmB;AAAA,IACnB,iBAAiB;AAAA,IACjB,wBAAwB;AAAA;AAAA,IACxB,SAAS;AAAA;AAAA,IACT,aAAa;AAAA;AAAA,IACb,iBAAiB;AAAA;AAAA,IACjB,iBAAiB;AAAA;AAAA,IACjB,WAAW;AAAA;AAAA,IACX,WAAW;AAAA;AAAA,IACX,cAAc;AAAA;AAAA,IACd,gBAAgB;AAAA;AAAA,IAChB,mCAAmC;AAAA;AAAA,IACnC,sBAAsB;AAAA;AAAA,IACtB,sBAAsB;AAAA;AAAA,IACtB,oBAAoB;AAAA,IACpB,wBAAwB;AAAA,IACxB,SAAS;AAAA;AAAA,IACT,6BAA6B;AAAA;AAAA,IAC7B,oBAAoB;AAAA;AAAA,EACtB;AAAA;;;AC9BO,IAAM;AAAA;AAAA,EAA8B;AAAA;AAAA,IAEzC,MAAM;AAAA;AAAA;AAAA,IAIN,YAAY;AAAA;AAAA;AAAA,IAIZ,YAAY;AAAA;AAAA,IAGZ,iBAAiB;AAAA;AAAA;AAAA,IAIjB,YAAY;AAAA;AAAA;AAAA,IAIZ,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWZ,YAAY;AAAA;AAAA,IAGZ,oBAAoB;AAAA;AAAA;AAAA,IAIpB,gBAAgB;AAAA;AAAA;AAAA,IAIhB,UAAU;AAAA;AAAA,IAGV,eAAe;AAAA;AAAA,IAGf,gBAAgB;AAAA;AAAA,IAGhB,kBAAkB;AAAA;AAAA;AAAA,IAIlB,iBAAiB;AAAA;AAAA,IAGjB,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA,IAMtB,oBAAoB;AAAA;AAAA,IAGpB,0BAA0B;AAAA;AAAA,IAG1B,iCAAiC;AAAA;AAAA,IAGjC,qCAAqC;AAAA;AAAA,IAGrC,yBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASzB,YAAY;AAAA;AAAA;AAAA,IAIZ,iBAAiB;AAAA;AAAA,IAGjB,yBAAyB;AAAA;AAAA;AAAA,IAIzB,qBAAqB;AAAA;AAAA;AAAA,IAIrB,qBAAqB;AAAA;AAAA,IAGrB,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASf,cAAc;AAAA;AAAA;AAAA;AAAA,IAKd,UAAU;AAAA,IAEV,cAAc;AAAA;AAAA,IAGd,iBAAiB;AAAA;AAAA,IAGjB,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYlB,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAST,YAAY;AAAA;AAAA;AAAA;AAAA,IAKZ,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA,IAMvB,8BAA8B;AAAA;AAAA,IAG9B,oCAAoC;AAAA;AAAA;AAAA;AAAA,IAKpC,0BAA0B;AAAA;AAAA;AAAA,IAI1B,6BAA6B;AAAA;AAAA;AAAA,IAI7B,iBAAiB;AAAA;AAAA,IAGjB,uBAAuB;AAAA;AAAA;AAAA,IAIvB,uBAAuB;AAAA;AAAA,IAGvB,kBAAkB;AAAA;AAAA;AAAA,IAIlB,iBAAiB;AAAA;AAAA,IAGjB,uBAAuB;AAAA;AAAA;AAAA,IAIvB,uBAAuB;AAAA;AAAA;AAAA,IAIvB,UAAU;AAAA;AAAA,IAGV,kBAAkB;AAAA;AAAA;AAAA,IAIlB,cAAc;AAAA;AAAA,IAGd,cAAc;AAAA;AAAA;AAAA,IAId,iBAAiB;AAAA;AAAA;AAAA,IAIjB,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASnB,UAAU;AAAA,IAEV,cAAc;AAAA;AAAA;AAAA,IAId,UAAU;AAAA,IAEV,cAAc;AAAA;AAAA;AAAA;AAAA,IAKd,OAAO;AAAA;AAAA;AAAA,IAIP,OAAO;AAAA;AAAA;AAAA,IAIP,WAAW;AAAA;AAAA;AAAA,IAIX,WAAW;AAAA;AAAA;AAAA,IAIX,YAAY;AAAA;AAAA,IAGZ,aAAa;AAAA;AAAA,IAGb,kBAAkB;AAAA;AAAA;AAAA,IAIlB,UAAU;AAAA;AAAA;AAAA,IAIV,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUN,WAAW;AAAA;AAAA;AAAA,IAIX,WAAW;AAAA;AAAA,IAGX,iBAAiB;AAAA;AAAA;AAAA,IAIjB,iBAAiB;AAAA;AAAA;AAAA;AAAA,IAKjB,UAAU;AAAA;AAAA;AAAA,IAIV,qBAAqB;AAAA;AAAA;AAAA;AAAA,IAKrB,4BAA4B;AAAA;AAAA,IAG5B,kCAAkC;AAAA;AAAA;AAAA,IAIlC,wBAAwB;AAAA;AAAA;AAAA,IAIxB,2BAA2B;AAAA;AAAA,IAG3B,gBAAgB;AAAA;AAAA;AAAA,IAIhB,eAAe;AAAA;AAAA,IAGf,qBAAqB;AAAA;AAAA;AAAA,IAIrB,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYrB,eAAe;AAAA;AAAA;AAAA,IAIf,mBAAmB;AAAA;AAAA;AAAA,IAInB,mBAAmB;AAAA;AAAA,IAGnB,2BAA2B;AAAA;AAAA;AAAA,IAI3B,QAAQ;AAAA;AAAA,IAGR,gBAAgB;AAAA;AAAA;AAAA,IAIhB,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASZ,eAAe;AAAA;AAAA,IAGf,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWvB,YAAY;AAAA;AAAA,IAEZ,kBAAkB;AAAA;AAAA,IAElB,kBAAkB;AAAA;AAAA,IAElB,4BAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAW5B,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWb,eAAe;AAAA;AAAA,IAGf,gBAAgB;AAAA;AAAA,IAGhB,gBAAgB;AAAA;AAAA;AAAA;AAAA,IAKhB,gBAAgB;AAAA;AAAA,IAGhB,0BAA0B;AAAA;AAAA,IAG1B,eAAe;AAAA;AAAA,IAGf,eAAe;AAAA,IACf,cAAc;AAAA,IACd,WAAW;AAAA,IACX,WAAW;AAAA,IACX,aAAa;AAAA,EACf;AAAA;;;AC5bO,IAAM;AAAA;AAAA,EAA+B;AAAA,IAC1C,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,OAAO;AAAA,IACP,iBAAiB;AAAA,IACjB,eAAe;AAAA,IACf,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,WAAW;AAAA,IACX,YAAY;AAAA,IACZ,iBAAiB;AAAA,IACjB,kBAAkB;AAAA,IAClB,UAAU;AAAA,IACV,UAAU;AAAA,IACV,OAAO;AAAA,IACP,MAAM;AAAA,IACN,KAAK;AAAA,IACL,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,WAAW;AAAA,IACX,UAAU;AAAA,IACV,UAAU;AAAA,IACV,aAAa;AAAA,IACb,cAAc;AAAA,IACd,QAAQ;AAAA,IACR,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,mBAAmB;AAAA,IACnB,WAAW;AAAA,IACX,oBAAoB;AAAA,IACpB,OAAO;AAAA,IACP,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,gBAAgB;AAAA,IAChB,aAAa;AAAA,IACb,iBAAiB;AAAA,IACjB,OAAO;AAAA,IACP,sBAAsB;AAAA,EACxB;AAAA;;;ACpFO,SAAS,OAAOC,OAAM,OAAO,QAAQ,OAAO;AACjD,QAAM,MAAMA,MAAK;AACjB,MAAI,aAAa;AAEjB,MAAI;AAGJ,MAAI,QAAQ,GAAG;AACb,YAAQ,CAAC,QAAQ,MAAM,IAAI,MAAM;AAAA,EACnC,OAAO;AACL,YAAQ,QAAQ,MAAM,MAAM;AAAA,EAC9B;AAEA,WAAS,SAAS,IAAI,SAAS;AAG/B,MAAI,MAAM,SAAS,UAAU,oBAAoB;AAC/C,iBAAa,MAAM,KAAK,KAAK;AAC7B,eAAW,QAAQ,OAAO,MAAM;AAEhC,IAAAA,MAAK,OAAO,GAAG,UAAU;AAAA,EAC3B,OAAO;AAEL,QAAI,OAAQ,CAAAA,MAAK,OAAO,OAAO,MAAM;AAGrC,WAAO,aAAa,MAAM,QAAQ;AAChC,mBAAa,MAAM;AAAA,QACjB;AAAA,QACA,aAAa,UAAU;AAAA,MACzB;AACA,iBAAW,QAAQ,OAAO,CAAC;AAE3B,MAAAA,MAAK,OAAO,GAAG,UAAU;AAEzB,oBAAc,UAAU;AACxB,eAAS,UAAU;AAAA,IACrB;AAAA,EACF;AACF;AAkBO,SAAS,KAAKA,OAAM,OAAO;AAChC,MAAIA,MAAK,SAAS,GAAG;AACnB,WAAOA,OAAMA,MAAK,QAAQ,GAAG,KAAK;AAClC,WAAOA;AAAA,EACT;AAEA,SAAO;AACT;;;AC/EA,IAAM,iBAAiB,CAAC,EAAE;AAUnB,SAAS,kBAAkB,YAAY;AAE5C,QAAMC,OAAM,CAAC;AACb,MAAIC,SAAQ;AAEZ,SAAO,EAAEA,SAAQ,WAAW,QAAQ;AAClC,oBAAgBD,MAAK,WAAWC,MAAK,CAAC;AAAA,EACxC;AAEA,SAAOD;AACT;AAWA,SAAS,gBAAgBA,MAAKE,YAAW;AAEvC,MAAI;AAEJ,OAAK,QAAQA,YAAW;AACtB,UAAM,QAAQ,eAAe,KAAKF,MAAK,IAAI,IAAIA,KAAI,IAAI,IAAI;AAE3D,UAAM,OAAO,UAAUA,KAAI,IAAI,IAAI,CAAC;AAEpC,UAAM,QAAQE,WAAU,IAAI;AAE5B,QAAIC;AAEJ,QAAI,OAAO;AACT,WAAKA,SAAQ,OAAO;AAClB,YAAI,CAAC,eAAe,KAAK,MAAMA,KAAI,EAAG,MAAKA,KAAI,IAAI,CAAC;AACpD,cAAM,QAAQ,MAAMA,KAAI;AACxB;AAAA;AAAA,UAEE,KAAKA,KAAI;AAAA,UACT,MAAM,QAAQ,KAAK,IAAI,QAAQ,QAAQ,CAAC,KAAK,IAAI,CAAC;AAAA,QACpD;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAUA,SAAS,WAAW,UAAUC,OAAM;AAClC,MAAIH,SAAQ;AAEZ,QAAM,SAAS,CAAC;AAEhB,SAAO,EAAEA,SAAQG,MAAK,QAAQ;AAE5B;AAAC,KAACA,MAAKH,MAAK,EAAE,QAAQ,UAAU,WAAW,QAAQ,KAAKG,MAAKH,MAAK,CAAC;AAAA,EACrE;AAEA,SAAO,UAAU,GAAG,GAAG,MAAM;AAC/B;;;ACtEO,SAAS,gCAAgC,OAAOI,OAAM;AAC3D,QAAMC,QAAO,OAAO,SAAS,OAAOD,KAAI;AAExC;AAAA;AAAA,IAEEC,QAAO,MAAM,MACbA,UAAS,MAAM,MACdA,QAAO,MAAM,MAAMA,QAAO,MAAM;AAAA,IAEhCA,QAAO,MAAM,SAASA,QAAO;AAAA,IAE7BA,QAAO,SAAUA,QAAO;AAAA,IAExBA,QAAO,SAAUA,QAAO;AAAA,KAExBA,QAAO,WAAY,UACnBA,QAAO,WAAY;AAAA;AAAA,IAGpBA,QAAO;AAAA,IACP;AACA,WAAO,OAAO;AAAA,EAChB;AAEA,SAAO,OAAO,cAAcA,KAAI;AAClC;;;ACpBO,SAAS,oBAAoB,OAAO;AACzC,SACE,MAEG,QAAQ,eAAe,OAAO,KAAK,EAEnC,QAAQ,UAAU,EAAE,EAOpB,YAAY,EACZ,YAAY;AAEnB;;;ACdO,IAAM,aAAa,WAAW,UAAU;AAcxC,IAAM,oBAAoB,WAAW,YAAY;AAuBjD,IAAM,aAAa,WAAW,qBAAqB;AAanD,SAAS,aAAaC,OAAM;AACjC;AAAA;AAAA;AAAA,IAGEA,UAAS,SAASA,QAAO,MAAM,SAASA,UAAS,MAAM;AAAA;AAE3D;AAaO,IAAM,aAAa,WAAW,IAAI;AAoBlC,IAAM,gBAAgB,WAAW,YAAY;AAe7C,IAAM,mBAAmB,WAAW,gBAAgB;AAiBpD,SAAS,mBAAmBA,OAAM;AACvC,SAAOA,UAAS,QAAQA,QAAO,MAAM;AACvC;AAWO,SAAS,0BAA0BA,OAAM;AAC9C,SAAOA,UAAS,SAASA,QAAO,MAAM,OAAOA,UAAS,MAAM;AAC9D;AAiBO,SAAS,cAAcA,OAAM;AAClC,SACEA,UAAS,MAAM,iBACfA,UAAS,MAAM,gBACfA,UAAS,MAAM;AAEnB;AAuBO,IAAM,qBAAqB,WAAW,WAAC,iBAAY,GAAC;AAsBpD,IAAM,oBAAoB,WAAW,IAAI;AAQhD,SAAS,WAAW,OAAO;AACzB,SAAO;AAUP,WAAS,MAAMA,OAAM;AACnB,WAAOA,UAAS,QAAQA,QAAO,MAAM,MAAM,KAAK,OAAO,aAAaA,KAAI,CAAC;AAAA,EAC3E;AACF;;;AC1MA,IAAMC,kBAAiB,CAAC,EAAE;;;ACLnB,SAAS,aAAa,SAASC,KAAI,MAAM,KAAK;AACnD,QAAM,QAAQ,MAAM,MAAM,IAAI,OAAO;AACrC,MAAI,OAAO;AAEX,SAAO;AAGP,WAAS,MAAMC,OAAM;AACnB,QAAI,cAAcA,KAAI,GAAG;AACvB,cAAQ,MAAM,IAAI;AAClB,aAAO,OAAOA,KAAI;AAAA,IACpB;AAEA,WAAOD,IAAGC,KAAI;AAAA,EAChB;AAGA,WAAS,OAAOA,OAAM;AACpB,QAAI,cAAcA,KAAI,KAAK,SAAS,OAAO;AACzC,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,YAAQ,KAAK,IAAI;AACjB,WAAOD,IAAGC,KAAI;AAAA,EAChB;AACF;;;ACtDO,IAAM,UAAU,EAAC,UAAU,kBAAiB;AAMnD,SAAS,kBAAkB,SAAS;AAClC,QAAM,eAAe,QAAQ;AAAA,IAC3B,KAAK,OAAO,WAAW;AAAA,IACvB;AAAA,IACA;AAAA,EACF;AAEA,MAAIC;AAEJ,SAAO;AAGP,WAAS,2BAA2BC,OAAM;AACxC;AAAA,MACEA,UAAS,MAAM,OAAO,mBAAmBA,KAAI;AAAA,MAC7C;AAAA,IACF;AAEA,QAAIA,UAAS,MAAM,KAAK;AACtB,cAAQ,QAAQA,KAAI;AACpB;AAAA,IACF;AAEA,YAAQ,MAAM,MAAM,UAAU;AAC9B,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,UAAU;AAC7B,WAAO,aAAa,SAAS,cAAc,MAAM,UAAU;AAAA,EAC7D;AAGA,WAAS,iBAAiBA,OAAM;AAC9B;AAAA,MACEA,UAAS,MAAM,OAAO,CAAC,mBAAmBA,KAAI;AAAA,MAC9C;AAAA,IACF;AACA,YAAQ,MAAM,MAAM,SAAS;AAC7B,WAAO,UAAUA,KAAI;AAAA,EACvB;AAGA,WAAS,UAAUA,OAAM;AACvB,UAAM,QAAQ,QAAQ,MAAM,MAAM,WAAW;AAAA,MAC3C,aAAa,UAAU;AAAA,MACvB,UAAAD;AAAA,IACF,CAAC;AAED,QAAIA,WAAU;AACZ,MAAAA,UAAS,OAAO;AAAA,IAClB;AAEA,IAAAA,YAAW;AAEX,WAAO,KAAKC,KAAI;AAAA,EAClB;AAGA,WAAS,KAAKA,OAAM;AAClB,QAAIA,UAAS,MAAM,KAAK;AACtB,cAAQ,KAAK,MAAM,SAAS;AAC5B,cAAQ,KAAK,MAAM,SAAS;AAC5B,cAAQ,QAAQA,KAAI;AACpB;AAAA,IACF;AAEA,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,SAAS;AAC5B,aAAO;AAAA,IACT;AAGA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AACF;;;ACvEO,IAAMC,YAAW,EAAC,UAAU,mBAAkB;AAGrD,IAAM,qBAAqB,EAAC,UAAU,kBAAiB;AAMvD,SAAS,mBAAmB,SAAS;AACnC,QAAM,OAAO;AAEb,QAAM,QAAQ,CAAC;AACf,MAAI,YAAY;AAEhB,MAAI;AAEJ,MAAI;AAEJ,MAAI;AAEJ,SAAO;AAGP,WAAS,MAAMC,OAAM;AAWnB,QAAI,YAAY,MAAM,QAAQ;AAC5B,YAAM,OAAO,MAAM,SAAS;AAC5B,WAAK,iBAAiB,KAAK,CAAC;AAC5B;AAAA,QACE,KAAK,CAAC,EAAE;AAAA,QACR;AAAA,MACF;AACA,aAAO,QAAQ;AAAA,QACb,KAAK,CAAC,EAAE;AAAA,QACR;AAAA,QACA;AAAA,MACF,EAAEA,KAAI;AAAA,IACR;AAGA,WAAO,mBAAmBA,KAAI;AAAA,EAChC;AAGA,WAAS,iBAAiBA,OAAM;AAC9B;AAAA,MACE,KAAK;AAAA,MACL;AAAA,IACF;AAEA;AAKA,QAAI,KAAK,eAAe,YAAY;AAClC,WAAK,eAAe,aAAa;AAEjC,UAAI,WAAW;AACb,kBAAU;AAAA,MACZ;AAIA,YAAM,mBAAmB,KAAK,OAAO;AACrC,UAAI,kBAAkB;AAEtB,UAAIC;AAGJ,aAAO,mBAAmB;AACxB,YACE,KAAK,OAAO,eAAe,EAAE,CAAC,MAAM,UACpC,KAAK,OAAO,eAAe,EAAE,CAAC,EAAE,SAAS,MAAM,WAC/C;AACA,UAAAA,SAAQ,KAAK,OAAO,eAAe,EAAE,CAAC,EAAE;AACxC;AAAA,QACF;AAAA,MACF;AAEA,SAAOA,QAAO,oCAAoC;AAElD,qBAAe,SAAS;AAGxB,UAAIC,SAAQ;AAEZ,aAAOA,SAAQ,KAAK,OAAO,QAAQ;AACjC,aAAK,OAAOA,MAAK,EAAE,CAAC,EAAE,MAAM,OAAO,OAAO,CAAC,GAAGD,MAAK;AACnD,QAAAC;AAAA,MACF;AAGA;AAAA,QACE,KAAK;AAAA,QACL,kBAAkB;AAAA,QAClB;AAAA,QACA,KAAK,OAAO,MAAM,gBAAgB;AAAA,MACpC;AAGA,WAAK,OAAO,SAASA;AAErB,aAAO,mBAAmBF,KAAI;AAAA,IAChC;AAEA,WAAO,MAAMA,KAAI;AAAA,EACnB;AAGA,WAAS,mBAAmBA,OAAM;AAMhC,QAAI,cAAc,MAAM,QAAQ;AAI9B,UAAI,CAAC,WAAW;AACd,eAAO,kBAAkBA,KAAI;AAAA,MAC/B;AAKA,UAAI,UAAU,oBAAoB,UAAU,iBAAiB,UAAU;AACrE,eAAO,UAAUA,KAAI;AAAA,MACvB;AAOA,WAAK,YAAY;AAAA,QACf,UAAU,oBAAoB,CAAC,UAAU;AAAA,MAC3C;AAAA,IACF;AAGA,SAAK,iBAAiB,CAAC;AACvB,WAAO,QAAQ;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,IACF,EAAEA,KAAI;AAAA,EACR;AAGA,WAAS,qBAAqBA,OAAM;AAClC,QAAI,UAAW,WAAU;AACzB,mBAAe,SAAS;AACxB,WAAO,kBAAkBA,KAAI;AAAA,EAC/B;AAGA,WAAS,sBAAsBA,OAAM;AACnC,SAAK,OAAO,KAAK,KAAK,IAAI,EAAE,IAAI,IAAI,cAAc,MAAM;AACxD,sBAAkB,KAAK,IAAI,EAAE;AAC7B,WAAO,UAAUA,KAAI;AAAA,EACvB;AAGA,WAAS,kBAAkBA,OAAM;AAE/B,SAAK,iBAAiB,CAAC;AACvB,WAAO,QAAQ;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,IACF,EAAEA,KAAI;AAAA,EACR;AAGA,WAAS,kBAAkBA,OAAM;AAC/B;AAAA,MACE,KAAK;AAAA,MACL;AAAA,IACF;AACA;AAAA,MACE,KAAK;AAAA,MACL;AAAA,IACF;AACA;AACA,UAAM,KAAK,CAAC,KAAK,kBAAkB,KAAK,cAAc,CAAC;AAEvD,WAAO,kBAAkBA,KAAI;AAAA,EAC/B;AAGA,WAAS,UAAUA,OAAM;AACvB,QAAIA,UAAS,MAAM,KAAK;AACtB,UAAI,UAAW,WAAU;AACzB,qBAAe,CAAC;AAChB,cAAQ,QAAQA,KAAI;AACpB;AAAA,IACF;AAEA,gBAAY,aAAa,KAAK,OAAO,KAAK,KAAK,IAAI,CAAC;AACpD,YAAQ,MAAM,MAAM,WAAW;AAAA,MAC7B,aAAa,UAAU;AAAA,MACvB,UAAU;AAAA,MACV,YAAY;AAAA,IACd,CAAC;AAED,WAAO,aAAaA,KAAI;AAAA,EAC1B;AAGA,WAAS,aAAaA,OAAM;AAC1B,QAAIA,UAAS,MAAM,KAAK;AACtB,mBAAa,QAAQ,KAAK,MAAM,SAAS,GAAG,IAAI;AAChD,qBAAe,CAAC;AAChB,cAAQ,QAAQA,KAAI;AACpB;AAAA,IACF;AAEA,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,cAAQ,QAAQA,KAAI;AACpB,mBAAa,QAAQ,KAAK,MAAM,SAAS,CAAC;AAE1C,kBAAY;AACZ,WAAK,YAAY;AACjB,aAAO;AAAA,IACT;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAOA,WAAS,aAAa,OAAO,KAAK;AAChC,OAAO,WAAW,oDAAoD;AACtE,UAAM,SAAS,KAAK,YAAY,KAAK;AACrC,QAAI,IAAK,QAAO,KAAK,IAAI;AACzB,UAAM,WAAW;AACjB,QAAI,WAAY,YAAW,OAAO;AAClC,iBAAa;AACb,cAAU,WAAW,MAAM,KAAK;AAChC,cAAU,MAAM,MAAM;AAmCtB,QAAI,KAAK,OAAO,KAAK,MAAM,MAAM,IAAI,GAAG;AACtC,UAAIE,SAAQ,UAAU,OAAO;AAE7B,aAAOA,UAAS;AACd;AAAA;AAAA,UAEE,UAAU,OAAOA,MAAK,EAAE,CAAC,EAAE,MAAM,SAAS;AAAA,WAEzC,CAAC,UAAU,OAAOA,MAAK,EAAE,CAAC,EAAE;AAAA,UAE3B,UAAU,OAAOA,MAAK,EAAE,CAAC,EAAE,IAAI,SAAS;AAAA,UAC1C;AAGA;AAAA,QACF;AAAA,MACF;AAIA,YAAM,mBAAmB,KAAK,OAAO;AACrC,UAAI,kBAAkB;AAEtB,UAAI;AAEJ,UAAID;AAGJ,aAAO,mBAAmB;AACxB,YACE,KAAK,OAAO,eAAe,EAAE,CAAC,MAAM,UACpC,KAAK,OAAO,eAAe,EAAE,CAAC,EAAE,SAAS,MAAM,WAC/C;AACA,cAAI,MAAM;AACR,YAAAA,SAAQ,KAAK,OAAO,eAAe,EAAE,CAAC,EAAE;AACxC;AAAA,UACF;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,SAAOA,QAAO,oCAAoC;AAElD,qBAAe,SAAS;AAGxB,MAAAC,SAAQ;AAER,aAAOA,SAAQ,KAAK,OAAO,QAAQ;AACjC,aAAK,OAAOA,MAAK,EAAE,CAAC,EAAE,MAAM,OAAO,OAAO,CAAC,GAAGD,MAAK;AACnD,QAAAC;AAAA,MACF;AAGA;AAAA,QACE,KAAK;AAAA,QACL,kBAAkB;AAAA,QAClB;AAAA,QACA,KAAK,OAAO,MAAM,gBAAgB;AAAA,MACpC;AAGA,WAAK,OAAO,SAASA;AAAA,IACvB;AAAA,EACF;AAMA,WAAS,eAAe,MAAM;AAC5B,QAAIA,SAAQ,MAAM;AAGlB,WAAOA,WAAU,MAAM;AACrB,YAAM,QAAQ,MAAMA,MAAK;AACzB,WAAK,iBAAiB,MAAM,CAAC;AAC7B;AAAA,QACE,MAAM,CAAC,EAAE;AAAA,QACT;AAAA,MACF;AACA,YAAM,CAAC,EAAE,KAAK,KAAK,MAAM,OAAO;AAAA,IAClC;AAEA,UAAM,SAAS;AAAA,EACjB;AAEA,WAAS,YAAY;AACnB;AAAA,MACE,KAAK;AAAA,MACL;AAAA,IACF;AACA,OAAO,WAAW,oDAAoD;AACtE,cAAU,MAAM,CAAC,MAAM,GAAG,CAAC;AAC3B,iBAAa;AACb,gBAAY;AACZ,SAAK,eAAe,aAAa;AAAA,EACnC;AACF;AAMA,SAAS,kBAAkB,SAASC,KAAI,KAAK;AAE3C;AAAA,IACE,KAAK,OAAO,WAAW,QAAQ;AAAA,IAC/B;AAAA,EACF;AACA,SAAO;AAAA,IACL;AAAA,IACA,QAAQ,QAAQ,KAAK,OAAO,WAAW,UAAUA,KAAI,GAAG;AAAA,IACxD,MAAM;AAAA,IACN,KAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,IACvD,SACA,UAAU;AAAA,EAChB;AACF;;;ACvZO,SAAS,kBAAkBC,OAAM;AACtC,MACEA,UAAS,MAAM,OACf,0BAA0BA,KAAI,KAC9B,kBAAkBA,KAAI,GACtB;AACA,WAAO,UAAU;AAAA,EACnB;AAEA,MAAI,mBAAmBA,KAAI,GAAG;AAC5B,WAAO,UAAU;AAAA,EACnB;AACF;;;ACnBO,SAAS,WAAWC,aAAY,QAAQ,SAAS;AAEtD,QAAM,SAAS,CAAC;AAChB,MAAIC,SAAQ;AAEZ,SAAO,EAAEA,SAAQD,YAAW,QAAQ;AAClC,UAAM,UAAUA,YAAWC,MAAK,EAAE;AAElC,QAAI,WAAW,CAAC,OAAO,SAAS,OAAO,GAAG;AACxC,eAAS,QAAQ,QAAQ,OAAO;AAChC,aAAO,KAAK,OAAO;AAAA,IACrB;AAAA,EACF;AAEA,SAAO;AACT;;;ACdO,IAAM,YAAY;AAAA,EACvB,MAAM;AAAA,EACN,UAAU;AAAA,EACV,YAAY;AACd;AAQA,SAAS,oBAAoB,QAAQ,SAAS;AAC5C,MAAIC,SAAQ;AAEZ,MAAI;AAEJ,MAAI;AAEJ,MAAIC;AAEJ,MAAI;AAEJ,MAAI;AAEJ,MAAI;AAEJ,MAAI;AAEJ,MAAI;AAMJ,SAAO,EAAED,SAAQ,OAAO,QAAQ;AAE9B,QACE,OAAOA,MAAK,EAAE,CAAC,MAAM,WACrB,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,uBAC1B,OAAOA,MAAK,EAAE,CAAC,EAAE,QACjB;AACA,aAAOA;AAGP,aAAO,QAAQ;AAEb,YACE,OAAO,IAAI,EAAE,CAAC,MAAM,UACpB,OAAO,IAAI,EAAE,CAAC,EAAE,SAAS,uBACzB,OAAO,IAAI,EAAE,CAAC,EAAE;AAAA,QAEhB,QAAQ,eAAe,OAAO,IAAI,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,MAClD,QAAQ,eAAe,OAAOA,MAAK,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,GACvD;AAKA,eACG,OAAO,IAAI,EAAE,CAAC,EAAE,UAAU,OAAOA,MAAK,EAAE,CAAC,EAAE,WAC3C,OAAOA,MAAK,EAAE,CAAC,EAAE,IAAI,SAAS,OAAOA,MAAK,EAAE,CAAC,EAAE,MAAM,UAAU,KAChE,GACG,OAAO,IAAI,EAAE,CAAC,EAAE,IAAI,SACnB,OAAO,IAAI,EAAE,CAAC,EAAE,MAAM,SACtB,OAAOA,MAAK,EAAE,CAAC,EAAE,IAAI,SACrB,OAAOA,MAAK,EAAE,CAAC,EAAE,MAAM,UACzB,IAEF;AACA;AAAA,UACF;AAGA,gBACE,OAAO,IAAI,EAAE,CAAC,EAAE,IAAI,SAAS,OAAO,IAAI,EAAE,CAAC,EAAE,MAAM,SAAS,KAC5D,OAAOA,MAAK,EAAE,CAAC,EAAE,IAAI,SAAS,OAAOA,MAAK,EAAE,CAAC,EAAE,MAAM,SAAS,IAC1D,IACA;AAEN,gBAAM,QAAQ,OAAO,OAAO,CAAC,GAAG,OAAO,IAAI,EAAE,CAAC,EAAE,GAAG;AACnD,gBAAM,MAAM,OAAO,OAAO,CAAC,GAAG,OAAOA,MAAK,EAAE,CAAC,EAAE,KAAK;AACpD,oBAAU,OAAO,CAAC,GAAG;AACrB,oBAAU,KAAK,GAAG;AAElB,4BAAkB;AAAA,YAChB,MAAM,MAAM,IAAI,MAAM,iBAAiB,MAAM;AAAA,YAC7C;AAAA,YACA,KAAK,OAAO,OAAO,CAAC,GAAG,OAAO,IAAI,EAAE,CAAC,EAAE,GAAG;AAAA,UAC5C;AACA,4BAAkB;AAAA,YAChB,MAAM,MAAM,IAAI,MAAM,iBAAiB,MAAM;AAAA,YAC7C,OAAO,OAAO,OAAO,CAAC,GAAG,OAAOA,MAAK,EAAE,CAAC,EAAE,KAAK;AAAA,YAC/C;AAAA,UACF;AACA,UAAAC,QAAO;AAAA,YACL,MAAM,MAAM,IAAI,MAAM,aAAa,MAAM;AAAA,YACzC,OAAO,OAAO,OAAO,CAAC,GAAG,OAAO,IAAI,EAAE,CAAC,EAAE,GAAG;AAAA,YAC5C,KAAK,OAAO,OAAO,CAAC,GAAG,OAAOD,MAAK,EAAE,CAAC,EAAE,KAAK;AAAA,UAC/C;AACA,kBAAQ;AAAA,YACN,MAAM,MAAM,IAAI,MAAM,SAAS,MAAM;AAAA,YACrC,OAAO,OAAO,OAAO,CAAC,GAAG,gBAAgB,KAAK;AAAA,YAC9C,KAAK,OAAO,OAAO,CAAC,GAAG,gBAAgB,GAAG;AAAA,UAC5C;AAEA,iBAAO,IAAI,EAAE,CAAC,EAAE,MAAM,OAAO,OAAO,CAAC,GAAG,gBAAgB,KAAK;AAC7D,iBAAOA,MAAK,EAAE,CAAC,EAAE,QAAQ,OAAO,OAAO,CAAC,GAAG,gBAAgB,GAAG;AAE9D,uBAAa,CAAC;AAGd,cAAI,OAAO,IAAI,EAAE,CAAC,EAAE,IAAI,SAAS,OAAO,IAAI,EAAE,CAAC,EAAE,MAAM,QAAQ;AAC7D,yBAAa,KAAK,YAAY;AAAA,cAC5B,CAAC,SAAS,OAAO,IAAI,EAAE,CAAC,GAAG,OAAO;AAAA,cAClC,CAAC,QAAQ,OAAO,IAAI,EAAE,CAAC,GAAG,OAAO;AAAA,YACnC,CAAC;AAAA,UACH;AAGA,uBAAa,KAAK,YAAY;AAAA,YAC5B,CAAC,SAAS,OAAO,OAAO;AAAA,YACxB,CAAC,SAAS,iBAAiB,OAAO;AAAA,YAClC,CAAC,QAAQ,iBAAiB,OAAO;AAAA,YACjC,CAAC,SAASC,OAAM,OAAO;AAAA,UACzB,CAAC;AAGD;AAAA,YACE,QAAQ,OAAO,WAAW,WAAW;AAAA,YACrC;AAAA,UACF;AAGA,uBAAa;AAAA,YACX;AAAA,YACA;AAAA,cACE,QAAQ,OAAO,WAAW,WAAW;AAAA,cACrC,OAAO,MAAM,OAAO,GAAGD,MAAK;AAAA,cAC5B;AAAA,YACF;AAAA,UACF;AAGA,uBAAa,KAAK,YAAY;AAAA,YAC5B,CAAC,QAAQC,OAAM,OAAO;AAAA,YACtB,CAAC,SAAS,iBAAiB,OAAO;AAAA,YAClC,CAAC,QAAQ,iBAAiB,OAAO;AAAA,YACjC,CAAC,QAAQ,OAAO,OAAO;AAAA,UACzB,CAAC;AAGD,cAAI,OAAOD,MAAK,EAAE,CAAC,EAAE,IAAI,SAAS,OAAOA,MAAK,EAAE,CAAC,EAAE,MAAM,QAAQ;AAC/D,qBAAS;AACT,yBAAa,KAAK,YAAY;AAAA,cAC5B,CAAC,SAAS,OAAOA,MAAK,EAAE,CAAC,GAAG,OAAO;AAAA,cACnC,CAAC,QAAQ,OAAOA,MAAK,EAAE,CAAC,GAAG,OAAO;AAAA,YACpC,CAAC;AAAA,UACH,OAAO;AACL,qBAAS;AAAA,UACX;AAEA,iBAAO,QAAQ,OAAO,GAAGA,SAAQ,OAAO,GAAG,UAAU;AAErD,UAAAA,SAAQ,OAAO,WAAW,SAAS,SAAS;AAC5C;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAGA,EAAAA,SAAQ;AAER,SAAO,EAAEA,SAAQ,OAAO,QAAQ;AAC9B,QAAI,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,qBAAqB;AACjD,aAAOA,MAAK,EAAE,CAAC,EAAE,OAAO;AAAA,IAC1B;AAAA,EACF;AAEA,SAAO;AACT;AAMA,SAAS,kBAAkB,SAASE,KAAI;AACtC,QAAMC,oBAAmB,KAAK,OAAO,WAAW,iBAAiB;AACjE,QAAMC,YAAW,KAAK;AACtB,QAAM,SAAS,kBAAkBA,SAAQ;AAGzC,MAAI;AAEJ,SAAO;AAYP,WAAS,MAAMC,OAAM;AACnB;AAAA,MACEA,UAAS,MAAM,YAAYA,UAAS,MAAM;AAAA,MAC1C;AAAA,IACF;AACA,aAASA;AACT,YAAQ,MAAM,mBAAmB;AACjC,WAAO,OAAOA,KAAI;AAAA,EACpB;AAYA,WAAS,OAAOA,OAAM;AACpB,QAAIA,UAAS,QAAQ;AACnB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,UAAM,QAAQ,QAAQ,KAAK,mBAAmB;AAG9C,UAAM,QAAQ,kBAAkBA,KAAI;AAGpC,OAAOF,mBAAkB,6CAA6C;AAEtE,UAAM,OACJ,CAAC,SACA,UAAU,UAAU,6BAA6B,UAClDA,kBAAiB,SAASE,KAAI;AAChC,UAAM,QACJ,CAAC,UACA,WAAW,UAAU,6BAA6B,SACnDF,kBAAiB,SAASC,SAAQ;AAEpC,UAAM,QAAQ;AAAA,MACZ,WAAW,MAAM,WAAW,OAAO,SAAS,UAAU,CAAC;AAAA,IACzD;AACA,UAAM,SAAS;AAAA,MACb,WAAW,MAAM,WAAW,QAAQ,UAAU,SAAS,CAAC;AAAA,IAC1D;AACA,WAAOF,IAAGG,KAAI;AAAA,EAChB;AACF;AAYA,SAAS,UAAUC,QAAO,QAAQ;AAChC,EAAAA,OAAM,UAAU;AAChB,EAAAA,OAAM,UAAU;AAChB,EAAAA,OAAM,gBAAgB;AACxB;;;ACpRO,IAAM,WAAW,EAAC,MAAM,YAAY,UAAU,iBAAgB;AAMrE,SAAS,iBAAiB,SAASC,KAAI,KAAK;AAC1C,MAAI,OAAO;AAEX,SAAO;AAcP,WAAS,MAAMC,OAAM;AACnB,OAAOA,UAAS,MAAM,UAAU,cAAc;AAC9C,YAAQ,MAAM,MAAM,QAAQ;AAC5B,YAAQ,MAAM,MAAM,cAAc;AAClC,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,cAAc;AACjC,YAAQ,MAAM,MAAM,gBAAgB;AACpC,WAAO;AAAA,EACT;AAcA,WAAS,KAAKA,OAAM;AAClB,QAAI,WAAWA,KAAI,GAAG;AACpB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAIA,UAAS,MAAM,QAAQ;AACzB,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,WAAO,WAAWA,KAAI;AAAA,EACxB;AAcA,WAAS,mBAAmBA,OAAM;AAEhC,QACEA,UAAS,MAAM,YACfA,UAAS,MAAM,QACfA,UAAS,MAAM,OACf,kBAAkBA,KAAI,GACtB;AAEA,aAAO;AACP,aAAO,yBAAyBA,KAAI;AAAA,IACtC;AAEA,WAAO,WAAWA,KAAI;AAAA,EACxB;AAcA,WAAS,yBAAyBA,OAAM;AACtC,QAAIA,UAAS,MAAM,OAAO;AACxB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AACP,aAAO;AAAA,IACT;AAGA,SACGA,UAAS,MAAM,YACdA,UAAS,MAAM,QACfA,UAAS,MAAM,OACf,kBAAkBA,KAAI,MACxB,SAAS,UAAU,uBACnB;AACA,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO;AACP,WAAO,WAAWA,KAAI;AAAA,EACxB;AAYA,WAAS,UAAUA,OAAM;AACvB,QAAIA,UAAS,MAAM,aAAa;AAC9B,cAAQ,KAAK,MAAM,gBAAgB;AACnC,cAAQ,MAAM,MAAM,cAAc;AAClC,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,cAAc;AACjC,cAAQ,KAAK,MAAM,QAAQ;AAC3B,aAAOD;AAAA,IACT;AAGA,QACEC,UAAS,MAAM,OACfA,UAAS,MAAM,SACfA,UAAS,MAAM,YACf,aAAaA,KAAI,GACjB;AACA,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAYA,WAAS,WAAWA,OAAM;AACxB,QAAIA,UAAS,MAAM,QAAQ;AACzB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAI,WAAWA,KAAI,GAAG;AACpB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,iBAAiBA,OAAM;AAC9B,WAAO,kBAAkBA,KAAI,IAAI,WAAWA,KAAI,IAAI,IAAIA,KAAI;AAAA,EAC9D;AAYA,WAAS,WAAWA,OAAM;AACxB,QAAIA,UAAS,MAAM,KAAK;AACtB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AACP,aAAO;AAAA,IACT;AAEA,QAAIA,UAAS,MAAM,aAAa;AAE9B,cAAQ,KAAK,MAAM,gBAAgB,EAAE,OAAO,MAAM;AAClD,cAAQ,MAAM,MAAM,cAAc;AAClC,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,cAAc;AACjC,cAAQ,KAAK,MAAM,QAAQ;AAC3B,aAAOD;AAAA,IACT;AAEA,WAAO,WAAWC,KAAI;AAAA,EACxB;AAcA,WAAS,WAAWA,OAAM;AAExB,SACGA,UAAS,MAAM,QAAQ,kBAAkBA,KAAI,MAC9C,SAAS,UAAU,uBACnB;AACA,YAAM,OAAOA,UAAS,MAAM,OAAO,aAAa;AAChD,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AACF;;;AC7PO,IAAM,YAAY,EAAC,UAAU,mBAAmB,SAAS,KAAI;AAMpE,SAAS,kBAAkB,SAASC,KAAI,KAAK;AAC3C,SAAO;AAgBP,WAAS,MAAMC,OAAM;AACnB,WAAO,cAAcA,KAAI,IACrB,aAAa,SAAS,OAAO,MAAM,UAAU,EAAEA,KAAI,IACnD,MAAMA,KAAI;AAAA,EAChB;AAgBA,WAAS,MAAMA,OAAM;AACnB,WAAOA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,IAAID,IAAGC,KAAI,IAAI,IAAIA,KAAI;AAAA,EAC7E;AACF;;;AC5CO,IAAM,aAAa;AAAA,EACxB,MAAM;AAAA,EACN,UAAU;AAAA,EACV,cAAc,EAAC,UAAU,+BAA8B;AAAA,EACvD;AACF;AAMA,SAAS,wBAAwB,SAASC,KAAI,KAAK;AACjD,QAAM,OAAO;AAEb,SAAO;AAYP,WAAS,MAAMC,OAAM;AACnB,QAAIA,UAAS,MAAM,aAAa;AAC9B,YAAM,QAAQ,KAAK;AAEnB,SAAO,OAAO,sDAAsD;AAEpE,UAAI,CAAC,MAAM,MAAM;AACf,gBAAQ,MAAM,MAAM,YAAY,EAAC,YAAY,KAAI,CAAC;AAClD,cAAM,OAAO;AAAA,MACf;AAEA,cAAQ,MAAM,MAAM,gBAAgB;AACpC,cAAQ,MAAM,MAAM,gBAAgB;AACpC,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,gBAAgB;AACnC,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,MAAMA,OAAM;AACnB,QAAI,cAAcA,KAAI,GAAG;AACvB,cAAQ,MAAM,MAAM,0BAA0B;AAC9C,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,0BAA0B;AAC7C,cAAQ,KAAK,MAAM,gBAAgB;AACnC,aAAOD;AAAA,IACT;AAEA,YAAQ,KAAK,MAAM,gBAAgB;AACnC,WAAOA,IAAGC,KAAI;AAAA,EAChB;AACF;AAcA,SAAS,+BAA+B,SAASD,KAAI,KAAK;AACxD,QAAM,OAAO;AAEb,SAAO;AAeP,WAAS,UAAUC,OAAM;AACvB,QAAI,cAAcA,KAAI,GAAG;AAEvB;AAAA,QACE,KAAK,OAAO,WAAW,QAAQ;AAAA,QAC/B;AAAA,MACF;AAEA,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA,MAAM;AAAA,QACN,KAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,IACvD,SACA,UAAU;AAAA,MAChB,EAAEA,KAAI;AAAA,IACR;AAEA,WAAO,WAAWA,KAAI;AAAA,EACxB;AAeA,WAAS,WAAWA,OAAM;AACxB,WAAO,QAAQ,QAAQ,YAAYD,KAAI,GAAG,EAAEC,KAAI;AAAA,EAClD;AACF;AAGA,SAAS,KAAK,SAAS;AACrB,UAAQ,KAAK,MAAM,UAAU;AAC/B;;;ACjJO,IAAM,kBAAkB;AAAA,EAC7B,MAAM;AAAA,EACN,UAAU;AACZ;AAMA,SAAS,wBAAwB,SAASC,KAAI,KAAK;AACjD,SAAO;AAYP,WAAS,MAAMC,OAAM;AACnB,OAAOA,UAAS,MAAM,WAAW,eAAe;AAChD,YAAQ,MAAM,MAAM,eAAe;AACnC,YAAQ,MAAM,MAAM,YAAY;AAChC,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,YAAY;AAC/B,WAAO;AAAA,EACT;AAYA,WAAS,OAAOA,OAAM;AAEpB,QAAI,iBAAiBA,KAAI,GAAG;AAC1B,cAAQ,MAAM,MAAM,oBAAoB;AACxC,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,oBAAoB;AACvC,cAAQ,KAAK,MAAM,eAAe;AAClC,aAAOD;AAAA,IACT;AAEA,WAAO,IAAIC,KAAI;AAAA,EACjB;AACF;;;AC/CO,IAAM,qBAAqB;AAAA,EAChC,MAAM;AAAA,EACN,UAAU;AACZ;AAMA,SAAS,2BAA2B,SAASC,KAAI,KAAK;AACpD,QAAM,OAAO;AACb,MAAI,OAAO;AAEX,MAAI;AAEJ,MAAI;AAEJ,SAAO;AAgBP,WAAS,MAAMC,OAAM;AACnB,OAAOA,UAAS,MAAM,WAAW,cAAc;AAC/C,YAAQ,MAAM,MAAM,kBAAkB;AACtC,YAAQ,MAAM,MAAM,wBAAwB;AAC5C,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,wBAAwB;AAC3C,WAAO;AAAA,EACT;AAiBA,WAAS,KAAKA,OAAM;AAClB,QAAIA,UAAS,MAAM,YAAY;AAC7B,cAAQ,MAAM,MAAM,+BAA+B;AACnD,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,+BAA+B;AAClD,aAAO;AAAA,IACT;AAEA,YAAQ,MAAM,MAAM,uBAAuB;AAC3C,UAAM,UAAU;AAChB,WAAO;AACP,WAAO,MAAMA,KAAI;AAAA,EACnB;AAcA,WAAS,QAAQA,OAAM;AACrB,QAAIA,UAAS,MAAM,cAAcA,UAAS,MAAM,YAAY;AAC1D,cAAQ,MAAM,MAAM,mCAAmC;AACvD,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,mCAAmC;AACtD,cAAQ,MAAM,MAAM,uBAAuB;AAC3C,YAAM,UAAU;AAChB,aAAO;AACP,aAAO;AAAA,IACT;AAEA,YAAQ,MAAM,MAAM,uBAAuB;AAC3C,UAAM,UAAU;AAChB,WAAO;AACP,WAAO,MAAMA,KAAI;AAAA,EACnB;AAmBA,WAAS,MAAMA,OAAM;AACnB,QAAIA,UAAS,MAAM,aAAa,MAAM;AACpC,YAAM,QAAQ,QAAQ,KAAK,MAAM,uBAAuB;AAExD,UACE,SAAS,qBACT,CAAC,8BAA8B,KAAK,eAAe,KAAK,CAAC,GACzD;AACA,eAAO,IAAIA,KAAI;AAAA,MACjB;AAIA,cAAQ,MAAM,MAAM,wBAAwB;AAC5C,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,wBAAwB;AAC3C,cAAQ,KAAK,MAAM,kBAAkB;AACrC,aAAOD;AAAA,IACT;AAEA,QAAI,KAAKC,KAAI,KAAK,SAAS,KAAK;AAC9B,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AACF;;;ACpJA,IAAM,sBAAsB;AAAA,EAC1B,UAAU;AAAA,EACV,SAAS;AACX;AAGO,IAAM,aAAa;AAAA,EACxB,MAAM;AAAA,EACN,UAAU;AAAA,EACV,UAAU;AACZ;AAMA,SAAS,mBAAmB,SAASC,KAAI,KAAK;AAC5C,QAAM,OAAO;AAEb,QAAM,aAAa,EAAC,UAAU,oBAAoB,SAAS,KAAI;AAC/D,MAAI,gBAAgB;AACpB,MAAI,WAAW;AAEf,MAAI;AAEJ,SAAO;AAcP,WAAS,MAAMC,OAAM;AAEnB,WAAO,mBAAmBA,KAAI;AAAA,EAChC;AAcA,WAAS,mBAAmBA,OAAM;AAChC;AAAA,MACEA,UAAS,MAAM,eAAeA,UAAS,MAAM;AAAA,MAC7C;AAAA,IACF;AAEA,UAAM,OAAO,KAAK,OAAO,KAAK,OAAO,SAAS,CAAC;AAC/C,oBACE,QAAQ,KAAK,CAAC,EAAE,SAAS,MAAM,aAC3B,KAAK,CAAC,EAAE,eAAe,KAAK,CAAC,GAAG,IAAI,EAAE,SACtC;AAEN,aAASA;AACT,YAAQ,MAAM,MAAM,UAAU;AAC9B,YAAQ,MAAM,MAAM,eAAe;AACnC,YAAQ,MAAM,MAAM,uBAAuB;AAC3C,WAAO,aAAaA,KAAI;AAAA,EAC1B;AAcA,WAAS,aAAaA,OAAM;AAC1B,QAAIA,UAAS,QAAQ;AACnB;AACA,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAI,WAAW,UAAU,2BAA2B;AAClD,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,YAAQ,KAAK,MAAM,uBAAuB;AAC1C,WAAO,cAAcA,KAAI,IACrB,aAAa,SAAS,YAAY,MAAM,UAAU,EAAEA,KAAI,IACxD,WAAWA,KAAI;AAAA,EACrB;AAcA,WAAS,WAAWA,OAAM;AACxB,QAAIA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AAClD,cAAQ,KAAK,MAAM,eAAe;AAClC,aAAO,KAAK,YACRD,IAAGC,KAAI,IACP,QAAQ,MAAM,qBAAqB,gBAAgB,KAAK,EAAEA,KAAI;AAAA,IACpE;AAEA,YAAQ,MAAM,MAAM,mBAAmB;AACvC,YAAQ,MAAM,MAAM,aAAa,EAAC,aAAa,UAAU,kBAAiB,CAAC;AAC3E,WAAO,KAAKA,KAAI;AAAA,EAClB;AAcA,WAAS,KAAKA,OAAM;AAClB,QAAIA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AAClD,cAAQ,KAAK,MAAM,WAAW;AAC9B,cAAQ,KAAK,MAAM,mBAAmB;AACtC,aAAO,WAAWA,KAAI;AAAA,IACxB;AAEA,QAAI,cAAcA,KAAI,GAAG;AACvB,cAAQ,KAAK,MAAM,WAAW;AAC9B,cAAQ,KAAK,MAAM,mBAAmB;AACtC,aAAO,aAAa,SAAS,YAAY,MAAM,UAAU,EAAEA,KAAI;AAAA,IACjE;AAEA,QAAIA,UAAS,MAAM,eAAeA,UAAS,QAAQ;AACjD,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAcA,WAAS,WAAWA,OAAM;AACxB,QAAIA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AAClD,aAAO,WAAWA,KAAI;AAAA,IACxB;AAEA,YAAQ,MAAM,MAAM,mBAAmB;AACvC,YAAQ,MAAM,MAAM,aAAa,EAAC,aAAa,UAAU,kBAAiB,CAAC;AAC3E,WAAO,KAAKA,KAAI;AAAA,EAClB;AAcA,WAAS,KAAKA,OAAM;AAClB,QAAIA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AAClD,cAAQ,KAAK,MAAM,WAAW;AAC9B,cAAQ,KAAK,MAAM,mBAAmB;AACtC,aAAO,WAAWA,KAAI;AAAA,IACxB;AAEA,QAAIA,UAAS,MAAM,eAAeA,UAAS,QAAQ;AACjD,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAeA,WAAS,eAAeA,OAAM;AAC5B,OAAO,mBAAmBA,KAAI,GAAG,cAAc;AAC/C,WAAO,QAAQ,QAAQ,YAAY,OAAO,aAAa,EAAEA,KAAI;AAAA,EAC/D;AAcA,WAAS,cAAcA,OAAM;AAC3B,OAAO,mBAAmBA,KAAI,GAAG,cAAc;AAC/C,YAAQ,MAAM,MAAM,UAAU;AAC9B,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,UAAU;AAC7B,WAAO;AAAA,EACT;AAcA,WAAS,aAAaA,OAAM;AAC1B,WAAO,gBAAgB,KAAK,cAAcA,KAAI,IAC1C;AAAA,MACE;AAAA,MACA;AAAA,MACA,MAAM;AAAA,MACN,gBAAgB;AAAA,IAClB,EAAEA,KAAI,IACN,mBAAmBA,KAAI;AAAA,EAC7B;AAcA,WAAS,mBAAmBA,OAAM;AAChC,QAAIA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AAClD,aAAO,QAAQ,MAAM,qBAAqB,gBAAgB,KAAK,EAAEA,KAAI;AAAA,IACvE;AAEA,YAAQ,MAAM,MAAM,aAAa;AACjC,WAAO,aAAaA,KAAI;AAAA,EAC1B;AAcA,WAAS,aAAaA,OAAM;AAC1B,QAAIA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AAClD,cAAQ,KAAK,MAAM,aAAa;AAChC,aAAO,mBAAmBA,KAAI;AAAA,IAChC;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAcA,WAAS,MAAMA,OAAM;AACnB,YAAQ,KAAK,MAAM,UAAU;AAC7B,WAAOD,IAAGC,KAAI;AAAA,EAChB;AAMA,WAAS,mBAAmBC,UAASF,KAAIG,MAAK;AAC5C,QAAI,OAAO;AAEX,WAAO;AAOP,aAAS,YAAYF,OAAM;AACzB,SAAO,mBAAmBA,KAAI,GAAG,cAAc;AAC/C,MAAAC,SAAQ,MAAM,MAAM,UAAU;AAC9B,MAAAA,SAAQ,QAAQD,KAAI;AACpB,MAAAC,SAAQ,KAAK,MAAM,UAAU;AAC7B,aAAOE;AAAA,IACT;AAcA,aAASA,OAAMH,OAAM;AAEnB;AAAA,QACE,KAAK,OAAO,WAAW,QAAQ;AAAA,QAC/B;AAAA,MACF;AAGA,MAAAC,SAAQ,MAAM,MAAM,eAAe;AACnC,aAAO,cAAcD,KAAI,IACrB;AAAA,QACEC;AAAA,QACA;AAAA,QACA,MAAM;AAAA,QACN,KAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,IACvD,SACA,UAAU;AAAA,MAChB,EAAED,KAAI,IACN,oBAAoBA,KAAI;AAAA,IAC9B;AAcA,aAAS,oBAAoBA,OAAM;AACjC,UAAIA,UAAS,QAAQ;AACnB,QAAAC,SAAQ,MAAM,MAAM,uBAAuB;AAC3C,eAAO,cAAcD,KAAI;AAAA,MAC3B;AAEA,aAAOE,KAAIF,KAAI;AAAA,IACjB;AAcA,aAAS,cAAcA,OAAM;AAC3B,UAAIA,UAAS,QAAQ;AACnB;AACA,QAAAC,SAAQ,QAAQD,KAAI;AACpB,eAAO;AAAA,MACT;AAEA,UAAI,QAAQ,UAAU;AACpB,QAAAC,SAAQ,KAAK,MAAM,uBAAuB;AAC1C,eAAO,cAAcD,KAAI,IACrB,aAAaC,UAAS,oBAAoB,MAAM,UAAU,EAAED,KAAI,IAChE,mBAAmBA,KAAI;AAAA,MAC7B;AAEA,aAAOE,KAAIF,KAAI;AAAA,IACjB;AAcA,aAAS,mBAAmBA,OAAM;AAChC,UAAIA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AAClD,QAAAC,SAAQ,KAAK,MAAM,eAAe;AAClC,eAAOF,IAAGC,KAAI;AAAA,MAChB;AAEA,aAAOE,KAAIF,KAAI;AAAA,IACjB;AAAA,EACF;AACF;AAMA,SAAS,4BAA4B,SAASD,KAAI,KAAK;AACrD,QAAM,OAAO;AAEb,SAAO;AAOP,WAAS,MAAMC,OAAM;AACnB,QAAIA,UAAS,MAAM,KAAK;AACtB,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,OAAO,mBAAmBA,KAAI,GAAG,cAAc;AAC/C,YAAQ,MAAM,MAAM,UAAU;AAC9B,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,UAAU;AAC7B,WAAO;AAAA,EACT;AAOA,WAAS,UAAUA,OAAM;AACvB,WAAO,KAAK,OAAO,KAAK,KAAK,IAAI,EAAE,IAAI,IAAI,IAAIA,KAAI,IAAID,IAAGC,KAAI;AAAA,EAChE;AACF;;;AC/eO,IAAM,eAAe;AAAA,EAC1B,MAAM;AAAA,EACN,UAAU;AACZ;AAGA,IAAM,eAAe,EAAC,UAAU,sBAAsB,SAAS,KAAI;AAMnE,SAAS,qBAAqB,SAASI,KAAI,KAAK;AAC9C,QAAM,OAAO;AACb,SAAO;AAgBP,WAAS,MAAMC,OAAM;AAEnB,OAAO,cAAcA,KAAI,CAAC;AAC1B,YAAQ,MAAM,MAAM,YAAY;AAGhC,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,MAAM;AAAA,MACN,UAAU,UAAU;AAAA,IACtB,EAAEA,KAAI;AAAA,EACR;AAYA,WAAS,YAAYA,OAAM;AACzB,UAAM,OAAO,KAAK,OAAO,KAAK,OAAO,SAAS,CAAC;AAC/C,WAAO,QACL,KAAK,CAAC,EAAE,SAAS,MAAM,cACvB,KAAK,CAAC,EAAE,eAAe,KAAK,CAAC,GAAG,IAAI,EAAE,UAAU,UAAU,UACxD,QAAQA,KAAI,IACZ,IAAIA,KAAI;AAAA,EACd;AAYA,WAAS,QAAQA,OAAM;AACrB,QAAIA,UAAS,MAAM,KAAK;AACtB,aAAO,MAAMA,KAAI;AAAA,IACnB;AAEA,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,aAAO,QAAQ,QAAQ,cAAc,SAAS,KAAK,EAAEA,KAAI;AAAA,IAC3D;AAEA,YAAQ,MAAM,MAAM,aAAa;AACjC,WAAO,OAAOA,KAAI;AAAA,EACpB;AAYA,WAAS,OAAOA,OAAM;AACpB,QAAIA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AAClD,cAAQ,KAAK,MAAM,aAAa;AAChC,aAAO,QAAQA,KAAI;AAAA,IACrB;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAGA,WAAS,MAAMA,OAAM;AACnB,YAAQ,KAAK,MAAM,YAAY;AAI/B,WAAOD,IAAGC,KAAI;AAAA,EAChB;AACF;AAMA,SAAS,qBAAqB,SAASD,KAAI,KAAK;AAC9C,QAAM,OAAO;AAEb,SAAOE;AAaP,WAASA,cAAaD,OAAM;AAG1B,QAAI,KAAK,OAAO,KAAK,KAAK,IAAI,EAAE,IAAI,GAAG;AACrC,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,cAAQ,MAAM,MAAM,UAAU;AAC9B,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,UAAU;AAC7B,aAAOC;AAAA,IACT;AAQA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,MAAM;AAAA,MACN,UAAU,UAAU;AAAA,IACtB,EAAED,KAAI;AAAA,EACR;AAYA,WAAS,YAAYA,OAAM;AACzB,UAAM,OAAO,KAAK,OAAO,KAAK,OAAO,SAAS,CAAC;AAC/C,WAAO,QACL,KAAK,CAAC,EAAE,SAAS,MAAM,cACvB,KAAK,CAAC,EAAE,eAAe,KAAK,CAAC,GAAG,IAAI,EAAE,UAAU,UAAU,UACxDD,IAAGC,KAAI,IACP,mBAAmBA,KAAI,IACrBC,cAAaD,KAAI,IACjB,IAAIA,KAAI;AAAA,EAChB;AACF;;;ACtLO,IAAM,WAAW;AAAA,EACtB,MAAM;AAAA,EACN,UAAU;AAAA,EACV,SAAS;AAAA,EACT;AACF;AAIA,SAAS,gBAAgB,QAAQ;AAC/B,MAAI,gBAAgB,OAAO,SAAS;AACpC,MAAI,iBAAiB;AAErB,MAAIE;AAEJ,MAAI;AAGJ,OACG,OAAO,cAAc,EAAE,CAAC,EAAE,SAAS,MAAM,cACxC,OAAO,cAAc,EAAE,CAAC,EAAE,SAAS,aACpC,OAAO,aAAa,EAAE,CAAC,EAAE,SAAS,MAAM,cACvC,OAAO,aAAa,EAAE,CAAC,EAAE,SAAS,UACpC;AACA,IAAAA,SAAQ;AAGR,WAAO,EAAEA,SAAQ,eAAe;AAC9B,UAAI,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM,cAAc;AAEhD,eAAO,cAAc,EAAE,CAAC,EAAE,OAAO,MAAM;AACvC,eAAO,aAAa,EAAE,CAAC,EAAE,OAAO,MAAM;AACtC,0BAAkB;AAClB,yBAAiB;AACjB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAGA,EAAAA,SAAQ,iBAAiB;AACzB;AAEA,SAAO,EAAEA,UAAS,eAAe;AAC/B,QAAI,UAAU,QAAW;AACvB,UACEA,WAAU,iBACV,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM,YAChC;AACA,gBAAQA;AAAA,MACV;AAAA,IACF,WACEA,WAAU,iBACV,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM,YAChC;AACA,aAAO,KAAK,EAAE,CAAC,EAAE,OAAO,MAAM;AAE9B,UAAIA,WAAU,QAAQ,GAAG;AACvB,eAAO,KAAK,EAAE,CAAC,EAAE,MAAM,OAAOA,SAAQ,CAAC,EAAE,CAAC,EAAE;AAC5C,eAAO,OAAO,QAAQ,GAAGA,SAAQ,QAAQ,CAAC;AAC1C,yBAAiBA,SAAQ,QAAQ;AACjC,QAAAA,SAAQ,QAAQ;AAAA,MAClB;AAEA,cAAQ;AAAA,IACV;AAAA,EACF;AAEA,SAAO;AACT;AAMA,SAAS,SAASC,OAAM;AAEtB,SACEA,UAAS,MAAM,eACf,KAAK,OAAO,KAAK,OAAO,SAAS,CAAC,EAAE,CAAC,EAAE,SAAS,MAAM;AAE1D;AAMA,SAAS,iBAAiB,SAASC,KAAI,KAAK;AAC1C,QAAM,OAAO;AACb,MAAI,WAAW;AAEf,MAAI;AAEJ,MAAI;AAEJ,SAAO;AAcP,WAAS,MAAMD,OAAM;AACnB,OAAOA,UAAS,MAAM,aAAa,kBAAkB;AACrD,OAAO,SAAS,KAAK,MAAM,KAAK,QAAQ,GAAG,2BAA2B;AACtE,YAAQ,MAAM,MAAM,QAAQ;AAC5B,YAAQ,MAAM,MAAM,gBAAgB;AACpC,WAAO,aAAaA,KAAI;AAAA,EAC1B;AAYA,WAAS,aAAaA,OAAM;AAC1B,QAAIA,UAAS,MAAM,aAAa;AAC9B,cAAQ,QAAQA,KAAI;AACpB;AACA,aAAO;AAAA,IACT;AAEA,YAAQ,KAAK,MAAM,gBAAgB;AACnC,WAAOE,SAAQF,KAAI;AAAA,EACrB;AAYA,WAASE,SAAQF,OAAM;AAErB,QAAIA,UAAS,MAAM,KAAK;AACtB,aAAO,IAAIA,KAAI;AAAA,IACjB;AAKA,QAAIA,UAAS,MAAM,OAAO;AACxB,cAAQ,MAAM,OAAO;AACrB,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,OAAO;AACpB,aAAOE;AAAA,IACT;AAGA,QAAIF,UAAS,MAAM,aAAa;AAC9B,cAAQ,QAAQ,MAAM,MAAM,gBAAgB;AAC5C,aAAO;AACP,aAAO,cAAcA,KAAI;AAAA,IAC3B;AAEA,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,cAAQ,MAAM,MAAM,UAAU;AAC9B,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,UAAU;AAC7B,aAAOE;AAAA,IACT;AAGA,YAAQ,MAAM,MAAM,YAAY;AAChC,WAAO,KAAKF,KAAI;AAAA,EAClB;AAYA,WAAS,KAAKA,OAAM;AAClB,QACEA,UAAS,MAAM,OACfA,UAAS,MAAM,SACfA,UAAS,MAAM,eACf,mBAAmBA,KAAI,GACvB;AACA,cAAQ,KAAK,MAAM,YAAY;AAC/B,aAAOE,SAAQF,KAAI;AAAA,IACrB;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAYA,WAAS,cAAcA,OAAM;AAE3B,QAAIA,UAAS,MAAM,aAAa;AAC9B,cAAQ,QAAQA,KAAI;AACpB;AACA,aAAO;AAAA,IACT;AAGA,QAAI,SAAS,UAAU;AACrB,cAAQ,KAAK,MAAM,gBAAgB;AACnC,cAAQ,KAAK,MAAM,QAAQ;AAC3B,aAAOC,IAAGD,KAAI;AAAA,IAChB;AAGA,UAAM,OAAO,MAAM;AACnB,WAAO,KAAKA,KAAI;AAAA,EAClB;AACF;;;AC7NO,IAAM,eAAN,MAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxB,YAAY,SAAS;AAEnB,SAAK,OAAO,UAAU,CAAC,GAAG,OAAO,IAAI,CAAC;AAEtC,SAAK,QAAQ,CAAC;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,IAAIG,QAAO;AACT,QAAIA,SAAQ,KAAKA,UAAS,KAAK,KAAK,SAAS,KAAK,MAAM,QAAQ;AAC9D,YAAM,IAAI;AAAA,QACR,0BACEA,SACA,oCACC,KAAK,KAAK,SAAS,KAAK,MAAM,UAC/B;AAAA,MACJ;AAAA,IACF;AAEA,QAAIA,SAAQ,KAAK,KAAK,OAAQ,QAAO,KAAK,KAAKA,MAAK;AACpD,WAAO,KAAK,MAAM,KAAK,MAAM,SAASA,SAAQ,KAAK,KAAK,SAAS,CAAC;AAAA,EACpE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,SAAS;AACX,WAAO,KAAK,KAAK,SAAS,KAAK,MAAM;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,QAAQ;AACN,SAAK,UAAU,CAAC;AAChB,WAAO,KAAK,MAAM,IAAI;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,OAAO,KAAK;AAEhB,UAAM,OACJ,QAAQ,QAAQ,QAAQ,SAAY,OAAO,oBAAoB;AAEjE,QAAI,OAAO,KAAK,KAAK,QAAQ;AAC3B,aAAO,KAAK,KAAK,MAAM,OAAO,IAAI;AAAA,IACpC;AAEA,QAAI,QAAQ,KAAK,KAAK,QAAQ;AAC5B,aAAO,KAAK,MACT;AAAA,QACC,KAAK,MAAM,SAAS,OAAO,KAAK,KAAK;AAAA,QACrC,KAAK,MAAM,SAAS,QAAQ,KAAK,KAAK;AAAA,MACxC,EACC,QAAQ;AAAA,IACb;AAEA,WAAO,KAAK,KACT,MAAM,KAAK,EACX;AAAA,MACC,KAAK,MAAM,MAAM,KAAK,MAAM,SAAS,OAAO,KAAK,KAAK,MAAM,EAAE,QAAQ;AAAA,IACxE;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,OAAO,OAAO,aAAa,OAAO;AAEhC,UAAM,QAAQ,eAAe;AAE7B,SAAK,UAAU,KAAK,MAAM,KAAK,CAAC;AAChC,UAAM,UAAU,KAAK,MAAM;AAAA,MACzB,KAAK,MAAM,SAAS;AAAA,MACpB,OAAO;AAAA,IACT;AACA,QAAI,MAAO,aAAY,KAAK,MAAM,KAAK;AACvC,WAAO,QAAQ,QAAQ;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM;AACJ,SAAK,UAAU,OAAO,iBAAiB;AACvC,WAAO,KAAK,KAAK,IAAI;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,KAAK,MAAM;AACT,SAAK,UAAU,OAAO,iBAAiB;AACvC,SAAK,KAAK,KAAK,IAAI;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,SAAS,OAAO;AACd,SAAK,UAAU,OAAO,iBAAiB;AACvC,gBAAY,KAAK,MAAM,KAAK;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,QAAQ,MAAM;AACZ,SAAK,UAAU,CAAC;AAChB,SAAK,MAAM,KAAK,IAAI;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,YAAY,OAAO;AACjB,SAAK,UAAU,CAAC;AAChB,gBAAY,KAAK,OAAO,MAAM,QAAQ,CAAC;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,UAAUC,IAAG;AACX,QACEA,OAAM,KAAK,KAAK,UACfA,KAAI,KAAK,KAAK,UAAU,KAAK,MAAM,WAAW,KAC9CA,KAAI,KAAK,KAAK,KAAK,WAAW;AAE/B;AACF,QAAIA,KAAI,KAAK,KAAK,QAAQ;AAExB,YAAM,UAAU,KAAK,KAAK,OAAOA,IAAG,OAAO,iBAAiB;AAC5D,kBAAY,KAAK,OAAO,QAAQ,QAAQ,CAAC;AAAA,IAC3C,OAAO;AAEL,YAAM,UAAU,KAAK,MAAM;AAAA,QACzB,KAAK,KAAK,SAAS,KAAK,MAAM,SAASA;AAAA,QACvC,OAAO;AAAA,MACT;AACA,kBAAY,KAAK,MAAM,QAAQ,QAAQ,CAAC;AAAA,IAC1C;AAAA,EACF;AACF;AAcA,SAAS,YAAYC,OAAM,OAAO;AAEhC,MAAI,aAAa;AAEjB,MAAI,MAAM,SAAS,UAAU,oBAAoB;AAC/C,IAAAA,MAAK,KAAK,GAAG,KAAK;AAAA,EACpB,OAAO;AACL,WAAO,aAAa,MAAM,QAAQ;AAChC,MAAAA,MAAK;AAAA,QACH,GAAG,MAAM,MAAM,YAAY,aAAa,UAAU,kBAAkB;AAAA,MACtE;AACA,oBAAc,UAAU;AAAA,IAC1B;AAAA,EACF;AACF;;;ACxQO,SAAS,YAAY,aAAa;AAEvC,QAAM,QAAQ,CAAC;AACf,MAAIC,SAAQ;AAEZ,MAAI;AAEJ,MAAI;AAEJ,MAAI;AAEJ,MAAI;AAEJ,MAAI;AAEJ,MAAI;AAEJ,MAAI;AACJ,QAAM,SAAS,IAAI,aAAa,WAAW;AAE3C,SAAO,EAAEA,SAAQ,OAAO,QAAQ;AAC9B,WAAOA,UAAS,OAAO;AACrB,MAAAA,SAAQ,MAAMA,MAAK;AAAA,IACrB;AAEA,YAAQ,OAAO,IAAIA,MAAK;AAIxB,QACEA,UACA,MAAM,CAAC,EAAE,SAAS,MAAM,aACxB,OAAO,IAAIA,SAAQ,CAAC,EAAE,CAAC,EAAE,SAAS,MAAM,gBACxC;AACA,SAAO,MAAM,CAAC,EAAE,YAAY,oCAAoC;AAChE,kBAAY,MAAM,CAAC,EAAE,WAAW;AAChC,mBAAa;AAEb,UACE,aAAa,UAAU,UACvB,UAAU,UAAU,EAAE,CAAC,EAAE,SAAS,MAAM,iBACxC;AACA,sBAAc;AAAA,MAChB;AAEA,UACE,aAAa,UAAU,UACvB,UAAU,UAAU,EAAE,CAAC,EAAE,SAAS,MAAM,SACxC;AACA,eAAO,EAAE,aAAa,UAAU,QAAQ;AACtC,cAAI,UAAU,UAAU,EAAE,CAAC,EAAE,SAAS,MAAM,SAAS;AACnD;AAAA,UACF;AAEA,cAAI,UAAU,UAAU,EAAE,CAAC,EAAE,SAAS,MAAM,WAAW;AACrD,sBAAU,UAAU,EAAE,CAAC,EAAE,8BAA8B;AACvD;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGA,QAAI,MAAM,CAAC,MAAM,SAAS;AACxB,UAAI,MAAM,CAAC,EAAE,aAAa;AACxB,eAAO,OAAO,OAAO,WAAW,QAAQA,MAAK,CAAC;AAC9C,QAAAA,SAAQ,MAAMA,MAAK;AACnB,eAAO;AAAA,MACT;AAAA,IACF,WAES,MAAM,CAAC,EAAE,YAAY;AAC5B,mBAAaA;AACb,kBAAY;AAEZ,aAAO,cAAc;AACnB,qBAAa,OAAO,IAAI,UAAU;AAElC,YACE,WAAW,CAAC,EAAE,SAAS,MAAM,cAC7B,WAAW,CAAC,EAAE,SAAS,MAAM,iBAC7B;AACA,cAAI,WAAW,CAAC,MAAM,SAAS;AAC7B,gBAAI,WAAW;AACb,qBAAO,IAAI,SAAS,EAAE,CAAC,EAAE,OAAO,MAAM;AAAA,YACxC;AAEA,uBAAW,CAAC,EAAE,OAAO,MAAM;AAC3B,wBAAY;AAAA,UACd;AAAA,QACF,OAAO;AACL;AAAA,QACF;AAAA,MACF;AAEA,UAAI,WAAW;AAEb,cAAM,CAAC,EAAE,MAAM,OAAO,OAAO,CAAC,GAAG,OAAO,IAAI,SAAS,EAAE,CAAC,EAAE,KAAK;AAG/D,qBAAa,OAAO,MAAM,WAAWA,MAAK;AAC1C,mBAAW,QAAQ,KAAK;AACxB,eAAO,OAAO,WAAWA,SAAQ,YAAY,GAAG,UAAU;AAAA,MAC5D;AAAA,IACF;AAAA,EACF;AAGA,SAAO,aAAa,GAAG,OAAO,mBAAmB,OAAO,MAAM,CAAC,CAAC;AAChE,SAAO,CAAC;AACV;AASA,SAAS,WAAW,QAAQ,YAAY;AACtC,QAAM,QAAQ,OAAO,IAAI,UAAU,EAAE,CAAC;AACtC,QAAM,UAAU,OAAO,IAAI,UAAU,EAAE,CAAC;AACxC,MAAI,gBAAgB,aAAa;AAEjC,QAAM,iBAAiB,CAAC;AACxB,KAAO,MAAM,aAAa,qCAAqC;AAC/D,QAAM,YACJ,MAAM,cAAc,QAAQ,OAAO,MAAM,WAAW,EAAE,MAAM,KAAK;AACnE,QAAM,cAAc,UAAU;AAE9B,QAAM,QAAQ,CAAC;AAEf,QAAM,OAAO,CAAC;AAEd,MAAI;AAEJ,MAAIC;AACJ,MAAID,SAAQ;AAEZ,MAAI,UAAU;AACd,MAAI,SAAS;AACb,MAAI,QAAQ;AACZ,QAAM,SAAS,CAAC,KAAK;AAIrB,SAAO,SAAS;AAEd,WAAO,OAAO,IAAI,EAAE,aAAa,EAAE,CAAC,MAAM,SAAS;AAAA,IAEnD;AAEA;AAAA,MACE,CAACC,aAAY,QAAQ,aAAaA;AAAA,MAClC;AAAA,IACF;AACA,OAAO,CAACA,aAAYA,UAAS,SAAS,SAAS,wBAAwB;AAEvE,mBAAe,KAAK,aAAa;AAEjC,QAAI,CAAC,QAAQ,YAAY;AACvB,eAAS,QAAQ,YAAY,OAAO;AAEpC,UAAI,CAAC,QAAQ,MAAM;AACjB,eAAO,KAAK,MAAM,GAAG;AAAA,MACvB;AAEA,UAAIA,WAAU;AACZ,kBAAU,WAAW,QAAQ,KAAK;AAAA,MACpC;AAEA,UAAI,QAAQ,6BAA6B;AACvC,kBAAU,qCAAqC;AAAA,MACjD;AAEA,gBAAU,MAAM,MAAM;AAEtB,UAAI,QAAQ,6BAA6B;AACvC,kBAAU,qCAAqC;AAAA,MACjD;AAAA,IACF;AAGA,IAAAA,YAAW;AACX,cAAU,QAAQ;AAAA,EACpB;AAIA,YAAU;AAEV,SAAO,EAAED,SAAQ,YAAY,QAAQ;AACnC;AAAA;AAAA,MAEE,YAAYA,MAAK,EAAE,CAAC,MAAM,UAC1B,YAAYA,SAAQ,CAAC,EAAE,CAAC,MAAM,WAC9B,YAAYA,MAAK,EAAE,CAAC,EAAE,SAAS,YAAYA,SAAQ,CAAC,EAAE,CAAC,EAAE,QACzD,YAAYA,MAAK,EAAE,CAAC,EAAE,MAAM,SAAS,YAAYA,MAAK,EAAE,CAAC,EAAE,IAAI;AAAA,MAC/D;AACA,SAAO,SAAS,0BAA0B;AAC1C,cAAQA,SAAQ;AAChB,aAAO,KAAK,KAAK;AAEjB,cAAQ,aAAa;AACrB,cAAQ,WAAW;AACnB,gBAAU,QAAQ;AAAA,IACpB;AAAA,EACF;AAGA,YAAU,SAAS,CAAC;AAKpB,MAAI,SAAS;AAEX,YAAQ,aAAa;AACrB,YAAQ,WAAW;AACnB,OAAO,CAAC,QAAQ,MAAM,wBAAwB;AAAA,EAChD,OAAO;AACL,WAAO,IAAI;AAAA,EACb;AAIA,EAAAA,SAAQ,OAAO;AAEf,SAAOA,UAAS;AACd,UAAM,QAAQ,YAAY,MAAM,OAAOA,MAAK,GAAG,OAAOA,SAAQ,CAAC,CAAC;AAChE,UAAME,SAAQ,eAAe,IAAI;AACjC,OAAOA,WAAU,QAAW,yCAAyC;AACrE,UAAM,KAAK,CAACA,QAAOA,SAAQ,MAAM,SAAS,CAAC,CAAC;AAC5C,WAAO,OAAOA,QAAO,GAAG,KAAK;AAAA,EAC/B;AAEA,QAAM,QAAQ;AACd,EAAAF,SAAQ;AAER,SAAO,EAAEA,SAAQ,MAAM,QAAQ;AAC7B,SAAK,SAAS,MAAMA,MAAK,EAAE,CAAC,CAAC,IAAI,SAAS,MAAMA,MAAK,EAAE,CAAC;AACxD,cAAU,MAAMA,MAAK,EAAE,CAAC,IAAI,MAAMA,MAAK,EAAE,CAAC,IAAI;AAAA,EAChD;AAEA,SAAO;AACT;;;ACzPO,IAAMG,WAAU,EAAC,UAAU,iBAAiB,SAAS,eAAc;AAG1E,IAAM,wBAAwB,EAAC,UAAU,sBAAsB,SAAS,KAAI;AAQ5E,SAAS,eAAe,QAAQ;AAC9B,cAAY,MAAM;AAClB,SAAO;AACT;AAMA,SAAS,gBAAgB,SAASC,KAAI;AAEpC,MAAIC;AAEJ,SAAO;AAYP,WAAS,WAAWC,OAAM;AACxB;AAAA,MACEA,UAAS,MAAM,OAAO,CAAC,mBAAmBA,KAAI;AAAA,MAC9C;AAAA,IACF;AAEA,YAAQ,MAAM,MAAM,OAAO;AAC3B,IAAAD,YAAW,QAAQ,MAAM,MAAM,cAAc;AAAA,MAC3C,aAAa,UAAU;AAAA,IACzB,CAAC;AACD,WAAO,YAAYC,KAAI;AAAA,EACzB;AAYA,WAAS,YAAYA,OAAM;AACzB,QAAIA,UAAS,MAAM,KAAK;AACtB,aAAO,WAAWA,KAAI;AAAA,IACxB;AAIA,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,aAAO,QAAQ;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,MACF,EAAEA,KAAI;AAAA,IACR;AAGA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAOA,WAAS,WAAWA,OAAM;AACxB,YAAQ,KAAK,MAAM,YAAY;AAC/B,YAAQ,KAAK,MAAM,OAAO;AAC1B,WAAOF,IAAGE,KAAI;AAAA,EAChB;AAOA,WAAS,gBAAgBA,OAAM;AAC7B,OAAO,mBAAmBA,KAAI,GAAG,cAAc;AAC/C,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,YAAY;AAC/B,OAAOD,WAAU,yBAAyB;AAC1C,IAAAA,UAAS,OAAO,QAAQ,MAAM,MAAM,cAAc;AAAA,MAChD,aAAa,UAAU;AAAA,MACvB,UAAAA;AAAA,IACF,CAAC;AACD,IAAAA,YAAWA,UAAS;AACpB,WAAO;AAAA,EACT;AACF;AAMA,SAAS,qBAAqB,SAASD,KAAI,KAAK;AAC9C,QAAM,OAAO;AAEb,SAAO;AAOP,WAAS,eAAeE,OAAM;AAC5B,OAAO,mBAAmBA,KAAI,GAAG,wBAAwB;AACzD,YAAQ,KAAK,MAAM,YAAY;AAC/B,YAAQ,MAAM,MAAM,UAAU;AAC9B,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,UAAU;AAC7B,WAAO,aAAa,SAAS,UAAU,MAAM,UAAU;AAAA,EACzD;AAOA,WAAS,SAASA,OAAM;AACtB,QAAIA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AAClD,aAAO,IAAIA,KAAI;AAAA,IACjB;AAGA;AAAA,MACE,KAAK,OAAO,WAAW,QAAQ;AAAA,MAC/B;AAAA,IACF;AAEA,UAAM,OAAO,KAAK,OAAO,KAAK,OAAO,SAAS,CAAC;AAE/C,QACE,CAAC,KAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,KAC5D,QACA,KAAK,CAAC,EAAE,SAAS,MAAM,cACvB,KAAK,CAAC,EAAE,eAAe,KAAK,CAAC,GAAG,IAAI,EAAE,UAAU,UAAU,SAC1D;AACA,aAAOF,IAAGE,KAAI;AAAA,IAChB;AAEA,WAAO,QAAQ,UAAU,KAAK,OAAO,WAAW,MAAM,KAAKF,GAAE,EAAEE,KAAI;AAAA,EACrE;AACF;;;ACjIO,SAAS,mBACd,SACAC,KACA,KACA,MACA,aACA,mBACA,SACA,YACA,KACA;AACA,QAAM,QAAQ,OAAO,OAAO;AAC5B,MAAI,UAAU;AAEd,SAAO;AAcP,WAAS,MAAMC,OAAM;AACnB,QAAIA,UAAS,MAAM,UAAU;AAC3B,cAAQ,MAAM,IAAI;AAClB,cAAQ,MAAM,WAAW;AACzB,cAAQ,MAAM,iBAAiB;AAC/B,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,iBAAiB;AAC9B,aAAO;AAAA,IACT;AAGA,QACEA,UAAS,MAAM,OACfA,UAAS,MAAM,SACfA,UAAS,MAAM,oBACf,aAAaA,KAAI,GACjB;AACA,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,YAAQ,MAAM,IAAI;AAClB,YAAQ,MAAM,OAAO;AACrB,YAAQ,MAAM,UAAU;AACxB,YAAQ,MAAM,MAAM,aAAa,EAAC,aAAa,UAAU,kBAAiB,CAAC;AAC3E,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,eAAeA,OAAM;AAC5B,QAAIA,UAAS,MAAM,aAAa;AAC9B,cAAQ,MAAM,iBAAiB;AAC/B,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,iBAAiB;AAC9B,cAAQ,KAAK,WAAW;AACxB,cAAQ,KAAK,IAAI;AACjB,aAAOD;AAAA,IACT;AAEA,YAAQ,MAAM,UAAU;AACxB,YAAQ,MAAM,MAAM,aAAa,EAAC,aAAa,UAAU,kBAAiB,CAAC;AAC3E,WAAO,SAASC,KAAI;AAAA,EACtB;AAYA,WAAS,SAASA,OAAM;AACtB,QAAIA,UAAS,MAAM,aAAa;AAC9B,cAAQ,KAAK,MAAM,WAAW;AAC9B,cAAQ,KAAK,UAAU;AACvB,aAAO,eAAeA,KAAI;AAAA,IAC5B;AAEA,QACEA,UAAS,MAAM,OACfA,UAAS,MAAM,YACf,mBAAmBA,KAAI,GACvB;AACA,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAOA,UAAS,MAAM,YAAY,iBAAiB;AAAA,EACrD;AAYA,WAAS,eAAeA,OAAM;AAC5B,QACEA,UAAS,MAAM,YACfA,UAAS,MAAM,eACfA,UAAS,MAAM,WACf;AACA,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,SAASA,KAAI;AAAA,EACtB;AAYA,WAAS,IAAIA,OAAM;AACjB,QACE,CAAC,YACAA,UAAS,MAAM,OACdA,UAAS,MAAM,oBACf,0BAA0BA,KAAI,IAChC;AACA,cAAQ,KAAK,MAAM,WAAW;AAC9B,cAAQ,KAAK,UAAU;AACvB,cAAQ,KAAK,OAAO;AACpB,cAAQ,KAAK,IAAI;AACjB,aAAOD,IAAGC,KAAI;AAAA,IAChB;AAEA,QAAI,UAAU,SAASA,UAAS,MAAM,iBAAiB;AACrD,cAAQ,QAAQA,KAAI;AACpB;AACA,aAAO;AAAA,IACT;AAEA,QAAIA,UAAS,MAAM,kBAAkB;AACnC,cAAQ,QAAQA,KAAI;AACpB;AACA,aAAO;AAAA,IACT;AAKA,QACEA,UAAS,MAAM,OACfA,UAAS,MAAM,SACfA,UAAS,MAAM,mBACf,aAAaA,KAAI,GACjB;AACA,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAOA,UAAS,MAAM,YAAY,YAAY;AAAA,EAChD;AAYA,WAAS,UAAUA,OAAM;AACvB,QACEA,UAAS,MAAM,mBACfA,UAAS,MAAM,oBACfA,UAAS,MAAM,WACf;AACA,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AACF;;;ACtNO,SAAS,aAAa,SAASC,KAAI,KAAK,MAAM,YAAY,YAAY;AAC3E,QAAM,OAAO;AACb,MAAI,OAAO;AAEX,MAAI;AAEJ,SAAO;AAYP,WAAS,MAAMC,OAAM;AACnB,OAAOA,UAAS,MAAM,mBAAmB,cAAc;AACvD,YAAQ,MAAM,IAAI;AAClB,YAAQ,MAAM,UAAU;AACxB,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,UAAU;AACvB,YAAQ,MAAM,UAAU;AACxB,WAAO;AAAA,EACT;AAYA,WAAS,QAAQA,OAAM;AACrB,QACE,OAAO,UAAU,wBACjBA,UAAS,MAAM,OACfA,UAAS,MAAM,qBACdA,UAAS,MAAM,sBAAsB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,IAMtCA,UAAS,MAAM,SACd,CAAC,QACD,4BAA4B,KAAK,OAAO,YAC1C;AACA,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,QAAIA,UAAS,MAAM,oBAAoB;AACrC,cAAQ,KAAK,UAAU;AACvB,cAAQ,MAAM,UAAU;AACxB,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,UAAU;AACvB,cAAQ,KAAK,IAAI;AACjB,aAAOD;AAAA,IACT;AAGA,QAAI,mBAAmBC,KAAI,GAAG;AAC5B,cAAQ,MAAM,MAAM,UAAU;AAC9B,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,UAAU;AAC7B,aAAO;AAAA,IACT;AAEA,YAAQ,MAAM,MAAM,aAAa,EAAC,aAAa,UAAU,kBAAiB,CAAC;AAC3E,WAAO,YAAYA,KAAI;AAAA,EACzB;AAYA,WAAS,YAAYA,OAAM;AACzB,QACEA,UAAS,MAAM,OACfA,UAAS,MAAM,qBACfA,UAAS,MAAM,sBACf,mBAAmBA,KAAI,KACvB,SAAS,UAAU,sBACnB;AACA,cAAQ,KAAK,MAAM,WAAW;AAC9B,aAAO,QAAQA,KAAI;AAAA,IACrB;AAEA,YAAQ,QAAQA,KAAI;AACpB,QAAI,CAAC,KAAM,QAAO,CAAC,cAAcA,KAAI;AACrC,WAAOA,UAAS,MAAM,YAAY,cAAc;AAAA,EAClD;AAYA,WAAS,YAAYA,OAAM;AACzB,QACEA,UAAS,MAAM,qBACfA,UAAS,MAAM,aACfA,UAAS,MAAM,oBACf;AACA,cAAQ,QAAQA,KAAI;AACpB;AACA,aAAO;AAAA,IACT;AAEA,WAAO,YAAYA,KAAI;AAAA,EACzB;AACF;;;AC/HO,SAAS,aAAa,SAASC,KAAI,KAAK,MAAM,YAAY,YAAY;AAE3E,MAAI;AAEJ,SAAO;AAYP,WAAS,MAAMC,OAAM;AACnB,QACEA,UAAS,MAAM,iBACfA,UAAS,MAAM,cACfA,UAAS,MAAM,iBACf;AACA,cAAQ,MAAM,IAAI;AAClB,cAAQ,MAAM,UAAU;AACxB,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,UAAU;AACvB,eAASA,UAAS,MAAM,kBAAkB,MAAM,mBAAmBA;AACnE,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAcA,WAAS,MAAMA,OAAM;AACnB,QAAIA,UAAS,QAAQ;AACnB,cAAQ,MAAM,UAAU;AACxB,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,UAAU;AACvB,cAAQ,KAAK,IAAI;AACjB,aAAOD;AAAA,IACT;AAEA,YAAQ,MAAM,UAAU;AACxB,WAAO,QAAQC,KAAI;AAAA,EACrB;AAYA,WAAS,QAAQA,OAAM;AACrB,QAAIA,UAAS,QAAQ;AACnB,cAAQ,KAAK,UAAU;AACvB,aAAO,MAAM,MAAM;AAAA,IACrB;AAEA,QAAIA,UAAS,MAAM,KAAK;AACtB,aAAO,IAAIA,KAAI;AAAA,IACjB;AAGA,QAAI,mBAAmBA,KAAI,GAAG;AAE5B,cAAQ,MAAM,MAAM,UAAU;AAC9B,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,UAAU;AAC7B,aAAO,aAAa,SAAS,SAAS,MAAM,UAAU;AAAA,IACxD;AAEA,YAAQ,MAAM,MAAM,aAAa,EAAC,aAAa,UAAU,kBAAiB,CAAC;AAC3E,WAAO,OAAOA,KAAI;AAAA,EACpB;AAOA,WAAS,OAAOA,OAAM;AACpB,QAAIA,UAAS,UAAUA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AACrE,cAAQ,KAAK,MAAM,WAAW;AAC9B,aAAO,QAAQA,KAAI;AAAA,IACrB;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAOA,UAAS,MAAM,YAAY,SAAS;AAAA,EAC7C;AAYA,WAAS,OAAOA,OAAM;AACpB,QAAIA,UAAS,UAAUA,UAAS,MAAM,WAAW;AAC/C,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,OAAOA,KAAI;AAAA,EACpB;AACF;;;AC5IO,SAAS,kBAAkB,SAASC,KAAI;AAE7C,MAAI;AAEJ,SAAO;AAGP,WAAS,MAAMC,OAAM;AACnB,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,cAAQ,MAAM,MAAM,UAAU;AAC9B,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,UAAU;AAC7B,aAAO;AACP,aAAO;AAAA,IACT;AAEA,QAAI,cAAcA,KAAI,GAAG;AACvB,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA,OAAO,MAAM,aAAa,MAAM;AAAA,MAClC,EAAEA,KAAI;AAAA,IACR;AAEA,WAAOD,IAAGC,KAAI;AAAA,EAChB;AACF;;;AC/BO,IAAM,aAAa,EAAC,MAAM,cAAc,UAAU,mBAAkB;AAG3E,IAAM,cAAc,EAAC,UAAU,qBAAqB,SAAS,KAAI;AAMjE,SAAS,mBAAmB,SAASC,KAAI,KAAK;AAC5C,QAAM,OAAO;AAEb,MAAI;AAEJ,SAAO;AAYP,WAAS,MAAMC,OAAM;AAInB,YAAQ,MAAM,MAAM,UAAU;AAC9B,WAAO,OAAOA,KAAI;AAAA,EACpB;AAYA,WAAS,OAAOA,OAAM;AAEpB,OAAOA,UAAS,MAAM,mBAAmB,cAAc;AACvD,WAAO,aAAa;AAAA,MAClB;AAAA,MACA;AAAA,MACA;AAAA;AAAA,MAEA;AAAA,MACA,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,IACR,EAAEA,KAAI;AAAA,EACR;AAYA,WAAS,WAAWA,OAAM;AACxB,iBAAa;AAAA,MACX,KAAK,eAAe,KAAK,OAAO,KAAK,OAAO,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,GAAG,EAAE;AAAA,IACzE;AAEA,QAAIA,UAAS,MAAM,OAAO;AACxB,cAAQ,MAAM,MAAM,gBAAgB;AACpC,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,gBAAgB;AACnC,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,YAAYA,OAAM;AAEzB,WAAO,0BAA0BA,KAAI,IACjC,kBAAkB,SAAS,iBAAiB,EAAEA,KAAI,IAClD,kBAAkBA,KAAI;AAAA,EAC5B;AAYA,WAAS,kBAAkBA,OAAM;AAC/B,WAAO;AAAA,MACL;AAAA,MACA;AAAA;AAAA,MAEA;AAAA,MACA,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,IACR,EAAEA,KAAI;AAAA,EACR;AAYA,WAAS,iBAAiBA,OAAM;AAC9B,WAAO,QAAQ,QAAQ,aAAa,OAAO,KAAK,EAAEA,KAAI;AAAA,EACxD;AAcA,WAAS,MAAMA,OAAM;AACnB,WAAO,cAAcA,KAAI,IACrB,aAAa,SAAS,iBAAiB,MAAM,UAAU,EAAEA,KAAI,IAC7D,gBAAgBA,KAAI;AAAA,EAC1B;AAcA,WAAS,gBAAgBA,OAAM;AAC7B,QAAIA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AAClD,cAAQ,KAAK,MAAM,UAAU;AAK7B,WAAK,OAAO,QAAQ,KAAK,UAAU;AAKnC,aAAOD,IAAGC,KAAI;AAAA,IAChB;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AACF;AAMA,SAAS,oBAAoB,SAASD,KAAI,KAAK;AAC7C,SAAOE;AAcP,WAASA,aAAYD,OAAM;AACzB,WAAO,0BAA0BA,KAAI,IACjC,kBAAkB,SAAS,YAAY,EAAEA,KAAI,IAC7C,IAAIA,KAAI;AAAA,EACd;AAaA,WAAS,aAAaA,OAAM;AAC1B,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,IACR,EAAEA,KAAI;AAAA,EACR;AAYA,WAAS,WAAWA,OAAM;AACxB,WAAO,cAAcA,KAAI,IACrB;AAAA,MACE;AAAA,MACA;AAAA,MACA,MAAM;AAAA,IACR,EAAEA,KAAI,IACN,6BAA6BA,KAAI;AAAA,EACvC;AAYA,WAAS,6BAA6BA,OAAM;AAC1C,WAAOA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,IAAID,IAAGC,KAAI,IAAI,IAAIA,KAAI;AAAA,EAC7E;AACF;;;ACtRO,IAAM,kBAAkB;AAAA,EAC7B,MAAM;AAAA,EACN,UAAU;AACZ;AAMA,SAAS,wBAAwB,SAASE,KAAI,KAAK;AACjD,SAAO;AAaP,WAAS,MAAMC,OAAM;AACnB,OAAOA,UAAS,MAAM,WAAW,eAAe;AAChD,YAAQ,MAAM,MAAM,eAAe;AACnC,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAaA,WAAS,MAAMA,OAAM;AACnB,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,cAAQ,KAAK,MAAM,eAAe;AAClC,aAAOD,IAAGC,KAAI;AAAA,IAChB;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AACF;;;ACzCO,IAAM,aAAa;AAAA,EACxB,MAAM;AAAA,EACN,UAAU;AAAA,EACV,SAAS;AACX;AAGA,SAAS,kBAAkB,QAAQ,SAAS;AAC1C,MAAI,aAAa,OAAO,SAAS;AACjC,MAAI,eAAe;AAEnB,MAAIC;AAEJ,MAAIC;AAGJ,MAAI,OAAO,YAAY,EAAE,CAAC,EAAE,SAAS,MAAM,YAAY;AACrD,oBAAgB;AAAA,EAClB;AAGA,MACE,aAAa,IAAI,gBACjB,OAAO,UAAU,EAAE,CAAC,EAAE,SAAS,MAAM,YACrC;AACA,kBAAc;AAAA,EAChB;AAEA,MACE,OAAO,UAAU,EAAE,CAAC,EAAE,SAAS,MAAM,uBACpC,iBAAiB,aAAa,KAC5B,aAAa,IAAI,gBAChB,OAAO,aAAa,CAAC,EAAE,CAAC,EAAE,SAAS,MAAM,aAC7C;AACA,kBAAc,eAAe,MAAM,aAAa,IAAI;AAAA,EACtD;AAEA,MAAI,aAAa,cAAc;AAC7B,IAAAD,WAAU;AAAA,MACR,MAAM,MAAM;AAAA,MACZ,OAAO,OAAO,YAAY,EAAE,CAAC,EAAE;AAAA,MAC/B,KAAK,OAAO,UAAU,EAAE,CAAC,EAAE;AAAA,IAC7B;AACA,IAAAC,QAAO;AAAA,MACL,MAAM,MAAM;AAAA,MACZ,OAAO,OAAO,YAAY,EAAE,CAAC,EAAE;AAAA,MAC/B,KAAK,OAAO,UAAU,EAAE,CAAC,EAAE;AAAA,MAC3B,aAAa,UAAU;AAAA,IACzB;AAEA,WAAO,QAAQ,cAAc,aAAa,eAAe,GAAG;AAAA,MAC1D,CAAC,SAASD,UAAS,OAAO;AAAA,MAC1B,CAAC,SAASC,OAAM,OAAO;AAAA,MACvB,CAAC,QAAQA,OAAM,OAAO;AAAA,MACtB,CAAC,QAAQD,UAAS,OAAO;AAAA,IAC3B,CAAC;AAAA,EACH;AAEA,SAAO;AACT;AAMA,SAAS,mBAAmB,SAASE,KAAI,KAAK;AAC5C,MAAI,OAAO;AAEX,SAAO;AAYP,WAAS,MAAMC,OAAM;AAEnB,YAAQ,MAAM,MAAM,UAAU;AAC9B,WAAO,OAAOA,KAAI;AAAA,EACpB;AAYA,WAAS,OAAOA,OAAM;AACpB,OAAOA,UAAS,MAAM,YAAY,cAAc;AAChD,YAAQ,MAAM,MAAM,kBAAkB;AACtC,WAAO,aAAaA,KAAI;AAAA,EAC1B;AAYA,WAAS,aAAaA,OAAM;AAC1B,QACEA,UAAS,MAAM,cACf,SAAS,UAAU,+BACnB;AACA,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAGA,QAAIA,UAAS,MAAM,OAAO,0BAA0BA,KAAI,GAAG;AACzD,cAAQ,KAAK,MAAM,kBAAkB;AACrC,aAAO,QAAQA,KAAI;AAAA,IACrB;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,QAAQA,OAAM;AACrB,QAAIA,UAAS,MAAM,YAAY;AAC7B,cAAQ,MAAM,MAAM,kBAAkB;AACtC,aAAO,gBAAgBA,KAAI;AAAA,IAC7B;AAEA,QAAIA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AAClD,cAAQ,KAAK,MAAM,UAAU;AAI7B,aAAOD,IAAGC,KAAI;AAAA,IAChB;AAEA,QAAI,cAAcA,KAAI,GAAG;AACvB,aAAO,aAAa,SAAS,SAAS,MAAM,UAAU,EAAEA,KAAI;AAAA,IAC9D;AAIA,YAAQ,MAAM,MAAM,cAAc;AAClC,WAAO,KAAKA,KAAI;AAAA,EAClB;AAcA,WAAS,gBAAgBA,OAAM;AAC7B,QAAIA,UAAS,MAAM,YAAY;AAC7B,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,YAAQ,KAAK,MAAM,kBAAkB;AACrC,WAAO,QAAQA,KAAI;AAAA,EACrB;AAYA,WAAS,KAAKA,OAAM;AAClB,QACEA,UAAS,MAAM,OACfA,UAAS,MAAM,cACf,0BAA0BA,KAAI,GAC9B;AACA,cAAQ,KAAK,MAAM,cAAc;AACjC,aAAO,QAAQA,KAAI;AAAA,IACrB;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AACF;;;ACtNO,IAAM,iBAAicO,IAAM,eAAe,CAAC,OAAO,UAAU,SAAS,UAAU;;;ACtE1D,IAAM,WAAW;AAAA,EACtB,MAAM;AAAA,EACN,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AACZ;AAGA,IAAM,kBAAkB,EAAC,UAAU,yBAAyB,SAAS,KAAI;AACzE,IAAM,2BAA2B;AAAA,EAC/B,UAAU;AAAA,EACV,SAAS;AACX;AAGA,SAAS,kBAAkB,QAAQ;AACjC,MAAIC,SAAQ,OAAO;AAEnB,SAAOA,UAAS;AACd,QACE,OAAOA,MAAK,EAAE,CAAC,MAAM,WACrB,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM,UAChC;AACA;AAAA,IACF;AAAA,EACF;AAEA,MAAIA,SAAQ,KAAK,OAAOA,SAAQ,CAAC,EAAE,CAAC,EAAE,SAAS,MAAM,YAAY;AAE/D,WAAOA,MAAK,EAAE,CAAC,EAAE,QAAQ,OAAOA,SAAQ,CAAC,EAAE,CAAC,EAAE;AAE9C,WAAOA,SAAQ,CAAC,EAAE,CAAC,EAAE,QAAQ,OAAOA,SAAQ,CAAC,EAAE,CAAC,EAAE;AAElD,WAAO,OAAOA,SAAQ,GAAG,CAAC;AAAA,EAC5B;AAEA,SAAO;AACT;AAMA,SAAS,iBAAiB,SAASC,KAAI,KAAK;AAC1C,QAAM,OAAO;AAEb,MAAI;AAEJ,MAAI;AAEJ,MAAI;AAEJ,MAAID;AAEJ,MAAI;AAEJ,SAAO;AAYP,WAAS,MAAME,OAAM;AAEnB,WAAO,OAAOA,KAAI;AAAA,EACpB;AAYA,WAAS,OAAOA,OAAM;AACpB,OAAOA,UAAS,MAAM,UAAU,cAAc;AAC9C,YAAQ,MAAM,MAAM,QAAQ;AAC5B,YAAQ,MAAM,MAAM,YAAY;AAChC,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAgBA,WAAS,KAAKA,OAAM;AAClB,QAAIA,UAAS,MAAM,iBAAiB;AAClC,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAIA,UAAS,MAAM,OAAO;AACxB,cAAQ,QAAQA,KAAI;AACpB,mBAAa;AACb,aAAO;AAAA,IACT;AAEA,QAAIA,UAAS,MAAM,cAAc;AAC/B,cAAQ,QAAQA,KAAI;AACpB,eAAS,UAAU;AAMnB,aAAO,KAAK,YAAYD,MAAK;AAAA,IAC/B;AAGA,QAAI,WAAWC,KAAI,GAAG;AACpB,cAAQ,QAAQA,KAAI;AAEpB,eAAS,OAAO,aAAaA,KAAI;AACjC,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAgBA,WAAS,gBAAgBA,OAAM;AAC7B,QAAIA,UAAS,MAAM,MAAM;AACvB,cAAQ,QAAQA,KAAI;AACpB,eAAS,UAAU;AACnB,aAAO;AAAA,IACT;AAEA,QAAIA,UAAS,MAAM,mBAAmB;AACpC,cAAQ,QAAQA,KAAI;AACpB,eAAS,UAAU;AACnB,MAAAF,SAAQ;AACR,aAAO;AAAA,IACT;AAGA,QAAI,WAAWE,KAAI,GAAG;AACpB,cAAQ,QAAQA,KAAI;AACpB,eAAS,UAAU;AAGnB,aAAO,KAAK,YAAYD,MAAK;AAAA,IAC/B;AAEA,WAAO,IAAIC,KAAI;AAAA,EACjB;AAYA,WAAS,kBAAkBA,OAAM;AAC/B,QAAIA,UAAS,MAAM,MAAM;AACvB,cAAQ,QAAQA,KAAI;AAGpB,aAAO,KAAK,YAAYD,MAAK;AAAA,IAC/B;AAEA,WAAO,IAAIC,KAAI;AAAA,EACjB;AAYA,WAAS,gBAAgBA,OAAM;AAC7B,UAAM,QAAQ,UAAU;AAExB,QAAIA,UAAS,MAAM,WAAWF,QAAO,GAAG;AACtC,cAAQ,QAAQE,KAAI;AAEpB,UAAIF,WAAU,MAAM,QAAQ;AAG1B,eAAO,KAAK,YAAYC,MAAK;AAAA,MAC/B;AAEA,aAAO;AAAA,IACT;AAEA,WAAO,IAAIC,KAAI;AAAA,EACjB;AAYA,WAAS,cAAcA,OAAM;AAC3B,QAAI,WAAWA,KAAI,GAAG;AACpB,cAAQ,QAAQA,KAAI;AAEpB,eAAS,OAAO,aAAaA,KAAI;AACjC,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAcA,WAAS,QAAQA,OAAM;AACrB,QACEA,UAAS,MAAM,OACfA,UAAS,MAAM,SACfA,UAAS,MAAM,eACf,0BAA0BA,KAAI,GAC9B;AACA,YAAM,QAAQA,UAAS,MAAM;AAC7B,YAAM,OAAO,OAAO,YAAY;AAEhC,UAAI,CAAC,SAAS,CAAC,cAAc,aAAa,SAAS,IAAI,GAAG;AACxD,iBAAS,UAAU;AAGnB,eAAO,KAAK,YAAYD,IAAGC,KAAI,IAAI,aAAaA,KAAI;AAAA,MACtD;AAEA,UAAI,eAAe,SAAS,OAAO,YAAY,CAAC,GAAG;AACjD,iBAAS,UAAU;AAEnB,YAAI,OAAO;AACT,kBAAQ,QAAQA,KAAI;AACpB,iBAAO;AAAA,QACT;AAIA,eAAO,KAAK,YAAYD,IAAGC,KAAI,IAAI,aAAaA,KAAI;AAAA,MACtD;AAEA,eAAS,UAAU;AAEnB,aAAO,KAAK,aAAa,CAAC,KAAK,OAAO,KAAK,KAAK,IAAI,EAAE,IAAI,IACtD,IAAIA,KAAI,IACR,aACE,wBAAwBA,KAAI,IAC5B,4BAA4BA,KAAI;AAAA,IACxC;AAGA,QAAIA,UAAS,MAAM,QAAQ,kBAAkBA,KAAI,GAAG;AAClD,cAAQ,QAAQA,KAAI;AACpB,gBAAU,OAAO,aAAaA,KAAI;AAClC,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,iBAAiBA,OAAM;AAC9B,QAAIA,UAAS,MAAM,aAAa;AAC9B,cAAQ,QAAQA,KAAI;AAGpB,aAAO,KAAK,YAAYD,MAAK;AAAA,IAC/B;AAEA,WAAO,IAAIC,KAAI;AAAA,EACjB;AAYA,WAAS,wBAAwBA,OAAM;AACrC,QAAI,cAAcA,KAAI,GAAG;AACvB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,YAAYA,KAAI;AAAA,EACzB;AAyBA,WAAS,4BAA4BA,OAAM;AACzC,QAAIA,UAAS,MAAM,OAAO;AACxB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAGA,QAAIA,UAAS,MAAM,SAASA,UAAS,MAAM,cAAc,WAAWA,KAAI,GAAG;AACzE,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAI,cAAcA,KAAI,GAAG;AACvB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,YAAYA,KAAI;AAAA,EACzB;AAgBA,WAAS,sBAAsBA,OAAM;AAEnC,QACEA,UAAS,MAAM,QACfA,UAAS,MAAM,OACfA,UAAS,MAAM,SACfA,UAAS,MAAM,cACf,kBAAkBA,KAAI,GACtB;AACA,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,2BAA2BA,KAAI;AAAA,EACxC;AAeA,WAAS,2BAA2BA,OAAM;AACxC,QAAIA,UAAS,MAAM,UAAU;AAC3B,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAI,cAAcA,KAAI,GAAG;AACvB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,4BAA4BA,KAAI;AAAA,EACzC;AAeA,WAAS,6BAA6BA,OAAM;AAC1C,QACEA,UAAS,MAAM,OACfA,UAAS,MAAM,YACfA,UAAS,MAAM,YACfA,UAAS,MAAM,eACfA,UAAS,MAAM,aACf;AACA,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,QAAIA,UAAS,MAAM,iBAAiBA,UAAS,MAAM,YAAY;AAC7D,cAAQ,QAAQA,KAAI;AACpB,gBAAUA;AACV,aAAO;AAAA,IACT;AAEA,QAAI,cAAcA,KAAI,GAAG;AACvB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,+BAA+BA,KAAI;AAAA,EAC5C;AAcA,WAAS,6BAA6BA,OAAM;AAC1C,QAAIA,UAAS,SAAS;AACpB,cAAQ,QAAQA,KAAI;AACpB,gBAAU;AACV,aAAO;AAAA,IACT;AAEA,QAAIA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AAClD,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAYA,WAAS,+BAA+BA,OAAM;AAC5C,QACEA,UAAS,MAAM,OACfA,UAAS,MAAM,iBACfA,UAAS,MAAM,cACfA,UAAS,MAAM,SACfA,UAAS,MAAM,YACfA,UAAS,MAAM,YACfA,UAAS,MAAM,eACfA,UAAS,MAAM,eACf,0BAA0BA,KAAI,GAC9B;AACA,aAAO,2BAA2BA,KAAI;AAAA,IACxC;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAaA,WAAS,kCAAkCA,OAAM;AAC/C,QACEA,UAAS,MAAM,SACfA,UAAS,MAAM,eACf,cAAcA,KAAI,GAClB;AACA,aAAO,4BAA4BA,KAAI;AAAA,IACzC;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,YAAYA,OAAM;AACzB,QAAIA,UAAS,MAAM,aAAa;AAC9B,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,cAAcA,OAAM;AAC3B,QAAIA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AAGlD,aAAO,aAAaA,KAAI;AAAA,IAC1B;AAEA,QAAI,cAAcA,KAAI,GAAG;AACvB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,aAAaA,OAAM;AAC1B,QAAIA,UAAS,MAAM,QAAQ,WAAW,UAAU,aAAa;AAC3D,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAIA,UAAS,MAAM,YAAY,WAAW,UAAU,SAAS;AAC3D,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAIA,UAAS,MAAM,eAAe,WAAW,UAAU,iBAAiB;AACtE,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAIA,UAAS,MAAM,gBAAgB,WAAW,UAAU,iBAAiB;AACvE,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAIA,UAAS,MAAM,sBAAsB,WAAW,UAAU,WAAW;AACvE,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QACE,mBAAmBA,KAAI,MACtB,WAAW,UAAU,aAAa,WAAW,UAAU,eACxD;AACA,cAAQ,KAAK,MAAM,YAAY;AAC/B,aAAO,QAAQ;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,MACF,EAAEA,KAAI;AAAA,IACR;AAEA,QAAIA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AAClD,cAAQ,KAAK,MAAM,YAAY;AAC/B,aAAO,kBAAkBA,KAAI;AAAA,IAC/B;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAaA,WAAS,kBAAkBA,OAAM;AAC/B,WAAO,QAAQ;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,IACF,EAAEA,KAAI;AAAA,EACR;AAaA,WAAS,yBAAyBA,OAAM;AACtC,OAAO,mBAAmBA,KAAI,CAAC;AAC/B,YAAQ,MAAM,MAAM,UAAU;AAC9B,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,UAAU;AAC7B,WAAO;AAAA,EACT;AAaA,WAAS,mBAAmBA,OAAM;AAChC,QAAIA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AAClD,aAAO,kBAAkBA,KAAI;AAAA,IAC/B;AAEA,YAAQ,MAAM,MAAM,YAAY;AAChC,WAAO,aAAaA,KAAI;AAAA,EAC1B;AAYA,WAAS,0BAA0BA,OAAM;AACvC,QAAIA,UAAS,MAAM,MAAM;AACvB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,aAAaA,KAAI;AAAA,EAC1B;AAYA,WAAS,uBAAuBA,OAAM;AACpC,QAAIA,UAAS,MAAM,OAAO;AACxB,cAAQ,QAAQA,KAAI;AACpB,eAAS;AACT,aAAO;AAAA,IACT;AAEA,WAAO,aAAaA,KAAI;AAAA,EAC1B;AAYA,WAAS,sBAAsBA,OAAM;AACnC,QAAIA,UAAS,MAAM,aAAa;AAC9B,YAAM,OAAO,OAAO,YAAY;AAEhC,UAAI,aAAa,SAAS,IAAI,GAAG;AAC/B,gBAAQ,QAAQA,KAAI;AACpB,eAAO;AAAA,MACT;AAEA,aAAO,aAAaA,KAAI;AAAA,IAC1B;AAEA,QAAI,WAAWA,KAAI,KAAK,OAAO,SAAS,UAAU,gBAAgB;AAChE,cAAQ,QAAQA,KAAI;AAEpB,gBAAU,OAAO,aAAaA,KAAI;AAClC,aAAO;AAAA,IACT;AAEA,WAAO,aAAaA,KAAI;AAAA,EAC1B;AAYA,WAAS,wBAAwBA,OAAM;AACrC,QAAIA,UAAS,MAAM,oBAAoB;AACrC,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,aAAaA,KAAI;AAAA,EAC1B;AAoBA,WAAS,8BAA8BA,OAAM;AAC3C,QAAIA,UAAS,MAAM,aAAa;AAC9B,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAGA,QAAIA,UAAS,MAAM,QAAQ,WAAW,UAAU,aAAa;AAC3D,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,aAAaA,KAAI;AAAA,EAC1B;AAYA,WAAS,kBAAkBA,OAAM;AAC/B,QAAIA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AAClD,cAAQ,KAAK,MAAM,YAAY;AAC/B,aAAO,kBAAkBA,KAAI;AAAA,IAC/B;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAYA,WAAS,kBAAkBA,OAAM;AAC/B,YAAQ,KAAK,MAAM,QAAQ;AAK3B,WAAOD,IAAGC,KAAI;AAAA,EAChB;AACF;AAMA,SAAS,iCAAiC,SAASD,KAAI,KAAK;AAC1D,QAAM,OAAO;AAEb,SAAO;AAaP,WAAS,MAAMC,OAAM;AACnB,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,cAAQ,MAAM,MAAM,UAAU;AAC9B,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,UAAU;AAC7B,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAaA,WAAS,MAAMA,OAAM;AACnB,WAAO,KAAK,OAAO,KAAK,KAAK,IAAI,EAAE,IAAI,IAAI,IAAIA,KAAI,IAAID,IAAGC,KAAI;AAAA,EAChE;AACF;AAMA,SAAS,wBAAwB,SAASD,KAAI,KAAK;AACjD,SAAO;AAaP,WAAS,MAAMC,OAAM;AACnB,OAAO,mBAAmBA,KAAI,GAAG,wBAAwB;AACzD,YAAQ,MAAM,MAAM,UAAU;AAC9B,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,UAAU;AAC7B,WAAO,QAAQ,QAAQ,WAAWD,KAAI,GAAG;AAAA,EAC3C;AACF;;;ACn8BO,IAAM,WAAW,EAAC,MAAM,YAAY,UAAU,iBAAgB;AAMrE,SAAS,iBAAiB,SAASE,KAAI,KAAK;AAC1C,QAAM,OAAO;AAEb,MAAI;AAEJ,MAAIC;AAEJ,MAAI;AAEJ,SAAO;AAYP,WAAS,MAAMC,OAAM;AACnB,OAAOA,UAAS,MAAM,UAAU,cAAc;AAC9C,YAAQ,MAAM,MAAM,QAAQ;AAC5B,YAAQ,MAAM,MAAM,YAAY;AAChC,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAgBA,WAAS,KAAKA,OAAM;AAClB,QAAIA,UAAS,MAAM,iBAAiB;AAClC,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAIA,UAAS,MAAM,OAAO;AACxB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAIA,UAAS,MAAM,cAAc;AAC/B,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAGA,QAAI,WAAWA,KAAI,GAAG;AACpB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAgBA,WAAS,gBAAgBA,OAAM;AAC7B,QAAIA,UAAS,MAAM,MAAM;AACvB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAIA,UAAS,MAAM,mBAAmB;AACpC,cAAQ,QAAQA,KAAI;AACpB,MAAAD,SAAQ;AACR,aAAO;AAAA,IACT;AAEA,QAAI,WAAWC,KAAI,GAAG;AACpB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,kBAAkBA,OAAM;AAC/B,QAAIA,UAAS,MAAM,MAAM;AACvB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,QAAQA,OAAM;AACrB,QAAIA,UAAS,MAAM,KAAK;AACtB,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,QAAIA,UAAS,MAAM,MAAM;AACvB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,oBAAc;AACd,aAAO,iBAAiBA,KAAI;AAAA,IAC9B;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAYA,WAAS,aAAaA,OAAM;AAC1B,QAAIA,UAAS,MAAM,MAAM;AACvB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,QAAQA,KAAI;AAAA,EACrB;AAYA,WAAS,WAAWA,OAAM;AACxB,WAAOA,UAAS,MAAM,cAClB,IAAIA,KAAI,IACRA,UAAS,MAAM,OACb,aAAaA,KAAI,IACjB,QAAQA,KAAI;AAAA,EACpB;AAYA,WAAS,gBAAgBA,OAAM;AAC7B,UAAM,QAAQ,UAAU;AAExB,QAAIA,UAAS,MAAM,WAAWD,QAAO,GAAG;AACtC,cAAQ,QAAQC,KAAI;AACpB,aAAOD,WAAU,MAAM,SAAS,QAAQ;AAAA,IAC1C;AAEA,WAAO,IAAIC,KAAI;AAAA,EACjB;AAYA,WAAS,MAAMA,OAAM;AACnB,QAAIA,UAAS,MAAM,KAAK;AACtB,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,QAAIA,UAAS,MAAM,oBAAoB;AACrC,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,oBAAc;AACd,aAAO,iBAAiBA,KAAI;AAAA,IAC9B;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAYA,WAAS,WAAWA,OAAM;AACxB,QAAIA,UAAS,MAAM,oBAAoB;AACrC,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,MAAMA,KAAI;AAAA,EACnB;AAYA,WAAS,SAASA,OAAM;AACtB,QAAIA,UAAS,MAAM,aAAa;AAC9B,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,QAAIA,UAAS,MAAM,oBAAoB;AACrC,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,MAAMA,KAAI;AAAA,EACnB;AAYA,WAAS,YAAYA,OAAM;AACzB,QAAIA,UAAS,MAAM,OAAOA,UAAS,MAAM,aAAa;AACpD,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,oBAAc;AACd,aAAO,iBAAiBA,KAAI;AAAA,IAC9B;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAYA,WAAS,YAAYA,OAAM;AACzB,QAAIA,UAAS,MAAM,KAAK;AACtB,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,QAAIA,UAAS,MAAM,cAAc;AAC/B,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,oBAAc;AACd,aAAO,iBAAiBA,KAAI;AAAA,IAC9B;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAYA,WAAS,iBAAiBA,OAAM;AAC9B,WAAOA,UAAS,MAAM,cAAc,IAAIA,KAAI,IAAI,YAAYA,KAAI;AAAA,EAClE;AAYA,WAAS,cAAcA,OAAM;AAE3B,QAAI,WAAWA,KAAI,GAAG;AACpB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,SAASA,OAAM;AAEtB,QAAIA,UAAS,MAAM,QAAQ,kBAAkBA,KAAI,GAAG;AAClD,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,gBAAgBA,KAAI;AAAA,EAC7B;AAYA,WAAS,gBAAgBA,OAAM;AAC7B,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,oBAAc;AACd,aAAO,iBAAiBA,KAAI;AAAA,IAC9B;AAEA,QAAI,cAAcA,KAAI,GAAG;AACvB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,QAAQA,OAAM;AAErB,QAAIA,UAAS,MAAM,QAAQ,kBAAkBA,KAAI,GAAG;AAClD,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QACEA,UAAS,MAAM,SACfA,UAAS,MAAM,eACf,0BAA0BA,KAAI,GAC9B;AACA,aAAO,eAAeA,KAAI;AAAA,IAC5B;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,eAAeA,OAAM;AAC5B,QAAIA,UAAS,MAAM,OAAO;AACxB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAGA,QAAIA,UAAS,MAAM,SAASA,UAAS,MAAM,cAAc,WAAWA,KAAI,GAAG;AACzE,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,oBAAc;AACd,aAAO,iBAAiBA,KAAI;AAAA,IAC9B;AAEA,QAAI,cAAcA,KAAI,GAAG;AACvB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,qBAAqBA,OAAM;AAElC,QACEA,UAAS,MAAM,QACfA,UAAS,MAAM,OACfA,UAAS,MAAM,SACfA,UAAS,MAAM,cACf,kBAAkBA,KAAI,GACtB;AACA,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,0BAA0BA,KAAI;AAAA,EACvC;AAaA,WAAS,0BAA0BA,OAAM;AACvC,QAAIA,UAAS,MAAM,UAAU;AAC3B,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,oBAAc;AACd,aAAO,iBAAiBA,KAAI;AAAA,IAC9B;AAEA,QAAI,cAAcA,KAAI,GAAG;AACvB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,WAAO,eAAeA,KAAI;AAAA,EAC5B;AAaA,WAAS,4BAA4BA,OAAM;AACzC,QACEA,UAAS,MAAM,OACfA,UAAS,MAAM,YACfA,UAAS,MAAM,YACfA,UAAS,MAAM,eACfA,UAAS,MAAM,aACf;AACA,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,QAAIA,UAAS,MAAM,iBAAiBA,UAAS,MAAM,YAAY;AAC7D,cAAQ,QAAQA,KAAI;AACpB,eAASA;AACT,aAAO;AAAA,IACT;AAEA,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,oBAAc;AACd,aAAO,iBAAiBA,KAAI;AAAA,IAC9B;AAEA,QAAI,cAAcA,KAAI,GAAG;AACvB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAYA,WAAS,4BAA4BA,OAAM;AACzC,QAAIA,UAAS,QAAQ;AACnB,cAAQ,QAAQA,KAAI;AACpB,eAAS;AACT,aAAO;AAAA,IACT;AAEA,QAAIA,UAAS,MAAM,KAAK;AACtB,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,oBAAc;AACd,aAAO,iBAAiBA,KAAI;AAAA,IAC9B;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAYA,WAAS,8BAA8BA,OAAM;AAC3C,QACEA,UAAS,MAAM,OACfA,UAAS,MAAM,iBACfA,UAAS,MAAM,cACfA,UAAS,MAAM,YACfA,UAAS,MAAM,YACfA,UAAS,MAAM,aACf;AACA,aAAO,IAAIA,KAAI;AAAA,IACjB;AAEA,QACEA,UAAS,MAAM,SACfA,UAAS,MAAM,eACf,0BAA0BA,KAAI,GAC9B;AACA,aAAO,eAAeA,KAAI;AAAA,IAC5B;AAEA,YAAQ,QAAQA,KAAI;AACpB,WAAO;AAAA,EACT;AAaA,WAAS,iCAAiCA,OAAM;AAC9C,QACEA,UAAS,MAAM,SACfA,UAAS,MAAM,eACf,0BAA0BA,KAAI,GAC9B;AACA,aAAO,eAAeA,KAAI;AAAA,IAC5B;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,IAAIA,OAAM;AACjB,QAAIA,UAAS,MAAM,aAAa;AAC9B,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,YAAY;AAC/B,cAAQ,KAAK,MAAM,QAAQ;AAC3B,aAAOF;AAAA,IACT;AAEA,WAAO,IAAIE,KAAI;AAAA,EACjB;AAgBA,WAAS,iBAAiBA,OAAM;AAC9B,OAAO,aAAa,uBAAuB;AAC3C,OAAO,mBAAmBA,KAAI,GAAG,cAAc;AAC/C,YAAQ,KAAK,MAAM,YAAY;AAC/B,YAAQ,MAAM,MAAM,UAAU;AAC9B,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,UAAU;AAC7B,WAAO;AAAA,EACT;AAgBA,WAAS,gBAAgBA,OAAM;AAE7B;AAAA,MACE,KAAK,OAAO,WAAW,QAAQ;AAAA,MAC/B;AAAA,IACF;AACA,WAAO,cAAcA,KAAI,IACrB;AAAA,MACE;AAAA,MACA;AAAA,MACA,MAAM;AAAA,MACN,KAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,IACvD,SACA,UAAU;AAAA,IAChB,EAAEA,KAAI,IACN,sBAAsBA,KAAI;AAAA,EAChC;AAgBA,WAAS,sBAAsBA,OAAM;AACnC,YAAQ,MAAM,MAAM,YAAY;AAChC,WAAO,YAAYA,KAAI;AAAA,EACzB;AACF;;;ACrvBO,IAAM,WAAW;AAAA,EACtB,MAAM;AAAA,EACN,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AACd;AAGA,IAAM,oBAAoB,EAAC,UAAU,iBAAgB;AAErD,IAAM,yBAAyB,EAAC,UAAU,sBAAqB;AAE/D,IAAM,8BAA8B,EAAC,UAAU,2BAA0B;AAGzE,SAAS,mBAAmB,QAAQ;AAClC,MAAIC,SAAQ;AAEZ,SAAO,EAAEA,SAAQ,OAAO,QAAQ;AAC9B,UAAM,QAAQ,OAAOA,MAAK,EAAE,CAAC;AAE7B,QACE,MAAM,SAAS,MAAM,cACrB,MAAM,SAAS,MAAM,aACrB,MAAM,SAAS,MAAM,UACrB;AAEA,aAAO,OAAOA,SAAQ,GAAG,MAAM,SAAS,MAAM,aAAa,IAAI,CAAC;AAChE,YAAM,OAAO,MAAM;AACnB,MAAAA;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAGA,SAAS,kBAAkB,QAAQ,SAAS;AAC1C,MAAIA,SAAQ,OAAO;AACnB,MAAI,SAAS;AAEb,MAAI;AAEJ,MAAI;AAEJ,MAAI;AAEJ,MAAI;AAGJ,SAAOA,UAAS;AACd,YAAQ,OAAOA,MAAK,EAAE,CAAC;AAEvB,QAAI,MAAM;AAER,UACE,MAAM,SAAS,MAAM,QACpB,MAAM,SAAS,MAAM,aAAa,MAAM,WACzC;AACA;AAAA,MACF;AAIA,UAAI,OAAOA,MAAK,EAAE,CAAC,MAAM,WAAW,MAAM,SAAS,MAAM,WAAW;AAClE,cAAM,YAAY;AAAA,MACpB;AAAA,IACF,WAAW,OAAO;AAChB,UACE,OAAOA,MAAK,EAAE,CAAC,MAAM,YACpB,MAAM,SAAS,MAAM,cAAc,MAAM,SAAS,MAAM,cACzD,CAAC,MAAM,WACP;AACA,eAAOA;AAEP,YAAI,MAAM,SAAS,MAAM,WAAW;AAClC,mBAAS;AACT;AAAA,QACF;AAAA,MACF;AAAA,IACF,WAAW,MAAM,SAAS,MAAM,UAAU;AACxC,cAAQA;AAAA,IACV;AAAA,EACF;AAEA,KAAO,SAAS,QAAW,gCAAgC;AAC3D,KAAO,UAAU,QAAW,iCAAiC;AAE7D,QAAM,QAAQ;AAAA,IACZ,MAAM,OAAO,IAAI,EAAE,CAAC,EAAE,SAAS,MAAM,YAAY,MAAM,OAAO,MAAM;AAAA,IACpE,OAAO,OAAO,OAAO,CAAC,GAAG,OAAO,IAAI,EAAE,CAAC,EAAE,KAAK;AAAA,IAC9C,KAAK,OAAO,OAAO,CAAC,GAAG,OAAO,OAAO,SAAS,CAAC,EAAE,CAAC,EAAE,GAAG;AAAA,EACzD;AAEA,QAAM,QAAQ;AAAA,IACZ,MAAM,MAAM;AAAA,IACZ,OAAO,OAAO,OAAO,CAAC,GAAG,OAAO,IAAI,EAAE,CAAC,EAAE,KAAK;AAAA,IAC9C,KAAK,OAAO,OAAO,CAAC,GAAG,OAAO,KAAK,EAAE,CAAC,EAAE,GAAG;AAAA,EAC7C;AAEA,QAAMC,QAAO;AAAA,IACX,MAAM,MAAM;AAAA,IACZ,OAAO,OAAO,OAAO,CAAC,GAAG,OAAO,OAAO,SAAS,CAAC,EAAE,CAAC,EAAE,GAAG;AAAA,IACzD,KAAK,OAAO,OAAO,CAAC,GAAG,OAAO,QAAQ,CAAC,EAAE,CAAC,EAAE,KAAK;AAAA,EACnD;AAEA,UAAQ;AAAA,IACN,CAAC,SAAS,OAAO,OAAO;AAAA,IACxB,CAAC,SAAS,OAAO,OAAO;AAAA,EAC1B;AAGA,UAAQ,KAAK,OAAO,OAAO,MAAM,OAAO,GAAG,OAAO,SAAS,CAAC,CAAC;AAG7D,UAAQ,KAAK,OAAO,CAAC,CAAC,SAASA,OAAM,OAAO,CAAC,CAAC;AAG9C;AAAA,IACE,QAAQ,OAAO,WAAW,WAAW;AAAA,IACrC;AAAA,EACF;AAEA,UAAQ;AAAA,IACN;AAAA,IACA;AAAA,MACE,QAAQ,OAAO,WAAW,WAAW;AAAA,MACrC,OAAO,MAAM,OAAO,SAAS,GAAG,QAAQ,CAAC;AAAA,MACzC;AAAA,IACF;AAAA,EACF;AAGA,UAAQ,KAAK,OAAO;AAAA,IAClB,CAAC,QAAQA,OAAM,OAAO;AAAA,IACtB,OAAO,QAAQ,CAAC;AAAA,IAChB,OAAO,QAAQ,CAAC;AAAA,IAChB,CAAC,QAAQ,OAAO,OAAO;AAAA,EACzB,CAAC;AAGD,UAAQ,KAAK,OAAO,OAAO,MAAM,QAAQ,CAAC,CAAC;AAG3C,UAAQ,KAAK,OAAO,CAAC,CAAC,QAAQ,OAAO,OAAO,CAAC,CAAC;AAE9C,SAAO,QAAQ,MAAM,OAAO,QAAQ,KAAK;AAEzC,SAAO;AACT;AAMA,SAAS,iBAAiB,SAASC,KAAI,KAAK;AAC1C,QAAM,OAAO;AACb,MAAIF,SAAQ,KAAK,OAAO;AAExB,MAAI;AAEJ,MAAI;AAGJ,SAAOA,UAAS;AACd,SACG,KAAK,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM,cACpC,KAAK,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM,cACvC,CAAC,KAAK,OAAOA,MAAK,EAAE,CAAC,EAAE,WACvB;AACA,mBAAa,KAAK,OAAOA,MAAK,EAAE,CAAC;AACjC;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AAiBP,WAAS,MAAMG,OAAM;AACnB,OAAOA,UAAS,MAAM,oBAAoB,cAAc;AAGxD,QAAI,CAAC,YAAY;AACf,aAAO,IAAIA,KAAI;AAAA,IACjB;AAWA,QAAI,WAAW,WAAW;AACxB,aAAO,YAAYA,KAAI;AAAA,IACzB;AAEA,cAAU,KAAK,OAAO,QAAQ;AAAA,MAC5B;AAAA,QACE,KAAK,eAAe,EAAC,OAAO,WAAW,KAAK,KAAK,KAAK,IAAI,EAAC,CAAC;AAAA,MAC9D;AAAA,IACF;AACA,YAAQ,MAAM,MAAM,QAAQ;AAC5B,YAAQ,MAAM,MAAM,WAAW;AAC/B,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,WAAW;AAC9B,YAAQ,KAAK,MAAM,QAAQ;AAC3B,WAAO;AAAA,EACT;AAkBA,WAAS,MAAMA,OAAM;AAKnB,QAAIA,UAAS,MAAM,iBAAiB;AAClC,aAAO,QAAQ;AAAA,QACb;AAAA,QACA;AAAA,QACA,UAAU,aAAa;AAAA,MACzB,EAAEA,KAAI;AAAA,IACR;AAGA,QAAIA,UAAS,MAAM,mBAAmB;AACpC,aAAO,QAAQ;AAAA,QACb;AAAA,QACA;AAAA,QACA,UAAU,mBAAmB;AAAA,MAC/B,EAAEA,KAAI;AAAA,IACR;AAGA,WAAO,UAAU,WAAWA,KAAI,IAAI,YAAYA,KAAI;AAAA,EACtD;AAgBA,WAAS,iBAAiBA,OAAM;AAC9B,WAAO,QAAQ;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,IACF,EAAEA,KAAI;AAAA,EACR;AAkBA,WAAS,WAAWA,OAAM;AAExB,WAAOD,IAAGC,KAAI;AAAA,EAChB;AAkBA,WAAS,YAAYA,OAAM;AACzB,eAAW,YAAY;AACvB,WAAO,IAAIA,KAAI;AAAA,EACjB;AACF;AAMA,SAAS,iBAAiB,SAASD,KAAI,KAAK;AAC1C,SAAO;AAYP,WAAS,cAAcC,OAAM;AAC3B,OAAOA,UAAS,MAAM,iBAAiB,qBAAqB;AAC5D,YAAQ,MAAM,MAAM,QAAQ;AAC5B,YAAQ,MAAM,MAAM,cAAc;AAClC,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,cAAc;AACjC,WAAO;AAAA,EACT;AAYA,WAAS,eAAeA,OAAM;AAC5B,WAAO,0BAA0BA,KAAI,IACjC,kBAAkB,SAAS,YAAY,EAAEA,KAAI,IAC7C,aAAaA,KAAI;AAAA,EACvB;AAYA,WAAS,aAAaA,OAAM;AAC1B,QAAIA,UAAS,MAAM,kBAAkB;AACnC,aAAO,YAAYA,KAAI;AAAA,IACzB;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,IACZ,EAAEA,KAAI;AAAA,EACR;AAYA,WAAS,yBAAyBA,OAAM;AACtC,WAAO,0BAA0BA,KAAI,IACjC,kBAAkB,SAAS,eAAe,EAAEA,KAAI,IAChD,YAAYA,KAAI;AAAA,EACtB;AAYA,WAAS,2BAA2BA,OAAM;AACxC,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,gBAAgBA,OAAM;AAC7B,QACEA,UAAS,MAAM,iBACfA,UAAS,MAAM,cACfA,UAAS,MAAM,iBACf;AACA,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,MACR,EAAEA,KAAI;AAAA,IACR;AAEA,WAAO,YAAYA,KAAI;AAAA,EACzB;AAYA,WAAS,mBAAmBA,OAAM;AAChC,WAAO,0BAA0BA,KAAI,IACjC,kBAAkB,SAAS,WAAW,EAAEA,KAAI,IAC5C,YAAYA,KAAI;AAAA,EACtB;AAYA,WAAS,YAAYA,OAAM;AACzB,QAAIA,UAAS,MAAM,kBAAkB;AACnC,cAAQ,MAAM,MAAM,cAAc;AAClC,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,cAAc;AACjC,cAAQ,KAAK,MAAM,QAAQ;AAC3B,aAAOD;AAAA,IACT;AAEA,WAAO,IAAIC,KAAI;AAAA,EACjB;AACF;AAMA,SAAS,sBAAsB,SAASD,KAAI,KAAK;AAC/C,QAAM,OAAO;AAEb,SAAO;AAYP,WAAS,cAAcC,OAAM;AAC3B,OAAOA,UAAS,MAAM,mBAAmB,uBAAuB;AAChE,WAAO,aAAa;AAAA,MAClB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,IACR,EAAEA,KAAI;AAAA,EACR;AAYA,WAAS,mBAAmBA,OAAM;AAChC,WAAO,KAAK,OAAO,QAAQ;AAAA,MACzB;AAAA,QACE,KAAK,eAAe,KAAK,OAAO,KAAK,OAAO,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,GAAG,EAAE;AAAA,MACzE;AAAA,IACF,IACID,IAAGC,KAAI,IACP,IAAIA,KAAI;AAAA,EACd;AAYA,WAAS,qBAAqBA,OAAM;AAClC,WAAO,IAAIA,KAAI;AAAA,EACjB;AACF;AAMA,SAAS,2BAA2B,SAASD,KAAI,KAAK;AACpD,SAAO;AAcP,WAAS,wBAAwBC,OAAM;AAErC,OAAOA,UAAS,MAAM,mBAAmB,uBAAuB;AAChE,YAAQ,MAAM,MAAM,SAAS;AAC7B,YAAQ,MAAM,MAAM,eAAe;AACnC,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,eAAe;AAClC,WAAO;AAAA,EACT;AAcA,WAAS,uBAAuBA,OAAM;AACpC,QAAIA,UAAS,MAAM,oBAAoB;AACrC,cAAQ,MAAM,MAAM,eAAe;AACnC,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,eAAe;AAClC,cAAQ,KAAK,MAAM,SAAS;AAC5B,aAAOD;AAAA,IACT;AAEA,WAAO,IAAIC,KAAI;AAAA,EACjB;AACF;;;ACtnBO,IAAM,kBAAkB;AAAA,EAC7B,MAAM;AAAA,EACN,UAAU;AAAA,EACV,YAAY,SAAS;AACvB;AAMA,SAAS,wBAAwB,SAASC,KAAI,KAAK;AACjD,QAAM,OAAO;AAEb,SAAO;AAYP,WAAS,MAAMC,OAAM;AACnB,OAAOA,UAAS,MAAM,iBAAiB,cAAc;AACrD,YAAQ,MAAM,MAAM,UAAU;AAC9B,YAAQ,MAAM,MAAM,gBAAgB;AACpC,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,gBAAgB;AACnC,WAAO;AAAA,EACT;AAYA,WAAS,KAAKA,OAAM;AAClB,QAAIA,UAAS,MAAM,mBAAmB;AACpC,cAAQ,MAAM,MAAM,WAAW;AAC/B,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,WAAW;AAC9B,cAAQ,KAAK,MAAM,UAAU;AAC7B,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AA6BA,WAAS,MAAMA,OAAM;AAMnB,WAAOA,UAAS,MAAM,SACpB,4BAA4B,KAAK,OAAO,aACtC,IAAIA,KAAI,IACRD,IAAGC,KAAI;AAAA,EACb;AACF;;;AC9FO,IAAM,iBAAiB;AAAA,EAC5B,MAAM;AAAA,EACN,UAAU;AAAA,EACV,YAAY,SAAS;AACvB;AAMA,SAAS,uBAAuB,SAASC,KAAI,KAAK;AAChD,QAAM,OAAO;AAEb,SAAO;AAYP,WAAS,MAAMC,OAAM;AACnB,OAAOA,UAAS,MAAM,mBAAmB,cAAc;AACvD,YAAQ,MAAM,MAAM,SAAS;AAC7B,YAAQ,MAAM,MAAM,WAAW;AAC/B,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,WAAW;AAC9B,YAAQ,KAAK,MAAM,SAAS;AAC5B,WAAO;AAAA,EACT;AAGA,WAAS,MAAMA,OAAM;AAKnB,WAAOA,UAAS,MAAM,SACpB,4BAA4B,KAAK,OAAO,aACtC,IAAIA,KAAI,IACRD,IAAGC,KAAI;AAAA,EACb;AACF;;;AC7CO,IAAM,aAAa,EAAC,MAAM,cAAc,UAAU,mBAAkB;AAM3E,SAAS,mBAAmB,SAASC,KAAI;AACvC,SAAO;AAGP,WAAS,MAAMC,OAAM;AACnB,OAAO,mBAAmBA,KAAI,GAAG,cAAc;AAC/C,YAAQ,MAAM,MAAM,UAAU;AAC9B,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,UAAU;AAC7B,WAAO,aAAa,SAASD,KAAI,MAAM,UAAU;AAAA,EACnD;AACF;;;AChBO,IAAM,gBAAgB;AAAA,EAC3B,MAAM;AAAA,EACN,UAAU;AACZ;AAMA,SAAS,sBAAsB,SAASE,KAAI,KAAK;AAC/C,MAAI,OAAO;AAEX,MAAI;AAEJ,SAAO;AAYP,WAAS,MAAMC,OAAM;AACnB,YAAQ,MAAM,MAAM,aAAa;AAEjC,WAAO,OAAOA,KAAI;AAAA,EACpB;AAYA,WAAS,OAAOA,OAAM;AACpB;AAAA,MACEA,UAAS,MAAM,YACbA,UAAS,MAAM,QACfA,UAAS,MAAM;AAAA,MACjB;AAAA,IACF;AACA,aAASA;AACT,WAAO,QAAQA,KAAI;AAAA,EACrB;AAYA,WAAS,QAAQA,OAAM;AACrB,QAAIA,UAAS,QAAQ;AACnB,cAAQ,MAAM,MAAM,qBAAqB;AACzC,aAAO,SAASA,KAAI;AAAA,IACtB;AAEA,QACE,QAAQ,UAAU,gCACjBA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,IAC9C;AACA,cAAQ,KAAK,MAAM,aAAa;AAChC,aAAOD,IAAGC,KAAI;AAAA,IAChB;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAYA,WAAS,SAASA,OAAM;AACtB,QAAIA,UAAS,QAAQ;AACnB,cAAQ,QAAQA,KAAI;AACpB;AACA,aAAO;AAAA,IACT;AAEA,YAAQ,KAAK,MAAM,qBAAqB;AACxC,WAAO,cAAcA,KAAI,IACrB,aAAa,SAAS,SAAS,MAAM,UAAU,EAAEA,KAAI,IACrD,QAAQA,KAAI;AAAA,EAClB;AACF;;;AClGO,IAAM,OAAO;AAAA,EAClB,MAAM;AAAA,EACN,UAAU;AAAA,EACV,cAAc,EAAC,UAAU,yBAAwB;AAAA,EACjD,MAAM;AACR;AAGA,IAAM,oCAAoC;AAAA,EACxC,UAAU;AAAA,EACV,SAAS;AACX;AAGA,IAAM,kBAAkB,EAAC,UAAU,gBAAgB,SAAS,KAAI;AAShE,SAAS,kBAAkB,SAASC,KAAI,KAAK;AAC3C,QAAM,OAAO;AACb,QAAM,OAAO,KAAK,OAAO,KAAK,OAAO,SAAS,CAAC;AAC/C,MAAI,cACF,QAAQ,KAAK,CAAC,EAAE,SAAS,MAAM,aAC3B,KAAK,CAAC,EAAE,eAAe,KAAK,CAAC,GAAG,IAAI,EAAE,SACtC;AACN,MAAI,OAAO;AAEX,SAAO;AAGP,WAAS,MAAMC,OAAM;AACnB,OAAO,KAAK,gBAAgB,gBAAgB;AAC5C,UAAM,OACJ,KAAK,eAAe,SACnBA,UAAS,MAAM,YAAYA,UAAS,MAAM,YAAYA,UAAS,MAAM,OAClE,MAAM,gBACN,MAAM;AAEZ,QACE,SAAS,MAAM,gBACX,CAAC,KAAK,eAAe,UAAUA,UAAS,KAAK,eAAe,SAC5D,WAAWA,KAAI,GACnB;AACA,UAAI,CAAC,KAAK,eAAe,MAAM;AAC7B,aAAK,eAAe,OAAO;AAC3B,gBAAQ,MAAM,MAAM,EAAC,YAAY,KAAI,CAAC;AAAA,MACxC;AAEA,UAAI,SAAS,MAAM,eAAe;AAChC,gBAAQ,MAAM,MAAM,cAAc;AAClC,eAAOA,UAAS,MAAM,YAAYA,UAAS,MAAM,OAC7C,QAAQ,MAAM,eAAe,KAAK,QAAQ,EAAEA,KAAI,IAChD,SAASA,KAAI;AAAA,MACnB;AAEA,UAAI,CAAC,KAAK,aAAaA,UAAS,MAAM,QAAQ;AAC5C,gBAAQ,MAAM,MAAM,cAAc;AAClC,gBAAQ,MAAM,MAAM,aAAa;AACjC,eAAO,OAAOA,KAAI;AAAA,MACpB;AAAA,IACF;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAGA,WAAS,OAAOA,OAAM;AACpB,OAAO,KAAK,gBAAgB,gBAAgB;AAC5C,QAAI,WAAWA,KAAI,KAAK,EAAE,OAAO,UAAU,sBAAsB;AAC/D,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,SACG,CAAC,KAAK,aAAa,OAAO,OAC1B,KAAK,eAAe,SACjBA,UAAS,KAAK,eAAe,SAC7BA,UAAS,MAAM,oBAAoBA,UAAS,MAAM,MACtD;AACA,cAAQ,KAAK,MAAM,aAAa;AAChC,aAAO,SAASA,KAAI;AAAA,IACtB;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAKA,WAAS,SAASA,OAAM;AACtB,OAAO,KAAK,gBAAgB,gBAAgB;AAC5C,OAAOA,UAAS,MAAM,KAAK,8BAA8B;AACzD,YAAQ,MAAM,MAAM,cAAc;AAClC,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,cAAc;AACjC,SAAK,eAAe,SAAS,KAAK,eAAe,UAAUA;AAC3D,WAAO,QAAQ;AAAA,MACb;AAAA;AAAA,MAEA,KAAK,YAAY,MAAM;AAAA,MACvB,QAAQ;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAGA,WAAS,QAAQA,OAAM;AACrB,OAAO,KAAK,gBAAgB,gBAAgB;AAC5C,SAAK,eAAe,mBAAmB;AACvC;AACA,WAAO,YAAYA,KAAI;AAAA,EACzB;AAGA,WAAS,YAAYA,OAAM;AACzB,QAAI,cAAcA,KAAI,GAAG;AACvB,cAAQ,MAAM,MAAM,wBAAwB;AAC5C,cAAQ,QAAQA,KAAI;AACpB,cAAQ,KAAK,MAAM,wBAAwB;AAC3C,aAAO;AAAA,IACT;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAGA,WAAS,YAAYA,OAAM;AACzB,OAAO,KAAK,gBAAgB,gBAAgB;AAC5C,SAAK,eAAe,OAClB,cACA,KAAK,eAAe,QAAQ,KAAK,MAAM,cAAc,GAAG,IAAI,EAAE;AAChE,WAAOD,IAAGC,KAAI;AAAA,EAChB;AACF;AAMA,SAAS,yBAAyB,SAASD,KAAI,KAAK;AAClD,QAAM,OAAO;AAEb,KAAO,KAAK,gBAAgB,gBAAgB;AAC5C,OAAK,eAAe,aAAa;AAEjC,SAAO,QAAQ,MAAM,WAAW,SAAS,QAAQ;AAGjD,WAAS,QAAQC,OAAM;AACrB,OAAO,KAAK,gBAAgB,gBAAgB;AAC5C,OAAO,OAAO,KAAK,eAAe,SAAS,UAAU,eAAe;AACpE,SAAK,eAAe,oBAClB,KAAK,eAAe,qBACpB,KAAK,eAAe;AAItB,WAAO;AAAA,MACL;AAAA,MACAD;AAAA,MACA,MAAM;AAAA,MACN,KAAK,eAAe,OAAO;AAAA,IAC7B,EAAEC,KAAI;AAAA,EACR;AAGA,WAAS,SAASA,OAAM;AACtB,OAAO,KAAK,gBAAgB,gBAAgB;AAC5C,QAAI,KAAK,eAAe,qBAAqB,CAAC,cAAcA,KAAI,GAAG;AACjE,WAAK,eAAe,oBAAoB;AACxC,WAAK,eAAe,mBAAmB;AACvC,aAAO,iBAAiBA,KAAI;AAAA,IAC9B;AAEA,SAAK,eAAe,oBAAoB;AACxC,SAAK,eAAe,mBAAmB;AACvC,WAAO,QAAQ,QAAQ,iBAAiBD,KAAI,gBAAgB,EAAEC,KAAI;AAAA,EACpE;AAGA,WAAS,iBAAiBA,OAAM;AAC9B,OAAO,KAAK,gBAAgB,gBAAgB;AAE5C,SAAK,eAAe,aAAa;AAEjC,SAAK,YAAY;AAEjB;AAAA,MACE,KAAK,OAAO,WAAW,QAAQ;AAAA,MAC/B;AAAA,IACF;AACA,WAAO;AAAA,MACL;AAAA,MACA,QAAQ,QAAQ,MAAMD,KAAI,GAAG;AAAA,MAC7B,MAAM;AAAA,MACN,KAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,IACvD,SACA,UAAU;AAAA,IAChB,EAAEC,KAAI;AAAA,EACR;AACF;AAMA,SAAS,eAAe,SAASD,KAAI,KAAK;AACxC,QAAM,OAAO;AAEb,KAAO,KAAK,gBAAgB,gBAAgB;AAC5C,KAAO,OAAO,KAAK,eAAe,SAAS,UAAU,eAAe;AAEpE,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA,MAAM;AAAA,IACN,KAAK,eAAe,OAAO;AAAA,EAC7B;AAGA,WAAS,YAAYC,OAAM;AACzB,OAAO,KAAK,gBAAgB,gBAAgB;AAC5C,UAAM,OAAO,KAAK,OAAO,KAAK,OAAO,SAAS,CAAC;AAC/C,WAAO,QACL,KAAK,CAAC,EAAE,SAAS,MAAM,kBACvB,KAAK,CAAC,EAAE,eAAe,KAAK,CAAC,GAAG,IAAI,EAAE,WAAW,KAAK,eAAe,OACnED,IAAGC,KAAI,IACP,IAAIA,KAAI;AAAA,EACd;AACF;AAMA,SAAS,gBAAgB,SAAS;AAChC,KAAO,KAAK,gBAAgB,gBAAgB;AAC5C,KAAO,OAAO,KAAK,eAAe,SAAS,UAAU,eAAe;AACpE,UAAQ,KAAK,KAAK,eAAe,IAAI;AACvC;AAMA,SAAS,iCAAiC,SAASD,KAAI,KAAK;AAC1D,QAAM,OAAO;AAGb;AAAA,IACE,KAAK,OAAO,WAAW,QAAQ;AAAA,IAC/B;AAAA,EACF;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA,MAAM;AAAA,IACN,KAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,IACvD,SACA,UAAU,UAAU;AAAA,EAC1B;AAGA,WAAS,YAAYC,OAAM;AACzB,UAAM,OAAO,KAAK,OAAO,KAAK,OAAO,SAAS,CAAC;AAE/C,WAAO,CAAC,cAAcA,KAAI,KACxB,QACA,KAAK,CAAC,EAAE,SAAS,MAAM,2BACrBD,IAAGC,KAAI,IACP,IAAIA,KAAI;AAAA,EACd;AACF;;;AC5RO,IAAM,kBAAkB;AAAA,EAC7B,MAAM;AAAA,EACN,UAAU;AAAA,EACV,WAAW;AACb;AAGA,SAAS,yBAAyB,QAAQ,SAAS;AAEjD,MAAIC,SAAQ,OAAO;AAEnB,MAAIC;AAEJ,MAAIC;AAEJ,MAAIC;AAIJ,SAAOH,UAAS;AACd,QAAI,OAAOA,MAAK,EAAE,CAAC,MAAM,SAAS;AAChC,UAAI,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM,SAAS;AAC3C,QAAAC,WAAUD;AACV;AAAA,MACF;AAEA,UAAI,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM,WAAW;AAC7C,QAAAE,QAAOF;AAAA,MACT;AAAA,IACF,OAEK;AACH,UAAI,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM,SAAS;AAE3C,eAAO,OAAOA,QAAO,CAAC;AAAA,MACxB;AAEA,UAAI,CAACG,eAAc,OAAOH,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM,YAAY;AAC7D,QAAAG,cAAaH;AAAA,MACf;AAAA,IACF;AAAA,EACF;AAEA,KAAOE,UAAS,QAAW,qCAAqC;AAChE,KAAOD,aAAY,QAAW,qCAAqC;AAEnE,QAAMG,WAAU;AAAA,IACd,MAAM,MAAM;AAAA,IACZ,OAAO,OAAO,OAAO,CAAC,GAAG,OAAOF,KAAI,EAAE,CAAC,EAAE,KAAK;AAAA,IAC9C,KAAK,OAAO,OAAO,CAAC,GAAG,OAAO,OAAO,SAAS,CAAC,EAAE,CAAC,EAAE,GAAG;AAAA,EACzD;AAGA,SAAOA,KAAI,EAAE,CAAC,EAAE,OAAO,MAAM;AAI7B,MAAIC,aAAY;AACd,WAAO,OAAOD,OAAM,GAAG,CAAC,SAASE,UAAS,OAAO,CAAC;AAClD,WAAO,OAAOD,cAAa,GAAG,GAAG,CAAC,QAAQ,OAAOF,QAAO,EAAE,CAAC,GAAG,OAAO,CAAC;AACtE,WAAOA,QAAO,EAAE,CAAC,EAAE,MAAM,OAAO,OAAO,CAAC,GAAG,OAAOE,WAAU,EAAE,CAAC,EAAE,GAAG;AAAA,EACtE,OAAO;AACL,WAAOF,QAAO,EAAE,CAAC,IAAIG;AAAA,EACvB;AAGA,SAAO,KAAK,CAAC,QAAQA,UAAS,OAAO,CAAC;AAEtC,SAAO;AACT;AAMA,SAAS,wBAAwB,SAASC,KAAI,KAAK;AACjD,QAAM,OAAO;AAEb,MAAI;AAEJ,SAAO;AAaP,WAAS,MAAMC,OAAM;AACnB,QAAIN,SAAQ,KAAK,OAAO;AAExB,QAAIO;AAEJ;AAAA,MACED,UAAS,MAAM,QAAQA,UAAS,MAAM;AAAA,MACtC;AAAA,IACF;AAGA,WAAON,UAAS;AAGd,UACE,KAAK,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM,cACrC,KAAK,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM,cACrC,KAAK,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM,SACrC;AACA,QAAAO,aAAY,KAAK,OAAOP,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM;AACjD;AAAA,MACF;AAAA,IACF;AAIA,QAAI,CAAC,KAAK,OAAO,KAAK,KAAK,IAAI,EAAE,IAAI,MAAM,KAAK,aAAaO,aAAY;AACvE,cAAQ,MAAM,MAAM,iBAAiB;AACrC,eAASD;AACT,aAAO,OAAOA,KAAI;AAAA,IACpB;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AAaA,WAAS,OAAOA,OAAM;AACpB,YAAQ,MAAM,MAAM,yBAAyB;AAC7C,WAAO,OAAOA,KAAI;AAAA,EACpB;AAaA,WAAS,OAAOA,OAAM;AACpB,QAAIA,UAAS,QAAQ;AACnB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAEA,YAAQ,KAAK,MAAM,yBAAyB;AAE5C,WAAO,cAAcA,KAAI,IACrB,aAAa,SAAS,OAAO,MAAM,UAAU,EAAEA,KAAI,IACnD,MAAMA,KAAI;AAAA,EAChB;AAaA,WAAS,MAAMA,OAAM;AACnB,QAAIA,UAAS,MAAM,OAAO,mBAAmBA,KAAI,GAAG;AAClD,cAAQ,KAAK,MAAM,iBAAiB;AACpC,aAAOD,IAAGC,KAAI;AAAA,IAChB;AAEA,WAAO,IAAIA,KAAI;AAAA,EACjB;AACF;;;AC5LO,IAAM,OAAO,EAAC,UAAU,eAAc;AAM7C,SAAS,eAAe,SAAS;AAC/B,QAAM,OAAO;AACb,QAAM,UAAU,QAAQ;AAAA;AAAA,IAEtB;AAAA,IACA;AAAA;AAAA,IAEA,QAAQ;AAAA,MACN,KAAK,OAAO,WAAW;AAAA,MACvB;AAAA,MACA;AAAA,QACE;AAAA,QACA,QAAQ;AAAA,UACN,KAAK,OAAO,WAAW;AAAA,UACvB;AAAA,UACA,QAAQ,QAAQE,UAAS,cAAc;AAAA,QACzC;AAAA,QACA,MAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AAGP,WAAS,cAAcC,OAAM;AAC3B;AAAA,MACEA,UAAS,MAAM,OAAO,mBAAmBA,KAAI;AAAA,MAC7C;AAAA,IACF;AAEA,QAAIA,UAAS,MAAM,KAAK;AACtB,cAAQ,QAAQA,KAAI;AACpB;AAAA,IACF;AAEA,YAAQ,MAAM,MAAM,eAAe;AACnC,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,eAAe;AAClC,SAAK,mBAAmB;AACxB,WAAO;AAAA,EACT;AAGA,WAAS,eAAeA,OAAM;AAC5B;AAAA,MACEA,UAAS,MAAM,OAAO,mBAAmBA,KAAI;AAAA,MAC7C;AAAA,IACF;AAEA,QAAIA,UAAS,MAAM,KAAK;AACtB,cAAQ,QAAQA,KAAI;AACpB;AAAA,IACF;AAEA,YAAQ,MAAM,MAAM,UAAU;AAC9B,YAAQ,QAAQA,KAAI;AACpB,YAAQ,KAAK,MAAM,UAAU;AAC7B,SAAK,mBAAmB;AACxB,WAAO;AAAA,EACT;AACF;;;ACrEO,IAAM,WAAW,EAAC,YAAY,eAAe,EAAC;AAC9C,IAAM,SAAS,kBAAkB,QAAQ;AACzC,IAAM,OAAO,kBAAkB,MAAM;AAM5C,SAAS,kBAAkB,OAAO;AAChC,SAAO;AAAA,IACL,UAAU;AAAA,IACV,YAAY;AAAA,MACV,UAAU,SAAS,yBAAyB;AAAA,IAC9C;AAAA,EACF;AAMA,WAAS,eAAe,SAAS;AAC/B,UAAM,OAAO;AACb,UAAMC,cAAa,KAAK,OAAO,WAAW,KAAK;AAC/C,UAAMC,QAAO,QAAQ,QAAQD,aAAY,OAAO,OAAO;AAEvD,WAAO;AAGP,aAAS,MAAME,OAAM;AACnB,aAAO,QAAQA,KAAI,IAAID,MAAKC,KAAI,IAAI,QAAQA,KAAI;AAAA,IAClD;AAGA,aAAS,QAAQA,OAAM;AACrB,UAAIA,UAAS,MAAM,KAAK;AACtB,gBAAQ,QAAQA,KAAI;AACpB;AAAA,MACF;AAEA,cAAQ,MAAM,MAAM,IAAI;AACxB,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAGA,aAAS,KAAKA,OAAM;AAClB,UAAI,QAAQA,KAAI,GAAG;AACjB,gBAAQ,KAAK,MAAM,IAAI;AACvB,eAAOD,MAAKC,KAAI;AAAA,MAClB;AAGA,cAAQ,QAAQA,KAAI;AACpB,aAAO;AAAA,IACT;AAMA,aAAS,QAAQA,OAAM;AACrB,UAAIA,UAAS,MAAM,KAAK;AACtB,eAAO;AAAA,MACT;AAEA,YAAMC,QAAOH,YAAWE,KAAI;AAC5B,UAAIE,SAAQ;AAEZ,UAAID,OAAM;AAER,WAAO,MAAM,QAAQA,KAAI,GAAG,yCAAyC;AAErE,eAAO,EAAEC,SAAQD,MAAK,QAAQ;AAC5B,gBAAM,OAAOA,MAAKC,MAAK;AACvB,cAAI,CAAC,KAAK,YAAY,KAAK,SAAS,KAAK,MAAM,KAAK,QAAQ,GAAG;AAC7D,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAMA,SAAS,eAAe,eAAe;AACrC,SAAO;AAGP,WAAS,eAAe,QAAQ,SAAS;AACvC,QAAIA,SAAQ;AAEZ,QAAI;AAIJ,WAAO,EAAEA,UAAS,OAAO,QAAQ;AAC/B,UAAI,UAAU,QAAW;AACvB,YAAI,OAAOA,MAAK,KAAK,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM,MAAM;AACzD,kBAAQA;AACR,UAAAA;AAAA,QACF;AAAA,MACF,WAAW,CAAC,OAAOA,MAAK,KAAK,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM,MAAM;AAEjE,YAAIA,WAAU,QAAQ,GAAG;AACvB,iBAAO,KAAK,EAAE,CAAC,EAAE,MAAM,OAAOA,SAAQ,CAAC,EAAE,CAAC,EAAE;AAC5C,iBAAO,OAAO,QAAQ,GAAGA,SAAQ,QAAQ,CAAC;AAC1C,UAAAA,SAAQ,QAAQ;AAAA,QAClB;AAEA,gBAAQ;AAAA,MACV;AAAA,IACF;AAEA,WAAO,gBAAgB,cAAc,QAAQ,OAAO,IAAI;AAAA,EAC1D;AACF;AAaA,SAAS,uBAAuB,QAAQ,SAAS;AAC/C,MAAI,aAAa;AAEjB,SAAO,EAAE,cAAc,OAAO,QAAQ;AACpC,SACG,eAAe,OAAO,UACrB,OAAO,UAAU,EAAE,CAAC,EAAE,SAAS,MAAM,eACvC,OAAO,aAAa,CAAC,EAAE,CAAC,EAAE,SAAS,MAAM,MACzC;AACA,YAAM,OAAO,OAAO,aAAa,CAAC,EAAE,CAAC;AACrC,YAAM,SAAS,QAAQ,YAAY,IAAI;AACvC,UAAIA,SAAQ,OAAO;AACnB,UAAI,cAAc;AAClB,UAAI,OAAO;AAEX,UAAI;AAEJ,aAAOA,UAAS;AACd,cAAM,QAAQ,OAAOA,MAAK;AAE1B,YAAI,OAAO,UAAU,UAAU;AAC7B,wBAAc,MAAM;AAEpB,iBAAO,MAAM,WAAW,cAAc,CAAC,MAAM,MAAM,OAAO;AACxD;AACA;AAAA,UACF;AAEA,cAAI,YAAa;AACjB,wBAAc;AAAA,QAChB,WAES,UAAU,MAAM,eAAe;AACtC,iBAAO;AACP;AAAA,QACF,WAAW,UAAU,MAAM,cAAc;AAAA,QAEzC,OAAO;AAEL,UAAAA;AACA;AAAA,QACF;AAAA,MACF;AAEA,UAAI,MAAM;AACR,cAAM,QAAQ;AAAA,UACZ,MACE,eAAe,OAAO,UACtB,QACA,OAAO,UAAU,yBACb,MAAM,aACN,MAAM;AAAA,UACZ,OAAO;AAAA,YACL,MAAM,KAAK,IAAI;AAAA,YACf,QAAQ,KAAK,IAAI,SAAS;AAAA,YAC1B,QAAQ,KAAK,IAAI,SAAS;AAAA,YAC1B,QAAQ,KAAK,MAAM,SAASA;AAAA,YAC5B,cAAcA,SACV,cACA,KAAK,MAAM,eAAe;AAAA,UAChC;AAAA,UACA,KAAK,OAAO,OAAO,CAAC,GAAG,KAAK,GAAG;AAAA,QACjC;AAEA,aAAK,MAAM,OAAO,OAAO,CAAC,GAAG,MAAM,KAAK;AAExC,YAAI,KAAK,MAAM,WAAW,KAAK,IAAI,QAAQ;AACzC,iBAAO,OAAO,MAAM,KAAK;AAAA,QAC3B,OAAO;AACL,iBAAO;AAAA,YACL;AAAA,YACA;AAAA,YACA,CAAC,SAAS,OAAO,OAAO;AAAA,YACxB,CAAC,QAAQ,OAAO,OAAO;AAAA,UACzB;AACA,wBAAc;AAAA,QAChB;AAAA,MACF;AAEA;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;;;ACvMA,mBAAwB;AAOxB,IAAM,YAAQ,aAAAC,SAAY,WAAW;AAgB9B,SAAS,gBAAgB,QAAQ,YAAY,MAAM;AAExD,MAAIC,SAAQ,OAAO;AAAA,IACjB,OAAO,OAAO,OAAO,CAAC,GAAG,IAAI,IAAI,EAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,EAAC;AAAA,IAC/D,EAAC,QAAQ,GAAG,cAAc,GAAE;AAAA,EAC9B;AAEA,QAAM,cAAc,CAAC;AAErB,QAAM,uBAAuB,CAAC;AAE9B,MAAI,SAAS,CAAC;AAEd,MAAI,QAAQ,CAAC;AAEb,MAAI,WAAW;AAOf,QAAM,UAAU;AAAA,IACd;AAAA,IACA;AAAA,IACA,MAAAC;AAAA,IACA,SAAS,iBAAiB,qBAAqB;AAAA,IAC/C,OAAO,iBAAiB,iBAAiB;AAAA,IACzC,WAAW,iBAAiB,mBAAmB,EAAC,WAAW,KAAI,CAAC;AAAA,EAClE;AAOA,QAAM,UAAU;AAAA,IACd,UAAU,MAAM;AAAA,IAChB,MAAM,MAAM;AAAA,IACZ,gBAAgB,CAAC;AAAA,IACjB,QAAQ,CAAC;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAOA,MAAI,QAAQ,WAAW,SAAS,KAAK,SAAS,OAAO;AAOrD,MAAI;AAEJ,MAAI,WAAW,YAAY;AACzB,yBAAqB,KAAK,UAAU;AAAA,EACtC;AAEA,SAAO;AAGP,WAAS,MAAM,OAAO;AACpB,aAAS,KAAK,QAAQ,KAAK;AAE3B,SAAK;AAGL,QAAI,OAAO,OAAO,SAAS,CAAC,MAAM,MAAM,KAAK;AAC3C,aAAO,CAAC;AAAA,IACV;AAEA,cAAU,YAAY,CAAC;AAGvB,YAAQ,SAAS,WAAW,sBAAsB,QAAQ,QAAQ,OAAO;AAEzE,WAAO,QAAQ;AAAA,EACjB;AAOA,WAAS,eAAe,OAAO,YAAY;AACzC,WAAO,gBAAgB,YAAY,KAAK,GAAG,UAAU;AAAA,EACvD;AAGA,WAAS,YAAY,OAAO;AAC1B,WAAO,YAAY,QAAQ,KAAK;AAAA,EAClC;AAGA,WAAS,MAAM;AAEb,UAAM,EAAC,MAAM,QAAQ,QAAQ,QAAQ,aAAY,IAAID;AACrD,WAAO,EAAC,MAAM,QAAQ,QAAQ,QAAQ,aAAY;AAAA,EACpD;AAGA,WAAS,WAAW,OAAO;AACzB,gBAAY,MAAM,IAAI,IAAI,MAAM;AAChC,4BAAwB;AACxB,UAAM,+BAA+BA,MAAK;AAAA,EAC5C;AAgBA,WAAS,OAAO;AAEd,QAAI;AAEJ,WAAOA,OAAM,SAAS,OAAO,QAAQ;AACnC,YAAM,QAAQ,OAAOA,OAAM,MAAM;AAGjC,UAAI,OAAO,UAAU,UAAU;AAC7B,qBAAaA,OAAM;AAEnB,YAAIA,OAAM,eAAe,GAAG;AAC1B,UAAAA,OAAM,eAAe;AAAA,QACvB;AAEA,eACEA,OAAM,WAAW,cACjBA,OAAM,eAAe,MAAM,QAC3B;AACA,aAAG,MAAM,WAAWA,OAAM,YAAY,CAAC;AAAA,QACzC;AAAA,MACF,OAAO;AACL,WAAG,KAAK;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAQA,WAAS,GAAGE,OAAM;AAChB,OAAO,aAAa,MAAM,mCAAmC;AAC7D,eAAW;AACX,UAAM,4BAA4BA,OAAM,SAAS,MAAM,IAAI;AAC3D,mBAAeA;AACf,OAAO,OAAO,UAAU,YAAY,gBAAgB;AACpD,YAAQ,MAAMA,KAAI;AAAA,EACpB;AAGA,WAAS,QAAQA,OAAM;AACrB,OAAOA,UAAS,cAAc,4CAA4C;AAE1E,UAAM,iBAAiBA,KAAI;AAE3B;AAAA,MACE,aAAa;AAAA,MACb;AAAA,IACF;AACA;AAAA,MACEA,UAAS,OACL,QAAQ,OAAO,WAAW,KACxB,QAAQ,OAAO,QAAQ,OAAO,SAAS,CAAC,EAAE,CAAC,MAAM,SACnD,QAAQ,OAAO,QAAQ,OAAO,SAAS,CAAC,EAAE,CAAC,MAAM;AAAA,MACrD;AAAA,IACF;AAEA,QAAI,mBAAmBA,KAAI,GAAG;AAC5B,MAAAF,OAAM;AACN,MAAAA,OAAM,SAAS;AACf,MAAAA,OAAM,UAAUE,UAAS,MAAM,yBAAyB,IAAI;AAC5D,8BAAwB;AACxB,YAAM,6BAA6BF,MAAK;AAAA,IAC1C,WAAWE,UAAS,MAAM,cAAc;AACtC,MAAAF,OAAM;AACN,MAAAA,OAAM;AAAA,IACR;AAGA,QAAIA,OAAM,eAAe,GAAG;AAC1B,MAAAA,OAAM;AAAA,IACR,OAAO;AACL,MAAAA,OAAM;AAKN,UAAIA,OAAM,iBAAiB,OAAOA,OAAM,MAAM,EAAE,QAAQ;AACtD,QAAAA,OAAM,eAAe;AACrB,QAAAA,OAAM;AAAA,MACR;AAAA,IACF;AAGA,YAAQ,WAAWE;AAGnB,eAAW;AAAA,EACb;AAGA,WAAS,MAAM,MAAM,QAAQ;AAG3B,UAAM,QAAQ,UAAU,CAAC;AACzB,UAAM,OAAO;AACb,UAAM,QAAQ,IAAI;AAElB,OAAO,OAAO,SAAS,UAAU,sBAAsB;AACvD,OAAO,KAAK,SAAS,GAAG,2BAA2B;AACnD,UAAM,eAAe,IAAI;AAEzB,YAAQ,OAAO,KAAK,CAAC,SAAS,OAAO,OAAO,CAAC;AAE7C,UAAM,KAAK,KAAK;AAEhB,WAAO;AAAA,EACT;AAGA,WAASD,MAAK,MAAM;AAClB,OAAO,OAAO,SAAS,UAAU,sBAAsB;AACvD,OAAO,KAAK,SAAS,GAAG,2BAA2B;AAEnD,UAAM,QAAQ,MAAM,IAAI;AACxB,OAAO,OAAO,8BAA8B;AAC5C,UAAM,MAAM,IAAI;AAEhB,OAAO,SAAS,MAAM,MAAM,4CAA4C;AAExE;AAAA,MACE,EACE,MAAM,MAAM,WAAW,MAAM,IAAI,UACjC,MAAM,MAAM,iBAAiB,MAAM,IAAI;AAAA,MAEzC,gCAAgC,OAAO;AAAA,IACzC;AAEA,UAAM,cAAc,MAAM,IAAI;AAC9B,YAAQ,OAAO,KAAK,CAAC,QAAQ,OAAO,OAAO,CAAC;AAE5C,WAAO;AAAA,EACT;AAOA,WAAS,sBAAsB,WAAW,MAAM;AAC9C,cAAU,WAAW,KAAK,IAAI;AAAA,EAChC;AAOA,WAAS,kBAAkBE,IAAG,MAAM;AAClC,SAAK,QAAQ;AAAA,EACf;AAQA,WAAS,iBAAiB,UAAU,QAAQ;AAC1C,WAAO;AAWP,aAAS,KAAKC,aAAY,aAAa,YAAY;AAEjD,UAAI;AAEJ,UAAI;AAEJ,UAAI;AAEJ,UAAI;AAEJ,aAAO,MAAM,QAAQA,WAAU;AAAA;AAAA,QAE3B,uBAAuBA,WAAU;AAAA,UACjC,cAAcA;AAAA;AAAA,QAEd,uBAAuB,CAACA,WAAU,CAAC;AAAA,UACnC,sBAAsBA,WAAU;AAQpC,eAAS,sBAAsBC,MAAK;AAClC,eAAO;AAGP,iBAAS,MAAMH,OAAM;AACnB,gBAAM,MAAMA,UAAS,QAAQG,KAAIH,KAAI;AACrC,gBAAMI,OAAMJ,UAAS,QAAQG,KAAI;AACjC,gBAAME,QAAO;AAAA;AAAA;AAAA,YAGX,GAAI,MAAM,QAAQ,GAAG,IAAI,MAAM,MAAM,CAAC,GAAG,IAAI,CAAC;AAAA,YAC9C,GAAI,MAAM,QAAQD,IAAG,IAAIA,OAAMA,OAAM,CAACA,IAAG,IAAI,CAAC;AAAA,UAChD;AAEA,iBAAO,uBAAuBC,KAAI,EAAEL,KAAI;AAAA,QAC1C;AAAA,MACF;AAQA,eAAS,uBAAuBK,OAAM;AACpC,2BAAmBA;AACnB,yBAAiB;AAEjB,YAAIA,MAAK,WAAW,GAAG;AACrB,aAAO,YAAY,mCAAmC;AACtD,iBAAO;AAAA,QACT;AAEA,eAAO,gBAAgBA,MAAK,cAAc,CAAC;AAAA,MAC7C;AAQA,eAAS,gBAAgB,WAAW;AAClC,eAAO;AAGP,iBAAS,MAAML,OAAM;AAKnB,iBAAO,MAAM;AACb,6BAAmB;AAEnB,cAAI,CAAC,UAAU,SAAS;AACtB,oBAAQ,mBAAmB;AAAA,UAC7B;AAGA;AAAA,YACE,QAAQ,OAAO,WAAW,QAAQ;AAAA,YAClC;AAAA,UACF;AAEA,cACE,UAAU,QACV,QAAQ,OAAO,WAAW,QAAQ,KAAK,SAAS,UAAU,IAAI,GAC9D;AACA,mBAAO,IAAIA,KAAI;AAAA,UACjB;AAEA,iBAAO,UAAU,SAAS;AAAA;AAAA;AAAA;AAAA,YAIxB,SAAS,OAAO,OAAO,OAAO,OAAO,OAAO,GAAG,MAAM,IAAI;AAAA,YACzD;AAAA,YACAM;AAAA,YACA;AAAA,UACF,EAAEN,KAAI;AAAA,QACR;AAAA,MACF;AAGA,eAASM,IAAGN,OAAM;AAChB,WAAOA,UAAS,cAAc,eAAe;AAC7C,mBAAW;AACX,iBAAS,kBAAkB,IAAI;AAC/B,eAAO;AAAA,MACT;AAGA,eAAS,IAAIA,OAAM;AACjB,WAAOA,UAAS,cAAc,eAAe;AAC7C,mBAAW;AACX,aAAK,QAAQ;AAEb,YAAI,EAAE,iBAAiB,iBAAiB,QAAQ;AAC9C,iBAAO,gBAAgB,iBAAiB,cAAc,CAAC;AAAA,QACzD;AAEA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAOA,WAAS,UAAU,WAAWO,OAAM;AAClC,QAAI,UAAU,cAAc,CAAC,qBAAqB,SAAS,SAAS,GAAG;AACrE,2BAAqB,KAAK,SAAS;AAAA,IACrC;AAEA,QAAI,UAAU,SAAS;AACrB;AAAA,QACE,QAAQ;AAAA,QACRA;AAAA,QACA,QAAQ,OAAO,SAASA;AAAA,QACxB,UAAU,QAAQ,QAAQ,OAAO,MAAMA,KAAI,GAAG,OAAO;AAAA,MACvD;AAAA,IACF;AAEA,QAAI,UAAU,WAAW;AACvB,cAAQ,SAAS,UAAU,UAAU,QAAQ,QAAQ,OAAO;AAAA,IAC9D;AAEA;AAAA,MACE,UAAU,WACR,QAAQ,OAAO,WAAW,KAC1B,QAAQ,OAAO,QAAQ,OAAO,SAAS,CAAC,EAAE,CAAC,MAAM;AAAA,MACnD;AAAA,IACF;AAAA,EACF;AAOA,WAAS,QAAQ;AACf,UAAM,aAAa,IAAI;AACvB,UAAM,gBAAgB,QAAQ;AAC9B,UAAM,wBAAwB,QAAQ;AACtC,UAAM,mBAAmB,QAAQ,OAAO;AACxC,UAAM,aAAa,MAAM,KAAK,KAAK;AAEnC,WAAO,EAAC,SAAS,MAAM,iBAAgB;AAOvC,aAAS,UAAU;AACjB,MAAAT,SAAQ;AACR,cAAQ,WAAW;AACnB,cAAQ,mBAAmB;AAC3B,cAAQ,OAAO,SAAS;AACxB,cAAQ;AACR,8BAAwB;AACxB,YAAM,2BAA2BA,MAAK;AAAA,IACxC;AAAA,EACF;AAQA,WAAS,0BAA0B;AACjC,QAAIA,OAAM,QAAQ,eAAeA,OAAM,SAAS,GAAG;AACjD,MAAAA,OAAM,SAAS,YAAYA,OAAM,IAAI;AACrC,MAAAA,OAAM,UAAU,YAAYA,OAAM,IAAI,IAAI;AAAA,IAC5C;AAAA,EACF;AACF;AASA,SAAS,YAAY,QAAQ,OAAO;AAClC,QAAM,aAAa,MAAM,MAAM;AAC/B,QAAM,mBAAmB,MAAM,MAAM;AACrC,QAAM,WAAW,MAAM,IAAI;AAC3B,QAAM,iBAAiB,MAAM,IAAI;AAEjC,MAAI;AAEJ,MAAI,eAAe,UAAU;AAC3B,OAAO,iBAAiB,IAAI,wCAAwC;AACpE,OAAO,mBAAmB,IAAI,0CAA0C;AAExE,WAAO,CAAC,OAAO,UAAU,EAAE,MAAM,kBAAkB,cAAc,CAAC;AAAA,EACpE,OAAO;AACL,WAAO,OAAO,MAAM,YAAY,QAAQ;AAExC,QAAI,mBAAmB,IAAI;AACzB,YAAM,OAAO,KAAK,CAAC;AACnB,UAAI,OAAO,SAAS,UAAU;AAC5B,aAAK,CAAC,IAAI,KAAK,MAAM,gBAAgB;AAAA,MACvC,OAAO;AACL,WAAO,qBAAqB,GAAG,uCAAuC;AACtE,aAAK,MAAM;AAAA,MACb;AAAA,IACF;AAEA,QAAI,iBAAiB,GAAG;AAEtB,WAAK,KAAK,OAAO,QAAQ,EAAE,MAAM,GAAG,cAAc,CAAC;AAAA,IACrD;AAAA,EACF;AAEA,SAAO;AACT;AASA,SAAS,gBAAgB,QAAQ,YAAY;AAC3C,MAAIU,SAAQ;AAEZ,QAAM,SAAS,CAAC;AAEhB,MAAI;AAEJ,SAAO,EAAEA,SAAQ,OAAO,QAAQ;AAC9B,UAAM,QAAQ,OAAOA,MAAK;AAE1B,QAAI;AAEJ,QAAI,OAAO,UAAU,UAAU;AAC7B,cAAQ;AAAA,IACV;AACE,cAAQ,OAAO;AAAA,QACb,KAAK,MAAM,gBAAgB;AACzB,kBAAQ,OAAO;AAEf;AAAA,QACF;AAAA,QAEA,KAAK,MAAM,UAAU;AACnB,kBAAQ,OAAO;AAEf;AAAA,QACF;AAAA,QAEA,KAAK,MAAM,wBAAwB;AACjC,kBAAQ,OAAO,KAAK,OAAO;AAE3B;AAAA,QACF;AAAA,QAEA,KAAK,MAAM,eAAe;AACxB,kBAAQ,aAAa,OAAO,QAAQ,OAAO;AAE3C;AAAA,QACF;AAAA,QAEA,KAAK,MAAM,cAAc;AACvB,cAAI,CAAC,cAAc,MAAO;AAC1B,kBAAQ,OAAO;AAEf;AAAA,QACF;AAAA,QAEA,SAAS;AACP,aAAO,OAAO,UAAU,UAAU,iBAAiB;AAEnD,kBAAQ,OAAO,aAAa,KAAK;AAAA,QACnC;AAAA,MACF;AAEF,YAAQ,UAAU,MAAM;AACxB,WAAO,KAAK,KAAK;AAAA,EACnB;AAEA,SAAO,OAAO,KAAK,EAAE;AACvB;;;AC7pBA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA;AAAA;AAAA,gBAAAC;AAAA,EAAA,YAAAC;AAAA;AA8BO,IAAMC,YAAW;AAAA,EACtB,CAAC,MAAM,QAAQ,GAAG;AAAA,EAClB,CAAC,MAAM,QAAQ,GAAG;AAAA,EAClB,CAAC,MAAM,IAAI,GAAG;AAAA,EACd,CAAC,MAAM,MAAM,GAAG;AAAA,EAChB,CAAC,MAAM,MAAM,GAAG;AAAA,EAChB,CAAC,MAAM,MAAM,GAAG;AAAA,EAChB,CAAC,MAAM,MAAM,GAAG;AAAA,EAChB,CAAC,MAAM,MAAM,GAAG;AAAA,EAChB,CAAC,MAAM,MAAM,GAAG;AAAA,EAChB,CAAC,MAAM,MAAM,GAAG;AAAA,EAChB,CAAC,MAAM,MAAM,GAAG;AAAA,EAChB,CAAC,MAAM,MAAM,GAAG;AAAA,EAChB,CAAC,MAAM,MAAM,GAAG;AAAA,EAChB,CAAC,MAAM,WAAW,GAAG;AACvB;AAGO,IAAM,iBAAiB;AAAA,EAC5B,CAAC,MAAM,iBAAiB,GAAG;AAC7B;AAGO,IAAM,cAAc;AAAA,EACzB,CAAC,MAAM,aAAa,GAAG;AAAA,EACvB,CAAC,MAAM,YAAY,GAAG;AAAA,EACtB,CAAC,MAAM,KAAK,GAAG;AACjB;AAGO,IAAMC,QAAO;AAAA,EAClB,CAAC,MAAM,UAAU,GAAG;AAAA,EACpB,CAAC,MAAM,QAAQ,GAAG;AAAA,EAClB,CAAC,MAAM,IAAI,GAAG,CAAC,iBAAiB,aAAa;AAAA,EAC7C,CAAC,MAAM,QAAQ,GAAG;AAAA,EAClB,CAAC,MAAM,QAAQ,GAAG;AAAA,EAClB,CAAC,MAAM,UAAU,GAAG;AAAA,EACpB,CAAC,MAAM,WAAW,GAAG;AAAA,EACrB,CAAC,MAAM,KAAK,GAAG;AACjB;AAGO,IAAMC,UAAS;AAAA,EACpB,CAAC,MAAM,SAAS,GAAG;AAAA,EACnB,CAAC,MAAM,SAAS,GAAG;AACrB;AAGO,IAAMC,QAAO;AAAA,EAClB,CAAC,MAAM,cAAc,GAAG;AAAA,EACxB,CAAC,MAAM,QAAQ,GAAG;AAAA,EAClB,CAAC,MAAM,sBAAsB,GAAG;AAAA,EAChC,CAAC,MAAM,eAAe,GAAG;AAAA,EACzB,CAAC,MAAM,SAAS,GAAG;AAAA,EACnB,CAAC,MAAM,QAAQ,GAAG;AAAA,EAClB,CAAC,MAAM,QAAQ,GAAG,CAAC,UAAU,QAAQ;AAAA,EACrC,CAAC,MAAM,iBAAiB,GAAG;AAAA,EAC3B,CAAC,MAAM,SAAS,GAAG,CAAC,iBAAiB,eAAe;AAAA,EACpD,CAAC,MAAM,kBAAkB,GAAG;AAAA,EAC5B,CAAC,MAAM,UAAU,GAAG;AAAA,EACpB,CAAC,MAAM,WAAW,GAAG;AACvB;AAGO,IAAM,aAAa,EAAC,MAAM,CAAC,WAAW,QAAW,EAAC;AAGlD,IAAM,mBAAmB,EAAC,MAAM,CAAC,MAAM,UAAU,MAAM,UAAU,EAAC;AAGlE,IAAM,UAAU,EAAC,MAAM,CAAC,EAAC;;;AChFzB,SAAS,MAAM,SAAS;AAC7B,QAAM,WAAW,WAAW,CAAC;AAC7B,QAAMC;AAAA;AAAA,IACJ,kBAAkB,CAAC,oBAAmB,GAAI,SAAS,cAAc,CAAC,CAAE,CAAC;AAAA;AAIvE,QAAM,SAAS;AAAA,IACb,SAAS,CAAC;AAAA,IACV,MAAM,CAAC;AAAA,IACP,YAAAA;AAAA,IACA,SAAS,OAAO,OAAO;AAAA,IACvB,UAAU,OAAOC,SAAQ;AAAA,IACzB,MAAM,OAAO,IAAI;AAAA,IACjB,QAAQ,OAAO,MAAM;AAAA,IACrB,MAAM,OAAO,IAAI;AAAA,EACnB;AAEA,SAAO;AAKP,WAAS,OAAO,SAAS;AACvB,WAAO;AAEP,aAAS,QAAQ,MAAM;AACrB,aAAO,gBAAgB,QAAQ,SAAS,IAAI;AAAA,IAC9C;AAAA,EACF;AACF;;;ACxCO,SAAS,YAAY,QAAQ;AAClC,SAAO,CAAC,YAAY,MAAM,GAAG;AAAA,EAE7B;AAEA,SAAO;AACT;;;ACCA,IAAM,SAAS;AAKR,SAAS,aAAa;AAC3B,MAAI,SAAS;AACb,MAAI,SAAS;AAEb,MAAI,QAAQ;AAEZ,MAAI;AAEJ,SAAO;AAIP,WAAS,aAAa,OAAO,UAAU,KAAK;AAE1C,UAAM,SAAS,CAAC;AAEhB,QAAI;AAEJ,QAAI;AAEJ,QAAI;AAEJ,QAAI;AAEJ,QAAIC;AAEJ,YACE,UACC,OAAO,UAAU,WACd,MAAM,SAAS,IACf,IAAI,YAAY,YAAY,MAAS,EAAE,OAAO,KAAK;AAEzD,oBAAgB;AAChB,aAAS;AAET,QAAI,OAAO;AAET,UAAI,MAAM,WAAW,CAAC,MAAM,MAAM,iBAAiB;AACjD;AAAA,MACF;AAEA,cAAQ;AAAA,IACV;AAEA,WAAO,gBAAgB,MAAM,QAAQ;AACnC,aAAO,YAAY;AACnB,cAAQ,OAAO,KAAK,KAAK;AACzB,oBACE,SAAS,MAAM,UAAU,SAAY,MAAM,QAAQ,MAAM;AAC3D,MAAAA,QAAO,MAAM,WAAW,WAAW;AAEnC,UAAI,CAAC,OAAO;AACV,iBAAS,MAAM,MAAM,aAAa;AAClC;AAAA,MACF;AAEA,UACEA,UAAS,MAAM,MACf,kBAAkB,eAClB,kBACA;AACA,eAAO,KAAK,MAAM,sBAAsB;AACxC,2BAAmB;AAAA,MACrB,OAAO;AACL,YAAI,kBAAkB;AACpB,iBAAO,KAAK,MAAM,cAAc;AAChC,6BAAmB;AAAA,QACrB;AAEA,YAAI,gBAAgB,aAAa;AAC/B,iBAAO,KAAK,MAAM,MAAM,eAAe,WAAW,CAAC;AACnD,oBAAU,cAAc;AAAA,QAC1B;AAEA,gBAAQA,OAAM;AAAA,UACZ,KAAK,MAAM,KAAK;AACd,mBAAO,KAAK,MAAM,oBAAoB;AACtC;AAEA;AAAA,UACF;AAAA,UAEA,KAAK,MAAM,IAAI;AACb,mBAAO,KAAK,KAAK,SAAS,UAAU,OAAO,IAAI,UAAU;AACzD,mBAAO,KAAK,MAAM,aAAa;AAC/B,mBAAO,WAAW,KAAM,QAAO,KAAK,MAAM,YAAY;AAEtD;AAAA,UACF;AAAA,UAEA,KAAK,MAAM,IAAI;AACb,mBAAO,KAAK,MAAM,QAAQ;AAC1B,qBAAS;AAET;AAAA,UACF;AAAA,UAEA,SAAS;AACP,+BAAmB;AACnB,qBAAS;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAEA,sBAAgB,cAAc;AAAA,IAChC;AAEA,QAAI,KAAK;AACP,UAAI,iBAAkB,QAAO,KAAK,MAAM,cAAc;AACtD,UAAI,OAAQ,QAAO,KAAK,MAAM;AAC9B,aAAO,KAAK,MAAM,GAAG;AAAA,IACvB;AAEA,WAAO;AAAA,EACT;AACF;;;ACrIA,IAAM,6BACJ;AAcK,SAAS,aAAa,OAAO;AAClC,SAAO,MAAM,QAAQ,4BAA4B,MAAM;AACzD;AAQA,SAAS,OAAO,IAAI,IAAIC,KAAI;AAC1B,MAAI,IAAI;AAEN,WAAO;AAAA,EACT;AAGA,QAAM,OAAOA,IAAG,WAAW,CAAC;AAE5B,MAAI,SAAS,MAAM,YAAY;AAC7B,UAAMC,QAAOD,IAAG,WAAW,CAAC;AAC5B,UAAM,MAAMC,UAAS,MAAM,cAAcA,UAAS,MAAM;AACxD,WAAO;AAAA,MACLD,IAAG,MAAM,MAAM,IAAI,CAAC;AAAA,MACpB,MAAM,UAAU,yBAAyB,UAAU;AAAA,IACrD;AAAA,EACF;AAEA,SAAO,8BAA8BA,GAAE,KAAK;AAC9C;;;ACZO,SAAS,kBAAkB,OAAO;AAEvC,MAAI,CAAC,SAAS,OAAO,UAAU,UAAU;AACvC,WAAO;AAAA,EACT;AAGA,MAAI,cAAc,SAAS,UAAU,OAAO;AAC1C,WAAO,SAAS,MAAM,QAAQ;AAAA,EAChC;AAGA,MAAI,WAAW,SAAS,SAAS,OAAO;AACtC,WAAO,SAAS,KAAK;AAAA,EACvB;AAGA,MAAI,UAAU,SAAS,YAAY,OAAO;AACxC,WAAO,MAAM,KAAK;AAAA,EACpB;AAGA,SAAO;AACT;AAMA,SAAS,MAAME,QAAO;AACpB,SAAO,MAAMA,UAASA,OAAM,IAAI,IAAI,MAAM,MAAMA,UAASA,OAAM,MAAM;AACvE;AAMA,SAAS,SAAS,KAAK;AACrB,SAAO,MAAM,OAAO,IAAI,KAAK,IAAI,MAAM,MAAM,OAAO,IAAI,GAAG;AAC7D;AAMA,SAAS,MAAM,OAAO;AACpB,SAAO,SAAS,OAAO,UAAU,WAAW,QAAQ;AACtD;;;AC8DA,IAAM,MAAM,CAAC,EAAE;AAyBR,SAAS,aAAa,OAAO,UAAU,SAAS;AACrD,MAAI,OAAO,aAAa,UAAU;AAChC,cAAU;AACV,eAAW;AAAA,EACb;AAEA,SAAO,SAAS,OAAO;AAAA,IACrB;AAAA,MACE,MAAM,OAAO,EACV,SAAS,EACT,MAAM,WAAW,EAAE,OAAO,UAAU,IAAI,CAAC;AAAA,IAC9C;AAAA,EACF;AACF;AAOA,SAAS,SAAS,SAAS;AAEzB,QAAM,SAAS;AAAA,IACb,YAAY,CAAC;AAAA,IACb,gBAAgB,CAAC,YAAY,YAAY,WAAW,aAAa,QAAQ;AAAA,IACzE,OAAO;AAAA,MACL,UAAU,OAAOC,KAAI;AAAA,MACrB,kBAAkB;AAAA,MAClB,eAAe;AAAA,MACf,YAAY,OAAOC,QAAO;AAAA,MAC1B,YAAY,OAAOC,WAAU;AAAA,MAC7B,iBAAiB;AAAA,MACjB,oBAAoB;AAAA,MACpB,YAAY,OAAO,QAAQ;AAAA,MAC3B,qBAAqB;AAAA,MACrB,qBAAqB;AAAA,MACrB,cAAc,OAAO,UAAU,MAAM;AAAA,MACrC,UAAU,OAAOC,WAAU,MAAM;AAAA,MACjC,cAAc;AAAA,MACd,MAAM;AAAA,MACN,eAAe;AAAA,MACf,YAAY,OAAOC,WAAU;AAAA,MAC7B,6BAA6B;AAAA,MAC7B,uBAAuB;AAAA,MACvB,uBAAuB;AAAA,MACvB,UAAU,OAAOC,SAAQ;AAAA,MACzB,iBAAiB,OAAOC,UAAS;AAAA,MACjC,mBAAmB,OAAOA,UAAS;AAAA,MACnC,UAAU,OAAOC,OAAM,MAAM;AAAA,MAC7B,cAAc;AAAA,MACd,UAAU,OAAOA,OAAM,MAAM;AAAA,MAC7B,cAAc;AAAA,MACd,OAAO,OAAOC,MAAK;AAAA,MACnB,OAAO;AAAA,MACP,MAAM,OAAOR,KAAI;AAAA,MACjB,UAAU,OAAOS,SAAQ;AAAA,MACzB,eAAe;AAAA,MACf,aAAa,OAAOC,OAAM,kBAAkB;AAAA,MAC5C,eAAe,OAAOA,KAAI;AAAA,MAC1B,WAAW,OAAOC,UAAS;AAAA,MAC3B,WAAW;AAAA,MACX,iBAAiB;AAAA,MACjB,2BAA2B;AAAA,MAC3B,qBAAqB;AAAA,MACrB,eAAe,OAAOV,QAAO;AAAA,MAC7B,QAAQ,OAAOW,OAAM;AAAA,MACrB,eAAe,OAAOC,cAAa;AAAA,IACrC;AAAA,IACA,MAAM;AAAA,MACJ,YAAY,OAAO;AAAA,MACnB,oBAAoB;AAAA,MACpB,UAAU,OAAO;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,MAClB,YAAY,OAAO;AAAA,MACnB,sBAAsB;AAAA,MACtB,qCAAqC;AAAA,MACrC,iCAAiC;AAAA,MACjC,yBAAyB;AAAA,MACzB,oBAAoB;AAAA,MACpB,YAAY,OAAO,gBAAgB;AAAA,MACnC,iBAAiB;AAAA,MACjB,qBAAqB;AAAA,MACrB,qBAAqB;AAAA,MACrB,eAAe;AAAA,MACf,cAAc,OAAO,kBAAkB;AAAA,MACvC,UAAU,OAAO,cAAc;AAAA,MAC/B,cAAc;AAAA,MACd,MAAM;AAAA,MACN,YAAY,OAAO;AAAA,MACnB,6BAA6B;AAAA,MAC7B,uBAAuB;AAAA,MACvB,uBAAuB;AAAA,MACvB,UAAU,OAAO;AAAA,MACjB,iBAAiB,OAAO,eAAe;AAAA,MACvC,mBAAmB,OAAO,eAAe;AAAA,MACzC,UAAU,OAAO,cAAc;AAAA,MAC/B,cAAc;AAAA,MACd,UAAU,OAAO,cAAc;AAAA,MAC/B,cAAc;AAAA,MACd,OAAO,OAAO,WAAW;AAAA,MACzB,OAAO;AAAA,MACP,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,MAAM,OAAO,UAAU;AAAA,MACvB,UAAU,OAAO;AAAA,MACjB,aAAa,OAAO;AAAA,MACpB,eAAe,OAAO;AAAA,MACtB,WAAW,OAAO;AAAA,MAClB,iBAAiB;AAAA,MACjB,2BAA2B;AAAA,MAC3B,qBAAqB;AAAA,MACrB,UAAU;AAAA,MACV,eAAe,OAAO,mBAAmB;AAAA,MACzC,2BAA2B;AAAA,MAC3B,mBAAmB;AAAA,MACnB,QAAQ,OAAO;AAAA,MACf,eAAe,OAAO;AAAA,IACxB;AAAA,EACF;AAEA,YAAU,SAAS,WAAW,CAAC,GAAG,mBAAmB,CAAC,CAAC;AAGvD,QAAM,OAAO,CAAC;AAEd,SAAOC;AAUP,WAASA,SAAQ,QAAQ;AAEvB,QAAI,OAAO,EAAC,MAAM,QAAQ,UAAU,CAAC,EAAC;AAEtC,UAAM,UAAU;AAAA,MACd,OAAO,CAAC,IAAI;AAAA,MACZ,YAAY,CAAC;AAAA,MACb;AAAA,MACA;AAAA,MACA,MAAAC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,UAAM,YAAY,CAAC;AACnB,QAAIC,SAAQ;AAEZ,WAAO,EAAEA,SAAQ,OAAO,QAAQ;AAG9B,UACE,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM,eAChC,OAAOA,MAAK,EAAE,CAAC,EAAE,SAAS,MAAM,eAChC;AACA,YAAI,OAAOA,MAAK,EAAE,CAAC,MAAM,SAAS;AAChC,oBAAU,KAAKA,MAAK;AAAA,QACtB,OAAO;AACL,gBAAM,OAAO,UAAU,IAAI;AAC3B,aAAO,OAAO,SAAS,UAAU,0BAA0B;AAC3D,UAAAA,SAAQ,YAAY,QAAQ,MAAMA,MAAK;AAAA,QACzC;AAAA,MACF;AAAA,IACF;AAEA,IAAAA,SAAQ;AAER,WAAO,EAAEA,SAAQ,OAAO,QAAQ;AAC9B,YAAM,UAAU,OAAO,OAAOA,MAAK,EAAE,CAAC,CAAC;AAEvC,UAAI,IAAI,KAAK,SAAS,OAAOA,MAAK,EAAE,CAAC,EAAE,IAAI,GAAG;AAC5C,gBAAQ,OAAOA,MAAK,EAAE,CAAC,EAAE,IAAI,EAAE;AAAA,UAC7B,OAAO;AAAA,YACL,EAAC,gBAAgB,OAAOA,MAAK,EAAE,CAAC,EAAE,eAAc;AAAA,YAChD;AAAA,UACF;AAAA,UACA,OAAOA,MAAK,EAAE,CAAC;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAGA,QAAI,QAAQ,WAAW,SAAS,GAAG;AACjC,YAAM,OAAO,QAAQ,WAAW,QAAQ,WAAW,SAAS,CAAC;AAC7D,YAAM,UAAU,KAAK,CAAC,KAAK;AAC3B,cAAQ,KAAK,SAAS,QAAW,KAAK,CAAC,CAAC;AAAA,IAC1C;AAGA,SAAK,WAAW;AAAA,MACd,OAAOC;AAAA,QACL,OAAO,SAAS,IAAI,OAAO,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,EAAC;AAAA,MACzE;AAAA,MACA,KAAKA;AAAA,QACH,OAAO,SAAS,IACZ,OAAO,OAAO,SAAS,CAAC,EAAE,CAAC,EAAE,MAC7B,EAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,EAAC;AAAA,MACpC;AAAA,IACF;AAGA,IAAAD,SAAQ;AACR,WAAO,EAAEA,SAAQ,OAAO,WAAW,QAAQ;AACzC,aAAO,OAAO,WAAWA,MAAK,EAAE,IAAI,KAAK;AAAA,IAC3C;AAEA,WAAO;AAAA,EACT;AAQA,WAAS,YAAY,QAAQ,OAAO,QAAQ;AAC1C,QAAIA,SAAQ,QAAQ;AACpB,QAAI,mBAAmB;AACvB,QAAI,aAAa;AAEjB,QAAIP;AAEJ,QAAI;AAEJ,QAAI;AAEJ,QAAI;AAEJ,WAAO,EAAEO,UAAS,QAAQ;AACxB,YAAM,QAAQ,OAAOA,MAAK;AAE1B,cAAQ,MAAM,CAAC,EAAE,MAAM;AAAA,QACrB,KAAK,MAAM;AAAA,QACX,KAAK,MAAM;AAAA,QACX,KAAK,MAAM,YAAY;AACrB,cAAI,MAAM,CAAC,MAAM,SAAS;AACxB;AAAA,UACF,OAAO;AACL;AAAA,UACF;AAEA,qBAAW;AAEX;AAAA,QACF;AAAA,QAEA,KAAK,MAAM,iBAAiB;AAC1B,cAAI,MAAM,CAAC,MAAM,SAAS;AACxB,gBACEP,aACA,CAAC,YACD,CAAC,oBACD,CAAC,qBACD;AACA,oCAAsBO;AAAA,YACxB;AAEA,uBAAW;AAAA,UACb;AAEA;AAAA,QACF;AAAA,QAEA,KAAK,MAAM;AAAA,QACX,KAAK,MAAM;AAAA,QACX,KAAK,MAAM;AAAA,QACX,KAAK,MAAM;AAAA,QACX,KAAK,MAAM,0BAA0B;AAGnC;AAAA,QACF;AAAA,QAEA,SAAS;AACP,qBAAW;AAAA,QACb;AAAA,MACF;AAEA,UACG,CAAC,oBACA,MAAM,CAAC,MAAM,WACb,MAAM,CAAC,EAAE,SAAS,MAAM,kBACzB,qBAAqB,MACpB,MAAM,CAAC,MAAM,WACZ,MAAM,CAAC,EAAE,SAAS,MAAM,iBACvB,MAAM,CAAC,EAAE,SAAS,MAAM,cAC5B;AACA,YAAIP,WAAU;AACZ,cAAI,YAAYO;AAChB,sBAAY;AAEZ,iBAAO,aAAa;AAClB,kBAAM,YAAY,OAAO,SAAS;AAElC,gBACE,UAAU,CAAC,EAAE,SAAS,MAAM,cAC5B,UAAU,CAAC,EAAE,SAAS,MAAM,iBAC5B;AACA,kBAAI,UAAU,CAAC,MAAM,OAAQ;AAE7B,kBAAI,WAAW;AACb,uBAAO,SAAS,EAAE,CAAC,EAAE,OAAO,MAAM;AAClC,6BAAa;AAAA,cACf;AAEA,wBAAU,CAAC,EAAE,OAAO,MAAM;AAC1B,0BAAY;AAAA,YACd,WACE,UAAU,CAAC,EAAE,SAAS,MAAM,cAC5B,UAAU,CAAC,EAAE,SAAS,MAAM,oBAC5B,UAAU,CAAC,EAAE,SAAS,MAAM,8BAC5B,UAAU,CAAC,EAAE,SAAS,MAAM,oBAC5B,UAAU,CAAC,EAAE,SAAS,MAAM,gBAC5B;AAAA,YAEF,OAAO;AACL;AAAA,YACF;AAAA,UACF;AAEA,cACE,wBACC,CAAC,aAAa,sBAAsB,YACrC;AACA,YAAAP,UAAS,UAAU;AAAA,UACrB;AAGA,UAAAA,UAAS,MAAM,OAAO;AAAA,YACpB,CAAC;AAAA,YACD,YAAY,OAAO,SAAS,EAAE,CAAC,EAAE,QAAQ,MAAM,CAAC,EAAE;AAAA,UACpD;AAEA,iBAAO,OAAO,aAAaO,QAAO,GAAG,CAAC,QAAQP,WAAU,MAAM,CAAC,CAAC,CAAC;AACjE,UAAAO;AACA;AAAA,QACF;AAGA,YAAI,MAAM,CAAC,EAAE,SAAS,MAAM,gBAAgB;AAE1C,gBAAM,OAAO;AAAA,YACX,MAAM;AAAA,YACN,SAAS;AAAA,YACT,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,EAAE,KAAK;AAAA;AAAA,YAEvC,KAAK;AAAA,UACP;AACA,UAAAP,YAAW;AACX,iBAAO,OAAOO,QAAO,GAAG,CAAC,SAAS,MAAM,MAAM,CAAC,CAAC,CAAC;AACjD,UAAAA;AACA;AACA,gCAAsB;AACtB,qBAAW;AAAA,QACb;AAAA,MACF;AAAA,IACF;AAEA,WAAO,KAAK,EAAE,CAAC,EAAE,UAAU;AAC3B,WAAO;AAAA,EACT;AAYA,WAAS,OAAO,QAAQ,KAAK;AAC3B,WAAO;AAOP,aAAS,KAAK,OAAO;AACnB,YAAM,KAAK,MAAM,OAAO,KAAK,GAAG,KAAK;AACrC,UAAI,IAAK,KAAI,KAAK,MAAM,KAAK;AAAA,IAC/B;AAAA,EACF;AAMA,WAAS,SAAS;AAChB,SAAK,MAAM,KAAK,EAAC,MAAM,YAAY,UAAU,CAAC,EAAC,CAAC;AAAA,EAClD;AAcA,WAAS,MAAME,OAAM,OAAO,cAAc;AACxC,UAAM,SAAS,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC/C,OAAO,QAAQ,mBAAmB;AAClC,OAAO,cAAc,QAAQ,mBAAmB;AAEhD,UAAM,WAAW,OAAO;AACxB,aAAS,KAAKA,KAAI;AAClB,SAAK,MAAM,KAAKA,KAAI;AACpB,SAAK,WAAW,KAAK,CAAC,OAAO,YAAY,CAAC;AAC1C,IAAAA,MAAK,WAAW;AAAA,MACd,OAAOD,OAAM,MAAM,KAAK;AAAA;AAAA,MAExB,KAAK;AAAA,IACP;AAAA,EACF;AAUA,WAAS,OAAO,KAAK;AACnB,WAAO;AAOP,aAAS,MAAM,OAAO;AACpB,UAAI,IAAK,KAAI,KAAK,MAAM,KAAK;AAC7B,MAAAF,MAAK,KAAK,MAAM,KAAK;AAAA,IACvB;AAAA,EACF;AAYA,WAASA,MAAK,OAAO,aAAa;AAChC,UAAMG,QAAO,KAAK,MAAM,IAAI;AAC5B,OAAOA,OAAM,iBAAiB;AAC9B,UAAM,OAAO,KAAK,WAAW,IAAI;AAEjC,QAAI,CAAC,MAAM;AACT,YAAM,IAAI;AAAA,QACR,mBACE,MAAM,OACN,QACA,kBAAkB,EAAC,OAAO,MAAM,OAAO,KAAK,MAAM,IAAG,CAAC,IACtD;AAAA,MACJ;AAAA,IACF,WAAW,KAAK,CAAC,EAAE,SAAS,MAAM,MAAM;AACtC,UAAI,aAAa;AACf,oBAAY,KAAK,MAAM,OAAO,KAAK,CAAC,CAAC;AAAA,MACvC,OAAO;AACL,cAAM,UAAU,KAAK,CAAC,KAAK;AAC3B,gBAAQ,KAAK,MAAM,OAAO,KAAK,CAAC,CAAC;AAAA,MACnC;AAAA,IACF;AAEA,OAAOA,MAAK,SAAS,YAAY,8BAA8B;AAC/D,OAAOA,MAAK,UAAU,mCAAmC;AACzD,IAAAA,MAAK,SAAS,MAAMD,OAAM,MAAM,GAAG;AAAA,EACrC;AAMA,WAAS,SAAS;AAChB,WAAO,SAAS,KAAK,MAAM,IAAI,CAAC;AAAA,EAClC;AAUA,WAAS,qBAAqB;AAC5B,SAAK,KAAK,8BAA8B;AAAA,EAC1C;AAMA,WAAS,qBAAqB,OAAO;AACnC,QAAI,KAAK,KAAK,6BAA6B;AACzC,YAAM,WAAW,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AACjD,SAAO,UAAU,yBAAyB;AAC1C,SAAO,SAAS,SAAS,QAAQ,wBAAwB;AACzD,eAAS,QAAQ,OAAO;AAAA,QACtB,KAAK,eAAe,KAAK;AAAA,QACzB,UAAU;AAAA,MACZ;AACA,WAAK,KAAK,8BAA8B;AAAA,IAC1C;AAAA,EACF;AAMA,WAAS,4BAA4B;AACnC,UAAME,QAAO,KAAK,OAAO;AACzB,UAAMD,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC,OAAOA,MAAK,SAAS,QAAQ,wBAAwB;AACrD,IAAAA,MAAK,OAAOC;AAAA,EACd;AAMA,WAAS,4BAA4B;AACnC,UAAMA,QAAO,KAAK,OAAO;AACzB,UAAMD,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC,OAAOA,MAAK,SAAS,QAAQ,wBAAwB;AACrD,IAAAA,MAAK,OAAOC;AAAA,EACd;AAMA,WAAS,wBAAwB;AAE/B,QAAI,KAAK,KAAK,eAAgB;AAC9B,SAAK,OAAO;AACZ,SAAK,KAAK,iBAAiB;AAAA,EAC7B;AAMA,WAAS,mBAAmB;AAC1B,UAAMA,QAAO,KAAK,OAAO;AACzB,UAAMD,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC,OAAOA,MAAK,SAAS,QAAQ,wBAAwB;AAErD,IAAAA,MAAK,QAAQC,MAAK,QAAQ,4BAA4B,EAAE;AACxD,SAAK,KAAK,iBAAiB;AAAA,EAC7B;AAMA,WAAS,qBAAqB;AAC5B,UAAMA,QAAO,KAAK,OAAO;AACzB,UAAMD,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC,OAAOA,MAAK,SAAS,QAAQ,wBAAwB;AAErD,IAAAA,MAAK,QAAQC,MAAK,QAAQ,gBAAgB,EAAE;AAAA,EAC9C;AAMA,WAAS,4BAA4B,OAAO;AAC1C,UAAM,QAAQ,KAAK,OAAO;AAC1B,UAAMD,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC,OAAOA,MAAK,SAAS,cAAc,8BAA8B;AAEjE,IAAAA,MAAK,QAAQ;AACb,IAAAA,MAAK,aAAa;AAAA,MAChB,KAAK,eAAe,KAAK;AAAA,IAC3B,EAAE,YAAY;AAAA,EAChB;AAMA,WAAS,8BAA8B;AACrC,UAAMC,QAAO,KAAK,OAAO;AACzB,UAAMD,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC,OAAOA,MAAK,SAAS,cAAc,8BAA8B;AAEjE,IAAAA,MAAK,QAAQC;AAAA,EACf;AAMA,WAAS,oCAAoC;AAC3C,UAAMA,QAAO,KAAK,OAAO;AACzB,UAAMD,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC,OAAOA,MAAK,SAAS,cAAc,8BAA8B;AAEjE,IAAAA,MAAK,MAAMC;AAAA,EACb;AAMA,WAAS,yBAAyB,OAAO;AACvC,UAAMD,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC,OAAOA,MAAK,SAAS,WAAW,2BAA2B;AAE3D,QAAI,CAACA,MAAK,OAAO;AACf,YAAM,QAAQ,KAAK,eAAe,KAAK,EAAE;AAEzC;AAAA,QACE,UAAU,KACR,UAAU,KACV,UAAU,KACV,UAAU,KACV,UAAU,KACV,UAAU;AAAA,QACZ;AAAA,MACF;AAEA,MAAAA,MAAK,QAAQ;AAAA,IACf;AAAA,EACF;AAMA,WAAS,0BAA0B;AACjC,SAAK,KAAK,+BAA+B;AAAA,EAC3C;AAMA,WAAS,gCAAgC,OAAO;AAC9C,UAAMA,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC,OAAOA,MAAK,SAAS,WAAW,2BAA2B;AAE3D,IAAAA,MAAK,QACH,KAAK,eAAe,KAAK,EAAE,YAAY,CAAC,MAAM,MAAM,WAAW,IAAI;AAAA,EACvE;AAMA,WAAS,sBAAsB;AAC7B,SAAK,KAAK,+BAA+B;AAAA,EAC3C;AAOA,WAAS,YAAY,OAAO;AAC1B,UAAMA,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC,OAAO,cAAcA,OAAM,0BAA0B;AAErD,UAAM,WAAWA,MAAK;AAEtB,QAAI,OAAO,SAAS,SAAS,SAAS,CAAC;AAEvC,QAAI,CAAC,QAAQ,KAAK,SAAS,QAAQ;AAEjC,aAAOE,MAAK;AACZ,WAAK,WAAW;AAAA,QACd,OAAOH,OAAM,MAAM,KAAK;AAAA;AAAA,QAExB,KAAK;AAAA,MACP;AACA,eAAS,KAAK,IAAI;AAAA,IACpB;AAEA,SAAK,MAAM,KAAK,IAAI;AAAA,EACtB;AAOA,WAAS,WAAW,OAAO;AACzB,UAAM,OAAO,KAAK,MAAM,IAAI;AAC5B,OAAO,MAAM,sCAAsC;AACnD,OAAO,WAAW,MAAM,yCAAyC;AACjE,OAAO,KAAK,UAAU,0CAA0C;AAChE,SAAK,SAAS,KAAK,eAAe,KAAK;AACvC,SAAK,SAAS,MAAMA,OAAM,MAAM,GAAG;AAAA,EACrC;AAOA,WAAS,iBAAiB,OAAO;AAC/B,UAAM,UAAU,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAChD,OAAO,SAAS,iBAAiB;AAGjC,QAAI,KAAK,KAAK,aAAa;AACzB,SAAO,cAAc,SAAS,mBAAmB;AACjD,YAAM,OAAO,QAAQ,SAAS,QAAQ,SAAS,SAAS,CAAC;AACzD,SAAO,KAAK,UAAU,2CAA2C;AACjE,WAAK,SAAS,MAAMA,OAAM,MAAM,GAAG;AACnC,WAAK,KAAK,cAAc;AACxB;AAAA,IACF;AAEA,QACE,CAAC,KAAK,KAAK,gCACX,OAAO,eAAe,SAAS,QAAQ,IAAI,GAC3C;AACA,kBAAY,KAAK,MAAM,KAAK;AAC5B,iBAAW,KAAK,MAAM,KAAK;AAAA,IAC7B;AAAA,EACF;AAOA,WAAS,kBAAkB;AACzB,SAAK,KAAK,cAAc;AAAA,EAC1B;AAOA,WAAS,iBAAiB;AACxB,UAAME,QAAO,KAAK,OAAO;AACzB,UAAMD,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC,OAAOA,MAAK,SAAS,QAAQ,wBAAwB;AAErD,IAAAA,MAAK,QAAQC;AAAA,EACf;AAOA,WAAS,iBAAiB;AACxB,UAAMA,QAAO,KAAK,OAAO;AACzB,UAAMD,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC,OAAOA,MAAK,SAAS,QAAQ,wBAAwB;AAErD,IAAAA,MAAK,QAAQC;AAAA,EACf;AAOA,WAAS,iBAAiB;AACxB,UAAMA,QAAO,KAAK,OAAO;AACzB,UAAMD,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC,OAAOA,MAAK,SAAS,cAAc,+BAA+B;AAElE,IAAAA,MAAK,QAAQC;AAAA,EACf;AAOA,WAAS,aAAa;AACpB,UAAMD,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC,OAAOA,MAAK,SAAS,QAAQ,wBAAwB;AAMrD,QAAI,KAAK,KAAK,aAAa;AAEzB,YAAM,gBAAgB,KAAK,KAAK,iBAAiB;AAEjD,MAAAA,MAAK,QAAQ;AAEb,MAAAA,MAAK,gBAAgB;AAErB,aAAOA,MAAK;AACZ,aAAOA,MAAK;AAAA,IACd,OAAO;AAEL,aAAOA,MAAK;AAEZ,aAAOA,MAAK;AAAA,IACd;AAEA,SAAK,KAAK,gBAAgB;AAAA,EAC5B;AAOA,WAAS,cAAc;AACrB,UAAMA,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC,OAAOA,MAAK,SAAS,SAAS,yBAAyB;AAMvD,QAAI,KAAK,KAAK,aAAa;AAEzB,YAAM,gBAAgB,KAAK,KAAK,iBAAiB;AAEjD,MAAAA,MAAK,QAAQ;AAEb,MAAAA,MAAK,gBAAgB;AAErB,aAAOA,MAAK;AACZ,aAAOA,MAAK;AAAA,IACd,OAAO;AAEL,aAAOA,MAAK;AAEZ,aAAOA,MAAK;AAAA,IACd;AAEA,SAAK,KAAK,gBAAgB;AAAA,EAC5B;AAOA,WAAS,gBAAgB,OAAO;AAC9B,UAAMG,UAAS,KAAK,eAAe,KAAK;AACxC,UAAM,WAAW,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AACjD,OAAO,UAAU,4BAA4B;AAC7C;AAAA,MACE,SAAS,SAAS,WAAW,SAAS,SAAS;AAAA,MAC/C;AAAA,IACF;AAIA,aAAS,QAAQ,aAAaA,OAAM;AAEpC,aAAS,aAAa,oBAAoBA,OAAM,EAAE,YAAY;AAAA,EAChE;AAOA,WAAS,cAAc;AACrB,UAAM,WAAW,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AACjD,OAAO,UAAU,wBAAwB;AACzC,OAAO,SAAS,SAAS,YAAY,4BAA4B;AACjE,UAAM,QAAQ,KAAK,OAAO;AAC1B,UAAMH,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC;AAAA,MACEA,MAAK,SAAS,WAAWA,MAAK,SAAS;AAAA,MACvC;AAAA,IACF;AAGA,SAAK,KAAK,cAAc;AAExB,QAAIA,MAAK,SAAS,QAAQ;AAExB,YAAM,WAAW,SAAS;AAE1B,MAAAA,MAAK,WAAW;AAAA,IAClB,OAAO;AACL,MAAAA,MAAK,MAAM;AAAA,IACb;AAAA,EACF;AAOA,WAAS,kCAAkC;AACzC,UAAMC,QAAO,KAAK,OAAO;AACzB,UAAMD,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC;AAAA,MACEA,MAAK,SAAS,WAAWA,MAAK,SAAS;AAAA,MACvC;AAAA,IACF;AACA,IAAAA,MAAK,MAAMC;AAAA,EACb;AAOA,WAAS,4BAA4B;AACnC,UAAMA,QAAO,KAAK,OAAO;AACzB,UAAMD,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC;AAAA,MACEA,MAAK,SAAS,WAAWA,MAAK,SAAS;AAAA,MACvC;AAAA,IACF;AACA,IAAAA,MAAK,QAAQC;AAAA,EACf;AAOA,WAAS,iBAAiB;AACxB,SAAK,KAAK,cAAc;AAAA,EAC1B;AAOA,WAAS,mBAAmB;AAC1B,SAAK,KAAK,gBAAgB;AAAA,EAC5B;AAOA,WAAS,sBAAsB,OAAO;AACpC,UAAM,QAAQ,KAAK,OAAO;AAC1B,UAAMD,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC;AAAA,MACEA,MAAK,SAAS,WAAWA,MAAK,SAAS;AAAA,MACvC;AAAA,IACF;AAIA,IAAAA,MAAK,QAAQ;AAEb,IAAAA,MAAK,aAAa;AAAA,MAChB,KAAK,eAAe,KAAK;AAAA,IAC3B,EAAE,YAAY;AACd,SAAK,KAAK,gBAAgB;AAAA,EAC5B;AAOA,WAAS,+BAA+B,OAAO;AAC7C;AAAA,MACE,MAAM,SAAS,qCACb,MAAM,SAAS;AAAA,IACnB;AACA,SAAK,KAAK,yBAAyB,MAAM;AAAA,EAC3C;AAMA,WAAS,8BAA8B,OAAO;AAC5C,UAAMC,QAAO,KAAK,eAAe,KAAK;AACtC,UAAM,OAAO,KAAK,KAAK;AAEvB,QAAI;AAEJ,QAAI,MAAM;AACR,cAAQ;AAAA,QACNA;AAAA,QACA,SAAS,MAAM,kCACX,UAAU,qBACV,UAAU;AAAA,MAChB;AACA,WAAK,KAAK,yBAAyB;AAAA,IACrC,OAAO;AACL,YAAM,SAAS,8BAA8BA,KAAI;AACjD,SAAO,WAAW,OAAO,8BAA8B;AACvD,cAAQ;AAAA,IACV;AAEA,UAAM,OAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAO,MAAM,iBAAiB;AAC9B,OAAO,WAAW,MAAM,uBAAuB;AAC/C,SAAK,SAAS;AAAA,EAChB;AAMA,WAAS,yBAAyB,OAAO;AACvC,UAAM,OAAO,KAAK,MAAM,IAAI;AAC5B,OAAO,MAAM,iBAAiB;AAC9B,OAAO,KAAK,UAAU,0BAA0B;AAChD,SAAK,SAAS,MAAMF,OAAM,MAAM,GAAG;AAAA,EACrC;AAMA,WAAS,uBAAuB,OAAO;AACrC,eAAW,KAAK,MAAM,KAAK;AAC3B,UAAMC,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC,OAAOA,MAAK,SAAS,QAAQ,wBAAwB;AAErD,IAAAA,MAAK,MAAM,KAAK,eAAe,KAAK;AAAA,EACtC;AAMA,WAAS,oBAAoB,OAAO;AAClC,eAAW,KAAK,MAAM,KAAK;AAC3B,UAAMA,QAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC7C,OAAOA,OAAM,wBAAwB;AACrC,OAAOA,MAAK,SAAS,QAAQ,wBAAwB;AAErD,IAAAA,MAAK,MAAM,YAAY,KAAK,eAAe,KAAK;AAAA,EAClD;AAOA,WAAShB,cAAa;AACpB,WAAO,EAAC,MAAM,cAAc,UAAU,CAAC,EAAC;AAAA,EAC1C;AAGA,WAAS,WAAW;AAClB,WAAO,EAAC,MAAM,QAAQ,MAAM,MAAM,MAAM,MAAM,OAAO,GAAE;AAAA,EACzD;AAGA,WAASC,YAAW;AAClB,WAAO,EAAC,MAAM,cAAc,OAAO,GAAE;AAAA,EACvC;AAGA,WAASC,cAAa;AACpB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,OAAO;AAAA,MACP,KAAK;AAAA,IACP;AAAA,EACF;AAGA,WAASC,YAAW;AAClB,WAAO,EAAC,MAAM,YAAY,UAAU,CAAC,EAAC;AAAA,EACxC;AAGA,WAASJ,WAAU;AACjB,WAAO;AAAA,MACL,MAAM;AAAA;AAAA,MAEN,OAAO;AAAA,MACP,UAAU,CAAC;AAAA,IACb;AAAA,EACF;AAGA,WAASK,aAAY;AACnB,WAAO,EAAC,MAAM,QAAO;AAAA,EACvB;AAGA,WAASC,QAAO;AACd,WAAO,EAAC,MAAM,QAAQ,OAAO,GAAE;AAAA,EACjC;AAGA,WAASC,SAAQ;AACf,WAAO,EAAC,MAAM,SAAS,OAAO,MAAM,KAAK,IAAI,KAAK,KAAI;AAAA,EACxD;AAGA,WAASR,QAAO;AACd,WAAO,EAAC,MAAM,QAAQ,OAAO,MAAM,KAAK,IAAI,UAAU,CAAC,EAAC;AAAA,EAC1D;AAMA,WAASU,MAAK,OAAO;AACnB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,SAAS,MAAM,SAAS;AAAA,MACxB,OAAO;AAAA,MACP,QAAQ,MAAM;AAAA,MACd,UAAU,CAAC;AAAA,IACb;AAAA,EACF;AAMA,WAASD,UAAS,OAAO;AACvB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,QAAQ,MAAM;AAAA,MACd,SAAS;AAAA,MACT,UAAU,CAAC;AAAA,IACb;AAAA,EACF;AAGA,WAASE,aAAY;AACnB,WAAO,EAAC,MAAM,aAAa,UAAU,CAAC,EAAC;AAAA,EACzC;AAGA,WAASC,UAAS;AAChB,WAAO,EAAC,MAAM,UAAU,UAAU,CAAC,EAAC;AAAA,EACtC;AAGA,WAASQ,QAAO;AACd,WAAO,EAAC,MAAM,QAAQ,OAAO,GAAE;AAAA,EACjC;AAGA,WAASP,iBAAgB;AACvB,WAAO,EAAC,MAAM,gBAAe;AAAA,EAC/B;AACF;AAUA,SAASI,OAAMK,IAAG;AAChB,SAAO,EAAC,MAAMA,GAAE,MAAM,QAAQA,GAAE,QAAQ,QAAQA,GAAE,OAAM;AAC1D;AAOA,SAAS,UAAU,UAAU,YAAY;AACvC,MAAIN,SAAQ;AAEZ,SAAO,EAAEA,SAAQ,WAAW,QAAQ;AAClC,UAAM,QAAQ,WAAWA,MAAK;AAE9B,QAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,gBAAU,UAAU,KAAK;AAAA,IAC3B,OAAO;AACL,gBAAU,UAAU,KAAK;AAAA,IAC3B;AAAA,EACF;AACF;AAOA,SAAS,UAAU,UAAUO,YAAW;AAEtC,MAAI;AAEJ,OAAK,OAAOA,YAAW;AACrB,QAAI,IAAI,KAAKA,YAAW,GAAG,GAAG;AAC5B,cAAQ,KAAK;AAAA,QACX,KAAK,kBAAkB;AACrB,gBAAM,QAAQA,WAAU,GAAG;AAC3B,cAAI,OAAO;AACT,qBAAS,GAAG,EAAE,KAAK,GAAG,KAAK;AAAA,UAC7B;AAEA;AAAA,QACF;AAAA,QAEA,KAAK,cAAc;AACjB,gBAAM,QAAQA,WAAU,GAAG;AAC3B,cAAI,OAAO;AACT,qBAAS,GAAG,EAAE,KAAK,GAAG,KAAK;AAAA,UAC7B;AAEA;AAAA,QACF;AAAA,QAEA,KAAK;AAAA,QACL,KAAK,QAAQ;AACX,gBAAM,QAAQA,WAAU,GAAG;AAC3B,cAAI,OAAO;AACT,mBAAO,OAAO,SAAS,GAAG,GAAG,KAAK;AAAA,UACpC;AAEA;AAAA,QACF;AAAA,MAEF;AAAA,IACF;AAAA,EACF;AACF;AAGA,SAAS,eAAe,MAAM,OAAO;AACnC,MAAI,MAAM;AACR,UAAM,IAAI;AAAA,MACR,mBACE,KAAK,OACL,QACA,kBAAkB,EAAC,OAAO,KAAK,OAAO,KAAK,KAAK,IAAG,CAAC,IACpD,4BACA,MAAM,OACN,QACA,kBAAkB,EAAC,OAAO,MAAM,OAAO,KAAK,MAAM,IAAG,CAAC,IACtD;AAAA,IACJ;AAAA,EACF,OAAO;AACL,UAAM,IAAI;AAAA,MACR,sCACE,MAAM,OACN,QACA,kBAAkB,EAAC,OAAO,MAAM,OAAO,KAAK,MAAM,IAAG,CAAC,IACtD;AAAA,IACJ;AAAA,EACF;AACF;;;AC95Ce,SAAR,YAA6B,SAAS;AAG3C,QAAM,OAAO;AAEb,OAAK,SAAS;AAKd,WAAS,OAAOC,MAAK;AACnB,WAAO,aAAaA,MAAK;AAAA,MACvB,GAAG,KAAK,KAAK,UAAU;AAAA,MACvB,GAAG;AAAA;AAAA;AAAA;AAAA,MAIH,YAAY,KAAK,KAAK,qBAAqB,KAAK,CAAC;AAAA,MACjD,iBAAiB,KAAK,KAAK,wBAAwB,KAAK,CAAC;AAAA,IAC3D,CAAC;AAAA,EACH;AACF;;;ACOA,IAAMC,OAAM,CAAC,EAAE;AAcR,SAAS,OAAO,KAAK,SAAS;AACnC,QAAM,WAAW,WAAW,CAAC;AA8B7B,WAASC,KAAI,UAAU,YAAY;AAEjC,QAAI,KAAKA,KAAI;AACb,UAAM,WAAWA,KAAI;AAErB,QAAI,SAASD,KAAI,KAAK,OAAO,GAAG,GAAG;AAEjC,YAAM,KAAK,OAAO,MAAM,GAAG,CAAC;AAE5B,WAAKA,KAAI,KAAK,UAAU,EAAE,IAAI,SAAS,EAAE,IAAIC,KAAI;AAAA,IACnD;AAEA,QAAI,IAAI;AACN,aAAO,GAAG,KAAK,MAAM,OAAO,GAAG,UAAU;AAAA,IAC3C;AAAA,EACF;AAEA,EAAAA,KAAI,WAAW,SAAS,YAAY,CAAC;AACrC,EAAAA,KAAI,UAAU,SAAS;AACvB,EAAAA,KAAI,UAAU,SAAS;AAGvB,SAAOA;AACT;;;AChHA,IAAMC,OAAM,CAAC,EAAE;AAOR,SAASC,WAAUC,OAAMC,YAAW;AACzC,MAAIC,SAAQ;AAEZ,MAAI;AAGJ,MAAID,WAAU,YAAY;AACxB,WAAO,EAAEC,SAAQD,WAAU,WAAW,QAAQ;AAC5C,MAAAF,WAAUC,OAAMC,WAAU,WAAWC,MAAK,CAAC;AAAA,IAC7C;AAAA,EACF;AAEA,OAAK,OAAOD,YAAW;AACrB,QAAIH,KAAI,KAAKG,YAAW,GAAG,GAAG;AAC5B,cAAQ,KAAK;AAAA,QACX,KAAK,cAAc;AAEjB;AAAA,QACF;AAAA,QAGA,KAAK,UAAU;AACb,UAAAE,MAAKH,MAAK,GAAG,GAAGC,WAAU,GAAG,CAAC;AAC9B;AAAA,QACF;AAAA,QAEA,KAAK,QAAQ;AACX,UAAAE,MAAKH,MAAK,GAAG,GAAGC,WAAU,GAAG,CAAC;AAC9B;AAAA,QACF;AAAA,QAEA,KAAK,YAAY;AACf,cAAID,MAAK,GAAG,GAAGC,WAAU,GAAG,CAAC;AAC7B;AAAA,QACF;AAAA,QAEA,SAAS;AAEP,UAAAD,MAAK,QAAQ,GAAG,IAAIC,WAAU,GAAG;AAAA,QACnC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,SAAOD;AACT;AAOA,SAASG,MAAK,MAAM,OAAO;AACzB,MAAI,OAAO;AACT,SAAK,KAAK,GAAG,KAAK;AAAA,EACpB;AACF;AAOA,SAAS,IAAI,MAAM,OAAO;AACxB,MAAI,OAAO;AACT,WAAO,OAAO,MAAM,KAAK;AAAA,EAC3B;AACF;;;AChEO,SAAS,WAAWC,OAAMC,IAAG,OAAO,MAAM;AAC/C,QAAMC,QAAO,MAAM,MAAM,YAAY;AACrC,QAAM,UAAU,MAAM,cAAc,IAAI;AACxC,UAAQ,KAAK,IAAI;AACjB,UAAQ,MAAM,CAAC;AACf,QAAM,QAAQ,MAAM;AAAA,IAClB,MAAM,cAAcF,OAAM,QAAQ,QAAQ,CAAC;AAAA,IAC3CG;AAAA,EACF;AACA,EAAAD,MAAK;AACL,SAAO;AACT;AAGA,SAASC,KAAI,MAAMF,IAAG,OAAO;AAC3B,SAAO,OAAO,QAAQ,KAAK,OAAO;AACpC;;;ACrBO,SAAS,eAAe,OAAO,SAAS;AAC7C,SACE,YAAY,OAAO,QAAQ,aAAa,IAAI,KAC5C,CAAC,YAAY,OAAO,QAAQ,gBAAgB,KAAK;AAErD;AAQA,SAAS,YAAY,OAAOG,OAAM,MAAM;AACtC,MAAI,OAAOA,UAAS,UAAU;AAC5B,IAAAA,QAAO,CAACA,KAAI;AAAA,EACd;AAEA,MAAI,CAACA,SAAQA,MAAK,WAAW,GAAG;AAC9B,WAAO;AAAA,EACT;AAEA,MAAIC,SAAQ;AAEZ,SAAO,EAAEA,SAAQD,MAAK,QAAQ;AAC5B,QAAI,MAAM,SAASA,MAAKC,MAAK,CAAC,GAAG;AAC/B,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;;;ACzBO,SAAS,UAAUC,IAAG,IAAI,OAAO,MAAM;AAC5C,MAAIC,SAAQ;AAEZ,SAAO,EAAEA,SAAQ,MAAM,OAAO,QAAQ;AAGpC,QACE,MAAM,OAAOA,MAAK,EAAE,cAAc,QAClC,eAAe,MAAM,OAAO,MAAM,OAAOA,MAAK,CAAC,GAC/C;AACA,aAAO,QAAQ,KAAK,KAAK,MAAM,IAAI,KAAK;AAAA,IAC1C;AAAA,EACF;AAEA,SAAO;AACT;;;ACrBO,SAAS,cAAc,OAAO,WAAW;AAC9C,QAAM,SAAS,OAAO,KAAK;AAC3B,MAAIC,SAAQ,OAAO,QAAQ,SAAS;AACpC,MAAI,WAAWA;AACf,MAAI,QAAQ;AACZ,MAAI,MAAM;AAEV,MAAI,OAAO,cAAc,UAAU;AACjC,UAAM,IAAI,UAAU,oBAAoB;AAAA,EAC1C;AAEA,SAAOA,WAAU,IAAI;AACnB,QAAIA,WAAU,UAAU;AACtB,UAAI,EAAE,QAAQ,KAAK;AACjB,cAAM;AAAA,MACR;AAAA,IACF,OAAO;AACL,cAAQ;AAAA,IACV;AAEA,eAAWA,SAAQ,UAAU;AAC7B,IAAAA,SAAQ,OAAO,QAAQ,WAAW,QAAQ;AAAA,EAC5C;AAEA,SAAO;AACT;;;ACzBO,SAAS,qBAAqBC,OAAM,OAAO;AAChD,SAAO;AAAA,IACL,MAAM,QAAQ,WAAW,SACvBA,MAAK;AAAA,IAEL,CAACA,MAAK;AAAA,IAEN,WAAW,KAAKA,MAAK,KAAK;AAAA,IAE1B,CAAC,0CAA0C,KAAKA,MAAK,KAAK;AAAA,EAC9D;AACF;;;ACZO,SAAS,WAAW,OAAO;AAChC,QAAM,SAAS,MAAM,QAAQ,SAAS;AAEtC,MAAI,WAAW,OAAO,WAAW,KAAK;AACpC,UAAM,IAAI;AAAA,MACR,iCACE,SACA;AAAA,IACJ;AAAA,EACF;AAEA,SAAO;AACT;;;ACFO,SAAS,KAAKC,OAAMC,IAAG,OAAO,MAAM;AACzC,QAAM,SAAS,WAAW,KAAK;AAC/B,QAAM,MAAMD,MAAK,SAAS;AAC1B,QAAM,SAAS,WAAW,MAAM,gBAAgB;AAEhD,MAAI,qBAAqBA,OAAM,KAAK,GAAG;AACrC,UAAME,QAAO,MAAM,MAAM,cAAc;AACvC,UAAMC,SAAQ,MAAM,YAAY,KAAKC,IAAG;AACxC,IAAAF,MAAK;AACL,WAAOC;AAAA,EACT;AAEA,QAAM,UAAU,MAAM,cAAc,IAAI;AACxC,QAAM,WAAW,OAAO,OAAO,KAAK,IAAI,cAAc,KAAK,MAAM,IAAI,GAAG,CAAC,CAAC;AAC1E,QAAMD,QAAO,MAAM,MAAM,YAAY;AACrC,MAAI,QAAQ,QAAQ,KAAK,QAAQ;AAEjC,MAAIF,MAAK,MAAM;AACb,UAAM,UAAU,MAAM,MAAM,iBAAiB,MAAM,EAAE;AACrD,aAAS,QAAQ;AAAA,MACf,MAAM,KAAKA,MAAK,MAAM;AAAA,QACpB,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,QAAQ,CAAC,GAAG;AAAA,QACZ,GAAG,QAAQ,QAAQ;AAAA,MACrB,CAAC;AAAA,IACH;AACA,YAAQ;AAAA,EACV;AAEA,MAAIA,MAAK,QAAQA,MAAK,MAAM;AAC1B,UAAM,UAAU,MAAM,MAAM,iBAAiB,MAAM,EAAE;AACrD,aAAS,QAAQ,KAAK,GAAG;AACzB,aAAS,QAAQ;AAAA,MACf,MAAM,KAAKA,MAAK,MAAM;AAAA,QACpB,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,QAAQ,CAAC,GAAG;AAAA,QACZ,GAAG,QAAQ,QAAQ;AAAA,MACrB,CAAC;AAAA,IACH;AACA,YAAQ;AAAA,EACV;AAEA,WAAS,QAAQ,KAAK,IAAI;AAE1B,MAAI,KAAK;AACP,aAAS,QAAQ,KAAK,MAAM,IAAI;AAAA,EAClC;AAEA,WAAS,QAAQ,KAAK,QAAQ;AAC9B,EAAAE,MAAK;AACL,SAAO;AACT;AAGA,SAASE,KAAI,MAAMH,IAAG,OAAO;AAC3B,UAAQ,QAAQ,KAAK,UAAU;AACjC;;;ACpEO,SAAS,WAAW,OAAO;AAChC,QAAM,SAAS,MAAM,QAAQ,SAAS;AAEtC,MAAI,WAAW,OAAO,WAAW,KAAK;AACpC,UAAM,IAAI;AAAA,MACR,kCACE,SACA;AAAA,IACJ;AAAA,EACF;AAEA,SAAO;AACT;;;ACLO,SAASI,YAAWC,OAAMC,IAAG,OAAO,MAAM;AAC/C,QAAM,QAAQ,WAAW,KAAK;AAC9B,QAAM,SAAS,UAAU,MAAM,UAAU;AACzC,QAAMC,QAAO,MAAM,MAAM,YAAY;AACrC,MAAI,UAAU,MAAM,MAAM,OAAO;AACjC,QAAM,UAAU,MAAM,cAAc,IAAI;AACxC,MAAI,QAAQ,QAAQ,KAAK,GAAG;AAC5B,WAAS,QAAQ;AAAA,IACf,MAAM,KAAK,MAAM,cAAcF,KAAI,GAAG;AAAA,MACpC,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,GAAG,QAAQ,QAAQ;AAAA,IACrB,CAAC;AAAA,EACH;AACA,WAAS,QAAQ,KAAK,KAAK;AAE3B,UAAQ;AAER;AAAA;AAAA,IAEE,CAACA,MAAK;AAAA,IAEN,eAAe,KAAKA,MAAK,GAAG;AAAA,IAC5B;AACA,cAAU,MAAM,MAAM,oBAAoB;AAC1C,aAAS,QAAQ,KAAK,GAAG;AACzB,aAAS,QAAQ;AAAA,MACf,MAAM,KAAKA,MAAK,KAAK,EAAC,QAAQ,OAAO,OAAO,KAAK,GAAG,QAAQ,QAAQ,EAAC,CAAC;AAAA,IACxE;AACA,aAAS,QAAQ,KAAK,GAAG;AAAA,EAC3B,OAAO;AAEL,cAAU,MAAM,MAAM,gBAAgB;AACtC,aAAS,QAAQ;AAAA,MACf,MAAM,KAAKA,MAAK,KAAK;AAAA,QACnB,QAAQ;AAAA,QACR,OAAOA,MAAK,QAAQ,MAAM;AAAA,QAC1B,GAAG,QAAQ,QAAQ;AAAA,MACrB,CAAC;AAAA,IACH;AAAA,EACF;AAEA,UAAQ;AAER,MAAIA,MAAK,OAAO;AACd,cAAU,MAAM,MAAM,QAAQ,MAAM,EAAE;AACtC,aAAS,QAAQ,KAAK,MAAM,KAAK;AACjC,aAAS,QAAQ;AAAA,MACf,MAAM,KAAKA,MAAK,OAAO;AAAA,QACrB,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,GAAG,QAAQ,QAAQ;AAAA,MACrB,CAAC;AAAA,IACH;AACA,aAAS,QAAQ,KAAK,KAAK;AAC3B,YAAQ;AAAA,EACV;AAEA,EAAAE,MAAK;AAEL,SAAO;AACT;;;ACpEO,SAAS,cAAc,OAAO;AACnC,QAAM,SAAS,MAAM,QAAQ,YAAY;AAEzC,MAAI,WAAW,OAAO,WAAW,KAAK;AACpC,UAAM,IAAI;AAAA,MACR,qCACE,SACA;AAAA,IACJ;AAAA,EACF;AAEA,SAAO;AACT;;;ACZA,SAAS,OAAO;AAaT,SAAS,SAASC,OAAMC,IAAG,OAAO,MAAM;AAC7C,QAAM,SAAS,cAAc,KAAK;AAClC,QAAMC,QAAO,MAAM,MAAM,UAAU;AACnC,QAAM,UAAU,MAAM,cAAc,IAAI;AACxC,MAAI,QAAQ,QAAQ,KAAK,MAAM;AAC/B,WAAS,QAAQ;AAAA,IACf,MAAM,kBAAkBF,OAAM;AAAA,MAC5B,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,GAAG,QAAQ,QAAQ;AAAA,IACrB,CAAC;AAAA,EACH;AACA,WAAS,QAAQ,KAAK,MAAM;AAC5B,EAAAE,MAAK;AACL,SAAO;AACT;AAQA,SAAS,aAAaD,IAAG,IAAI,OAAO;AAClC,SAAO,MAAM,QAAQ,YAAY;AACnC;;;AC4FO,IAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBT,SAAU,MAAM;AACd,QAAI,SAAS,QAAQ,SAAS,QAAW;AACvC,aAAOE;AAAA,IACT;AAEA,QAAI,OAAO,SAAS,YAAY;AAC9B,aAAO,YAAY,IAAI;AAAA,IACzB;AAEA,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAO,MAAM,QAAQ,IAAI,IAAI,WAAW,IAAI,IAAI,aAAa,IAAI;AAAA,IACnE;AAEA,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAO,YAAY,IAAI;AAAA,IACzB;AAEA,UAAM,IAAI,MAAM,8CAA8C;AAAA,EAChE;AAAA;AAOJ,SAAS,WAAW,OAAO;AAEzB,QAAM,SAAS,CAAC;AAChB,MAAIC,SAAQ;AAEZ,SAAO,EAAEA,SAAQ,MAAM,QAAQ;AAC7B,WAAOA,MAAK,IAAI,QAAQ,MAAMA,MAAK,CAAC;AAAA,EACtC;AAEA,SAAO,YAAY,GAAG;AAMtB,WAAS,OAAO,YAAY;AAC1B,QAAIA,SAAQ;AAEZ,WAAO,EAAEA,SAAQ,OAAO,QAAQ;AAC9B,UAAI,OAAOA,MAAK,EAAE,MAAM,MAAM,UAAU,EAAG,QAAO;AAAA,IACpD;AAEA,WAAO;AAAA,EACT;AACF;AAQA,SAAS,aAAa,OAAO;AAC3B,QAAM;AAAA;AAAA,IAAwD;AAAA;AAE9D,SAAO,YAAYC,IAAG;AAMtB,WAASA,KAAIC,OAAM;AACjB,UAAM;AAAA;AAAA;AAAA,MACoBA;AAAA;AAI1B,QAAI;AAEJ,SAAK,OAAO,OAAO;AACjB,UAAI,aAAa,GAAG,MAAM,cAAc,GAAG,EAAG,QAAO;AAAA,IACvD;AAEA,WAAO;AAAA,EACT;AACF;AAQA,SAAS,YAAY,OAAO;AAC1B,SAAO,YAAY,IAAI;AAKvB,WAAS,KAAKA,OAAM;AAClB,WAAOA,SAAQA,MAAK,SAAS;AAAA,EAC/B;AACF;AAQA,SAAS,YAAY,cAAc;AACjC,SAAO;AAMP,WAAS,MAAM,OAAOF,QAAO,QAAQ;AACnC,WAAO;AAAA,MACL,eAAe,KAAK,KAClB,aAAa;AAAA,QACX;AAAA,QACA;AAAA,QACA,OAAOA,WAAU,WAAWA,SAAQ;AAAA,QACpC,UAAU;AAAA,MACZ;AAAA,IACJ;AAAA,EACF;AACF;AAEA,SAASD,MAAK;AACZ,SAAO;AACT;AAMA,SAAS,eAAe,OAAO;AAC7B,SAAO,UAAU,QAAQ,OAAO,UAAU,YAAY,UAAU;AAClE;;;AC9RO,SAAS,MAAMI,IAAG;AACvB,SAAOA;AACT;;;ACyNA,IAAM,QAAQ,CAAC;AAKR,IAAM,WAAW;AAKjB,IAAM,OAAO;AAKb,IAAM,OAAO;AAiDb,SAAS,aAAa,MAAM,MAAM,SAAS,SAAS;AAEzD,MAAI;AAEJ,MAAI,OAAO,SAAS,cAAc,OAAO,YAAY,YAAY;AAC/D,cAAU;AAEV,cAAU;AAAA,EACZ,OAAO;AAEL,YAAQ;AAAA,EACV;AAEA,QAAMC,MAAK,QAAQ,KAAK;AACxB,QAAM,OAAO,UAAU,KAAK;AAE5B,UAAQ,MAAM,QAAW,CAAC,CAAC,EAAE;AAO7B,WAAS,QAAQC,OAAMC,QAAO,SAAS;AACrC,UAAM;AAAA;AAAA,MACJD,SAAQ,OAAOA,UAAS,WAAWA,QAAO,CAAC;AAAA;AAG7C,QAAI,OAAO,MAAM,SAAS,UAAU;AAClC,YAAM;AAAA;AAAA,QAEJ,OAAO,MAAM,YAAY,WACrB,MAAM;AAAA;AAAA,UAER,OAAO,MAAM,SAAS,WACpB,MAAM,OACN;AAAA;AAAA;AAEN,aAAO,eAAeE,QAAO,QAAQ;AAAA,QACnC,OACE,WAAW,MAAMF,MAAK,QAAQ,OAAO,MAAM,OAAO,MAAM,GAAG,IAAI;AAAA,MACnE,CAAC;AAAA,IACH;AAEA,WAAOE;AAEP,aAASA,SAAQ;AAEf,UAAI,SAAS;AAEb,UAAI;AAEJ,UAAI;AAEJ,UAAI;AAEJ,UAAI,CAAC,QAAQH,IAAGC,OAAMC,QAAO,QAAQ,QAAQ,SAAS,CAAC,KAAK,MAAS,GAAG;AAEtE,iBAAS,SAAS,QAAQD,OAAM,OAAO,CAAC;AAExC,YAAI,OAAO,CAAC,MAAM,MAAM;AACtB,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,UAAI,cAAcA,SAAQA,MAAK,UAAU;AACvC,cAAM;AAAA;AAAA,UAA2CA;AAAA;AAEjD,YAAI,aAAa,YAAY,OAAO,CAAC,MAAM,MAAM;AAC/C,oBAAU,UAAU,aAAa,SAAS,SAAS,MAAM;AACzD,yBAAe,QAAQ,OAAO,YAAY;AAE1C,iBAAO,SAAS,MAAM,SAAS,aAAa,SAAS,QAAQ;AAC3D,kBAAM,QAAQ,aAAa,SAAS,MAAM;AAE1C,wBAAY,QAAQ,OAAO,QAAQ,YAAY,EAAE;AAEjD,gBAAI,UAAU,CAAC,MAAM,MAAM;AACzB,qBAAO;AAAA,YACT;AAEA,qBACE,OAAO,UAAU,CAAC,MAAM,WAAW,UAAU,CAAC,IAAI,SAAS;AAAA,UAC/D;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAUA,SAAS,SAAS,OAAO;AACvB,MAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,WAAO;AAAA,EACT;AAEA,MAAI,OAAO,UAAU,UAAU;AAC7B,WAAO,CAAC,UAAU,KAAK;AAAA,EACzB;AAEA,SAAO,UAAU,QAAQ,UAAU,SAAY,QAAQ,CAAC,KAAK;AAC/D;;;ACvHO,SAAS,MAAM,MAAM,eAAe,kBAAkB,cAAc;AAEzE,MAAI;AAEJ,MAAI;AAEJ,MAAI;AAEJ,MACE,OAAO,kBAAkB,cACzB,OAAO,qBAAqB,YAC5B;AACA,WAAO;AACP,cAAU;AACV,cAAU;AAAA,EACZ,OAAO;AAEL,WAAO;AAEP,cAAU;AACV,cAAU;AAAA,EACZ;AAEA,eAAa,MAAM,MAAM,UAAU,OAAO;AAM1C,WAAS,SAASG,OAAM,SAAS;AAC/B,UAAM,SAAS,QAAQ,QAAQ,SAAS,CAAC;AACzC,UAAMC,SAAQ,SAAS,OAAO,SAAS,QAAQD,KAAI,IAAI;AACvD,WAAO,QAAQA,OAAMC,QAAO,MAAM;AAAA,EACpC;AACF;;;AC3SO,SAAS,sBAAsBC,OAAM,OAAO;AACjD,MAAI,mBAAmB;AAIvB,QAAMA,OAAM,SAAUA,OAAM;AAC1B,QACG,WAAWA,SAAQ,WAAW,KAAKA,MAAK,KAAK,KAC9CA,MAAK,SAAS,SACd;AACA,yBAAmB;AACnB,aAAO;AAAA,IACT;AAAA,EACF,CAAC;AAED,SAAO;AAAA,KACJ,CAACA,MAAK,SAASA,MAAK,QAAQ,MAC3B,SAASA,KAAI,MACZ,MAAM,QAAQ,UAAU;AAAA,EAC7B;AACF;;;ACjBO,SAAS,QAAQC,OAAMC,IAAG,OAAO,MAAM;AAC5C,QAAM,OAAO,KAAK,IAAI,KAAK,IAAI,GAAGD,MAAK,SAAS,CAAC,GAAG,CAAC;AACrD,QAAM,UAAU,MAAM,cAAc,IAAI;AAExC,MAAI,sBAAsBA,OAAM,KAAK,GAAG;AACtC,UAAME,QAAO,MAAM,MAAM,eAAe;AACxC,UAAMC,WAAU,MAAM,MAAM,UAAU;AACtC,UAAMC,SAAQ,MAAM,kBAAkBJ,OAAM;AAAA,MAC1C,GAAG,QAAQ,QAAQ;AAAA,MACnB,QAAQ;AAAA,MACR,OAAO;AAAA,IACT,CAAC;AACD,IAAAG,SAAQ;AACR,IAAAD,MAAK;AAEL,WACEE,SACA,QACC,SAAS,IAAI,MAAM,KAAK;AAAA;AAAA,MAEvBA,OAAM;AAAA;AAAA,OAGH,KAAK,IAAIA,OAAM,YAAY,IAAI,GAAGA,OAAM,YAAY,IAAI,CAAC,IAAI;AAAA,IAClE;AAAA,EAEJ;AAEA,QAAM,WAAW,IAAI,OAAO,IAAI;AAChC,QAAMF,QAAO,MAAM,MAAM,YAAY;AACrC,QAAM,UAAU,MAAM,MAAM,UAAU;AAMtC,UAAQ,KAAK,WAAW,GAAG;AAE3B,MAAI,QAAQ,MAAM,kBAAkBF,OAAM;AAAA,IACxC,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,GAAG,QAAQ,QAAQ;AAAA,EACrB,CAAC;AAED,MAAI,SAAS,KAAK,KAAK,GAAG;AAExB,YACE,QACA,MAAM,WAAW,CAAC,EAAE,SAAS,EAAE,EAAE,YAAY,IAC7C,MACA,MAAM,MAAM,CAAC;AAAA,EACjB;AAEA,UAAQ,QAAQ,WAAW,MAAM,QAAQ;AAEzC,MAAI,MAAM,QAAQ,UAAU;AAC1B,aAAS,MAAM;AAAA,EACjB;AAEA,UAAQ;AACR,EAAAE,MAAK;AAEL,SAAO;AACT;;;AC3EA,KAAK,OAAO;AAML,SAAS,KAAKG,OAAM;AACzB,SAAOA,MAAK,SAAS;AACvB;AAKA,SAAS,WAAW;AAClB,SAAO;AACT;;;ACVA,MAAM,OAAO;AASN,SAAS,MAAMC,OAAMC,IAAG,OAAO,MAAM;AAC1C,QAAM,QAAQ,WAAW,KAAK;AAC9B,QAAM,SAAS,UAAU,MAAM,UAAU;AACzC,QAAMC,QAAO,MAAM,MAAM,OAAO;AAChC,MAAI,UAAU,MAAM,MAAM,OAAO;AACjC,QAAM,UAAU,MAAM,cAAc,IAAI;AACxC,MAAI,QAAQ,QAAQ,KAAK,IAAI;AAC7B,WAAS,QAAQ;AAAA,IACf,MAAM,KAAKF,MAAK,KAAK,EAAC,QAAQ,OAAO,OAAO,KAAK,GAAG,QAAQ,QAAQ,EAAC,CAAC;AAAA,EACxE;AACA,WAAS,QAAQ,KAAK,IAAI;AAE1B,UAAQ;AAER;AAAA;AAAA,IAEG,CAACA,MAAK,OAAOA,MAAK;AAAA,IAEnB,eAAe,KAAKA,MAAK,GAAG;AAAA,IAC5B;AACA,cAAU,MAAM,MAAM,oBAAoB;AAC1C,aAAS,QAAQ,KAAK,GAAG;AACzB,aAAS,QAAQ;AAAA,MACf,MAAM,KAAKA,MAAK,KAAK,EAAC,QAAQ,OAAO,OAAO,KAAK,GAAG,QAAQ,QAAQ,EAAC,CAAC;AAAA,IACxE;AACA,aAAS,QAAQ,KAAK,GAAG;AAAA,EAC3B,OAAO;AAEL,cAAU,MAAM,MAAM,gBAAgB;AACtC,aAAS,QAAQ;AAAA,MACf,MAAM,KAAKA,MAAK,KAAK;AAAA,QACnB,QAAQ;AAAA,QACR,OAAOA,MAAK,QAAQ,MAAM;AAAA,QAC1B,GAAG,QAAQ,QAAQ;AAAA,MACrB,CAAC;AAAA,IACH;AAAA,EACF;AAEA,UAAQ;AAER,MAAIA,MAAK,OAAO;AACd,cAAU,MAAM,MAAM,QAAQ,MAAM,EAAE;AACtC,aAAS,QAAQ,KAAK,MAAM,KAAK;AACjC,aAAS,QAAQ;AAAA,MACf,MAAM,KAAKA,MAAK,OAAO;AAAA,QACrB,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,GAAG,QAAQ,QAAQ;AAAA,MACrB,CAAC;AAAA,IACH;AACA,aAAS,QAAQ,KAAK,KAAK;AAC3B,YAAQ;AAAA,EACV;AAEA,WAAS,QAAQ,KAAK,GAAG;AACzB,EAAAE,MAAK;AAEL,SAAO;AACT;AAKA,SAAS,YAAY;AACnB,SAAO;AACT;;;AC5EA,eAAe,OAAO;AASf,SAAS,eAAeC,OAAMC,IAAG,OAAO,MAAM;AACnD,QAAM,OAAOD,MAAK;AAClB,QAAME,QAAO,MAAM,MAAM,gBAAgB;AACzC,MAAI,UAAU,MAAM,MAAM,OAAO;AACjC,QAAM,UAAU,MAAM,cAAc,IAAI;AACxC,MAAI,QAAQ,QAAQ,KAAK,IAAI;AAC7B,QAAM,MAAM,MAAM,KAAKF,MAAK,KAAK;AAAA,IAC/B,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,GAAG,QAAQ,QAAQ;AAAA,EACrB,CAAC;AACD,WAAS,QAAQ,KAAK,MAAM,IAAI;AAEhC,UAAQ;AAER,QAAM,QAAQ,MAAM;AACpB,QAAM,QAAQ,CAAC;AACf,YAAU,MAAM,MAAM,WAAW;AAKjC,QAAM,YAAY,MAAM,KAAK,MAAM,cAAcA,KAAI,GAAG;AAAA,IACtD,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,GAAG,QAAQ,QAAQ;AAAA,EACrB,CAAC;AACD,UAAQ;AACR,QAAM,QAAQ;AACd,EAAAE,MAAK;AAEL,MAAI,SAAS,UAAU,CAAC,OAAO,QAAQ,WAAW;AAChD,aAAS,QAAQ,KAAK,YAAY,GAAG;AAAA,EACvC,WAAW,SAAS,YAAY;AAE9B,YAAQ,MAAM,MAAM,GAAG,EAAE;AAAA,EAC3B,OAAO;AACL,aAAS,QAAQ,KAAK,GAAG;AAAA,EAC3B;AAEA,SAAO;AACT;AAKA,SAAS,qBAAqB;AAC5B,SAAO;AACT;;;AC1DA,WAAW,OAAO;AAQX,SAAS,WAAWC,OAAMC,IAAG,OAAO;AACzC,MAAI,QAAQD,MAAK,SAAS;AAC1B,MAAI,WAAW;AACf,MAAIE,SAAQ;AAKZ,SAAO,IAAI,OAAO,aAAa,WAAW,UAAU,EAAE,KAAK,KAAK,GAAG;AACjE,gBAAY;AAAA,EACd;AAIA,MACE,WAAW,KAAK,KAAK,MACnB,WAAW,KAAK,KAAK,KAAK,WAAW,KAAK,KAAK,KAAM,QAAQ,KAAK,KAAK,IACzE;AACA,YAAQ,MAAM,QAAQ;AAAA,EACxB;AASA,SAAO,EAAEA,SAAQ,MAAM,OAAO,QAAQ;AACpC,UAAM,UAAU,MAAM,OAAOA,MAAK;AAClC,UAAM,aAAa,MAAM,eAAe,OAAO;AAE/C,QAAI;AAKJ,QAAI,CAAC,QAAQ,QAAS;AAEtB,WAAQ,QAAQ,WAAW,KAAK,KAAK,GAAI;AACvC,UAAIC,YAAW,MAAM;AAGrB,UACE,MAAM,WAAWA,SAAQ,MAAM,MAC/B,MAAM,WAAWA,YAAW,CAAC,MAAM,IACnC;AACA,QAAAA;AAAA,MACF;AAEA,cAAQ,MAAM,MAAM,GAAGA,SAAQ,IAAI,MAAM,MAAM,MAAM,MAAM,QAAQ,CAAC;AAAA,IACtE;AAAA,EACF;AAEA,SAAO,WAAW,QAAQ;AAC5B;AAKA,SAAS,iBAAiB;AACxB,SAAO;AACT;;;AChEO,SAAS,qBAAqBC,OAAM,OAAO;AAChD,QAAM,MAAM,SAASA,KAAI;AAEzB,SAAO;AAAA,IACL,CAAC,MAAM,QAAQ;AAAA,IAEbA,MAAK;AAAA,IAEL,CAACA,MAAK;AAAA,IAENA,MAAK,YACLA,MAAK,SAAS,WAAW,KACzBA,MAAK,SAAS,CAAC,EAAE,SAAS;AAAA,KAEzB,QAAQA,MAAK,OAAO,YAAY,QAAQA,MAAK;AAAA,IAE9C,oBAAoB,KAAKA,MAAK,GAAG;AAAA;AAAA,IAGjC,CAAC,iBAAiB,KAAKA,MAAK,GAAG;AAAA,EACnC;AACF;;;ACtBA,KAAK,OAAO;AASL,SAAS,KAAKC,OAAMC,IAAG,OAAO,MAAM;AACzC,QAAM,QAAQ,WAAW,KAAK;AAC9B,QAAM,SAAS,UAAU,MAAM,UAAU;AACzC,QAAM,UAAU,MAAM,cAAc,IAAI;AAExC,MAAIC;AAEJ,MAAI;AAEJ,MAAI,qBAAqBF,OAAM,KAAK,GAAG;AAErC,UAAM,QAAQ,MAAM;AACpB,UAAM,QAAQ,CAAC;AACf,IAAAE,QAAO,MAAM,MAAM,UAAU;AAC7B,QAAIC,SAAQ,QAAQ,KAAK,GAAG;AAC5B,IAAAA,UAAS,QAAQ;AAAA,MACf,MAAM,kBAAkBH,OAAM;AAAA,QAC5B,QAAQG;AAAA,QACR,OAAO;AAAA,QACP,GAAG,QAAQ,QAAQ;AAAA,MACrB,CAAC;AAAA,IACH;AACA,IAAAA,UAAS,QAAQ,KAAK,GAAG;AACzB,IAAAD,MAAK;AACL,UAAM,QAAQ;AACd,WAAOC;AAAA,EACT;AAEA,EAAAD,QAAO,MAAM,MAAM,MAAM;AACzB,YAAU,MAAM,MAAM,OAAO;AAC7B,MAAI,QAAQ,QAAQ,KAAK,GAAG;AAC5B,WAAS,QAAQ;AAAA,IACf,MAAM,kBAAkBF,OAAM;AAAA,MAC5B,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,GAAG,QAAQ,QAAQ;AAAA,IACrB,CAAC;AAAA,EACH;AACA,WAAS,QAAQ,KAAK,IAAI;AAC1B,UAAQ;AAER;AAAA;AAAA,IAEG,CAACA,MAAK,OAAOA,MAAK;AAAA,IAEnB,eAAe,KAAKA,MAAK,GAAG;AAAA,IAC5B;AACA,cAAU,MAAM,MAAM,oBAAoB;AAC1C,aAAS,QAAQ,KAAK,GAAG;AACzB,aAAS,QAAQ;AAAA,MACf,MAAM,KAAKA,MAAK,KAAK,EAAC,QAAQ,OAAO,OAAO,KAAK,GAAG,QAAQ,QAAQ,EAAC,CAAC;AAAA,IACxE;AACA,aAAS,QAAQ,KAAK,GAAG;AAAA,EAC3B,OAAO;AAEL,cAAU,MAAM,MAAM,gBAAgB;AACtC,aAAS,QAAQ;AAAA,MACf,MAAM,KAAKA,MAAK,KAAK;AAAA,QACnB,QAAQ;AAAA,QACR,OAAOA,MAAK,QAAQ,MAAM;AAAA,QAC1B,GAAG,QAAQ,QAAQ;AAAA,MACrB,CAAC;AAAA,IACH;AAAA,EACF;AAEA,UAAQ;AAER,MAAIA,MAAK,OAAO;AACd,cAAU,MAAM,MAAM,QAAQ,MAAM,EAAE;AACtC,aAAS,QAAQ,KAAK,MAAM,KAAK;AACjC,aAAS,QAAQ;AAAA,MACf,MAAM,KAAKA,MAAK,OAAO;AAAA,QACrB,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,GAAG,QAAQ,QAAQ;AAAA,MACrB,CAAC;AAAA,IACH;AACA,aAAS,QAAQ,KAAK,KAAK;AAC3B,YAAQ;AAAA,EACV;AAEA,WAAS,QAAQ,KAAK,GAAG;AAEzB,EAAAE,MAAK;AACL,SAAO;AACT;AAQA,SAAS,SAASF,OAAMC,IAAG,OAAO;AAChC,SAAO,qBAAqBD,OAAM,KAAK,IAAI,MAAM;AACnD;;;AC5GA,cAAc,OAAO;AASd,SAAS,cAAcI,OAAMC,IAAG,OAAO,MAAM;AAClD,QAAM,OAAOD,MAAK;AAClB,QAAME,QAAO,MAAM,MAAM,eAAe;AACxC,MAAI,UAAU,MAAM,MAAM,OAAO;AACjC,QAAM,UAAU,MAAM,cAAc,IAAI;AACxC,MAAI,QAAQ,QAAQ,KAAK,GAAG;AAC5B,QAAMC,QAAO,MAAM,kBAAkBH,OAAM;AAAA,IACzC,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,GAAG,QAAQ,QAAQ;AAAA,EACrB,CAAC;AACD,WAAS,QAAQ,KAAKG,QAAO,IAAI;AAEjC,UAAQ;AAER,QAAM,QAAQ,MAAM;AACpB,QAAM,QAAQ,CAAC;AACf,YAAU,MAAM,MAAM,WAAW;AAKjC,QAAM,YAAY,MAAM,KAAK,MAAM,cAAcH,KAAI,GAAG;AAAA,IACtD,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,GAAG,QAAQ,QAAQ;AAAA,EACrB,CAAC;AACD,UAAQ;AACR,QAAM,QAAQ;AACd,EAAAE,MAAK;AAEL,MAAI,SAAS,UAAU,CAACC,SAAQA,UAAS,WAAW;AAClD,aAAS,QAAQ,KAAK,YAAY,GAAG;AAAA,EACvC,WAAW,SAAS,YAAY;AAE9B,YAAQ,MAAM,MAAM,GAAG,EAAE;AAAA,EAC3B,OAAO;AACL,aAAS,QAAQ,KAAK,GAAG;AAAA,EAC3B;AAEA,SAAO;AACT;AAKA,SAAS,oBAAoB;AAC3B,SAAO;AACT;;;ACvDO,SAAS,YAAY,OAAO;AACjC,QAAM,SAAS,MAAM,QAAQ,UAAU;AAEvC,MAAI,WAAW,OAAO,WAAW,OAAO,WAAW,KAAK;AACtD,UAAM,IAAI;AAAA,MACR,kCACE,SACA;AAAA,IACJ;AAAA,EACF;AAEA,SAAO;AACT;;;ACVO,SAAS,iBAAiB,OAAO;AACtC,QAAM,SAAS,YAAY,KAAK;AAChC,QAAM,cAAc,MAAM,QAAQ;AAElC,MAAI,CAAC,aAAa;AAChB,WAAO,WAAW,MAAM,MAAM;AAAA,EAChC;AAEA,MAAI,gBAAgB,OAAO,gBAAgB,OAAO,gBAAgB,KAAK;AACrE,UAAM,IAAI;AAAA,MACR,kCACE,cACA;AAAA,IACJ;AAAA,EACF;AAEA,MAAI,gBAAgB,QAAQ;AAC1B,UAAM,IAAI;AAAA,MACR,yBACE,SACA,4BACA,cACA;AAAA,IACJ;AAAA,EACF;AAEA,SAAO;AACT;;;AC7BO,SAAS,mBAAmB,OAAO;AACxC,QAAM,SAAS,MAAM,QAAQ,iBAAiB;AAE9C,MAAI,WAAW,OAAO,WAAW,KAAK;AACpC,UAAM,IAAI;AAAA,MACR,kCACE,SACA;AAAA,IACJ;AAAA,EACF;AAEA,SAAO;AACT;;;ACZO,SAAS,UAAU,OAAO;AAC/B,QAAM,SAAS,MAAM,QAAQ,QAAQ;AAErC,MAAI,WAAW,OAAO,WAAW,OAAO,WAAW,KAAK;AACtD,UAAM,IAAI;AAAA,MACR,kCACE,SACA;AAAA,IACJ;AAAA,EACF;AAEA,SAAO;AACT;;;ACFO,SAASC,MAAKC,OAAM,QAAQ,OAAO,MAAM;AAC9C,QAAMC,QAAO,MAAM,MAAM,MAAM;AAC/B,QAAM,gBAAgB,MAAM;AAE5B,MAAI,SAASD,MAAK,UAAU,mBAAmB,KAAK,IAAI,YAAY,KAAK;AAEzE,QAAM,cAAcA,MAAK,UACrB,WAAW,MACT,MACA,MACF,iBAAiB,KAAK;AAC1B,MAAI,qBACF,UAAU,MAAM,iBAAiB,WAAW,MAAM,iBAAiB;AAErE,MAAI,CAACA,MAAK,SAAS;AACjB,UAAM,gBAAgBA,MAAK,WAAWA,MAAK,SAAS,CAAC,IAAI;AAUzD;AAAA;AAAA,OAEG,WAAW,OAAO,WAAW;AAAA,MAE9B,kBACC,CAAC,cAAc,YAAY,CAAC,cAAc,SAAS,CAAC;AAAA,MAErD,MAAM,MAAM,MAAM,MAAM,SAAS,CAAC,MAAM,UACxC,MAAM,MAAM,MAAM,MAAM,SAAS,CAAC,MAAM,cACxC,MAAM,MAAM,MAAM,MAAM,SAAS,CAAC,MAAM,UACxC,MAAM,MAAM,MAAM,MAAM,SAAS,CAAC,MAAM;AAAA,MAExC,MAAM,WAAW,MAAM,WAAW,SAAS,CAAC,MAAM,KAClD,MAAM,WAAW,MAAM,WAAW,SAAS,CAAC,MAAM,KAClD,MAAM,WAAW,MAAM,WAAW,SAAS,CAAC,MAAM;AAAA,MAClD;AACA,2BAAqB;AAAA,IACvB;AAUA,QAAI,UAAU,KAAK,MAAM,UAAU,eAAe;AAChD,UAAIE,SAAQ;AAEZ,aAAO,EAAEA,SAAQF,MAAK,SAAS,QAAQ;AACrC,cAAM,OAAOA,MAAK,SAASE,MAAK;AAEhC,YACE,QACA,KAAK,SAAS,cACd,KAAK,YACL,KAAK,SAAS,CAAC,KACf,KAAK,SAAS,CAAC,EAAE,SAAS,iBAC1B;AACA,+BAAqB;AACrB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,MAAI,oBAAoB;AACtB,aAAS;AAAA,EACX;AAEA,QAAM,gBAAgB;AACtB,QAAM,QAAQ,MAAM,cAAcF,OAAM,IAAI;AAC5C,QAAM,iBAAiB;AACvB,QAAM,gBAAgB;AACtB,EAAAC,MAAK;AACL,SAAO;AACT;;;AC5FO,SAAS,oBAAoB,OAAO;AACzC,QAAM,QAAQ,MAAM,QAAQ,kBAAkB;AAE9C,MAAI,UAAU,SAAS,UAAU,SAAS,UAAU,SAAS;AAC3D,UAAM,IAAI;AAAA,MACR,kCACE,QACA;AAAA,IACJ;AAAA,EACF;AAEA,SAAO;AACT;;;ACHO,SAAS,SAASE,OAAM,QAAQ,OAAO,MAAM;AAClD,QAAM,iBAAiB,oBAAoB,KAAK;AAChD,MAAI,SAAS,MAAM,iBAAiB,YAAY,KAAK;AAGrD,MAAI,UAAU,OAAO,SAAS,UAAU,OAAO,SAAS;AACtD,cACG,OAAO,OAAO,UAAU,YAAY,OAAO,QAAQ,KAChD,OAAO,QACP,MACH,MAAM,QAAQ,wBAAwB,QACnC,IACA,OAAO,SAAS,QAAQA,KAAI,KAChC;AAAA,EACJ;AAEA,MAAI,OAAO,OAAO,SAAS;AAE3B,MACE,mBAAmB,SAClB,mBAAmB,YAChB,UAAU,OAAO,SAAS,UAAU,OAAO,UAAWA,MAAK,SAC/D;AACA,WAAO,KAAK,KAAK,OAAO,CAAC,IAAI;AAAA,EAC/B;AAEA,QAAM,UAAU,MAAM,cAAc,IAAI;AACxC,UAAQ,KAAK,SAAS,IAAI,OAAO,OAAO,OAAO,MAAM,CAAC;AACtD,UAAQ,MAAM,IAAI;AAClB,QAAMC,QAAO,MAAM,MAAM,UAAU;AACnC,QAAM,QAAQ,MAAM;AAAA,IAClB,MAAM,cAAcD,OAAM,QAAQ,QAAQ,CAAC;AAAA,IAC3CE;AAAA,EACF;AACA,EAAAD,MAAK;AAEL,SAAO;AAGP,WAASC,KAAI,MAAMC,QAAO,OAAO;AAC/B,QAAIA,QAAO;AACT,cAAQ,QAAQ,KAAK,IAAI,OAAO,IAAI,KAAK;AAAA,IAC3C;AAEA,YAAQ,QAAQ,SAAS,SAAS,IAAI,OAAO,OAAO,OAAO,MAAM,KAAK;AAAA,EACxE;AACF;;;AClDO,SAAS,UAAUC,OAAMC,IAAG,OAAO,MAAM;AAC9C,QAAMC,QAAO,MAAM,MAAM,WAAW;AACpC,QAAM,UAAU,MAAM,MAAM,UAAU;AACtC,QAAM,QAAQ,MAAM,kBAAkBF,OAAM,IAAI;AAChD,UAAQ;AACR,EAAAE,MAAK;AACL,SAAO;AACT;;;ACHO,IAAM;AAAA;AAAA,EAGT,QAAQ;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAEA;AAAA;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAEA;AAAA,EACF,CAAC;AAAA;;;AC3BE,SAAS,KAAKC,OAAMC,IAAG,OAAO,MAAM;AAEzC,QAAM,cAAcD,MAAK,SAAS,KAAK,SAAUE,IAAG;AAClD,WAAO,SAASA,EAAC;AAAA,EACnB,CAAC;AACD,QAAM,KAAK,cAAc,MAAM,oBAAoB,MAAM;AACzD,SAAO,GAAG,KAAK,OAAOF,OAAM,IAAI;AAClC;;;ACdO,SAAS,YAAY,OAAO;AACjC,QAAM,SAAS,MAAM,QAAQ,UAAU;AAEvC,MAAI,WAAW,OAAO,WAAW,KAAK;AACpC,UAAM,IAAI;AAAA,MACR,mCACE,SACA;AAAA,IACJ;AAAA,EACF;AAEA,SAAO;AACT;;;ACZA,OAAO,OAAO;AAaP,SAAS,OAAOG,OAAMC,IAAG,OAAO,MAAM;AAC3C,QAAM,SAAS,YAAY,KAAK;AAChC,QAAMC,QAAO,MAAM,MAAM,QAAQ;AACjC,QAAM,UAAU,MAAM,cAAc,IAAI;AACxC,MAAI,QAAQ,QAAQ,KAAK,SAAS,MAAM;AACxC,WAAS,QAAQ;AAAA,IACf,MAAM,kBAAkBF,OAAM;AAAA,MAC5B,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,GAAG,QAAQ,QAAQ;AAAA,IACrB,CAAC;AAAA,EACH;AACA,WAAS,QAAQ,KAAK,SAAS,MAAM;AACrC,EAAAE,MAAK;AACL,SAAO;AACT;AAQA,SAAS,WAAWD,IAAG,IAAI,OAAO;AAChC,SAAO,MAAM,QAAQ,UAAU;AACjC;;;ACjCO,SAASE,MAAKC,OAAMC,IAAG,OAAO,MAAM;AACzC,SAAO,MAAM,KAAKD,MAAK,OAAO,IAAI;AACpC;;;ACPO,SAAS,oBAAoB,OAAO;AACzC,QAAM,aAAa,MAAM,QAAQ,kBAAkB;AAEnD,MAAI,aAAa,GAAG;AAClB,UAAM,IAAI;AAAA,MACR,6CACE,aACA;AAAA,IACJ;AAAA,EACF;AAEA,SAAO;AACT;;;ACNO,SAASE,eAAcC,IAAG,IAAI,OAAO;AAC1C,QAAM,SACJ,UAAU,KAAK,KAAK,MAAM,QAAQ,aAAa,MAAM,KACrD,OAAO,oBAAoB,KAAK,CAAC;AAEnC,SAAO,MAAM,QAAQ,aAAa,MAAM,MAAM,GAAG,EAAE,IAAI;AACzD;;;ACEO,IAAM,SAAS;AAAA,EACpB;AAAA,EACA,OAAO;AAAA,EACP;AAAA,EACA,YAAAC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,MAAAC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,MAAAC;AAAA,EACA,eAAAC;AACF;;;ACpCO,IAAM,OAAO,CAAC,YAAY;AAGjC,SAAS,aAAa,MAAM,OAAO,QAAQ,OAAO;AAEhD,MACE,MAAM,SAAS,UACf,qBAAqB,OAAO,KAAK,MAChC,KAAK,SAAS,UACZ,KAAK,SAAS,MAAM,QAAQ,qBAAqB,MAAM,KAAK,IAC/D;AACA,WAAO;AAAA,EACT;AAIA,MAAI,YAAY,UAAU,OAAO,OAAO,WAAW,WAAW;AAC5D,QACE,KAAK,SAAS;AAAA,KAEb,KAAK,SAAS,MAAM,QACnB,MAAM,SAAS;AAAA,IAEd,MAAM,SAAS,aAAa,sBAAsB,OAAO,KAAK,IACjE;AACA;AAAA,IACF;AAEA,WAAO,OAAO,SAAS,IAAI;AAAA,EAC7B;AACF;;;ACzBA,IAAM,oBAAoB;AAAA,EACxB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAGO,IAAM,SAAS;AAAA,EACpB,EAAC,WAAW,KAAM,OAAO,YAAY,aAAa,WAAU;AAAA,EAC5D,EAAC,WAAW,KAAM,QAAQ,YAAY,aAAa,WAAU;AAAA,EAC7D;AAAA,IACE,WAAW;AAAA,IACX,aAAa,CAAC,6BAA6B,qBAAqB;AAAA,EAClE;AAAA,EACA;AAAA,IACE,WAAW;AAAA,IACX,aAAa;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,WAAW;AAAA,IACX,aAAa;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EACA,EAAC,WAAW,KAAK,OAAO,YAAY,aAAa,WAAU;AAAA,EAC3D,EAAC,WAAW,KAAK,QAAQ,YAAY,aAAa,WAAU;AAAA,EAC5D;AAAA,IACE,WAAW;AAAA,IACX,aAAa,CAAC,6BAA6B,qBAAqB;AAAA,EAClE;AAAA;AAAA;AAAA,EAGA;AAAA,IACE,WAAW;AAAA,IACX,OAAO;AAAA,IACP,aAAa;AAAA,IACb,gBAAgB;AAAA,EAClB;AAAA;AAAA,EAEA,EAAC,WAAW,KAAK,aAAa,aAAY;AAAA;AAAA,EAE1C,EAAC,SAAS,MAAM,WAAW,IAAG;AAAA,EAC9B,EAAC,WAAW,KAAK,aAAa,cAAc,OAAO,eAAc;AAAA;AAAA;AAAA,EAGjE,EAAC,WAAW,KAAK,OAAO,aAAa,aAAa,WAAU;AAAA;AAAA,EAE5D,EAAC,WAAW,KAAK,aAAa,kBAAiB;AAAA;AAAA,EAE/C,EAAC,WAAW,KAAK,aAAa,iBAAgB;AAAA;AAAA,EAE9C;AAAA,IACE,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,aAAa;AAAA,IACb,gBAAgB;AAAA,EAClB;AAAA;AAAA;AAAA,EAGA,EAAC,SAAS,MAAM,QAAQ,QAAQ,WAAW,IAAG;AAAA,EAC9C,EAAC,WAAW,KAAK,aAAa,iBAAgB;AAAA;AAAA,EAE9C,EAAC,SAAS,MAAM,WAAW,KAAK,OAAO,gBAAgB;AAAA,EACvD,EAAC,WAAW,KAAK,aAAa,YAAY,gBAAgB,kBAAiB;AAAA;AAAA,EAE3E,EAAC,SAAS,MAAM,WAAW,KAAK,OAAO,eAAe;AAAA;AAAA;AAAA,EAGtD,EAAC,SAAS,MAAM,WAAW,KAAK,OAAO,gBAAgB;AAAA;AAAA,EAEvD,EAAC,SAAS,MAAM,QAAQ,QAAQ,WAAW,KAAK,OAAO,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxE,EAAC,SAAS,MAAM,WAAW,KAAK,OAAO,cAAa;AAAA,EACpD;AAAA,IACE,WAAW;AAAA,IACX,OAAO;AAAA,IACP,aAAa;AAAA,IACb,gBAAgB;AAAA,EAClB;AAAA,EACA,EAAC,WAAW,KAAK,aAAa,qBAAoB;AAAA;AAAA,EAElD,EAAC,SAAS,MAAM,WAAW,IAAG;AAAA;AAAA;AAAA,EAG9B,EAAC,SAAS,MAAM,WAAW,IAAG;AAAA,EAC9B,EAAC,WAAW,KAAK,aAAa,qBAAoB;AAAA;AAAA;AAAA,EAGlD,EAAC,SAAS,MAAM,WAAW,IAAG;AAAA,EAC9B,EAAC,WAAW,KAAK,aAAa,YAAY,gBAAgB,kBAAiB;AAAA,EAC3E,EAAC,WAAW,KAAK,aAAa,CAAC,SAAS,WAAW,EAAC;AAAA;AAAA;AAAA;AAAA,EAIpD,EAAC,WAAW,MAAM,OAAO,YAAY,aAAa,WAAU;AAAA;AAAA,EAE5D,EAAC,WAAW,KAAK,aAAa,CAAC,SAAS,WAAW,EAAC;AAAA;AAAA;AAAA,EAGpD,EAAC,SAAS,MAAM,WAAW,IAAG;AAAA,EAC9B,EAAC,WAAW,KAAK,aAAa,YAAY,gBAAgB,kBAAiB;AAAA;AAAA;AAAA,EAG3E,EAAC,SAAS,MAAM,WAAW,IAAG;AAAA,EAC9B;AAAA,IACE,WAAW;AAAA,IACX,aAAa,CAAC,6BAA6B,2BAA2B;AAAA,EACxE;AAAA,EACA,EAAC,WAAW,KAAK,aAAa,YAAY,gBAAgB,kBAAiB;AAAA;AAAA;AAAA;AAAA,EAI3E,EAAC,SAAS,MAAM,WAAW,IAAG;AAChC;;;ACxHO,SAAS,YAAYC,OAAM;AAChC,MAAIA,MAAK,SAAS,CAACA,MAAK,YAAY;AAClC,WAAOA,MAAK,SAAS;AAAA,EACvB;AAEA,SAAO,aAAaA,MAAK,UAAU;AACrC;;;ACzBO,SAAS,eAAe,SAAS;AACtC,MAAI,CAAC,QAAQ,WAAW;AACtB,UAAM,UACH,QAAQ,UAAU,oBAAoB,OACtC,QAAQ,SAAS,QAAQ,QAAQ,SAAS,MAAM;AAEnD,YAAQ,YAAY,IAAI;AAAA,OACrB,SAAS,MAAM,SAAS,MAAM,OAC5B,sBAAsB,KAAK,QAAQ,SAAS,IAAI,OAAO,MACxD,QAAQ,aACP,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,MAAM;AAAA,MACjD;AAAA,IACF;AAAA,EACF;AAEA,SAAO,QAAQ;AACjB;;;ACFO,SAAS,kBAAkB,QAAQ,OAAO,MAAM;AACrD,QAAM,aAAa,MAAM;AACzB,QAAM,WAAW,OAAO,YAAY,CAAC;AAErC,QAAM,UAAU,CAAC;AACjB,MAAIC,SAAQ;AACZ,MAAI,SAAS,KAAK;AAElB,aAAW,KAAK,EAAE;AAClB,MAAI,UAAU,MAAM,cAAc,IAAI;AAEtC,SAAO,EAAEA,SAAQ,SAAS,QAAQ;AAChC,UAAM,QAAQ,SAASA,MAAK;AAE5B,QAAI;AAEJ,eAAW,WAAW,SAAS,CAAC,IAAIA;AAEpC,QAAIA,SAAQ,IAAI,SAAS,QAAQ;AAG/B,UAAIC,UAAS,MAAM,OAAO,SAAS,SAASD,SAAQ,CAAC,EAAE,IAAI;AAG3D,UAAIC,WAAUA,QAAO,KAAM,CAAAA,UAASA,QAAO;AAC3C,cAAQA,UACJA,QAAO,SAASD,SAAQ,CAAC,GAAG,QAAQ,OAAO;AAAA,QACzC,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,GAAG,QAAQ,QAAQ;AAAA,MACrB,CAAC,EAAE,OAAO,CAAC,IACX;AAAA,IACN,OAAO;AACL,cAAQ,KAAK;AAAA,IACf;AAQA,QACE,QAAQ,SAAS,MAChB,WAAW,QAAQ,WAAW,SAC/B,MAAM,SAAS,QACf;AACA,cAAQ,QAAQ,SAAS,CAAC,IAAI,QAAQ,QAAQ,SAAS,CAAC,EAAE;AAAA,QACxD;AAAA,QACA;AAAA,MACF;AACA,eAAS;AAGT,gBAAU,MAAM,cAAc,IAAI;AAClC,cAAQ,KAAK,QAAQ,KAAK,EAAE,CAAC;AAAA,IAC/B;AAEA,YAAQ;AAAA,MACN,QAAQ;AAAA,QACN,MAAM,OAAO,OAAO,QAAQ,OAAO;AAAA,UACjC,GAAG,QAAQ,QAAQ;AAAA,UACnB;AAAA,UACA;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,aAAS,QAAQ,QAAQ,SAAS,CAAC,EAAE,MAAM,EAAE;AAAA,EAC/C;AAEA,aAAW,IAAI;AAEf,SAAO,QAAQ,KAAK,EAAE;AACxB;;;AC9EO,SAAS,cAAc,QAAQ,OAAO,MAAM;AACjD,QAAM,aAAa,MAAM;AACzB,QAAM,WAAW,OAAO,YAAY,CAAC;AACrC,QAAM,UAAU,MAAM,cAAc,IAAI;AAExC,QAAM,UAAU,CAAC;AACjB,MAAIE,SAAQ;AAEZ,aAAW,KAAK,EAAE;AAElB,SAAO,EAAEA,SAAQ,SAAS,QAAQ;AAChC,UAAM,QAAQ,SAASA,MAAK;AAE5B,eAAW,WAAW,SAAS,CAAC,IAAIA;AAEpC,YAAQ;AAAA,MACN,QAAQ;AAAA,QACN,MAAM,OAAO,OAAO,QAAQ,OAAO;AAAA,UACjC,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,GAAG,QAAQ,QAAQ;AAAA,QACrB,CAAC;AAAA,MACH;AAAA,IACF;AAEA,QAAI,MAAM,SAAS,QAAQ;AACzB,YAAM,iBAAiB;AAAA,IACzB;AAEA,QAAIA,SAAQ,SAAS,SAAS,GAAG;AAC/B,cAAQ;AAAA,QACN,QAAQ,KAAK,QAAQ,OAAO,SAASA,SAAQ,CAAC,GAAG,QAAQ,KAAK,CAAC;AAAA,MACjE;AAAA,IACF;AAAA,EACF;AAEA,aAAW,IAAI;AAEf,SAAO,QAAQ,KAAK,EAAE;AACxB;AASA,SAAS,QAAQ,MAAM,OAAO,QAAQ,OAAO;AAC3C,MAAIA,SAAQ,MAAM,KAAK;AAEvB,SAAOA,UAAS;AACd,UAAM,SAAS,MAAM,KAAKA,MAAK,EAAE,MAAM,OAAO,QAAQ,KAAK;AAE3D,QAAI,WAAW,QAAQ,WAAW,GAAG;AACnC;AAAA,IACF;AAEA,QAAI,OAAO,WAAW,UAAU;AAC9B,aAAO,KAAK,OAAO,IAAI,MAAM;AAAA,IAC/B;AAEA,QAAI,WAAW,OAAO;AACpB,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;;;ACjFA,IAAM,MAAM;AAKL,SAAS,YAAY,OAAOC,MAAK;AAEtC,QAAM,SAAS,CAAC;AAChB,MAAI,QAAQ;AACZ,MAAI,OAAO;AAEX,MAAI;AAEJ,SAAQ,QAAQ,IAAI,KAAK,KAAK,GAAI;AAChC,IAAAC,KAAI,MAAM,MAAM,OAAO,MAAM,KAAK,CAAC;AACnC,WAAO,KAAK,MAAM,CAAC,CAAC;AACpB,YAAQ,MAAM,QAAQ,MAAM,CAAC,EAAE;AAC/B;AAAA,EACF;AAEA,EAAAA,KAAI,MAAM,MAAM,KAAK,CAAC;AAEtB,SAAO,OAAO,KAAK,EAAE;AAKrB,WAASA,KAAIC,QAAO;AAClB,WAAO,KAAKF,KAAIE,QAAO,MAAM,CAACA,MAAK,CAAC;AAAA,EACtC;AACF;;;ACFO,SAAS,KAAK,OAAO,OAAO,QAAQ;AACzC,QAAM,SAAS,OAAO,UAAU,OAAO,SAAS,OAAO,OAAO,SAAS;AAEvE,QAAM,YAAY,CAAC;AAEnB,QAAM,SAAS,CAAC;AAEhB,QAAM,QAAQ,CAAC;AACf,MAAIC,SAAQ;AAEZ,SAAO,EAAEA,SAAQ,MAAM,OAAO,QAAQ;AACpC,UAAM,UAAU,MAAM,OAAOA,MAAK;AAElC,QAAI,CAAC,eAAe,MAAM,OAAO,OAAO,GAAG;AACzC;AAAA,IACF;AAEA,UAAM,aAAa,MAAM,eAAe,OAAO;AAE/C,QAAI;AAEJ,WAAQ,QAAQ,WAAW,KAAK,KAAK,GAAI;AACvC,YAAM,SAAS,YAAY,WAAW,QAAQ,QAAQ,OAAO;AAC7D,YAAM,QAAQ,WAAW;AACzB,YAAMC,YAAW,MAAM,SAAS,SAAS,MAAM,CAAC,EAAE,SAAS;AAE3D,UAAI,UAAU,SAASA,SAAQ,GAAG;AAChC,YAAI,MAAMA,SAAQ,EAAE,UAAU,CAAC,QAAQ;AACrC,gBAAMA,SAAQ,EAAE,SAAS;AAAA,QAC3B;AAEA,YAAI,MAAMA,SAAQ,EAAE,SAAS,CAAC,OAAO;AACnC,gBAAMA,SAAQ,EAAE,QAAQ;AAAA,QAC1B;AAAA,MACF,OAAO;AACL,kBAAU,KAAKA,SAAQ;AACvB,cAAMA,SAAQ,IAAI,EAAC,QAAQ,MAAK;AAAA,MAClC;AAAA,IACF;AAAA,EACF;AAEA,YAAU,KAAK,SAAS;AAExB,MAAI,QAAQ,OAAO,SAAS,OAAO,OAAO,SAAS;AACnD,QAAM,MAAM,MAAM,UAAU,OAAO,QAAQ,OAAO,MAAM,SAAS;AACjE,EAAAD,SAAQ;AAER,SAAO,EAAEA,SAAQ,UAAU,QAAQ;AACjC,UAAMC,YAAW,UAAUD,MAAK;AAGhC,QAAIC,YAAW,SAASA,aAAY,KAAK;AACvC;AAAA,IACF;AAKA,QACGA,YAAW,IAAI,OACd,UAAUD,SAAQ,CAAC,MAAMC,YAAW,KACpC,MAAMA,SAAQ,EAAE,SAChB,CAAC,MAAMA,YAAW,CAAC,EAAE,UACrB,CAAC,MAAMA,YAAW,CAAC,EAAE,SACtB,UAAUD,SAAQ,CAAC,MAAMC,YAAW,KACnC,MAAMA,SAAQ,EAAE,UAChB,CAAC,MAAMA,YAAW,CAAC,EAAE,UACrB,CAAC,MAAMA,YAAW,CAAC,EAAE,OACvB;AACA;AAAA,IACF;AAEA,QAAI,UAAUA,WAAU;AAItB,aAAO,KAAK,kBAAkB,MAAM,MAAM,OAAOA,SAAQ,GAAG,IAAI,CAAC;AAAA,IACnE;AAEA,YAAQA;AAER,QACE,iBAAiB,KAAK,MAAM,OAAOA,SAAQ,CAAC,MAC3C,CAAC,OAAO,UAAU,CAAC,OAAO,OAAO,SAAS,MAAM,OAAOA,SAAQ,CAAC,IACjE;AAEA,aAAO,KAAK,IAAI;AAAA,IAClB,OAAO;AAEL,aAAO;AAAA,QACL,QAAQ,MAAM,WAAWA,SAAQ,EAAE,SAAS,EAAE,EAAE,YAAY,IAAI;AAAA,MAClE;AACA;AAAA,IACF;AAAA,EACF;AAEA,SAAO,KAAK,kBAAkB,MAAM,MAAM,OAAO,GAAG,GAAG,OAAO,KAAK,CAAC;AAEpE,SAAO,OAAO,KAAK,EAAE;AACvB;AAOA,SAAS,UAAUC,IAAGC,IAAG;AACvB,SAAOD,KAAIC;AACb;AAOA,SAAS,kBAAkB,OAAO,OAAO;AACvC,QAAM,aAAa;AAEnB,QAAM,YAAY,CAAC;AAEnB,QAAM,UAAU,CAAC;AACjB,QAAM,QAAQ,QAAQ;AACtB,MAAIH,SAAQ;AACZ,MAAI,QAAQ;AAEZ,MAAI;AAEJ,SAAQ,QAAQ,WAAW,KAAK,KAAK,GAAI;AACvC,cAAU,KAAK,MAAM,KAAK;AAAA,EAC5B;AAEA,SAAO,EAAEA,SAAQ,UAAU,QAAQ;AACjC,QAAI,UAAU,UAAUA,MAAK,GAAG;AAC9B,cAAQ,KAAK,MAAM,MAAM,OAAO,UAAUA,MAAK,CAAC,CAAC;AAAA,IACnD;AAEA,YAAQ,KAAK,IAAI;AACjB,YAAQ,UAAUA,MAAK;AAAA,EACzB;AAEA,UAAQ,KAAK,MAAM,MAAM,KAAK,CAAC;AAE/B,SAAO,QAAQ,KAAK,EAAE;AACxB;;;ACnKO,SAAS,MAAM,QAAQ;AAI5B,QAAM,UAAU,UAAU,CAAC;AAC3B,QAAM,MAAM,QAAQ,OAAO,CAAC;AAC5B,MAAI,YAAY,QAAQ,aAAa;AACrC,MAAI,OAAO,IAAI,QAAQ;AACvB,MAAI,SAAS,IAAI,UAAU;AAE3B,SAAO,EAAC,MAAM,SAAS,MAAK;AAO5B,WAAS,UAAU;AACjB,WAAO,EAAC,KAAK,EAAC,MAAM,OAAM,GAAG,UAAS;AAAA,EACxC;AAOA,WAAS,MAAM,OAAO;AACpB,iBAAa;AAAA,EACf;AAOA,WAAS,KAAK,OAAO;AAEnB,UAAM,QAAQ,SAAS;AACvB,UAAM,SAAS,MAAM,MAAM,WAAW;AACtC,UAAM,OAAO,OAAO,OAAO,SAAS,CAAC;AACrC,YAAQ,OAAO,SAAS;AACxB,aACE,OAAO,WAAW,IAAI,SAAS,KAAK,SAAS,IAAI,KAAK,SAAS;AACjE,WAAO;AAAA,EACT;AACF;;;ACrBO,SAAS,WAAW,MAAM,UAAU,CAAC,GAAG;AAE7C,QAAM,QAAQ;AAAA,IACZ;AAAA,IACA;AAAA,IACA,eAAe;AAAA,IACf,mBAAmB;AAAA,IACnB,eAAe;AAAA,IACf,eAAe;AAAA,IACf;AAAA,IACA,MAAM;AAAA,IACN,OAAO,CAAC;AAAA,IACR,QAAQ,CAAC,GAAG,MAAM;AAAA,IAClB,MAAM,CAAC,GAAG,IAAI;AAAA;AAAA;AAAA,IAGd,UAAU,EAAC,GAAG,OAAQ;AAAA,IACtB,SAAS,CAAC;AAAA,IACV,YAAY,CAAC;AAAA;AAAA,IAEb,QAAQ;AAAA,EACV;AAEA,EAAAI,WAAU,OAAO,OAAO;AAExB,MAAI,MAAM,QAAQ,kBAAkB;AAClC,UAAM,KAAK,KAAK,cAAc;AAAA,EAChC;AAEA,QAAM,SAAS,OAAO,QAAQ;AAAA,IAC5B;AAAA,IACA;AAAA,IACA,UAAU,MAAM;AAAA,EAClB,CAAC;AAED,MAAI,SAAS,MAAM,OAAO,MAAM,QAAW,OAAO;AAAA,IAChD,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,KAAK,EAAC,MAAM,GAAG,QAAQ,EAAC;AAAA,IACxB,WAAW;AAAA,EACb,CAAC;AAED,MACE,UACA,OAAO,WAAW,OAAO,SAAS,CAAC,MAAM,MACzC,OAAO,WAAW,OAAO,SAAS,CAAC,MAAM,IACzC;AACA,cAAU;AAAA,EACZ;AAEA,SAAO;AAGP,WAAS,MAAM,MAAM;AACnB,UAAM,MAAM,KAAK,IAAI;AACrB,WAAOC;AAKP,aAASA,QAAO;AACd,YAAM,MAAM,IAAI;AAAA,IAClB;AAAA,EACF;AACF;AAMA,SAAS,QAAQ,OAAO;AACtB,QAAM,IAAI,MAAM,0BAA0B,QAAQ,kBAAkB;AACtE;AAMA,SAAS,QAAQ,OAAO;AAEtB,QAAMC;AAAA;AAAA,IAA6B;AAAA;AACnC,QAAM,IAAI,MAAM,iCAAiCA,MAAK,OAAO,GAAG;AAClE;AAGA,SAAS,eAAe,MAAM,OAAO;AAEnC,MAAI,KAAK,SAAS,gBAAgB,KAAK,SAAS,MAAM,MAAM;AAC1D,WAAO;AAAA,EACT;AACF;AAgBA,SAAS,uBAAuB,QAAQ,MAAM;AAC5C,SAAO,kBAAkB,QAAQ,MAAM,IAAI;AAC7C;AAiBA,SAAS,mBAAmB,QAAQ,MAAM;AACxC,SAAO,cAAc,QAAQ,MAAM,IAAI;AACzC;AA2BA,SAAS,UAAU,OAAO,QAAQ;AAChC,SAAO,KAAK,MAAM,OAAO,MAAM;AACjC;;;AC3Ke,SAAR,gBAAiC,SAAS;AAG/C,QAAM,OAAO;AAEb,OAAK,WAAWC;AAKhB,WAASA,UAAS,MAAM;AACtB,WAAO,WAAW,MAAM;AAAA,MACtB,GAAG,KAAK,KAAK,UAAU;AAAA,MACvB,GAAG;AAAA;AAAA;AAAA;AAAA,MAIH,YAAY,KAAK,KAAK,sBAAsB,KAAK,CAAC;AAAA,IACpD,CAAC;AAAA,EACH;AACF;;;AClCO,SAAS,KAAK,OAAO;AAC1B,MAAI,OAAO;AACT,UAAM;AAAA,EACR;AACF;;;ACkVA,oBAAmB;;;AC7VJ,SAAR,cAA+B,OAAO;AAC5C,MAAI,OAAO,UAAU,YAAY,UAAU,MAAM;AAChD,WAAO;AAAA,EACR;AAEA,QAAM,YAAY,OAAO,eAAe,KAAK;AAC7C,UAAQ,cAAc,QAAQ,cAAc,OAAO,aAAa,OAAO,eAAe,SAAS,MAAM,SAAS,EAAE,OAAO,eAAe,UAAU,EAAE,OAAO,YAAY;AACtK;;;AC+BO,SAAS,SAAS;AAEvB,QAAM,MAAM,CAAC;AAEb,QAAM,WAAW,EAAC,KAAAC,MAAK,IAAG;AAE1B,SAAO;AAGP,WAASA,QAAOC,SAAQ;AACtB,QAAI,kBAAkB;AAEtB,UAAM,WAAWA,QAAO,IAAI;AAE5B,QAAI,OAAO,aAAa,YAAY;AAClC,YAAM,IAAI,UAAU,6CAA6C,QAAQ;AAAA,IAC3E;AAEA,SAAK,MAAM,GAAGA,OAAM;AAQpB,aAAS,KAAK,UAAU,QAAQ;AAC9B,YAAM,KAAK,IAAI,EAAE,eAAe;AAChC,UAAIC,SAAQ;AAEZ,UAAI,OAAO;AACT,iBAAS,KAAK;AACd;AAAA,MACF;AAGA,aAAO,EAAEA,SAAQD,QAAO,QAAQ;AAC9B,YAAI,OAAOC,MAAK,MAAM,QAAQ,OAAOA,MAAK,MAAM,QAAW;AACzD,iBAAOA,MAAK,IAAID,QAAOC,MAAK;AAAA,QAC9B;AAAA,MACF;AAGA,MAAAD,UAAS;AAGT,UAAI,IAAI;AACN,aAAK,IAAI,IAAI,EAAE,GAAG,MAAM;AAAA,MAC1B,OAAO;AACL,iBAAS,MAAM,GAAG,MAAM;AAAA,MAC1B;AAAA,IACF;AAAA,EACF;AAGA,WAAS,IAAI,YAAY;AACvB,QAAI,OAAO,eAAe,YAAY;AACpC,YAAM,IAAI;AAAA,QACR,iDAAiD;AAAA,MACnD;AAAA,IACF;AAEA,QAAI,KAAK,UAAU;AACnB,WAAO;AAAA,EACT;AACF;AAkCO,SAAS,KAAK,YAAY,UAAU;AAEzC,MAAI;AAEJ,SAAO;AAQP,WAAS,WAAW,YAAY;AAC9B,UAAM,oBAAoB,WAAW,SAAS,WAAW;AAEzD,QAAI;AAEJ,QAAI,mBAAmB;AACrB,iBAAW,KAAK,IAAI;AAAA,IACtB;AAEA,QAAI;AACF,eAAS,WAAW,MAAM,MAAM,UAAU;AAAA,IAC5C,SAAS,OAAO;AACd,YAAM;AAAA;AAAA,QAAkC;AAAA;AAMxC,UAAI,qBAAqB,QAAQ;AAC/B,cAAM;AAAA,MACR;AAEA,aAAO,KAAK,SAAS;AAAA,IACvB;AAEA,QAAI,CAAC,mBAAmB;AACtB,UAAI,UAAU,OAAO,QAAQ,OAAO,OAAO,SAAS,YAAY;AAC9D,eAAO,KAAK,MAAM,IAAI;AAAA,MACxB,WAAW,kBAAkB,OAAO;AAClC,aAAK,MAAM;AAAA,MACb,OAAO;AACL,aAAK,MAAM;AAAA,MACb;AAAA,IACF;AAAA,EACF;AAOA,WAAS,KAAK,UAAU,QAAQ;AAC9B,QAAI,CAAC,QAAQ;AACX,eAAS;AACT,eAAS,OAAO,GAAG,MAAM;AAAA,IAC3B;AAAA,EACF;AAOA,WAAS,KAAK,OAAO;AACnB,SAAK,MAAM,KAAK;AAAA,EAClB;AACF;;;ACjLO,IAAM,eAAN,cAA2B,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwDtC,YAAY,eAAe,wBAAwB,QAAQ;AACzD,UAAM;AAEN,QAAI,OAAO,2BAA2B,UAAU;AAC9C,eAAS;AACT,+BAAyB;AAAA,IAC3B;AAGA,QAAI,SAAS;AAEb,QAAI,UAAU,CAAC;AACf,QAAI,cAAc;AAElB,QAAI,wBAAwB;AAE1B,UACE,UAAU,0BACV,YAAY,wBACZ;AACA,kBAAU,EAAC,OAAO,uBAAsB;AAAA,MAC1C,WAGE,WAAW,0BACX,SAAS,wBACT;AACA,kBAAU,EAAC,OAAO,uBAAsB;AAAA,MAC1C,WAES,UAAU,wBAAwB;AACzC,kBAAU;AAAA,UACR,WAAW,CAAC,sBAAsB;AAAA,UAClC,OAAO,uBAAuB;AAAA,QAChC;AAAA,MACF,OAEK;AACH,kBAAU,EAAC,GAAG,uBAAsB;AAAA,MACtC;AAAA,IACF;AAEA,QAAI,OAAO,kBAAkB,UAAU;AACrC,eAAS;AAAA,IACX,WAES,CAAC,QAAQ,SAAS,eAAe;AACxC,oBAAc;AACd,eAAS,cAAc;AACvB,cAAQ,QAAQ;AAAA,IAClB;AAEA,QAAI,CAAC,QAAQ,UAAU,CAAC,QAAQ,UAAU,OAAO,WAAW,UAAU;AACpE,YAAME,SAAQ,OAAO,QAAQ,GAAG;AAEhC,UAAIA,WAAU,IAAI;AAChB,gBAAQ,SAAS;AAAA,MACnB,OAAO;AACL,gBAAQ,SAAS,OAAO,MAAM,GAAGA,MAAK;AACtC,gBAAQ,SAAS,OAAO,MAAMA,SAAQ,CAAC;AAAA,MACzC;AAAA,IACF;AAEA,QAAI,CAAC,QAAQ,SAAS,QAAQ,aAAa,QAAQ,WAAW;AAC5D,YAAM,SAAS,QAAQ,UAAU,QAAQ,UAAU,SAAS,CAAC;AAE7D,UAAI,QAAQ;AACV,gBAAQ,QAAQ,OAAO;AAAA,MACzB;AAAA,IACF;AAEA,UAAM,QACJ,QAAQ,SAAS,WAAW,QAAQ,QAChC,QAAQ,MAAM,QACd,QAAQ;AAQd,SAAK,YAAY,QAAQ,aAAa;AAOtC,SAAK,QAAQ,QAAQ,SAAS;AAO9B,SAAK,SAAS,QAAQ,MAAM,SAAS;AAWrC,SAAK,QAAQ;AAOb,SAAK;AAQL,SAAK,UAAU;AAOf,SAAK,OAAO,QAAQ,MAAM,OAAO;AASjC,SAAK,OAAO,kBAAkB,QAAQ,KAAK,KAAK;AAOhD,SAAK,QAAQ,QAAQ,SAAS;AAO9B,SAAK,SAAS,KAAK;AAOnB,SAAK,SAAS,QAAQ,UAAU;AAOhC,SAAK,SAAS,QAAQ,UAAU;AAWhC,SAAK,QACH,eAAe,QAAQ,SAAS,OAAO,QAAQ,MAAM,UAAU,WAC3D,QAAQ,MAAM,QACd;AAYN,SAAK;AAOL,SAAK;AAOL,SAAK;AAUL,SAAK;AAAA,EAEP;AACF;AAEA,aAAa,UAAU,OAAO;AAC9B,aAAa,UAAU,OAAO;AAC9B,aAAa,UAAU,SAAS;AAChC,aAAa,UAAU,UAAU;AACjC,aAAa,UAAU,QAAQ;AAC/B,aAAa,UAAU,SAAS;AAChC,aAAa,UAAU,OAAO;AAC9B,aAAa,UAAU,YAAY;AACnC,aAAa,UAAU,QAAQ;AAC/B,aAAa,UAAU,QAAQ;AAC/B,aAAa,UAAU,QAAQ;AAC/B,aAAa,UAAU,SAAS;AAChC,aAAa,UAAU,SAAS;;;AC1QzB,IAAM,UAAU,EAAC,UAAU,SAAS,SAAS,MAAAC,OAAM,KAAK,IAAG;AAclE,SAAS,SAAS,MAAMC,UAAS;AAC/B,MAAIA,aAAY,UAAa,OAAOA,aAAY,UAAU;AACxD,UAAM,IAAI,UAAU,iCAAiC;AAAA,EACvD;AAEA,aAAW,IAAI;AACf,MAAI,QAAQ;AACZ,MAAI,MAAM;AACV,MAAIC,SAAQ,KAAK;AAEjB,MAAI;AAEJ,MACED,aAAY,UACZA,SAAQ,WAAW,KACnBA,SAAQ,SAAS,KAAK,QACtB;AACA,WAAOC,UAAS;AACd,UAAI,KAAK,YAAYA,MAAK,MAAM,IAAc;AAG5C,YAAI,cAAc;AAChB,kBAAQA,SAAQ;AAChB;AAAA,QACF;AAAA,MACF,WAAW,MAAM,GAAG;AAGlB,uBAAe;AACf,cAAMA,SAAQ;AAAA,MAChB;AAAA,IACF;AAEA,WAAO,MAAM,IAAI,KAAK,KAAK,MAAM,OAAO,GAAG;AAAA,EAC7C;AAEA,MAAID,aAAY,MAAM;AACpB,WAAO;AAAA,EACT;AAEA,MAAI,mBAAmB;AACvB,MAAI,eAAeA,SAAQ,SAAS;AAEpC,SAAOC,UAAS;AACd,QAAI,KAAK,YAAYA,MAAK,MAAM,IAAc;AAG5C,UAAI,cAAc;AAChB,gBAAQA,SAAQ;AAChB;AAAA,MACF;AAAA,IACF,OAAO;AACL,UAAI,mBAAmB,GAAG;AAGxB,uBAAe;AACf,2BAAmBA,SAAQ;AAAA,MAC7B;AAEA,UAAI,eAAe,IAAI;AAErB,YAAI,KAAK,YAAYA,MAAK,MAAMD,SAAQ,YAAY,cAAc,GAAG;AACnE,cAAI,eAAe,GAAG;AAGpB,kBAAMC;AAAA,UACR;AAAA,QACF,OAAO;AAGL,yBAAe;AACf,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,MAAI,UAAU,KAAK;AACjB,UAAM;AAAA,EACR,WAAW,MAAM,GAAG;AAClB,UAAM,KAAK;AAAA,EACb;AAEA,SAAO,KAAK,MAAM,OAAO,GAAG;AAC9B;AAUA,SAAS,QAAQ,MAAM;AACrB,aAAW,IAAI;AAEf,MAAI,KAAK,WAAW,GAAG;AACrB,WAAO;AAAA,EACT;AAEA,MAAI,MAAM;AACV,MAAIA,SAAQ,KAAK;AAEjB,MAAI;AAGJ,SAAO,EAAEA,QAAO;AACd,QAAI,KAAK,YAAYA,MAAK,MAAM,IAAc;AAC5C,UAAI,gBAAgB;AAClB,cAAMA;AACN;AAAA,MACF;AAAA,IACF,WAAW,CAAC,gBAAgB;AAE1B,uBAAiB;AAAA,IACnB;AAAA,EACF;AAEA,SAAO,MAAM,IACT,KAAK,YAAY,CAAC,MAAM,KACtB,MACA,MACF,QAAQ,KAAK,KAAK,YAAY,CAAC,MAAM,KACnC,OACA,KAAK,MAAM,GAAG,GAAG;AACzB;AAUA,SAAS,QAAQ,MAAM;AACrB,aAAW,IAAI;AAEf,MAAIA,SAAQ,KAAK;AAEjB,MAAI,MAAM;AACV,MAAI,YAAY;AAChB,MAAI,WAAW;AAGf,MAAI,cAAc;AAElB,MAAI;AAEJ,SAAOA,UAAS;AACd,UAAMC,QAAO,KAAK,YAAYD,MAAK;AAEnC,QAAIC,UAAS,IAAc;AAGzB,UAAI,gBAAgB;AAClB,oBAAYD,SAAQ;AACpB;AAAA,MACF;AAEA;AAAA,IACF;AAEA,QAAI,MAAM,GAAG;AAGX,uBAAiB;AACjB,YAAMA,SAAQ;AAAA,IAChB;AAEA,QAAIC,UAAS,IAAc;AAEzB,UAAI,WAAW,GAAG;AAChB,mBAAWD;AAAA,MACb,WAAW,gBAAgB,GAAG;AAC5B,sBAAc;AAAA,MAChB;AAAA,IACF,WAAW,WAAW,IAAI;AAGxB,oBAAc;AAAA,IAChB;AAAA,EACF;AAEA,MACE,WAAW,KACX,MAAM;AAAA,EAEN,gBAAgB;AAAA,EAEf,gBAAgB,KAAK,aAAa,MAAM,KAAK,aAAa,YAAY,GACvE;AACA,WAAO;AAAA,EACT;AAEA,SAAO,KAAK,MAAM,UAAU,GAAG;AACjC;AAUA,SAASF,SAAQ,UAAU;AACzB,MAAIE,SAAQ;AAEZ,MAAI;AAEJ,SAAO,EAAEA,SAAQ,SAAS,QAAQ;AAChC,eAAW,SAASA,MAAK,CAAC;AAE1B,QAAI,SAASA,MAAK,GAAG;AACnB,eACE,WAAW,SAAY,SAASA,MAAK,IAAI,SAAS,MAAM,SAASA,MAAK;AAAA,IAC1E;AAAA,EACF;AAEA,SAAO,WAAW,SAAY,MAAM,UAAU,MAAM;AACtD;AAYA,SAAS,UAAU,MAAM;AACvB,aAAW,IAAI;AAEf,QAAM,WAAW,KAAK,YAAY,CAAC,MAAM;AAGzC,MAAI,QAAQ,gBAAgB,MAAM,CAAC,QAAQ;AAE3C,MAAI,MAAM,WAAW,KAAK,CAAC,UAAU;AACnC,YAAQ;AAAA,EACV;AAEA,MAAI,MAAM,SAAS,KAAK,KAAK,YAAY,KAAK,SAAS,CAAC,MAAM,IAAY;AACxE,aAAS;AAAA,EACX;AAEA,SAAO,WAAW,MAAM,QAAQ;AAClC;AAYA,SAAS,gBAAgB,MAAM,gBAAgB;AAC7C,MAAI,SAAS;AACb,MAAI,oBAAoB;AACxB,MAAI,YAAY;AAChB,MAAI,OAAO;AACX,MAAIA,SAAQ;AAEZ,MAAIC;AAEJ,MAAI;AAEJ,SAAO,EAAED,UAAS,KAAK,QAAQ;AAC7B,QAAIA,SAAQ,KAAK,QAAQ;AACvB,MAAAC,QAAO,KAAK,YAAYD,MAAK;AAAA,IAC/B,WAAWC,UAAS,IAAc;AAChC;AAAA,IACF,OAAO;AACL,MAAAA,QAAO;AAAA,IACT;AAEA,QAAIA,UAAS,IAAc;AACzB,UAAI,cAAcD,SAAQ,KAAK,SAAS,GAAG;AAAA,MAE3C,WAAW,cAAcA,SAAQ,KAAK,SAAS,GAAG;AAChD,YACE,OAAO,SAAS,KAChB,sBAAsB,KACtB,OAAO,YAAY,OAAO,SAAS,CAAC,MAAM,MAC1C,OAAO,YAAY,OAAO,SAAS,CAAC,MAAM,IAC1C;AACA,cAAI,OAAO,SAAS,GAAG;AACrB,6BAAiB,OAAO,YAAY,GAAG;AAEvC,gBAAI,mBAAmB,OAAO,SAAS,GAAG;AACxC,kBAAI,iBAAiB,GAAG;AACtB,yBAAS;AACT,oCAAoB;AAAA,cACtB,OAAO;AACL,yBAAS,OAAO,MAAM,GAAG,cAAc;AACvC,oCAAoB,OAAO,SAAS,IAAI,OAAO,YAAY,GAAG;AAAA,cAChE;AAEA,0BAAYA;AACZ,qBAAO;AACP;AAAA,YACF;AAAA,UACF,WAAW,OAAO,SAAS,GAAG;AAC5B,qBAAS;AACT,gCAAoB;AACpB,wBAAYA;AACZ,mBAAO;AACP;AAAA,UACF;AAAA,QACF;AAEA,YAAI,gBAAgB;AAClB,mBAAS,OAAO,SAAS,IAAI,SAAS,QAAQ;AAC9C,8BAAoB;AAAA,QACtB;AAAA,MACF,OAAO;AACL,YAAI,OAAO,SAAS,GAAG;AACrB,oBAAU,MAAM,KAAK,MAAM,YAAY,GAAGA,MAAK;AAAA,QACjD,OAAO;AACL,mBAAS,KAAK,MAAM,YAAY,GAAGA,MAAK;AAAA,QAC1C;AAEA,4BAAoBA,SAAQ,YAAY;AAAA,MAC1C;AAEA,kBAAYA;AACZ,aAAO;AAAA,IACT,WAAWC,UAAS,MAAgB,OAAO,IAAI;AAC7C;AAAA,IACF,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;AAUA,SAAS,WAAW,MAAM;AACxB,MAAI,OAAO,SAAS,UAAU;AAC5B,UAAM,IAAI;AAAA,MACR,qCAAqC,KAAK,UAAU,IAAI;AAAA,IAC1D;AAAA,EACF;AACF;;;ACpaO,IAAM,UAAU,EAAC,IAAG;AAE3B,SAAS,MAAM;AACb,SAAO;AACT;;;ACYO,SAAS,MAAM,eAAe;AACnC,SAAO;AAAA,IACL,kBAAkB,QAChB,OAAO,kBAAkB,YACzB,UAAU,iBACV,cAAc,QACd,cAAc,iBACd,cAAc;AAAA,IAEd,cAAc,SAAS;AAAA,EAC3B;AACF;;;AClBO,SAAS,UAAU,MAAM;AAC9B,MAAI,OAAO,SAAS,UAAU;AAC5B,WAAO,IAAI,IAAI,IAAI;AAAA,EACrB,WAAW,CAAC,MAAM,IAAI,GAAG;AAEvB,UAAM,QAAQ,IAAI;AAAA,MAChB,iFACE,OACA;AAAA,IACJ;AACA,UAAM,OAAO;AACb,UAAM;AAAA,EACR;AAEA,MAAI,KAAK,aAAa,SAAS;AAE7B,UAAM,QAAQ,IAAI,UAAU,gCAAgC;AAC5D,UAAM,OAAO;AACb,UAAM;AAAA,EACR;AAEA,SAAO,oBAAoB,IAAI;AACjC;AAUA,SAAS,oBAAoB,KAAK;AAChC,MAAI,IAAI,aAAa,IAAI;AAEvB,UAAM,QAAQ,IAAI;AAAA,MAChB;AAAA,IACF;AACA,UAAM,OAAO;AACb,UAAM;AAAA,EACR;AAEA,QAAM,WAAW,IAAI;AACrB,MAAIC,SAAQ;AAEZ,SAAO,EAAEA,SAAQ,SAAS,QAAQ;AAChC,QACE,SAAS,YAAYA,MAAK,MAAM,MAChC,SAAS,YAAYA,SAAQ,CAAC,MAAM,IACpC;AACA,YAAM,QAAQ,SAAS,YAAYA,SAAQ,CAAC;AAC5C,UAAI,UAAU,MAAgB,UAAU,KAAe;AAErD,cAAM,QAAQ,IAAI;AAAA,UAChB;AAAA,QACF;AACA,cAAM,OAAO;AACb,cAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,SAAO,mBAAmB,QAAQ;AACpC;;;ACvDA,IAAM;AAAA;AAAA,EAA8B;AAAA,IAClC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA;AAEO,IAAM,QAAN,MAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBjB,YAAY,OAAO;AAEjB,QAAI;AAEJ,QAAI,CAAC,OAAO;AACV,gBAAU,CAAC;AAAA,IACb,WAAW,MAAM,KAAK,GAAG;AACvB,gBAAU,EAAC,MAAM,MAAK;AAAA,IACxB,WAAW,OAAO,UAAU,YAAY,aAAa,KAAK,GAAG;AAC3D,gBAAU,EAAC,MAAK;AAAA,IAClB,OAAO;AACL,gBAAU;AAAA,IACZ;AAWA,SAAK,MAAM,SAAS,UAAU,KAAK,QAAQ,IAAI;AAU/C,SAAK,OAAO,CAAC;AASb,SAAK,UAAU,CAAC;AAOhB,SAAK,WAAW,CAAC;AAOjB,SAAK;AAYL,SAAK;AAUL,SAAK;AASL,SAAK;AAIL,QAAIC,SAAQ;AAEZ,WAAO,EAAEA,SAAQ,MAAM,QAAQ;AAC7B,YAAMC,SAAQ,MAAMD,MAAK;AAIzB,UACEC,UAAS,WACT,QAAQA,MAAK,MAAM,UACnB,QAAQA,MAAK,MAAM,MACnB;AAEA,aAAKA,MAAK,IAAIA,WAAU,YAAY,CAAC,GAAG,QAAQA,MAAK,CAAC,IAAI,QAAQA,MAAK;AAAA,MACzE;AAAA,IACF;AAGA,QAAI;AAGJ,SAAK,SAAS,SAAS;AAErB,UAAI,CAAC,MAAM,SAAS,KAAK,GAAG;AAE1B,aAAK,KAAK,IAAI,QAAQ,KAAK;AAAA,MAC7B;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,WAAW;AACb,WAAO,OAAO,KAAK,SAAS,WACxB,QAAQ,SAAS,KAAK,IAAI,IAC1B;AAAA,EACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,IAAI,SAASC,WAAU;AACrB,mBAAeA,WAAU,UAAU;AACnC,eAAWA,WAAU,UAAU;AAC/B,SAAK,OAAO,QAAQ,KAAK,KAAK,WAAW,IAAIA,SAAQ;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,UAAU;AACZ,WAAO,OAAO,KAAK,SAAS,WACxB,QAAQ,QAAQ,KAAK,IAAI,IACzB;AAAA,EACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,IAAI,QAAQC,UAAS;AACnB,IAAAC,YAAW,KAAK,UAAU,SAAS;AACnC,SAAK,OAAO,QAAQ,KAAKD,YAAW,IAAI,KAAK,QAAQ;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,UAAU;AACZ,WAAO,OAAO,KAAK,SAAS,WACxB,QAAQ,QAAQ,KAAK,IAAI,IACzB;AAAA,EACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,IAAI,QAAQE,UAAS;AACnB,eAAWA,UAAS,SAAS;AAC7B,IAAAD,YAAW,KAAK,SAAS,SAAS;AAElC,QAAIC,UAAS;AACX,UAAIA,SAAQ,YAAY,CAAC,MAAM,IAAc;AAC3C,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACjD;AAEA,UAAIA,SAAQ,SAAS,KAAK,CAAC,GAAG;AAC5B,cAAM,IAAI,MAAM,wCAAwC;AAAA,MAC1D;AAAA,IACF;AAEA,SAAK,OAAO,QAAQ,KAAK,KAAK,SAAS,KAAK,QAAQA,YAAW,GAAG;AAAA,EACpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,OAAO;AACT,WAAO,KAAK,QAAQ,KAAK,QAAQ,SAAS,CAAC;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,IAAI,KAAK,MAAM;AACb,QAAI,MAAM,IAAI,GAAG;AACf,aAAO,UAAU,IAAI;AAAA,IACvB;AAEA,mBAAe,MAAM,MAAM;AAE3B,QAAI,KAAK,SAAS,MAAM;AACtB,WAAK,QAAQ,KAAK,IAAI;AAAA,IACxB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,OAAO;AACT,WAAO,OAAO,KAAK,SAAS,WACxB,QAAQ,SAAS,KAAK,MAAM,KAAK,OAAO,IACxC;AAAA,EACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,IAAI,KAAK,MAAM;AACb,mBAAe,MAAM,MAAM;AAC3B,eAAW,MAAM,MAAM;AACvB,SAAK,OAAO,QAAQ,KAAK,KAAK,WAAW,IAAI,QAAQ,KAAK,WAAW,GAAG;AAAA,EAC1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+DA,KAAK,eAAe,wBAAwB,QAAQ;AAElD,UAAM,UAAU,KAAK,QAAQ,eAAe,wBAAwB,MAAM;AAE1E,YAAQ,QAAQ;AAEhB,UAAM;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4DA,KAAK,eAAe,wBAAwB,QAAQ;AAElD,UAAM,UAAU,KAAK,QAAQ,eAAe,wBAAwB,MAAM;AAE1E,YAAQ,QAAQ;AAEhB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4DA,QAAQ,eAAe,wBAAwB,QAAQ;AACrD,UAAM,UAAU,IAAI;AAAA;AAAA,MAElB;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,QAAI,KAAK,MAAM;AACb,cAAQ,OAAO,KAAK,OAAO,MAAM,QAAQ;AACzC,cAAQ,OAAO,KAAK;AAAA,IACtB;AAEA,YAAQ,QAAQ;AAEhB,SAAK,SAAS,KAAK,OAAO;AAE1B,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,SAAS,UAAU;AACjB,QAAI,KAAK,UAAU,QAAW;AAC5B,aAAO;AAAA,IACT;AAEA,QAAI,OAAO,KAAK,UAAU,UAAU;AAClC,aAAO,KAAK;AAAA,IACd;AAEA,UAAM,UAAU,IAAI,YAAY,YAAY,MAAS;AACrD,WAAO,QAAQ,OAAO,KAAK,KAAK;AAAA,EAClC;AACF;AAYA,SAAS,WAAW,MAAM,MAAM;AAC9B,MAAI,QAAQ,KAAK,SAAS,QAAQ,GAAG,GAAG;AACtC,UAAM,IAAI;AAAA,MACR,MAAM,OAAO,yCAAyC,QAAQ,MAAM;AAAA,IACtE;AAAA,EACF;AACF;AAYA,SAAS,eAAe,MAAM,MAAM;AAClC,MAAI,CAAC,MAAM;AACT,UAAM,IAAI,MAAM,MAAM,OAAO,mBAAmB;AAAA,EAClD;AACF;AAYA,SAASD,YAAW,MAAM,MAAM;AAC9B,MAAI,CAAC,MAAM;AACT,UAAM,IAAI,MAAM,cAAc,OAAO,iCAAiC;AAAA,EACxE;AACF;AAUA,SAAS,aAAa,OAAO;AAC3B,SAAO;AAAA,IACL,SACE,OAAO,UAAU,YACjB,gBAAgB,SAChB,gBAAgB;AAAA,EACpB;AACF;;;ACloBO,IAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYP,SAAU,UAAU;AAClB,UAAM,OAAO;AACb,UAAM,SAAS,KAAK;AACpB,UAAM;AAAA;AAAA;AAAA;AAAA,MAGJ,OAAO;AAAA;AAET,UAAM,QAAQ,MAAM,QAAQ;AAE5B,UAAM,QAAQ,WAAY;AACxB,aAAO,MAAM,MAAM,OAAO,SAAS;AAAA,IACrC;AAEA,WAAO,eAAe,OAAO,KAAK;AAclC,WAAO;AAAA,EACT;AAAA;;;ATiUN,IAAME,OAAM,CAAC,EAAE;AAeR,IAAM,YAAN,MAAM,mBAAkB,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAI9C,cAAc;AAEZ,UAAM,MAAM;AAeZ,SAAK,WAAW;AAYhB,SAAK,SAAS;AAad,SAAK,YAAY,CAAC;AAalB,SAAK,WAAW;AAShB,SAAK,cAAc;AASnB,SAAK,SAAS;AASd,SAAK,YAAY,CAAC;AAUlB,SAAK,SAAS;AASd,SAAK,eAAe,OAAO;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OAAO;AAEL,UAAM;AAAA;AAAA,MAEF,IAAI,WAAU;AAAA;AAElB,QAAIC,SAAQ;AAEZ,WAAO,EAAEA,SAAQ,KAAK,UAAU,QAAQ;AACtC,YAAM,WAAW,KAAK,UAAUA,MAAK;AACrC,kBAAY,IAAI,GAAG,QAAQ;AAAA,IAC7B;AAEA,gBAAY,SAAK,cAAAC,SAAO,MAAM,CAAC,GAAG,KAAK,SAAS,CAAC;AAEjD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6DA,KAAK,KAAK,OAAO;AACf,QAAI,OAAO,QAAQ,UAAU;AAE3B,UAAI,UAAU,WAAW,GAAG;AAC1B,uBAAe,QAAQ,KAAK,MAAM;AAClC,aAAK,UAAU,GAAG,IAAI;AACtB,eAAO;AAAA,MACT;AAGA,aAAQF,KAAI,KAAK,KAAK,WAAW,GAAG,KAAK,KAAK,UAAU,GAAG,KAAM;AAAA,IACnE;AAGA,QAAI,KAAK;AACP,qBAAe,QAAQ,KAAK,MAAM;AAClC,WAAK,YAAY;AACjB,aAAO;AAAA,IACT;AAGA,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,SAAS;AACP,QAAI,KAAK,QAAQ;AACf,aAAO;AAAA,IACT;AAKA,UAAM;AAAA;AAAA;AAAA,MAAyD;AAAA;AAE/D,WAAO,EAAE,KAAK,cAAc,KAAK,UAAU,QAAQ;AACjD,YAAM,CAAC,UAAU,GAAG,OAAO,IAAI,KAAK,UAAU,KAAK,WAAW;AAE9D,UAAI,QAAQ,CAAC,MAAM,OAAO;AACxB;AAAA,MACF;AAEA,UAAI,QAAQ,CAAC,MAAM,MAAM;AACvB,gBAAQ,CAAC,IAAI;AAAA,MACf;AAEA,YAAM,cAAc,SAAS,KAAK,MAAM,GAAG,OAAO;AAElD,UAAI,OAAO,gBAAgB,YAAY;AACrC,aAAK,aAAa,IAAI,WAAW;AAAA,MACnC;AAAA,IACF;AAEA,SAAK,SAAS;AACd,SAAK,cAAc,OAAO;AAE1B,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,MAAM,MAAM;AACV,SAAK,OAAO;AACZ,UAAM,WAAW,MAAM,IAAI;AAC3B,UAAM,SAAS,KAAK,UAAU,KAAK;AACnC,iBAAa,SAAS,MAAM;AAC5B,WAAO,OAAO,OAAO,QAAQ,GAAG,QAAQ;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4CA,QAAQ,MAAM,MAAM;AAClB,UAAM,OAAO;AAEb,SAAK,OAAO;AACZ,iBAAa,WAAW,KAAK,UAAU,KAAK,MAAM;AAClD,mBAAe,WAAW,KAAK,YAAY,KAAK,QAAQ;AAExD,WAAO,OAAO,SAAS,QAAW,IAAI,IAAI,IAAI,QAAQ,QAAQ;AAQ9D,aAAS,SAAS,SAAS,QAAQ;AACjC,YAAM,WAAW,MAAM,IAAI;AAG3B,YAAM;AAAA;AAAA;AAAA,QAEsB,KAAK,MAAM,QAAQ;AAAA;AAG/C,WAAK,IAAI,WAAW,UAAU,SAAU,OAAO,MAAMG,OAAM;AACzD,YAAI,SAAS,CAAC,QAAQ,CAACA,OAAM;AAC3B,iBAAO,SAAS,KAAK;AAAA,QACvB;AAIA,cAAM;AAAA;AAAA;AAAA,UAEsB;AAAA;AAG5B,cAAM,gBAAgB,KAAK,UAAU,aAAaA,KAAI;AAEtD,YAAI,gBAAgB,aAAa,GAAG;AAClC,UAAAA,MAAK,QAAQ;AAAA,QACf,OAAO;AACL,UAAAA,MAAK,SAAS;AAAA,QAChB;AAEA;AAAA,UAAS;AAAA;AAAA,UAAsDA;AAAA,QAAK;AAAA,MACtE,CAAC;AAOD,eAAS,SAAS,OAAOA,OAAM;AAC7B,YAAI,SAAS,CAACA,OAAM;AAClB,iBAAO,KAAK;AAAA,QACd,WAAW,SAAS;AAClB,kBAAQA,KAAI;AAAA,QACd,OAAO;AACL,aAAO,MAAM,uCAAuC;AACpD,eAAK,QAAWA,KAAI;AAAA,QACtB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiCA,YAAY,MAAM;AAEhB,QAAI,WAAW;AAEf,QAAI;AAEJ,SAAK,OAAO;AACZ,iBAAa,eAAe,KAAK,UAAU,KAAK,MAAM;AACtD,mBAAe,eAAe,KAAK,YAAY,KAAK,QAAQ;AAE5D,SAAK,QAAQ,MAAM,QAAQ;AAC3B,eAAW,eAAe,WAAW,QAAQ;AAC7C,OAAO,QAAQ,6CAA6C;AAE5D,WAAO;AAKP,aAAS,SAAS,OAAOA,OAAM;AAC7B,iBAAW;AACX,WAAK,KAAK;AACV,eAASA;AAAA,IACX;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwCA,IAAI,MAAM,MAAM,MAAM;AACpB,eAAW,IAAI;AACf,SAAK,OAAO;AAEZ,UAAM,eAAe,KAAK;AAE1B,QAAI,CAAC,QAAQ,OAAO,SAAS,YAAY;AACvC,aAAO;AACP,aAAO;AAAA,IACT;AAEA,WAAO,OAAO,SAAS,QAAW,IAAI,IAAI,IAAI,QAAQ,QAAQ;AAW9D,aAAS,SAAS,SAAS,QAAQ;AACjC;AAAA,QACE,OAAO,SAAS;AAAA,QAChB;AAAA,MACF;AACA,YAAM,WAAW,MAAM,IAAI;AAC3B,mBAAa,IAAI,MAAM,UAAU,QAAQ;AAQzC,eAAS,SAAS,OAAO,YAAYA,OAAM;AACzC,cAAM;AAAA;AAAA,UAEF,cAAc;AAAA;AAGlB,YAAI,OAAO;AACT,iBAAO,KAAK;AAAA,QACd,WAAW,SAAS;AAClB,kBAAQ,aAAa;AAAA,QACvB,OAAO;AACL,aAAO,MAAM,uCAAuC;AACpD,eAAK,QAAW,eAAeA,KAAI;AAAA,QACrC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,QAAQ,MAAM,MAAM;AAElB,QAAI,WAAW;AAEf,QAAI;AAEJ,SAAK,IAAI,MAAM,MAAM,QAAQ;AAE7B,eAAW,WAAW,OAAO,QAAQ;AACrC,OAAO,QAAQ,6CAA6C;AAC5D,WAAO;AAKP,aAAS,SAAS,OAAOC,OAAM;AAC7B,WAAK,KAAK;AACV,eAASA;AACT,iBAAW;AAAA,IACb;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+BA,UAAU,MAAM,MAAM;AACpB,SAAK,OAAO;AACZ,UAAM,WAAW,MAAM,IAAI;AAC3B,UAAMC,YAAW,KAAK,YAAY,KAAK;AACvC,mBAAe,aAAaA,SAAQ;AACpC,eAAW,IAAI;AAEf,WAAOA,UAAS,MAAM,QAAQ;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2DA,IAAI,UAAU,YAAY;AACxB,UAAM,YAAY,KAAK;AACvB,UAAM,YAAY,KAAK;AAEvB,mBAAe,OAAO,KAAK,MAAM;AAEjC,QAAI,UAAU,QAAQ,UAAU,QAAW;AAAA,IAE3C,WAAW,OAAO,UAAU,YAAY;AACtC,gBAAU,OAAO,UAAU;AAAA,IAC7B,WAAW,OAAO,UAAU,UAAU;AACpC,UAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,gBAAQ,KAAK;AAAA,MACf,OAAO;AACL,kBAAU,KAAK;AAAA,MACjB;AAAA,IACF,OAAO;AACL,YAAM,IAAI,UAAU,iCAAiC,QAAQ,GAAG;AAAA,IAClE;AAEA,WAAO;AAMP,aAAS,IAAIC,QAAO;AAClB,UAAI,OAAOA,WAAU,YAAY;AAC/B,kBAAUA,QAAO,CAAC,CAAC;AAAA,MACrB,WAAW,OAAOA,WAAU,UAAU;AACpC,YAAI,MAAM,QAAQA,MAAK,GAAG;AACxB,gBAAM,CAAC,QAAQ,GAAGC,WAAU;AAAA;AAAA,YACkBD;AAAA;AAC9C,oBAAU,QAAQC,WAAU;AAAA,QAC9B,OAAO;AACL,oBAAUD,MAAK;AAAA,QACjB;AAAA,MACF,OAAO;AACL,cAAM,IAAI,UAAU,iCAAiCA,SAAQ,GAAG;AAAA,MAClE;AAAA,IACF;AAMA,aAAS,UAAU,QAAQ;AACzB,UAAI,EAAE,aAAa,WAAW,EAAE,cAAc,SAAS;AACrD,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAEA,cAAQ,OAAO,OAAO;AAEtB,UAAI,OAAO,UAAU;AACnB,kBAAU,eAAW,cAAAJ,SAAO,MAAM,UAAU,UAAU,OAAO,QAAQ;AAAA,MACvE;AAAA,IACF;AAMA,aAAS,QAAQ,SAAS;AACxB,UAAID,SAAQ;AAEZ,UAAI,YAAY,QAAQ,YAAY,QAAW;AAAA,MAE/C,WAAW,MAAM,QAAQ,OAAO,GAAG;AACjC,eAAO,EAAEA,SAAQ,QAAQ,QAAQ;AAC/B,gBAAM,QAAQ,QAAQA,MAAK;AAC3B,cAAI,KAAK;AAAA,QACX;AAAA,MACF,OAAO;AACL,cAAM,IAAI,UAAU,sCAAsC,UAAU,GAAG;AAAA,MACzE;AAAA,IACF;AAOA,aAAS,UAAU,QAAQM,aAAY;AACrC,UAAIN,SAAQ;AACZ,UAAI,aAAa;AAEjB,aAAO,EAAEA,SAAQ,UAAU,QAAQ;AACjC,YAAI,UAAUA,MAAK,EAAE,CAAC,MAAM,QAAQ;AAClC,uBAAaA;AACb;AAAA,QACF;AAAA,MACF;AAEA,UAAI,eAAe,IAAI;AACrB,kBAAU,KAAK,CAAC,QAAQ,GAAGM,WAAU,CAAC;AAAA,MACxC,WAGSA,YAAW,SAAS,GAAG;AAC9B,YAAI,CAAC,SAAS,GAAG,IAAI,IAAIA;AACzB,cAAM,iBAAiB,UAAU,UAAU,EAAE,CAAC;AAC9C,YAAI,cAAW,cAAc,KAAK,cAAW,OAAO,GAAG;AACrD,wBAAU,cAAAL,SAAO,MAAM,gBAAgB,OAAO;AAAA,QAChD;AAEA,kBAAU,UAAU,IAAI,CAAC,QAAQ,SAAS,GAAG,IAAI;AAAA,MACnD;AAAA,IACF;AAAA,EACF;AACF;AA8BO,IAAM,UAAU,IAAI,UAAU,EAAE,OAAO;AAS9C,SAAS,aAAa,MAAM,OAAO;AACjC,MAAI,OAAO,UAAU,YAAY;AAC/B,UAAM,IAAI,UAAU,aAAa,OAAO,oBAAoB;AAAA,EAC9D;AACF;AASA,SAAS,eAAe,MAAM,OAAO;AACnC,MAAI,OAAO,UAAU,YAAY;AAC/B,UAAM,IAAI,UAAU,aAAa,OAAO,sBAAsB;AAAA,EAChE;AACF;AASA,SAAS,eAAe,MAAM,QAAQ;AACpC,MAAI,QAAQ;AACV,UAAM,IAAI;AAAA,MACR,kBACE,OACA;AAAA,IACJ;AAAA,EACF;AACF;AAQA,SAAS,WAAWM,OAAM;AAGxB,MAAI,CAAC,cAAWA,KAAI,KAAK,OAAOA,MAAK,SAAS,UAAU;AACtD,UAAM,IAAI,UAAU,yBAAyBA,QAAO,GAAG;AAAA,EAEzD;AACF;AAUA,SAAS,WAAW,MAAM,WAAW,UAAU;AAC7C,MAAI,CAAC,UAAU;AACb,UAAM,IAAI;AAAA,MACR,MAAM,OAAO,4BAA4B,YAAY;AAAA,IACvD;AAAA,EACF;AACF;AAMA,SAAS,MAAM,OAAO;AACpB,SAAO,gBAAgB,KAAK,IAAI,QAAQ,IAAI,MAAM,KAAK;AACzD;AAMA,SAAS,gBAAgB,OAAO;AAC9B,SAAO;AAAA,IACL,SACE,OAAO,UAAU,YACjB,aAAa,SACb,cAAc;AAAA,EAClB;AACF;AAMA,SAAS,gBAAgB,OAAO;AAC9B,SAAO,OAAO,UAAU,YAAYC,cAAa,KAAK;AACxD;AAUA,SAASA,cAAa,OAAO;AAC3B,SAAO;AAAA,IACL,SACE,OAAO,UAAU,YACjB,gBAAgB,SAChB,gBAAgB;AAAA,EACpB;AACF;;;;;;;;;;;;;;AUvyCO,IAAeC,KAAf,MAAkC;AAGzC;AAWO,IAAMC,KAAN,MAAsD;EAAtD,cAAA;AACL,SAAU,WAAsB,CAAA,GAGhC,KAAA,OAAO,MACE,KAAK,SAAS,QAIvB,KAAA,MAAM,MACG,KAAK,SAAS,GAAG,EAAE,GAI5B,KAAA,OAAO,CAACC,OAAqB;;AACtB,OAAAC,KAAA,KAAA,IAAA,MAAA,QAAAA,GAAO,KAAKD,EAAAA;IAAI,GAIvB,KAAA,OAAO,CAACA,OAAwB;AACzB,WAAA,SAAS,KAAKA,EAAI;IAAA,GAIzB,KAAA,QAAQ,MAAe;AACf,YAAAE,KAAK,KAAK,SAAS,IAAI;AAC7B,UAAI,CAACA;AACH,cAAMC,EAAc;AAEf,aAAAD;IAAA;EACT;AACF;AC7CO,IAAME,IAAN,MAAMA,WAA2BN,GAAmB;EACzD,YAAmBO,IAAuBC,IAAwBC,IAAe;AACzE,UAAA,GADW,KAAA,OAAAF,IAAuB,KAAA,UAAAC,IAAwB,KAAA,QAAAC;EAElE;EAEA,KAAKP,OAAeQ,IAAc;AAChC,SAAK,QAAQ,KAAKR,IAAM,GAAGQ,EAAI;EACjC;EAEA,MAAwB;AACf,WAAA,KAAK,QAAQ,IAAA;EACtB;EAEA,OAAO,OAAOH,IAAgBC,IAAiBC,IAAe;AAC5D,WAAO,IAAIH,GAAmBC,IAAMC,IAASC,EAAK;EACpD;AACF;;;;;;;;ACTO,IAAME,IAAN,MAAMA,WAAoBV,GAAgC;;EAsBrD,YAAYW,IAAgB;AAC9B,UAAA;AAlBRC,IAAAA,GAAA,MAAAC,IAAA,MAAA;AAuBAD,IAAAA,GAAA,MAAAE,IAAA,MAAA;AAGAF,IAAAA,GAAA,MAAAG,GAAA,MAAA;AAQAH,IAAAA,GAAA,MAAAI,IAAA,MAAA;AAcAJ,IAAAA,GAAA,MAAAK,IAAA,MAAA;AAuBAL,IAAAA,GAAA,MAAAM,IAAA,MAAA;AAcAN,IAAAA,GAAA,MAAAO,IAAA,MAAA;AArFAC,MAAA,MAAAP,IAA0BQ,KAAK,IAAA,GAuBpBD,EAAA,MAAAN,IAAA,CAACb,OAAgDA,GAAK,MAAA,GAGnDmB,EAAA,MAAAL,GAAA,CAACO,IAASC,OAA8B;AACpD,UAAIC,GAAA,MAAKV,EAAAA,EAAL,KAAA,MAAcQ,EAAAA,KAAME,GAAA,MAAKV,EAAAA,EAAL,KAAA,MAAcS,EAAAA,KAAMF,KAAK,QAAQC,GAAE,OAAOC,GAAE,KAAK;AAChE,eAAA,KAAK,OAAO,KAAKD,GAAE,OAAOC,GAAE,MAAMD,GAAE,KAAK;IAE3C,CAAA,GAITF,EAAA,MAAAJ,IAAe,CAACf,OAA4C;AAC1D,YAAMwB,KAAS,OAAO,OAAO,EAAE,GAAG,KAAK,OAAO,OAAO,GAAG,KAAK,OAAO,MAAM,CAAC,EACxE,KAAK,CAACC,OACQA,GAAE,KACH,cAAc,MAAMzB,EAAI,CACrC;AAEH,UAAI,CAACwB;AACH,cAAME,EAAiB1B,EAAI;AAEtB,aAAAwB;IAAA,CAAA,GAITL,EAAA,MAAAH,IAAW,CAAChB,OAAuB;AAC3B,YAAAK,KAAOkB,GAAA,MAAKR,EAAAA,EAAL,KAAA,MAAkBf,EAAAA;AAClBK,MAAAA,GAAK,KAEb,cAAc,OAAO,MAAML,IAAMK,EAA2B;IAAA,CAAA,GAItD,KAAA,aAAA,CAACL,IAAoB2B,IAAoBpB,QAC/C,KAAA,SAASoB,IAAUpB,EAAK,GACxB,KAAA,KAAKP,GAAK,QAAQ,GAEhB,OAKE,KAAA,WAAA,CAAC2B,IAAoBpB,QAC9B,KAAK,KAAKH,EAAmB,OAAOuB,IAAU,CAAC,GAAGpB,EAAK,CAAC,GACjD,OAITY,EAAA,MAAAF,IAAoB,MAAY;AAC9BE,QAAA,MAAKP,IAASQ,KAAK,IAAA;AACb,YAAAQ,KAAU,KAAK,MAAA;AAErB,aAAOL,GAAA,MAAKL,EAAAA,EAAL,KAAA,MAAqBU,GAAQ,MAAMA,GAAQ,OAAOA,GAAQ,OAAA;IAAO,CAAA,GAI1E,KAAA,YAAY,OACVL,GAAA,MAAKN,EAAAA,EAAL,KAAA,IAAA,GACO,OAISE,EAAA,MAAAD,IAAA,CAACS,IAAoBpB,IAAeD,OAA2B;AAC/E,YAAMN,IAAO2B,GAAS,cAAcpB,IAAOD,IAASiB,GAAA,MAAKX,EAAAA,CAAM;AAC/D,UAAI,CAACZ;AACG,cAAA6B,EAAuBF,IAAUpB,IAAOD,EAAO;AAEvD,aAAA,KAAK,KAAKN,CAAI,GAEPA;IAAA,CAAA,GAIC,KAAA,UAAA,CAAC2B,IAAoBpB,IAAeD,QACvCiB,GAAA,MAAAL,EAAAA,EAAA,KAAA,MAAgBS,IAAUpB,IAAOD,EAAAA,GAC/B,OAIE,KAAA,WAAA,CAACwB,IAAoBvB,OAAkB;AAC1C,YAAAwB,KAAOD,GAAS,OAAOvB,EAAK;AAElC,aAAAY,EAAA,MAAKP,IAASmB,GAAK,SAASR,GAAA,MAAKX,EAAAA,CAAM,CAAA,GAChC;IAAA,GAIT,KAAA,YAAY,CAACkB,QACXX,EAAA,MAAKP,IAASkB,GAAS,cAAcP,GAAA,MAAKX,EAAAA,CAAM,CAAA,GACzC,OAIT,KAAA,UAAU,CAACoB,OAAiB;AACpB,YAAAC,KAAa,KAAK,IAAA;AACxB,UAAI,CAACA;AACH,cAAM9B,EAAc;AAEhB,YAAA+B,KAAWD,GAAW,IAAA,GACtBE,IAAW,KAAK,OAAO,KAAKH,IAAMT,GAAA,MAAKX,EAAAA,CAAM;AAEnD,UAAI,CAACsB;AACH,eAAAD,GAAW,KAAKE,CAAQ,GACjB;AAGT,YAAMC,KAASb,GAAA,MAAKT,CAAAA,EAAL,KAAA,MAAiBoB,IAAUC,CAAAA;AAC1C,aAAIC,MACFH,GAAW,KAAKG,EAAM,GACf,SAEEH,GAAA,KAAKC,IAAUC,CAAQ,GAC3B;IAAA,GAIT,KAAA,QAAQ,MAAY;AACd,UAAAE;AAEJ;AACEA,QAAAA,KAAMd,GAAA,MAAKN,EAAAA,EAAL,KAAA,IAAA;aACD,KAAK,KAAK;AAEV,aAAAoB;IAAA,GAKF,KAAA,OAAA,CAACC,KAAuC,CAAA,OAC5C,CAAAA,EAAK,EAAE,KAAK,EAAE,QAAQ,CAAQtC,OAAAuB,GAAA,MAAKP,EAAAA,EAAL,KAAA,MAAchB,EAAAA,CAAK,GAC3C,OAID,KAAA,QAAA,MAAM,KAAK,MAAM,GAGnB,KAAA,MAAA,CAACuC,IAAsBC,OAAqB;AAChD,YAAMC,KAAOF,GAAO,QAAQA,GAAO,MAAMC,EAAQ,GAAGA,EAAQ;AAC5D,aAAA,KAAK,KAAKC,EAAI,GAEP;IAAA,GAjJP,KAAK,SAAS/B;EAChB;AAkJF;AAtKEE,KAAA,oBAAA,QAAA,GAuBAC,KAAA,oBAAA,QAAA,GAGAC,IAAA,oBAAA,QAAA,GAQAC,KAAA,oBAAA,QAAA,GAcAC,KAAA,oBAAA,QAAA,GAuBAC,KAAA,oBAAA,QAAA,GAcAC,KAAA,oBAAA,QAAA,GA7EOT,EAAA,SAAS,CAACC,IAAgB6B,OAAiC;AAC1D,QAAAG,KAAQ,IAAIjC,EAAKC,EAAM;AAC7B,SAAO,CAACsB,QACAU,GAAA,IAAIH,IAAQP,EAAI,GACfU,GAAM,MAAA;AACf;AAlBG,IAAMC,KAANlC;ACNA,IAAMmC,KAAN,MAAMA,WAA+B9C,GAA2B;EACrE,YACSO,IACAwC,IACAC,IACAC,KAAoB,CAAA,GAC3B;AACM,UAAA,GALC,KAAA,OAAA1C,IACA,KAAA,WAAAwC,IACA,KAAA,QAAAC,IACA,KAAA,QAAAC,IAYF,KAAA,OAAA,CAAC/C,OAAuBQ,MAAyB;AACjD,WAAK,aACR,KAAK,WAAW,CAAA,IAElB,KAAK,SAAS,KAAKR,IAAM,GAAGQ,CAAI;IAAA,GAG5B,KAAA,MAAA,MAAA;;AAAgC,cAAAP,KAAA,KAAK,aAAL,OAAA,SAAAA,GAAe,IAAA;IAAA;EAhBrD;AAiBF;AAfE2C,GAAO,SAAS,CACdvC,IACAwC,IACAC,IACAC,KAAoB,CAAA,MACjB,IAAIH,GAAuBvC,IAAMwC,IAAUC,IAAOC,EAAK;AAfvD,IAAMC,KAANJ;ACKP,IAAMK,KAAa,CAACxB,OAAsC,OAAO,UAAU,eAAe,KAAKA,IAAG,MAAM;;;;;;;;;;;;;;AAIjG,IAAMyB,IAAN,MAAMA,WAAwBnD,GAA4C;;EAqB/E,YAAYW,IAAgB;AACpB,UAAA;AApBRC,IAAAA,GAAA,MAAAC,GAAA,MAAA;AAyBAD,IAAAA,GAAA,MAAAI,IAAA,MAAA;AAcAJ,IAAAA,GAAA,MAAAwC,IAAA,MAAA;AAOAxC,IAAAA,GAAA,MAAAyC,IAAA,MAAA;AAOAzC,IAAAA,GAAA,MAAAK,IAAA,MAAA;AAYAL,IAAAA,GAAA,MAAA0C,IAAA,MAAA;AAmCA1C,IAAAA,GAAA,MAAA2C,IAAA,MAAA;AAoCA3C,IAAAA,GAAA,MAAA4C,IAAA,MAAA;AAsBA5C,IAAAA,GAAA,MAAA6C,IAAA,MAAA;AA6CA7C,IAAAA,GAAA,MAAAM,IAAA,MAAA;AAkBAN,IAAAA,GAAA,MAAAO,GAAA,MAAA;AAcAP,IAAAA,GAAA,MAAA8C,IAAA,MAAA;AAWA9C,IAAAA,GAAA,MAAA+C,IAAA,MAAA;AAtPAvC,MAAA,MAAAP,GAA0BQ,KAAK,IAAA,GAyB/BD,EAAA,MAAAJ,IAAe,CAACf,OAA2C;AACzD,YAAMwB,KAAS,OAAO,OAAO,EAAE,GAAG,KAAK,OAAO,OAAO,GAAG,KAAK,OAAO,MAAM,CAAC,EACxE,KAAK,CAACC,OACQA,GAAE,KACH,WAAW,MAAMzB,EAAmB,CACjD;AAEH,UAAI,CAACwB;AACG,cAAAmC,EAAqB3D,GAAK,IAAI;AAE/B,aAAAwB;IAAA,CAAA,GAITL,EAAA,MAAAgC,IAAgB,CAACnD,OACFuB,GAAA,MAAKR,EAAAA,EAAL,KAAA,MAAkBf,EAAAA,EACb,KACN,WAAW,OAAO,MAAMA,EAAI,CAAA,GAI1BmB,EAAA,MAAAiC,IAAA,CAACrB,IAAY/B,OACduB,GAAA,MAAKR,EAAAA,EAAL,KAAA,MAAkBgB,EAAAA,EACb,KACN,WAAW,OAAO,MAAMA,IAAM/B,EAAI,CAAA,GAIhDmB,EAAA,MAAAH,IAAW,CAAChB,OAAe;AACnB,YAAA,EAAE,OAAA4D,GAAU,IAAA5D,IACZ6D,KAAc,CAACpC,OAAYA,GAAE,KAAK,KAAK,YAAY;AAC7C,OAAC,GAAGmC,EAAK,EAAE,KAAK,CAACvC,IAAGC,OAAMuC,GAAYxC,EAAC,IAAIwC,GAAYvC,EAAC,CAAC,EAC3C,MAAM,CAAAS,OAAQ,CAACR,GAAA,MAAK6B,EAAAA,EAAL,KAAA,MAAmBrB,IAAM/B,EAAAA,CAAK,KAErEuB,GAAA,MAAK4B,EAAAA,EAAL,KAAA,MAAmBnD,EAAAA,GAErB4D,GAAM,QAAQ,CAAA7B,OAAQR,GAAA,MAAKmC,EAAAA,EAAL,KAAA,MAAgB3B,EAAAA,CAAK;IAAA,CAAA,GAI/BZ,EAAA,MAAAkC,IAAA,CAACS,IAAqBzD,OAA+B;;AAI7D,UAHAyD,GAAM,SAASzD,QAGfJ,KAAA6D,GAAM,aAAN,OAAA,SAAA7D,GAAgB,YAAW;AACtB,eAAA6D;AAEH,YAAAC,KAAa,CAAC/D,OAA4C;;AAC9D,YAAIA,GAAK,SAASK;AACTL,iBAAAA;AAELA,cAAAA,KAAAA,GAAK,aAALA,OAAAA,SAAAA,GAAe,YAAW;AACrB,iBAAA;AAEH,cAAA,CAACgE,EAAU,IAAIhE,GAAK;AAC1B,eAAKgE,KAGED,GAAWC,EAAU,IAFnB;MAEmB,GAGxBC,IAASF,GAAWD,EAAK;AAE/B,UAAI,CAACG;AACI,eAAAH;AAET,YAAMI,KAAMD,EAAO,WAAW,CAAC,GAAGA,EAAO,QAAQ,IAAI,QAC/CjE,KAAO,EAAE,GAAG8D,IAAO,UAAUI,GAAI;AACvC,aAAAlE,GAAK,WAAWkE,IACTD,EAAA,WAAW,CAACjE,EAAI,GAEhBiE;IAAA,CAAA,GAIT9C,EAAA,MAAAmC,IAAsB,CAACtD,OAAqC;AACpD,YAAA,EAAE,UAAA6C,GAAa,IAAA7C;AACrB,aAAK6C,OAGL7C,GAAK,WAAW6C,GAAS,OAAO,CAACsB,IAAcL,GAAOM,OAAU;AAC9D,YAAIA,OAAU;AACZ,iBAAO,CAACN,CAAK;AAET,cAAAO,KAAOF,GAAa,GAAG,EAAE;AAC/B,YAAIE,MAAQA,GAAK,UAAUP,EAAM,QAAQ;AACvCA,cAAQvC,GAAA,MAAK8B,EAAAA,EAAL,KAAA,MAAiBS,GAAOO,GAAK,IAAA;AACrC,gBAAM,EAAE,UAAUC,IAAc,GAAGC,GAAAA,IAAaT,GAC1C,EAAE,UAAUU,IAAc,GAAGC,GAAAA,IAAaJ;AAChD,cACEP,EAAM,SAASO,GAAK,QACjBC,MACAE,MACA,KAAK,UAAUD,EAAQ,MAAM,KAAK,UAAUE,EAAQ,GACvD;AACA,kBAAMC,KAAO;cACX,GAAGD;cACH,UAAU,CAAC,GAAGD,IAAc,GAAGF,EAAY;YAAA;AAEtC,mBAAAH,GACJ,MAAM,GAAG,EAAE,EACX,OAAO5C,GAAA,MAAK+B,EAAAA,EAAL,KAAA,MAAyBoB,EAAAA,CAAK;UAC1C;QACF;AACO,eAAAP,GAAa,OAAOL,CAAK;MAClC,GAAG,CAAoB,CAAA,IAEhB9D;IAAA,CAAA,GAITmB,EAAA,MAAAoC,IAAsB,CAAC3B,OAAoC;AACzD,YAAM5B,KAAqB;QACzB,GAAG4B,GAAQ;QACX,MAAMA,GAAQ;MAAA;AAGhB,aAAIA,GAAQ,aACV5B,GAAK,WAAW4B,GAAQ,WAEtBA,GAAQ,UACV5B,GAAK,QAAQ4B,GAAQ,QAEhB5B;IAAA,CAAA,GAKE,KAAA,WAAA,CAACK,IAAcyC,IAAgBC,QACxC,KAAK,KAAKC,GAAuB,OAAO3C,IAAM,QAAWyC,IAAOC,EAAK,CAAC,GAC/D,OAGK5B,EAAA,MAAAqC,IAAA,CAAC5B,IAAiC+C,OAA+B;AAC7E,UAAIC,KAAc,IACdC,IAAY;AAChB,YAAMhC,KAAWjB,GAAQ;AACzB,UAAIkD,KAAQ,IACRT,KAAO;AACL,YAAAU,KAAY,CAAC/E,OAAyB;AACrCA,QAAAA,MAEAA,GAAA,QAAQ,CAAC8D,IAAOM,OAAU;AACzBN,UAAAA,GAAM,SAAS,UAAUA,GAAM,UAC7BgB,KAAQ,MACFA,KAAAV,KAEHC,KAAAD;QACT,CACD;MAAA;AAGH,UAAIvB,IAAU;AACZkC,QAAAA,GAAUlC,EAAQ;AACZ,cAAAmC,KAAYnC,MAAA,OAAA,SAAAA,GAAWwB,EAAAA,GACvBL,KAAanB,MAAA,OAAA,SAAAA,GAAWiC,EAAAA;AAC1BE,QAAAA,MAAaA,GAAU,MAAM,SAAS,GAAG,MAC3CH,IAAYG,GAAU,MAAM,MAAM,KAAK,EAAG,CAAC,GACjCA,GAAA,QAAQA,GAAU,MAAM,QAAQ,IAExChB,MAAcA,GAAW,MAAM,WAAW,GAAG,MAC/CY,KAAcZ,GAAW,MAAM,MAAM,KAAK,EAAG,CAAC,GACnCA,GAAA,QAAQA,GAAW,MAAM,UAAU;MAElD;AAEIY,MAAAA,GAAY,UACTrD,GAAA,MAAAL,CAAAA,EAAA,KAAA,MAAgB,QAAQ,QAAW0D,EAAAA;AAE1C,YAAMpD,KAASmD,GAAAA;AAEf,aAAIE,EAAU,UACPtD,GAAA,MAAAL,CAAAA,EAAA,KAAA,MAAgB,QAAQ,QAAW2D,CAAAA,GAEnCrD;IAAA,CAAA,GAIWL,EAAA,MAAAF,IAAA,CAACgE,KAAgB,UAAwB;AACrD,YAAArD,KAAU,KAAK,MAAA,GAEf+C,KAAS,MAAMpD,GAAA,MAAKL,CAAAA,EAAL,KAAA,MAAqBU,GAAQ,MAAMA,GAAQ,UAAUA,GAAQ,OAAOA,GAAQ,KAAA;AAE7F,aAAAqD,KACK1D,GAAA,MAAKiC,EAAAA,EAAL,KAAA,MAAiB5B,IAAS+C,EAAAA,IAE5BA,GAAO;IAAA,CAAA,GAIhB,KAAA,YAAY,OACVpD,GAAA,MAAKN,EAAAA,EAAL,KAAA,IAAA,GACO,OAITE,EAAA,MAAAD,GAAkB,CAACb,IAAcwC,IAA2BC,IAAgBC,MAAqC;AAC/G,YAAMnB,KAAUoB,GAAuB,OAAO3C,IAAMwC,IAAUC,IAAOC,CAAK,GACpE/C,KAAqBuB,GAAA,MAAK+B,EAAAA,EAAL,KAAA,MAAyB/B,GAAA,MAAKgC,EAAAA,EAAL,KAAA,MAAyB3B,EAAAA,CAAAA;AAC7E,aAAA,KAAK,KAAK5B,EAAI,GACPA;IAAA,CAAA,GAIT,KAAA,UAAU,CAACK,IAAcwC,IAA2BC,IAAgBC,OAClExB,GAAA,MAAKL,CAAAA,EAAL,KAAA,MAAqBb,IAAMwC,IAAUC,IAAOC,CAAAA,GACrC,OAIT5B,EAAA,MAAAsC,IAAY,CAAC1B,IAAY1B,IAAcyC,IAAgBC,MACxChB,GAAK,QAAQR,GAAA,MAAKX,CAAAA,CAAM,IAG5B,QAETO,EAAA,MAAKP,GAASmB,GAAK,SAASR,GAAA,MAAKX,CAAAA,CAAM,CAAA,GAChC,KAAK,SAASP,IAAMyC,IAAO,EAAE,GAAGC,GAAO,QAAQ,KAAA,CAAM,EAAA,GAI9D5B,EAAA,MAAAuC,IAAa,CAAC3B,OAAqB;AACpBA,MAAAA,GAAK,QAAQR,GAAA,MAAKX,CAAAA,CAAM,MAKrCO,EAAA,MAAKP,GAASmB,GAAK,KAAK,cAAcR,GAAA,MAAKX,CAAAA,CAAM,CAAA,GACjDW,GAAA,MAAKN,EAAAA,EAAL,KAAA,MAAuB,IAAA;IAAI,CAAA,GAK7B,KAAA,WAAW,CAACc,IAAY1B,IAAcyC,IAAgBC,OACpDxB,GAAA,MAAKkC,EAAAA,EAAL,KAAA,MAAe1B,IAAM1B,IAAMyC,IAAOC,CAAAA,GAC3B,OAMT,KAAA,YAAY,CAAChB,QACXR,GAAA,MAAKmC,EAAAA,EAAL,KAAA,MAAgB3B,EAAAA,GACT,OAIT,KAAA,QAAQ,MAAoB;AAC1B,UAAIM,KAA2B;AAC/B;AACEA,QAAAA,KAAMd,GAAA,MAAKN,EAAAA,EAAL,KAAA,IAAA;aACD,KAAK,KAAK;AAEV,aAAAoB;IAAA,GAKT,KAAA,OAAO,CAACC,OACFW,GAAWX,EAAK,KACZA,GAAA,QAAQ,CAACtC,OAAS;AACtBuB,MAAAA,GAAA,MAAKP,EAAAA,EAAL,KAAA,MAAchB,EAAAA;IAAI,CACnB,GACM,SAETuB,GAAA,MAAKP,EAAAA,EAAL,KAAA,MAAcsB,EAAAA,GACP,OAIT,KAAS,WAAW,CAACC,OAAiCA,GAAO,UAAU,KAAK,MAAA,CAAe,GAG3F,KAAA,MAAM,CAACE,QACL,KAAK,KAAKA,EAAI,GAEP,OAxRP,KAAK,SAAS/B;EAChB;AAyRF;AA/SEE,IAAA,oBAAA,QAAA,GAyBAG,KAAA,oBAAA,QAAA,GAcAoC,KAAA,oBAAA,QAAA,GAOAC,KAAA,oBAAA,QAAA,GAOApC,KAAA,oBAAA,QAAA,GAYAqC,KAAA,oBAAA,QAAA,GAmCAC,KAAA,oBAAA,QAAA,GAoCAC,KAAA,oBAAA,QAAA,GAsBAC,KAAA,oBAAA,QAAA,GA6CAvC,KAAA,oBAAA,QAAA,GAkBAC,IAAA,oBAAA,QAAA,GAcAuC,KAAA,oBAAA,QAAA,GAWAC,KAAA,oBAAA,QAAA,GA5OOR,EAAA,SAAS,CAACxC,IAAgB6B,OAAqC;AAC9D,QAAAG,KAAQ,IAAIQ,EAAKxC,EAAM;AAC7B,SAAO,CAACJ,QACNoC,GAAM,IAAIpC,EAAO,GACVoC,GAAM,SAASH,EAAM;AAC9B;AAjBG,IAAM2C,KAANhC;;;ACRP,IAAM,MAAM,OAAO,aAAa,cAAc,YAAY;AAC1D,IAAM,MAAM,OAAO,YAAY,cAAc,WAAW;AACxD,IAAM,QAAS,OAAO,IAAI,aAAc;AAExC,IAAM,UAAU,cAAc,KAAK,KAAK;AACxC,IAAM,YAAY,UAAU,KAAK,KAAK;AACtC,IAAM,UAAU,wCAAwC,KAAK,KAAK;AAE3D,IAAM,KAAK,CAAC,EAAE,aAAa,WAAW;AACtC,IAAM,aAAa,YACrB,SAAyD,eAC1D,UACE,CAAC,QAAQ,CAAC,IACV,UACE,CAAC,QAAQ,CAAC,IACV;AACD,IAAM,QAAQ,CAAC,MAAM,gBAAgB,KAAK,KAAK;AACzC,IAAA,gBAAgB,SAAS,EAAE,iBAAiB,KAAK,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;AAEjF,IAAM,UAAU,CAAC,MAAM,gBAAgB,KAAK,KAAK;AACpC,IAAA,SAAS,CAAC,CAAC;AACjB,IAAM,iBAAiB,UAAU,CAAC,QAAQ,CAAC,IAAK;AAC1C,IAAA,SAAS,CAAC,MAAM,CAAC,CAAC,OAAO,iBAAiB,KAAK,IAAI,MAAM;AAEzD,IAAA,MAAM,WAAW,cAAc,KAAK,KAAK,KAAM,CAAC,CAAC,OAAO,IAAI,iBAAiB;AACnF,IAAM,MAAM,QAAQ,MAAM,MAAM,KAAK,IAAI,QAAQ,IAAI;AAC/C,IAAA,UAAU,aAAa,KAAK,KAAK;AACvC,IAAM,SAAS,CAAC,CAAC,OAAO,yBAAyB,IAAI,gBAAgB;AACrE,IAAM,iBAAiB,SAAS,EAAE,uBAAuB,KAAK,UAAU,SAAS,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI;;;;;;;;;;;;;;;;AC5B1G,SAAS,IAAI,MAAkB,MAAc,IAAYiC,OAAc,OAAoB,QAAgB;AACzG,MAAI,KAAK;AACA,WAAA;AACT,QAAM,QAAQ,KAAK;AACnB,QAAM,QAAQ,MAAM,IAAI,QAAQ,IAAI;AAChC,MAAA,MAAM,OAAO,KAAK,KAAK;AAClB,WAAA;AACT,QAAM,aACE,MAAM,OAAO,YAAY,KAAK,IAAI,GAAG,MAAM,eAAe,GAAG,GAAG,MAAM,cAAc,QAAW,GAAQ,IAAIA;AACnH,WAASC,KAAI,GAAGA,KAAI,MAAM,QAAQA,MAAK;AACrC,UAAM,QAAS,MAAMA,EAAC,EAAwB,MAAM,KAAK,UAAU;AACnE,UAAM,KACI,SACC,MAAM,CAAC,KAER,MAAMA,EAAC,EACP,QAAQ,OAAO,OAAO,QAAQ,MAAM,CAAC,EAAE,SAASD,MAAK,SAAS,EAAE;AAC1E,QAAI,CAAC;AACH;AACG,SAAA,SAAS,GAAG,QAAQ,QAAQ,EAAE,WAAW,IAAI,MAAM,IAAI,MAAAA,MAAK,CAAC,CAAC;AAC5D,WAAA;EAAA;AAEF,SAAA;AACT;AAEa,IAAA,sBAAsB,IAAI,UAAU,4BAA4B;AAC7D,SAAA,iBAAiB,EAAE,MAAA,GAAyC;AACpE,QAAA,SAAiB,IAAI,OAAO;IAChC,KAAK;IACL,cAAc;IAEd,OAAO;MACL,OAAO;AACE,eAAA;MAAA;MAET,MAA2B,IAAI,MAAM;AAC7B,cAAA,SAAS,GAAG,QAAQ,IAAI;AAC1B,YAAA;AACK,iBAAA;AACT,eAAQ,GAAG,gBAAgB,GAAG,aAAc,OAAO;MAAA;IACrD;IAEF,OAAO;MACL,gBAAgB,MAAM,MAAM,IAAIA,OAAM;AACpC,eAAO,IAAI,MAAM,MAAM,IAAIA,OAAM,OAAO,MAAM;MAAA;MAEhD,iBAAiB;QACf,gBAAgB,CAAC,SAAS;AACxB,qBAAW,MAAM;AACf,kBAAM,EAAE,QAAA,IAAY,KAAK,MAAM;AAC3B,gBAAA;AACF,kBAAI,MAAM,QAAQ,KAAK,QAAQ,KAAK,IAAI,OAAO,MAAM;UAAA,CACxD;AACM,iBAAA;QAAA;MACT;MAEF,cAAc,MAAM,OAAO;AACzB,YAAI,MAAM,QAAQ;AACT,iBAAA;AACT,cAAM,EAAE,QAAA,IAAY,KAAK,MAAM;AAC3B,YAAA;AACK,iBAAA,IAAI,MAAM,QAAQ,KAAK,QAAQ,KAAK,MAAM,OAAO,MAAM;AACzD,eAAA;MAAA;IACT;EACF,CACD;AACM,SAAA;AACT;ACnEO,SAAS,SAAS,QAAgB,UAAoB,UAAmB,CAAA,GAAe;AAC7F,SAAO,IAAI,UAAU,QAAQ,CAAC,OAAO,OAAO,OAAO,QAAQ;AAN7D,QAAA,IAAA,IAAA,IAAA;AAOU,UAAA,EAAE,GAAA,IAAO;AACf,UAAM,cAAc,MAAM;AAEtB,QAAA,QAAQ,MAAM,cAAc,CAAC;AAC7B,QAAA,YAAY,MAAM,CAAC;AACvB,QAAI,qBAAsC,CAAA;AAE1C,QAAI,UAAU;AAEd,UAAM,WAAqB;MACzB;MACA;MACA;MACA;IAAA;AAGI,UAAA,UAAS,KAAQ,QAAA,mBAAR,OAAyB,SAAA,GAAA,KAAA,SAAA,QAAA;AACjC,WAAA,OAAO,UAAU,MAAM;AAE9B,KAAC,EAAE,OAAO,WAAW,OAAO,IAAA,IAAQ;AAEpC,QAAI,cAAc;AACT,aAAA;AAET,SAAI,SAAA,OAAA,SAAA,MAAO,KAAW,OAAA;AACb,aAAA;AAET,QAAI,OAAO;AACH,YAAA,cAAc,UAAU,OAAO,IAAI;AACzC,YAAM,YAAY,QAAQ,UAAU,QAAQ,KAAK;AAC3C,YAAA,UAAU,YAAY,MAAM;AAEb,4BAAA,KAAA,GAAG,gBAAH,OAAA,KAAkB,CAAA;AAEvC,UAAI,UAAU;AACT,WAAA,OAAO,SAAS,GAAG;AAExB,UAAI,YAAY;AACX,WAAA,OAAO,QAAQ,aAAa,SAAS;AAEhC,gBAAA,QAAQ,cAAc,MAAM;AAEhC,YAAA,SAAQ,KAAQ,QAAA,YAAR,OAAkB,SAAA,GAAA,KAAA,SAAA,KAAA;AAEhC,SAAG,QAAQ,OAAO,SAAS,SAAS,OAAO,KAAK,CAAC;AACjD,SAAG,eAAe,kBAAkB;AAEpC,OAAA,KAAA,QAAQ,mBAAR,OAAyB,SAAA,GAAA,KAAA,SAAA,EAAE,OAAO,OAAO,KAAK,GAAG,CAAA;IAAA;AAG5C,WAAA;EAAA,CACR;AACH;ACtDO,SAAS,SAAS,QAAgB,UAAoB,UAAmB,CAAA,GAAe;AAC7F,SAAO,IAAI,UAAU,QAAQ,CAAC,OAAO,OAAO,OAAO,QAAQ;AAN7D,QAAA,IAAA,IAAA;AAOU,UAAA,EAAE,GAAA,IAAO;AACX,QAAA,QAA4B,MAAM,CAAC;AACnC,QAAA,YAAY,MAAM,CAAC;AAEvB,UAAM,WAAqB;MACzB;MACA;MACA;MACA;IAAA;AAGI,UAAA,UAAS,KAAQ,QAAA,mBAAR,OAAyB,SAAA,GAAA,KAAA,SAAA,QAAA;AACjC,WAAA,OAAO,UAAU,MAAM;AAE9B,KAAC,EAAE,OAAO,WAAW,OAAO,IAAA,IAAQ;AAEpC,QAAI,cAAc;AACT,aAAA;AAET,QAAI,CAAC,SAAS,MAAM,KAAA,MAAW;AACtB,aAAA;AAEH,UAAA,SAAQ,KAAQ,QAAA,YAAR,OAAkB,SAAA,GAAA,KAAA,SAAA,KAAA;AAC1B,UAAAE,QAAO,SAAS,cAAc,KAAK;AAEzC,QAAIA,OAAM;AACR,SAAG,iBAAiB,SAAS,UAAU,GAAG,IAAI,QAAQ,KAAK,EAAE,OAAO,IAAI,OAAO,KAAKA,KAAI;AAChF,OAAA,KAAA,QAAA,mBAAR,OAAyB,SAAA,GAAA,KAAA,SAAA,EAAE,OAAO,CAAC,WAAW,SAAA,OAAA,QAAS,EAAE,GAAG,OAAO,KAAK,GAAG,CAAA;IAAA;AAGtE,WAAA;EAAA,CACR;AACH;AEpCO,SAAS,QAAQ,IAA8B;AAC7C,SAAA,OAAO,OAAO,OAAO,OAAO,EAAE,GAAG,EAAE,EAAE,QAAQ,KAAK,IAAA,CAAK;AAChE;AAEgB,SAAA,cAAc,UAAiCC,OAAiB;AACtE,SAAA,MAAM,QAAQ,QAAQ,KAAK,SAAS,SAASA,MAAK,IAAI,KAAMA,MAAK,SAAS;AACpF;ACkBO,SAAS,WAAW,WAAsB;AAC/C,SAAO,CAAC,SAAkD;AACxD,aAAS,QAAQ,KAAK,OAAO,QAAQ,GAAG,SAAS,GAAG;AAC5C,YAAAC,QAAO,KAAK,KAAK,KAAK;AAExB,UAAA,UAAUA,KAAI,GAAG;AACb,cAAA,OAAO,KAAK,OAAO,KAAK;AACxB,cAAA,KAAK,KAAK,MAAM,KAAK;AACpB,eAAA;UACL;UACA;UACA,MAAAA;QAAA;MACF;IACF;AAGK,WAAA;EAAA;AAEX;AAEgB,SAAA,mBACd,MACA,UACA;AACA,SAAO,WAAW,CAAQA,UAAAA,MAAK,SAAS,QAAQ,EAAE,IAAI;AACxD;AE5CO,SAAS,2BAA2B,WAAsB;AAC/D,SAAO,CAAC,SAAsD;AAC5D,aAASC,KAAI,KAAK,OAAOA,KAAI,GAAGA,MAAK;AAC7B,YAAAC,QAAO,KAAK,KAAKD,EAAC;AACpB,UAAA,UAAUC,KAAI,GAAG;AACZ,eAAA;UACL,KAAKD,KAAI,IAAI,KAAK,OAAOA,EAAC,IAAI;UAC9B,OAAO,KAAK,MAAMA,EAAC;UACnB,OAAOA;UACP,MAAAC;QAAA;MACF;IACF;AAGK,WAAA;EAAA;AAEX;AAQgB,SAAA,uBAAuB,WAAsB,UAAoD;AAC/G,MAAI,EAAE,qBAAqB;AACzB;AAEI,QAAA,EAAE,MAAAC,OAAM,MAAA,IAAU;AACpB,MAAA,cAAc,UAAUA,KAAI;AAC9B,WAAO,EAAE,MAAAA,OAAM,KAAK,MAAM,KAAK,OAAO,MAAM,MAAM,MAAM,KAAK,GAAG,OAAO,MAAM,MAAM;AAE9E,SAAA;AACT;;;AClCA,IAAM,kBAAkB,CAAC,OAAO,aAAa;AACzC,MAAI,MAAM,UAAU;AAChB,WAAO;AACX,MAAI;AACA,aAAS,MAAM,GAAG,gBAAgB,EAAE,eAAe,CAAC;AACxD,SAAO;AACX;AACA,SAAS,aAAa,OAAO,MAAM;AAC/B,MAAI,EAAE,QAAQ,IAAI,MAAM;AACxB,MAAI,CAAC,YAAY,OAAO,CAAC,KAAK,eAAe,YAAY,KAAK,IACxD,QAAQ,eAAe;AACzB,WAAO;AACX,SAAO;AACX;AAUA,IAAM,eAAe,CAAC,OAAO,UAAU,SAAS;AAC5C,MAAI,UAAU,aAAa,OAAO,IAAI;AACtC,MAAI,CAAC;AACD,WAAO;AACX,MAAI,OAAO,cAAc,OAAO;AAEhC,MAAI,CAAC,MAAM;AACP,QAAI,QAAQ,QAAQ,WAAW,GAAG,SAAS,SAAS,WAAW,KAAK;AACpE,QAAI,UAAU;AACV,aAAO;AACX,QAAI;AACA,eAAS,MAAM,GAAG,KAAK,OAAO,MAAM,EAAE,eAAe,CAAC;AAC1D,WAAO;AAAA,EACX;AACA,MAAI,SAAS,KAAK;AAElB,MAAI,cAAc,OAAO,MAAM,UAAU,EAAE;AACvC,WAAO;AAGX,MAAI,QAAQ,OAAO,QAAQ,QAAQ,MAC9B,YAAY,QAAQ,KAAK,KAAK,cAAc,aAAa,MAAM,IAAI;AACpE,aAAS,QAAQ,QAAQ,SAAQ,SAAS;AACtC,UAAI,UAAU,YAAY,MAAM,KAAK,QAAQ,OAAO,KAAK,GAAG,QAAQ,MAAM,KAAK,GAAG,MAAM,KAAK;AAC7F,UAAI,WAAW,QAAQ,MAAM,OAAO,QAAQ,KAAK,QAAQ,MAAM;AAC3D,YAAI,UAAU;AACV,cAAI,KAAK,MAAM,GAAG,KAAK,OAAO;AAC9B,aAAG,aAAa,YAAY,QAAQ,KAAK,IACnC,UAAU,SAAS,GAAG,IAAI,QAAQ,GAAG,QAAQ,IAAI,KAAK,KAAK,EAAE,CAAC,GAAG,EAAE,IACnE,cAAc,OAAO,GAAG,KAAK,KAAK,MAAM,OAAO,QAAQ,CAAC;AAC9D,mBAAS,GAAG,eAAe,CAAC;AAAA,QAChC;AACA,eAAO;AAAA,MACX;AACA,UAAI,SAAS,KAAK,QAAQ,KAAK,QAAQ,CAAC,EAAE,aAAa;AACnD;AAAA,IACR;AAAA,EACJ;AAEA,MAAI,OAAO,UAAU,KAAK,SAAS,QAAQ,QAAQ,GAAG;AAClD,QAAI;AACA,eAAS,MAAM,GAAG,OAAO,KAAK,MAAM,OAAO,UAAU,KAAK,GAAG,EAAE,eAAe,CAAC;AACnF,WAAO;AAAA,EACX;AACA,SAAO;AACX;AAuDA,SAAS,YAAYC,OAAM,MAAM,OAAO,OAAO;AAC3C,WAAS,OAAOA,OAAM,MAAM,OAAQ,QAAQ,UAAU,KAAK,aAAa,KAAK,WAAY;AACrF,QAAI,KAAK;AACL,aAAO;AACX,QAAI,QAAQ,KAAK,cAAc;AAC3B,aAAO;AAAA,EACf;AACA,SAAO;AACX;AASA,IAAM,qBAAqB,CAAC,OAAO,UAAU,SAAS;AAClD,MAAI,EAAE,OAAO,OAAAC,OAAM,IAAI,MAAM,WAAW,OAAO;AAC/C,MAAI,CAACA;AACD,WAAO;AACX,MAAI,MAAM,OAAO,aAAa;AAC1B,QAAI,OAAO,CAAC,KAAK,eAAe,YAAY,KAAK,IAAI,MAAM,eAAe;AACtE,aAAO;AACX,WAAO,cAAc,KAAK;AAAA,EAC9B;AACA,MAAID,QAAO,QAAQ,KAAK;AACxB,MAAI,CAACA,SAAQ,CAAC,cAAc,aAAaA,KAAI;AACzC,WAAO;AACX,MAAI;AACA,aAAS,MAAM,GAAG,aAAa,cAAc,OAAO,MAAM,KAAK,KAAK,MAAMA,MAAK,QAAQ,CAAC,EAAE,eAAe,CAAC;AAC9G,SAAO;AACX;AACA,SAAS,cAAc,MAAM;AACzB,MAAI,CAAC,KAAK,OAAO,KAAK,KAAK;AACvB,aAASE,KAAI,KAAK,QAAQ,GAAGA,MAAK,GAAGA,MAAK;AACtC,UAAI,KAAK,MAAMA,EAAC,IAAI;AAChB,eAAO,KAAK,IAAI,QAAQ,KAAK,OAAOA,KAAI,CAAC,CAAC;AAC9C,UAAI,KAAK,KAAKA,EAAC,EAAE,KAAK,KAAK;AACvB;AAAA,IACR;AACJ,SAAO;AACX;AACA,SAAS,WAAW,OAAO,MAAM;AAC7B,MAAI,EAAE,QAAQ,IAAI,MAAM;AACxB,MAAI,CAAC,YAAY,OAAO,CAAC,KAAK,eAAe,WAAW,KAAK,IACvD,QAAQ,eAAe,QAAQ,OAAO,QAAQ;AAChD,WAAO;AACX,SAAO;AACX;AAQA,IAAM,cAAc,CAAC,OAAO,UAAU,SAAS;AAC3C,MAAI,UAAU,WAAW,OAAO,IAAI;AACpC,MAAI,CAAC;AACD,WAAO;AACX,MAAI,OAAO,aAAa,OAAO;AAE/B,MAAI,CAAC;AACD,WAAO;AACX,MAAI,QAAQ,KAAK;AAEjB,MAAI,cAAc,OAAO,MAAM,UAAU,CAAC;AACtC,WAAO;AAGX,MAAI,QAAQ,OAAO,QAAQ,QAAQ,MAC9B,YAAY,OAAO,OAAO,KAAK,cAAc,aAAa,KAAK,IAAI;AACpE,QAAI,UAAU,YAAY,MAAM,KAAK,QAAQ,OAAO,GAAG,QAAQ,MAAM,GAAG,MAAM,KAAK;AACnF,QAAI,WAAW,QAAQ,MAAM,OAAO,QAAQ,KAAK,QAAQ,MAAM;AAC3D,UAAI,UAAU;AACV,YAAI,KAAK,MAAM,GAAG,KAAK,OAAO;AAC9B,WAAG,aAAa,YAAY,OAAO,OAAO,IAAI,UAAU,SAAS,GAAG,IAAI,QAAQ,GAAG,QAAQ,IAAI,KAAK,GAAG,CAAC,GAAG,CAAC,IACtG,cAAc,OAAO,GAAG,KAAK,GAAG,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC;AAC5D,iBAAS,GAAG,eAAe,CAAC;AAAA,MAChC;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AAEA,MAAI,MAAM,UAAU,KAAK,SAAS,QAAQ,QAAQ,GAAG;AACjD,QAAI;AACA,eAAS,MAAM,GAAG,OAAO,KAAK,KAAK,KAAK,MAAM,MAAM,QAAQ,EAAE,eAAe,CAAC;AAClF,WAAO;AAAA,EACX;AACA,SAAO;AACX;AASA,IAAM,oBAAoB,CAAC,OAAO,UAAU,SAAS;AACjD,MAAI,EAAE,OAAO,OAAAD,OAAM,IAAI,MAAM,WAAW,OAAO;AAC/C,MAAI,CAACA;AACD,WAAO;AACX,MAAI,MAAM,OAAO,aAAa;AAC1B,QAAI,OAAO,CAAC,KAAK,eAAe,WAAW,KAAK,IAAI,MAAM,eAAe,MAAM,OAAO,QAAQ;AAC1F,aAAO;AACX,WAAO,aAAa,KAAK;AAAA,EAC7B;AACA,MAAID,QAAO,QAAQ,KAAK;AACxB,MAAI,CAACA,SAAQ,CAAC,cAAc,aAAaA,KAAI;AACzC,WAAO;AACX,MAAI;AACA,aAAS,MAAM,GAAG,aAAa,cAAc,OAAO,MAAM,KAAK,KAAK,GAAG,CAAC,EAAE,eAAe,CAAC;AAC9F,SAAO;AACX;AACA,SAAS,aAAa,MAAM;AACxB,MAAI,CAAC,KAAK,OAAO,KAAK,KAAK;AACvB,aAASE,KAAI,KAAK,QAAQ,GAAGA,MAAK,GAAGA,MAAK;AACtC,UAAI,SAAS,KAAK,KAAKA,EAAC;AACxB,UAAI,KAAK,MAAMA,EAAC,IAAI,IAAI,OAAO;AAC3B,eAAO,KAAK,IAAI,QAAQ,KAAK,MAAMA,KAAI,CAAC,CAAC;AAC7C,UAAI,OAAO,KAAK,KAAK;AACjB;AAAA,IACR;AACJ,SAAO;AACX;AAgEA,IAAM,gBAAgB,CAAC,OAAO,aAAa;AACvC,MAAI,EAAE,OAAO,QAAQ,IAAI,MAAM;AAC/B,MAAI,CAAC,MAAM,OAAO,KAAK,KAAK,QAAQ,CAAC,MAAM,WAAW,OAAO;AACzD,WAAO;AACX,MAAI;AACA,aAAS,MAAM,GAAG,WAAW,IAAI,EAAE,eAAe,CAAC;AACvD,SAAO;AACX;AACA,SAAS,eAAe,OAAO;AAC3B,WAASC,KAAI,GAAGA,KAAI,MAAM,WAAWA,MAAK;AACtC,QAAI,EAAE,KAAK,IAAI,MAAM,KAAKA,EAAC;AAC3B,QAAI,KAAK,eAAe,CAAC,KAAK,iBAAiB;AAC3C,aAAO;AAAA,EACf;AACA,SAAO;AACX;AAMA,IAAM,WAAW,CAAC,OAAO,aAAa;AAClC,MAAI,EAAE,OAAO,QAAQ,IAAI,MAAM;AAC/B,MAAI,CAAC,MAAM,OAAO,KAAK,KAAK,QAAQ,CAAC,MAAM,WAAW,OAAO;AACzD,WAAO;AACX,MAAI,QAAQ,MAAM,KAAK,EAAE,GAAG,QAAQ,MAAM,WAAW,EAAE,GAAG,OAAO,eAAe,MAAM,eAAe,KAAK,CAAC;AAC3G,MAAI,CAAC,QAAQ,CAAC,MAAM,eAAe,OAAO,OAAO,IAAI;AACjD,WAAO;AACX,MAAI,UAAU;AACV,QAAI,MAAM,MAAM,MAAM,GAAG,KAAK,MAAM,GAAG,YAAY,KAAK,KAAK,KAAK,cAAc,CAAC;AACjF,OAAG,aAAa,UAAU,KAAK,GAAG,IAAI,QAAQ,GAAG,GAAG,CAAC,CAAC;AACtD,aAAS,GAAG,eAAe,CAAC;AAAA,EAChC;AACA,SAAO;AACX;AAKA,IAAM,sBAAsB,CAAC,OAAO,aAAa;AAC7C,MAAI,MAAM,MAAM,WAAW,EAAE,OAAO,IAAI,IAAI;AAC5C,MAAI,eAAe,gBAAgB,MAAM,OAAO,iBAAiB,IAAI,OAAO;AACxE,WAAO;AACX,MAAI,OAAO,eAAe,IAAI,OAAO,eAAe,IAAI,WAAW,CAAC,CAAC;AACrE,MAAI,CAAC,QAAQ,CAAC,KAAK;AACf,WAAO;AACX,MAAI,UAAU;AACV,QAAI,QAAQ,CAAC,MAAM,gBAAgB,IAAI,MAAM,IAAI,IAAI,OAAO,aAAa,QAAQ,KAAK;AACtF,QAAI,KAAK,MAAM,GAAG,OAAO,MAAM,KAAK,cAAc,CAAC;AACnD,OAAG,aAAa,cAAc,OAAO,GAAG,KAAK,OAAO,CAAC,CAAC;AACtD,aAAS,GAAG,eAAe,CAAC;AAAA,EAChC;AACA,SAAO;AACX;AAKA,IAAM,iBAAiB,CAAC,OAAO,aAAa;AACxC,MAAI,EAAE,QAAQ,IAAI,MAAM;AACxB,MAAI,CAAC,WAAW,QAAQ,OAAO,QAAQ;AACnC,WAAO;AACX,MAAI,QAAQ,QAAQ,KAAK,QAAQ,MAAM,KAAK,QAAQ,IAAI,EAAE,GAAG;AACzD,QAAI,SAAS,QAAQ,OAAO;AAC5B,QAAI,SAAS,MAAM,KAAK,MAAM,GAAG;AAC7B,UAAI;AACA,iBAAS,MAAM,GAAG,MAAM,MAAM,EAAE,eAAe,CAAC;AACpD,aAAO;AAAA,IACX;AAAA,EACJ;AACA,MAAI,QAAQ,QAAQ,WAAW,GAAG,SAAS,SAAS,WAAW,KAAK;AACpE,MAAI,UAAU;AACV,WAAO;AACX,MAAI;AACA,aAAS,MAAM,GAAG,KAAK,OAAO,MAAM,EAAE,eAAe,CAAC;AAC1D,SAAO;AACX;AAKA,SAAS,aAAa,WAAW;AAC7B,SAAO,CAAC,OAAO,aAAa;AACxB,QAAI,EAAE,OAAO,IAAI,IAAI,MAAM;AAC3B,QAAI,MAAM,qBAAqB,iBAAiB,MAAM,UAAU,KAAK,SAAS;AAC1E,UAAI,CAAC,MAAM,gBAAgB,CAAC,SAAS,MAAM,KAAK,MAAM,GAAG;AACrD,eAAO;AACX,UAAI;AACA,iBAAS,MAAM,GAAG,MAAM,MAAM,GAAG,EAAE,eAAe,CAAC;AACvD,aAAO;AAAA,IACX;AACA,QAAI,CAAC,MAAM,OAAO;AACd,aAAO;AACX,QAAI,QAAQ,IAAI,gBAAgB,IAAI,OAAO,QAAQ;AACnD,QAAI,KAAK,MAAM;AACf,QAAI,MAAM,qBAAqB,iBAAiB,MAAM,qBAAqB;AACvE,SAAG,gBAAgB;AACvB,QAAI,QAAQ,MAAM,SAAS,IAAI,OAAO,eAAe,MAAM,KAAK,EAAE,EAAE,eAAe,MAAM,WAAW,EAAE,CAAC,CAAC;AACxG,QAAI,YAAY,aAAa,UAAU,IAAI,QAAQ,OAAO,KAAK;AAC/D,QAAIC,SAAQ,YAAY,CAAC,SAAS,IAAI,SAAS,QAAQ,CAAC,EAAE,MAAM,MAAM,CAAC,IAAI;AAC3E,QAAI,MAAM,SAAS,GAAG,KAAK,GAAG,QAAQ,IAAI,MAAM,GAAG,GAAG,GAAGA,MAAK;AAC9D,QAAI,CAACA,UAAS,CAAC,OAAO,SAAS,GAAG,KAAK,GAAG,QAAQ,IAAI,MAAM,GAAG,GAAG,GAAG,QAAQ,CAAC,EAAE,MAAM,MAAM,CAAC,IAAI,MAAS,GAAG;AACzG,UAAI;AACA,QAAAA,SAAQ,CAAC,EAAE,MAAM,MAAM,CAAC;AAC5B,YAAM;AAAA,IACV;AACA,QAAI,CAAC;AACD,aAAO;AACX,OAAG,MAAM,GAAG,QAAQ,IAAI,MAAM,GAAG,GAAG,GAAGA,MAAK;AAC5C,QAAI,CAAC,SAAS,CAAC,MAAM,gBAAgB,MAAM,OAAO,QAAQ,OAAO;AAC7D,UAAI,QAAQ,GAAG,QAAQ,IAAI,MAAM,OAAO,CAAC,GAAG,SAAS,GAAG,IAAI,QAAQ,KAAK;AACzE,UAAI,SAAS,MAAM,KAAK,EAAE,EAAE,eAAe,OAAO,MAAM,GAAG,OAAO,MAAM,IAAI,GAAG,KAAK;AAChF,WAAG,cAAc,GAAG,QAAQ,IAAI,MAAM,OAAO,CAAC,GAAG,KAAK;AAAA,IAC9D;AACA,QAAI;AACA,eAAS,GAAG,eAAe,CAAC;AAChC,WAAO;AAAA,EACX;AACJ;AAKA,IAAM,aAAa,aAAa;AA8BhC,IAAM,YAAY,CAAC,OAAO,aAAa;AACnC,MAAI;AACA,aAAS,MAAM,GAAG,aAAa,IAAI,aAAa,MAAM,GAAG,CAAC,CAAC;AAC/D,SAAO;AACX;AACA,SAAS,eAAe,OAAO,MAAM,UAAU;AAC3C,MAAI,SAAS,KAAK,YAAY,QAAQ,KAAK,WAAWC,SAAQ,KAAK,MAAM;AACzE,MAAI,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,KAAK,kBAAkB,MAAM,IAAI;AAC9D,WAAO;AACX,MAAI,CAAC,OAAO,QAAQ,QAAQ,KAAK,OAAO,WAAWA,SAAQ,GAAGA,MAAK,GAAG;AAClE,QAAI;AACA,eAAS,MAAM,GAAG,OAAO,KAAK,MAAM,OAAO,UAAU,KAAK,GAAG,EAAE,eAAe,CAAC;AACnF,WAAO;AAAA,EACX;AACA,MAAI,CAAC,KAAK,OAAO,WAAWA,QAAOA,SAAQ,CAAC,KAAK,EAAE,MAAM,eAAe,QAAQ,MAAM,KAAK,KAAK,GAAG;AAC/F,WAAO;AACX,MAAI;AACA,aAAS,MAAM,GAAG,KAAK,KAAK,GAAG,EAAE,eAAe,CAAC;AACrD,SAAO;AACX;AACA,SAAS,cAAc,OAAO,MAAM,UAAU,KAAK;AAC/C,MAAI,SAAS,KAAK,YAAY,QAAQ,KAAK,WAAW,MAAM;AAC5D,MAAI,WAAW,OAAO,KAAK,KAAK,aAAa,MAAM,KAAK,KAAK;AAC7D,MAAI,CAAC,YAAY,eAAe,OAAO,MAAM,QAAQ;AACjD,WAAO;AACX,MAAI,cAAc,CAAC,YAAY,KAAK,OAAO,WAAW,KAAK,MAAM,GAAG,KAAK,MAAM,IAAI,CAAC;AACpF,MAAI,gBACC,QAAQ,QAAQ,OAAO,eAAe,OAAO,UAAU,GAAG,aAAa,MAAM,IAAI,MAClF,MAAM,UAAU,KAAK,CAAC,KAAK,MAAM,IAAI,EAAE,UAAU;AACjD,QAAI,UAAU;AACV,UAAI,MAAM,KAAK,MAAM,MAAM,UAAUC,QAAO,SAAS;AACrD,eAASC,KAAI,KAAK,SAAS,GAAGA,MAAK,GAAGA;AAClC,QAAAD,QAAO,SAAS,KAAK,KAAKC,EAAC,EAAE,OAAO,MAAMD,KAAI,CAAC;AACnD,MAAAA,QAAO,SAAS,KAAK,OAAO,KAAKA,KAAI,CAAC;AACtC,UAAI,KAAK,MAAM,GAAG,KAAK,IAAI,kBAAkB,KAAK,MAAM,GAAG,KAAK,KAAK,KAAK,KAAK,IAAI,MAAMA,OAAM,GAAG,CAAC,GAAG,KAAK,QAAQ,IAAI,CAAC;AACxH,UAAI,UAAU,GAAG,IAAI,QAAQ,MAAM,IAAI,KAAK,MAAM;AAClD,UAAI,QAAQ,aAAa,QAAQ,UAAU,QAAQ,OAAO,QACtD,QAAQ,GAAG,KAAK,QAAQ,GAAG;AAC3B,WAAG,KAAK,QAAQ,GAAG;AACvB,eAAS,GAAG,eAAe,CAAC;AAAA,IAChC;AACA,WAAO;AAAA,EACX;AACA,MAAI,WAAW,MAAM,KAAK,KAAK,aAAc,MAAM,KAAK,WAAY,OAAO,UAAU,SAAS,MAAM,CAAC;AACrG,MAAI,QAAQ,YAAY,SAAS,MAAM,WAAW,SAAS,GAAG,GAAG,SAAS,SAAS,WAAW,KAAK;AACnG,MAAI,UAAU,QAAQ,UAAU,KAAK,OAAO;AACxC,QAAI;AACA,eAAS,MAAM,GAAG,KAAK,OAAO,MAAM,EAAE,eAAe,CAAC;AAC1D,WAAO;AAAA,EACX;AACA,MAAI,eAAe,YAAY,OAAO,SAAS,IAAI,KAAK,YAAY,QAAQ,KAAK,GAAG;AAChF,QAAIE,MAAK,QAAQF,QAAO,CAAC;AACzB,eAAS;AACL,MAAAA,MAAK,KAAKE,GAAE;AACZ,UAAIA,IAAG;AACH;AACJ,MAAAA,MAAKA,IAAG;AAAA,IACZ;AACA,QAAI,YAAY,OAAO,aAAa;AACpC,WAAO,CAAC,UAAU,aAAa,YAAY,UAAU;AACjD;AACJ,QAAIA,IAAG,WAAWA,IAAG,YAAYA,IAAG,YAAY,UAAU,OAAO,GAAG;AAChE,UAAI,UAAU;AACV,YAAI,MAAM,SAAS;AACnB,iBAASD,KAAID,MAAK,SAAS,GAAGC,MAAK,GAAGA;AAClC,gBAAM,SAAS,KAAKD,MAAKC,EAAC,EAAE,KAAK,GAAG,CAAC;AACzC,YAAI,KAAK,MAAM,GAAG,KAAK,IAAI,kBAAkB,KAAK,MAAMD,MAAK,QAAQ,KAAK,MAAM,MAAM,UAAU,KAAK,MAAM,YAAY,KAAK,MAAM,MAAM,WAAW,YAAY,IAAI,MAAM,KAAKA,MAAK,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC;AACvM,iBAAS,GAAG,eAAe,CAAC;AAAA,MAChC;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAO;AACX;AACA,SAAS,oBAAoB,MAAM;AAC/B,SAAO,SAAU,OAAO,UAAU;AAC9B,QAAI,MAAM,MAAM,WAAW,OAAO,OAAO,IAAI,IAAI,QAAQ,IAAI;AAC7D,QAAI,QAAQ,KAAK;AACjB,WAAO,KAAK,KAAK,KAAK,EAAE,UAAU;AAC9B,UAAI,CAAC;AACD,eAAO;AACX;AAAA,IACJ;AACA,QAAI,CAAC,KAAK,KAAK,KAAK,EAAE;AAClB,aAAO;AACX,QAAI;AACA,eAAS,MAAM,GAAG,aAAa,cAAc,OAAO,MAAM,KAAK,OAAO,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC;AACnH,WAAO;AAAA,EACX;AACJ;AAIA,IAAM,uBAAuB,oBAAoB,EAAE;AAInD,IAAM,qBAAqB,oBAAoB,CAAC;AAMhD,SAAS,OAAO,UAAU,QAAQ,MAAM;AACpC,SAAO,SAAU,OAAO,UAAU;AAC9B,QAAI,EAAE,OAAO,IAAI,IAAI,MAAM;AAC3B,QAAI,QAAQ,MAAM,WAAW,GAAG,GAAG,WAAW,SAAS,aAAa,OAAO,UAAU,KAAK;AAC1F,QAAI,CAAC;AACD,aAAO;AACX,QAAI;AACA,eAAS,MAAM,GAAG,KAAK,OAAO,QAAQ,EAAE,eAAe,CAAC;AAC5D,WAAO;AAAA,EACX;AACJ;AAKA,SAAS,aAAa,UAAU,QAAQ,MAAM;AAC1C,SAAO,SAAU,OAAO,UAAU;AAC9B,QAAI,aAAa;AACjB,aAASC,KAAI,GAAGA,KAAI,MAAM,UAAU,OAAO,UAAU,CAAC,YAAYA,MAAK;AACnE,UAAI,EAAE,OAAO,EAAE,KAAK,KAAK,GAAG,KAAK,EAAE,KAAK,GAAG,EAAE,IAAI,MAAM,UAAU,OAAOA,EAAC;AACzE,YAAM,IAAI,aAAa,MAAM,IAAI,CAACE,OAAM,QAAQ;AAC5C,YAAI;AACA,iBAAO;AACX,YAAI,CAACA,MAAK,eAAeA,MAAK,UAAU,UAAU,KAAK;AACnD;AACJ,YAAIA,MAAK,QAAQ,UAAU;AACvB,uBAAa;AAAA,QACjB,OACK;AACD,cAAI,OAAO,MAAM,IAAI,QAAQ,GAAG,GAAGJ,SAAQ,KAAK,MAAM;AACtD,uBAAa,KAAK,OAAO,eAAeA,QAAOA,SAAQ,GAAG,QAAQ;AAAA,QACtE;AAAA,MACJ,CAAC;AAAA,IACL;AACA,QAAI,CAAC;AACD,aAAO;AACX,QAAI,UAAU;AACV,UAAI,KAAK,MAAM;AACf,eAASE,KAAI,GAAGA,KAAI,MAAM,UAAU,OAAO,QAAQA,MAAK;AACpD,YAAI,EAAE,OAAO,EAAE,KAAK,KAAK,GAAG,KAAK,EAAE,KAAK,GAAG,EAAE,IAAI,MAAM,UAAU,OAAOA,EAAC;AACzE,WAAG,aAAa,MAAM,IAAI,UAAU,KAAK;AAAA,MAC7C;AACA,eAAS,GAAG,eAAe,CAAC;AAAA,IAChC;AACA,WAAO;AAAA,EACX;AACJ;AACA,SAAS,YAAYG,MAAK,QAAQ,MAAM,YAAY;AAChD,WAASH,KAAI,GAAGA,KAAI,OAAO,QAAQA,MAAK;AACpC,QAAI,EAAE,OAAO,IAAI,IAAI,OAAOA,EAAC;AAC7B,QAAI,MAAM,MAAM,SAAS,IAAIG,KAAI,iBAAiBA,KAAI,KAAK,eAAe,IAAI,IAAI;AAClF,IAAAA,KAAI,aAAa,MAAM,KAAK,IAAI,KAAK,CAACD,OAAM,QAAQ;AAChD,UAAI,OAAO,CAAC,cAAcA,MAAK,UAAUA,MAAK,YAAY,OAAO,MAAM,OAAO,MAAMA,MAAK,YAAY,IAAI;AACrG,eAAO;AACX,YAAMA,MAAK,iBAAiBA,MAAK,KAAK,eAAe,IAAI;AAAA,IAC7D,CAAC;AACD,QAAI;AACA,aAAO;AAAA,EACf;AACA,SAAO;AACX;AACA,SAAS,kBAAkB,QAAQ;AAC/B,MAAI,SAAS,CAAC;AACd,WAASF,KAAI,GAAGA,KAAI,OAAO,QAAQA,MAAK;AACpC,QAAI,EAAE,OAAO,IAAI,IAAI,OAAOA,EAAC;AAC7B,UAAM,IAAI,aAAa,MAAM,KAAK,IAAI,KAAK,CAACE,OAAM,QAAQ;AACtD,UAAIA,MAAK,UAAUA,MAAK,QAAQ,QAAQA,MAAK,YAAY,OAAO,MAAM,OAAO,MAAMA,MAAK,YAAY,IAAI,KAAK;AACzG,YAAI,MAAM,IAAI,MAAM;AAChB,iBAAO,KAAK,IAAI,eAAe,OAAO,MAAM,IAAI,QAAQ,MAAM,CAAC,CAAC,CAAC;AACrE,gBAAQ,MAAM,IAAI,QAAQ,MAAM,IAAIA,MAAK,QAAQ,IAAI;AACrD,eAAO;AAAA,MACX;AAAA,IACJ,CAAC;AACD,QAAI,MAAM,MAAM,IAAI;AAChB,aAAO,KAAK,IAAI,eAAe,OAAO,GAAG,CAAC;AAAA,EAClD;AACA,SAAO;AACX;AAUA,SAAS,WAAW,UAAU,QAAQ,MAAM,SAAS;AACjD,MAAI,qBAAqB,WAAW,QAAQ,uBAAuB;AACnE,MAAI,cAAc,WAAW,QAAQ,sBAAsB;AAC3D,SAAO,SAAU,OAAO,UAAU;AAC9B,QAAI,EAAE,OAAAE,QAAO,SAAS,OAAO,IAAI,MAAM;AACvC,QAAKA,UAAS,CAAC,WAAY,CAAC,YAAY,MAAM,KAAK,QAAQ,UAAU,UAAU;AAC3E,aAAO;AACX,QAAI,UAAU;AACV,UAAI,SAAS;AACT,YAAI,SAAS,QAAQ,MAAM,eAAe,QAAQ,MAAM,CAAC;AACrD,mBAAS,MAAM,GAAG,iBAAiB,QAAQ,CAAC;AAAA;AAE5C,mBAAS,MAAM,GAAG,cAAc,SAAS,OAAO,KAAK,CAAC,CAAC;AAAA,MAC/D,OACK;AACD,YAAI,KAAK,KAAK,MAAM;AACpB,YAAI,CAAC;AACD,mBAAS,kBAAkB,MAAM;AACrC,YAAI,mBAAmB;AACnB,gBAAM,CAAC,OAAO,KAAK,OAAK,MAAM,IAAI,aAAa,EAAE,MAAM,KAAK,EAAE,IAAI,KAAK,QAAQ,CAAC;AAAA,QACpF,OACK;AACD,gBAAM,CAAC,OAAO,MAAM,OAAK;AACrB,gBAAI,UAAU;AACd,eAAG,IAAI,aAAa,EAAE,MAAM,KAAK,EAAE,IAAI,KAAK,CAACF,OAAM,KAAK,WAAW;AAC/D,kBAAI;AACA,uBAAO;AACX,wBAAU,CAAC,SAAS,QAAQA,MAAK,KAAK,KAAK,CAAC,CAAC,UAAU,OAAO,KAAK,eAAe,QAAQ,KACtF,EAAEA,MAAK,UAAU,QAAQ,KAAKA,MAAK,YAAY,KAAK,IAAI,GAAG,EAAE,MAAM,MAAM,GAAG,GAAG,KAAK,IAAIA,MAAK,UAAU,EAAE,IAAI,MAAM,GAAG,CAAC,CAAC;AAAA,YAChI,CAAC;AACD,mBAAO,CAAC;AAAA,UACZ,CAAC;AAAA,QACL;AACA,iBAASF,KAAI,GAAGA,KAAI,OAAO,QAAQA,MAAK;AACpC,cAAI,EAAE,OAAO,IAAI,IAAI,OAAOA,EAAC;AAC7B,cAAI,CAAC,KAAK;AACN,eAAG,WAAW,MAAM,KAAK,IAAI,KAAK,QAAQ;AAAA,UAC9C,OACK;AACD,gBAAI,OAAO,MAAM,KAAK,KAAK,IAAI,KAAK,QAAQ,MAAM,WAAW,MAAM,IAAI;AACvE,gBAAI,aAAa,SAAS,MAAM,SAAS,OAAO,KAAK,MAAM,IAAI,EAAE,CAAC,EAAE,SAAS;AAC7E,gBAAI,WAAW,OAAO,IAAI,SAAS,OAAO,KAAK,IAAI,IAAI,EAAE,CAAC,EAAE,SAAS;AACrE,gBAAI,OAAO,aAAa,IAAI;AACxB,sBAAQ;AACR,oBAAM;AAAA,YACV;AACA,eAAG,QAAQ,MAAM,IAAI,SAAS,OAAO,KAAK,CAAC;AAAA,UAC/C;AAAA,QACJ;AACA,iBAAS,GAAG,eAAe,CAAC;AAAA,MAChC;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AAwDA,SAAS,iBAAiB,UAAU;AAChC,SAAO,SAAU,OAAO,UAAU,MAAM;AACpC,aAASK,KAAI,GAAGA,KAAI,SAAS,QAAQA;AACjC,UAAI,SAASA,EAAC,EAAE,OAAO,UAAU,IAAI;AACjC,eAAO;AACf,WAAO;AAAA,EACX;AACJ;AACA,IAAI,YAAY,cAAc,iBAAiB,cAAc,kBAAkB;AAC/E,IAAI,MAAM,cAAc,iBAAiB,aAAa,iBAAiB;AAavE,IAAM,eAAe;AAAA,EACjB,SAAS,cAAc,eAAe,qBAAqB,gBAAgB,UAAU;AAAA,EACrF,aAAa;AAAA,EACb,aAAa;AAAA,EACb,iBAAiB;AAAA,EACjB,mBAAmB;AAAA,EACnB,UAAU;AAAA,EACV,cAAc;AAAA,EACd,SAAS;AACb;AAOA,IAAM,gBAAgB;AAAA,EAClB,UAAU,aAAa,WAAW;AAAA,EAClC,iBAAiB,aAAa,eAAe;AAAA,EAC7C,UAAU,aAAa,QAAQ;AAAA,EAC/B,sBAAsB,aAAa,YAAY;AAAA,EAC/C,cAAc,aAAa,YAAY;AAAA,EACvC,SAAS,aAAa,YAAY;AAAA,EAClC,UAAU;AAAA,EACV,UAAU;AACd;AACA,SAAS,OAAO;AACZ,gBAAc,GAAG,IAAI,aAAa,GAAG;AACzC,IAAMC,OAAM,OAAO,aAAa,cAAc,qBAAqB,KAAK,UAAU,QAAQ,IAEpF,OAAO,MAAM,eAAe,GAAG,WAAW,GAAG,SAAS,KAAK,WAAW;AAM5E,IAAM,aAAaA,OAAM,gBAAgB;;;AC5zBzC,IAAMC,OAAM,OAAO,aAAa,cAAc,qBAAqB,KAAK,UAAU,QAAQ,IAAI;AAC9F,SAAS,iBAAiB,MAAM;AAC5B,MAAI,QAAQ,KAAK,MAAM,QAAQ,GAAG,SAAS,MAAM,MAAM,SAAS,CAAC;AACjE,MAAI,UAAU;AACV,aAAS;AACb,MAAI,KAAK,MAAM,OAAO;AACtB,WAASC,KAAI,GAAGA,KAAI,MAAM,SAAS,GAAGA,MAAK;AACvC,QAAI,MAAM,MAAMA,EAAC;AACjB,QAAI,kBAAkB,KAAK,GAAG;AAC1B,aAAO;AAAA,aACF,YAAY,KAAK,GAAG;AACzB,YAAM;AAAA,aACD,sBAAsB,KAAK,GAAG;AACnC,aAAO;AAAA,aACF,cAAc,KAAK,GAAG;AAC3B,cAAQ;AAAA,aACH,SAAS,KAAK,GAAG,GAAG;AACzB,UAAID;AACA,eAAO;AAAA;AAEP,eAAO;AAAA,IACf;AAEI,YAAM,IAAI,MAAM,iCAAiC,GAAG;AAAA,EAC5D;AACA,MAAI;AACA,aAAS,SAAS;AACtB,MAAI;AACA,aAAS,UAAU;AACvB,MAAI;AACA,aAAS,UAAU;AACvB,MAAI;AACA,aAAS,WAAW;AACxB,SAAO;AACX;AACA,SAASE,WAAUC,MAAK;AACpB,MAAI,OAAO,uBAAO,OAAO,IAAI;AAC7B,WAAS,QAAQA;AACb,SAAK,iBAAiB,IAAI,CAAC,IAAIA,KAAI,IAAI;AAC3C,SAAO;AACX;AACA,SAAS,UAAU,MAAM,OAAO,QAAQ,MAAM;AAC1C,MAAI,MAAM;AACN,WAAO,SAAS;AACpB,MAAI,MAAM;AACN,WAAO,UAAU;AACrB,MAAI,MAAM;AACN,WAAO,UAAU;AACrB,MAAI,SAAS,MAAM;AACf,WAAO,WAAW;AACtB,SAAO;AACX;AAgCA,SAAS,OAAO,UAAU;AACtB,SAAO,IAAI,OAAO,EAAE,OAAO,EAAE,eAAe,eAAe,QAAQ,EAAE,EAAE,CAAC;AAC5E;AAMA,SAAS,eAAe,UAAU;AAC9B,MAAIA,OAAMD,WAAU,QAAQ;AAC5B,SAAO,SAAU,MAAM,OAAO;AAC1B,QAAI,OAAO,QAAQ,KAAK,GAAG,UAAU,SAASC,KAAI,UAAU,MAAM,KAAK,CAAC;AACxE,QAAI,UAAU,OAAO,KAAK,OAAO,KAAK,UAAU,IAAI;AAChD,aAAO;AAEX,QAAI,KAAK,UAAU,KAAK,QAAQ,KAAK;AACjC,UAAI,MAAM,UAAU;AAGhB,YAAI,UAAUA,KAAI,UAAU,MAAM,OAAO,KAAK,CAAC;AAC/C,YAAI,WAAW,QAAQ,KAAK,OAAO,KAAK,UAAU,IAAI;AAClD,iBAAO;AAAA,MACf;AACA,WAAK,MAAM,YAAY,MAAM,UAAU,MAAM,WAAW,KAAK,WAAW,CAAC,IAAI,SACxE,WAAW,KAAK,MAAM,OAAO,MAAM,YAAY,MAAM;AAKtD,YAAI,WAAWA,KAAI,UAAU,UAAU,KAAK,CAAC;AAC7C,YAAI,YAAY,SAAS,KAAK,OAAO,KAAK,UAAU,IAAI;AACpD,iBAAO;AAAA,MACf;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;;;;;;;;;;;;;;ACxHgB,SAAAC,GAAmCC,IAAWC,IAAoD;AAChH,SAAAD,GAAO,OAAO;IACZ,SAAS;IACT,OAAO;IACP,GAAGC;EAAA,GAGED;AACT;ACRO,IAAME,KAAgD;EAC3D,QAAQ,CAACC,IAAMC,IAAGC,GAAOC,OAAS;AAChC,UAAMC,KAASJ,GAAK,UAAUE,EAAM,QAAQ,UAAU,KAChDG,KAAOH,EAAM,MAAM,QAAQ,GAC3BI,KAAUJ,EAAM,cAAcC,EAAI;AACxC,QAAII,KAAQD,GAAQ,KAAKF,KAASA,EAAM;AACxC,WAAAG,MAASD,GAAQ;MACfJ,EAAM,kBAAkBF,IAAM;QAC5B,QAAQO;QACR,OAAOH;QACP,GAAGE,GAAQ,QAAQ;MAAA,CACpB;IAAA,GAEMC,MAAAD,GAAQ,KAAKF,KAASA,EAAM,GAChCC,GAAAA,GACEE;EACT;EACA,UAAU,CAACP,IAAMC,IAAGC,GAAOC,OAAS;AAClC,UAAMC,KAASJ,GAAK,UAAUE,EAAM,QAAQ,YAAY,KAClDG,KAAOH,EAAM,MAAM,UAAU,GAC7BI,KAAUJ,EAAM,cAAcC,EAAI;AACpC,QAAAI,KAAQD,GAAQ,KAAKF,EAAM;AAC/B,WAAAG,MAASD,GAAQ;MACfJ,EAAM,kBAAkBF,IAAM;QAC5B,QAAQO;QACR,OAAOH;QACP,GAAGE,GAAQ,QAAQ;MAAA,CACpB;IAAA,GAEMC,MAAAD,GAAQ,KAAKF,EAAM,GACvBC,GAAAA,GACEE;EACT;AACF;AAjCO,ICYMC,KAAgBC,EAAY,CAAC,GAAiB,YAAY;ADZhE,ICeMC,KAAiBD,EAAY,CAAC,GAAkB,aAAa;ADfnE,ICmBME,KAAeF,EAAY,CAAC,GAAkB,WAAW;ADnB/D,ICsBMG,KAAYH,EAAY,CAAC,GAAa,QAAQ;ADtBpD,ICyBMI,KAAgBJ,EAAY,CAAC,GAAkB,YAAY;ADzBjE,IC4BMK,KAAkBL,EAAY,CAAC,GAAe,cAAc;AD5BlE,IC+BMM,KAAmBN,EAAY,CAAC,GAAqB,eAAe;AD/B1E,ICoCMO,KAAcP,EAAY,CAAC,GAAiB,UAAU;ADpC5D,ICyCMQ,KAAcR,EAAY,CAAC,GAAiB,UAAU;ADzC5D,IC4CMS,KAA+CT,EAAYU,QAAA,EAAU,IAAIC,WAAW,EAAE,IAAIC,eAAe,GAAG,QAAQ;AD5C1H,IC+CMC,IAA4Bb,EAAY;EACnD,UAAUV;AACZ,GAAc,wBAAwB;ADjD/B,IEMMwB,KAAcC,EAAY,aAAa;AAI7C,SAASC,GAAOC,IAAmC;AAClD,QAAA7B,KAAyB,CAAC8B,OAC9BA,EAAI,OAAOJ,EAAW,GAEf,aACL,MAAMG,GAAUC,CAAG,GACnBA,EAAI,KAAKJ,EAAW,GAEb,MAAM;AACXI,MAAI,WAAWJ,EAAW;EAAA;AAKhC,SAAA3B,GAASC,IAAQ;IACf,aAAa;EAAA,CACd,GAEMA;AACT;ACTa,IAAA+B,KAAYJ,EAAY,WAAW;AAMzC,SAASK,GAAKC,IAAgC;AAC7C,QAAAjC,KAAyB,CAAC8B,OAC9BA,EAAI,OAAOf,IAAWkB,EAAM,EACzB,OAAOhB,IAAiB,CAAA,CAAE,EAC1B,OAAOC,IAAkB,CAAA,CAAE,EAC3B,OAAOF,IAAe,CAAE,CAAA,EACxB,OAAOG,IAAa,CAAE,CAAA,EACtB,OAAOC,IAAa,CAAA,CAAE,EACtB,OAAOK,GAA2B;IACjC,UAAUvB;EAAA,CACX,EACA,OAAOmB,IAAWC,QAAU,EAAA,IAAIC,WAAW,EAAE,IAAIC,eAAe,CAAC,EACjE,OAAOV,IAAc,CAACY,EAAW,CAAC,EAClC,OAAOK,EAAS,GAEZ,YAAY;AACX,UAAAD,EAAI,WAAWhB,EAAY;AAC3B,UAAAoB,KAAUJ,EAAI,IAAIL,CAAyB;AAC7C,WAAAK,EAAA,IAAIT,IAAWC,QAAAA,EAAU,IAAIC,WAAW,EAAE,IAAIC,iBAAiBU,EAAO,CAAC,GAE3EJ,EAAI,KAAKC,EAAS,GAEX,MAAM;AACXD,QAAI,OAAOf,EAAS,EACjB,OAAOE,EAAe,EACtB,OAAOC,EAAgB,EACvB,OAAOF,EAAa,EACpB,OAAOG,EAAW,EAClB,OAAOC,EAAW,EAClB,OAAOK,CAAyB,EAChC,OAAOJ,EAAS,EAChB,OAAOP,EAAY,EACnB,WAAWiB,EAAS;IAAA;EACzB;AAGJ,SAAAhC,GAASC,IAAQ;IACf,aAAa;EAAA,CACd,GAEMA;AACT;AC3Da,IAAAmC,KAAcR,EAAY,aAAa;AAAvC,IAIAS,KAAiBxB,EAAY,CAAC,GAAkB,aAAa;AAJ7D,IAOAyB,KAAYzB,EAAY,CAAC,GAAa,QAAQ;AAP9C,IAUA0B,IAAW1B,EAAY,CAAC,GAAkC,OAAO;AAVjE,IAaA2B,IAAW3B,EAAY,CAAC,GAAkC,OAAO;AAE9E,SAAS4B,GAAkDC,IAAS;;AAC3D,SAAA;IACL,GAAGA;IACH,WAAUC,KAAAD,GAAE,aAAF,OAAA,SAAAC,GAAY,IAAI,CAAAC,OAAS,EAAE,UAAUF,GAAE,UAAU,GAAGE,EAAO,EAAA;EAAA;AAEzE;AAMa,IAAAC,KAAyB,CAACd,QAElCA,GAAA,OAAOO,IAAW,CAAY,CAAA,EAC9B,OAAOC,GAAU,CAAE,CAAA,EACnB,OAAOC,GAAU,CAAA,CAAE,EACnB,OAAOH,IAAgB,CAACL,EAAS,CAAC,EAClC,OAAOI,EAAW,GAEd,YAAY;AACX,QAAAL,GAAI,WAAWM,EAAc;AAE7B,QAAAS,KAASf,GAAI,IAAIT,EAAS,GAG1ByB,KAFgBhB,GAAI,IAAIZ,EAAgB,EAEd,OAAO,CAAC6B,IAAmBC,OAASD,GAAI,IAAIC,GAAK,QAAQA,GAAK,OAAO,GAA8BH,EAAM;AACrIf,EAAAA,GAAA,IAAIT,IAAWyB,EAAS;AAE5B,QAAMG,KAAQ,OAAO,YAAYnB,GAAI,IAAIQ,CAAQ,EAAE,IAAI,CAAC,CAACY,IAAKT,EAAC,MAAM,CAACS,IAAKV,GAAeC,EAAC,CAAC,CAAC,CAAC,GACxFU,KAAQ,OAAO,YAAYrB,GAAI,IAAIS,CAAQ,EAAE,IAAI,CAAC,CAACW,IAAKT,EAAC,MAAM,CAACS,IAAKV,GAAeC,EAAC,CAAC,CAAC,CAAC,GACxFG,KAAS,IAAIQ,OAAO,EAAE,OAAAH,IAAO,OAAAE,GAAO,CAAA;AAEtC,SAAArB,GAAA,IAAIO,IAAWO,EAAM,GAEzBd,GAAI,KAAKK,EAAW,GAEb,MAAM;AACXL,IAAAA,GAAI,OAAOO,EAAS,EAAE,OAAOC,CAAQ,EAAE,OAAOC,CAAQ,EAAE,OAAOH,EAAc,EAAE,WAAWD,EAAW;EAAA;AACvG;AAIJpC,GAAS6C,IAAQ;EACf,aAAa;AACf,CAAC;;;AChDM,IAAMS,KAAN,MAAqB;EAArB,cAAA;AAELC,IAAAA,GAAA,MAAAC,IAAA,MAAA;AAGAD,IAAAA,GAAA,MAAAE,IAAA,MAAA;AAHAC,IAAAA,GAAA,MAAAF,IAAa,IAAIG,EAAAA,CAAAA,GAGED,GAAA,MAAAD,IAAA,IAAA,GAGnB,KAAA,SAAS,CAAC1B,OAAa;AACrB2B,MAAAA,GAAA,MAAKD,IAAO1B,EAAAA;IAAA;EACd;EAEA,IAAI,MAAM;AACR,WAAO6B,EAAA,MAAKH,EAAAA;EACd;;EAGA,OAAUvD,IAAiBS,GAAe;AACxC,UAAMkD,KAAQ3D,GAAK,OAAO0D,EAAA,MAAKJ,EAAAA,EAAW,QAAQ;AAClD,WAAAK,GAAM,IAAIlD,CAAK,GACRkD;EACT;EAMA,IAAIA,IAAuC;AACzC,WAAOD,EAAA,MAAKJ,EAAAA,EAAW,IAAIK,EAAK,EAAE,IAAI;EACxC;EAMA,OAAOA,IAAmC;AACjC,WAAAD,EAAA,MAAKJ,EAAAA,EAAW,OAAOK,EAAK;EACrC;EAMA,KAAKA,IAA6BC,GAAwB;AACxD,QAAIF,EAAA,MAAKH,EAAAA,KAAQ;AACf,YAAMM,EAA4B;AAG9B,UAAAC,KADM,KAAK,IAAIH,EAAK,EACNC,CAAO,GACrBG,KAAOL,EAAA,MAAKH,EAAAA,EAAK,IAAI7C,EAAa;AACxC,WAAOoD,GAAQC,GAAK,OAAOA,GAAK,UAAUA,EAAI;EAChD;AACF;AAlDET,KAAA,oBAAA,QAAA,GAGAC,KAAA,oBAAA,QAAA;AAkDc,SAAAS,GAA4Bf,KAAM,UAAqB;AACrE,SAAOtC,EAAa,MAAM,MAAM,OAAkBsC,EAAG;AACvD;AAGO,IAAMgB,KAActD,EAAY,IAAIyC,GAAA,GAAkB,UAAU;AAAhE,IAIMc,KAAmBvD,EAAY,CAACuB,EAAW,GAAG,eAAe;AAJnE,IAOMiC,IAAgBzC,EAAY,eAAe;AAPjD,IAaM0C,KAA2B,CAACvC,OAAQ;AACzC,QAAAwC,KAAM,IAAIjB,GAAAA;AAChB,SAAAiB,GAAI,OAAOxC,EAAG,GACVA,GAAA,OAAOoC,IAAaI,EAAG,EAAE,OAAOH,IAAkB,CAAChC,EAAW,CAAC,EAAE,OAAOiC,CAAa,GAClF,aACC,MAAAtC,GAAI,WAAWqC,EAAgB,GAErCrC,GAAI,KAAKsC,CAAa,GAEf,MAAM;AACXtC,IAAAA,GAAI,OAAOoC,EAAW,EAAE,OAAOC,EAAgB,EAAE,WAAWC,CAAa;EAAA;AAG/E;AAEArE,GAASsE,IAAU;EACjB,aAAa;AACf,CAAC;ACpGY,IAAAE,KAAc5C,EAAY,aAAa;AAAvC,IAEP6C,KAAc,MAAM;AACxB,QAAMC,EAAkB;AAC1B;AAJa,IAOAC,KAAY9D,EAAY4D,IAAY,QAAQ;AAP5C,IAWAG,KAAiB/D,EAAY,CAAC,GAAkB,aAAa;AAX7D,IAiBAgE,KAAyB,CAAC9C,QACjCA,GAAA,OAAO4C,IAAWF,EAAU,EAAE,OAAOG,IAAgB,CAACxC,EAAW,CAAC,EAAE,OAAOoC,EAAW,GAEnF,YAAY;AACX,QAAAzC,GAAI,WAAW6C,EAAc;AAC7B,QAAA9B,KAASf,GAAI,IAAIT,EAAS,GAC1BuB,IAASd,GAAI,IAAIO,EAAS;AAEhC,SAAAP,GAAI,IAAI4C,IAAWG,GAAY,OAAOjC,GAAQC,EAAM,CAAC,GACrDf,GAAI,KAAKyC,EAAW,GACb,MAAM;AACXzC,IAAAA,GAAI,OAAO4C,EAAS,EAAE,OAAOC,EAAc,EAAE,WAAWJ,EAAW;EAAA;AACrE;AAIJxE,GAAS6E,IAAQ;EACf,aAAa;AACf,CAAC;ACnCY,IAAAE,KAAkBnD,EAAY,iBAAiB;AAA/C,IAIAoD,KAAqBnE,EAAY,CAAC,GAAkB,iBAAiB;AAJrE,IAMP4D,KAAc,MAAM;AACxB,QAAMC,EAAkB;AAC1B;AARa,IAWAO,KAAgBpE,EAAsC4D,IAAY,YAAY;AAX9E,IAiBAS,KAA6B,CAACnD,QAEtCA,GAAA,OAAOkD,IAAeR,EAAU,EAChC,OAAOO,IAAoB,CAAC5C,EAAW,CAAC,EACxC,OAAO2C,EAAe,GAElB,YAAY;AACX,QAAAhD,GAAI,WAAWiD,EAAkB;AACjC,QAAAlC,KAASf,GAAI,IAAIT,EAAS,GAC1BuB,IAASd,GAAI,IAAIO,EAAS;AAEhC,SAAAP,GAAI,IAAIkD,IAAeE,GAAgB,OAAOtC,GAAQC,EAAM,CAAC,GAC7Df,GAAI,KAAKgD,EAAe,GAEjB,MAAM;AACXhD,IAAAA,GAAI,OAAOkD,EAAa,EAAE,OAAOD,EAAkB,EAAE,WAAWD,EAAe;EAAA;AACjF;AAIJ/E,GAASkF,IAAY;EACnB,aAAa;AACf,CAAC;ACvBY,IAAAE,KAAkBvE,EAAY,IAAoB,cAAc;AAAhE,IAGAwE,MAAwBxE,EAAkC,CAAK6B,OAAAA,IAAG,cAAc;AAHhF,IAOA4C,KAAsBzE,EAAY,CAAC,GAAkB,kBAAkB;AAPvE,IAUA0E,KAAmB3D,EAAY,kBAAkB;AAG9C,SAAA4D,GAAOC,IAA4BZ,IAAgBhC,GAAgB;AACjF,MAAI,OAAO4C,MAAiB;AAC1B,WAAOZ,GAAOY,EAAY;AAE5B,MAAIA,GAAa,SAAS;AACxB,WAAOC,UAAU,WAAW7C,CAAM,EAAE,MAAM4C,GAAa,GAAG;AAE5D,MAAIA,GAAa,SAAS;AACxB,WAAOE,KAAK,SAAS9C,GAAQ4C,GAAa,KAAK;AAEjD,QAAMG,EAAaH,EAAY;AACjC;AAEA,IAAMtC,KAAM,IAAI0C,UAAU,wBAAwB;AAElD,SAASC,GAAmBC,IAAiC;AAC3D,QAAMC,KAAkBC;IACtBC;IACAC;IACAC;IACAC;EAAA;AAEF,SAAAN,GAAO,YAAYC,IACZD;AACT;AAMa,IAAAO,KAA8B,CAACvE,QACtCA,GAAA,OAAOqD,IAAiB,EAAE,EAC3B,OAAOtE,IAAgB,CAAiB,CAAA,EACxC,OAAOuE,KAAuB,CAAAkB,OAAK7D,EAAC,EACpC,OAAO4C,IAAqB,CAACd,IAAaO,IAAiBV,CAAa,CAAC,EACzE,OAAOkB,EAAgB,GAEnB,YAAY;AACX,QAAAxD,GAAI,WAAWuD,EAAmB;AAElC,QAAAzC,KAASd,GAAI,IAAIO,EAAS,GAC1BuC,IAAS9C,GAAI,IAAI4C,EAAS,GAC1B6B,KAAQzE,GAAI,IAAId,EAAa,GAC7BwF,KAAkB1E,GAAI,IAAIsD,GAAqB,GAC/CqB,KAAe3E,GAAI,IAAIb,EAAe,GACtCuE,KAAe1D,GAAI,IAAIqD,EAAe,GACtCuB,KAAMnB,GAAOC,IAAcZ,GAAQhC,EAAM,GAEzC+D,KAAU;IACd,GAAGF;IACH,IAAIG,OAAO;MAAA,KACT1D;MACA,OAAO;QACL,MAAM,MAAM;QAEZ;QACA,OAAO,CAAC2D,IAAKC,IAAQC,IAAWC,OAAa;AACvClF,UAAAA,GAAA,IAAIjB,IAAgBmG,EAAQ;QAClC;MACF;IAAA,CACD;IACDC,iBAAiB,EAAE,OAAAV,GAAAA,CAAO;IAC1BW,OAAarB,GAAmBsB,UAAU,CAAC;EAAA;AAGzCrF,EAAAA,GAAA,IAAIb,IAAiB0F,EAAO;AAEhC,QAAMzE,KAAUsE,GAAgB;IAC9B,QAAA5D;IACA,KAAA8D;IACA,SAAAC;EAAA,CACD,GAEKtG,KAAQ+G,YAAY,OAAOlF,EAAO;AACpC,SAAAJ,GAAA,IAAIjB,IAAgBR,EAAK,GAC7ByB,GAAI,KAAKwD,EAAgB,GAElB,MAAM;AACXxD,IAAAA,GAAI,OAAOqD,EAAe,EACvB,OAAOtE,EAAc,EACrB,OAAOuE,GAAqB,EAC5B,OAAOC,EAAmB,EAC1B,WAAWC,EAAgB;EAAA;AAChC;AAIJvF,GAASsG,IAAa;EACpB,aAAa;AACf,CAAC;ACjHY,IAAAgB,KAAkB1F,EAAY,iBAAiB;AAA/C,IAIA2F,KAAqB1G,EAAY,CAAC,GAAkB,iBAAiB;AAJrE,IAOA2G,KAAuB3G,EAAY,CAAC,GAA6B,mBAAmB;AAPpF,IAYA4G,KAAU5G,EAAY,MAAkB,MAAM;AAZ9C,IAeA6G,KAAa7G,EAAY,MAAgC,SAAS;AAflE,IAmBA8G,KAAe9G,EAAY,CAAC,GAA6B,WAAW;AAEjF,SAAS+G,GAAoBC,IAAY9F,IAAU;AAC3C,QAAA+F,IAAY,SAAS,cAAc,KAAK;AAC9CA,IAAU,YAAY,YACtBD,GAAK,YAAYC,CAAS,GACtB/F,GAAA,IAAI2F,IAAYI,CAAS;AAEvB,QAAAC,KAAQhG,GAAI,IAAI4F,EAAY;AAClC,SAAA,OAAO,QAAQI,EAAK,EAAE,QAAQ,CAAC,CAAC5E,IAAKxC,EAAK,MAAMmH,EAAU,aAAa3E,IAAKxC,EAAK,CAAC,GAE3EmH;AACT;AAEA,SAASE,GAAeC,IAAc;AAChCA,EAAAA,GAAA,UAAU,IAAI,QAAQ,GACtBA,GAAA,aAAa,QAAQ,SAAS;AACpC;AAEA,IAAM9E,KAAM,IAAI0C,UAAU,qBAAqB;AAA/C,IAMaqC,KAA6B,CAACnG,QACzCA,GAAI,OAAO0F,IAAS,SAAS,IAAI,EAC9B,OAAO7G,IAAe,CAAgB,CAAA,EACtC,OAAO4G,IAAsB,CAAE,CAAA,EAC/B,OAAOE,IAAY,IAA8B,EACjD,OAAOC,IAAc,CAAE,CAAA,EACvB,OAAOJ,IAAoB,CAAChC,EAAgB,CAAC,EAC7C,OAAO+B,EAAe,GAElB,YAAY;AACX,QAAAvF,GAAI,KAAKC,EAAS;AAExB,QAAM6F,KAAO9F,GAAI,IAAI0F,EAAO,KAAK,SAAS,MACpCU,IAAK,OAAON,MAAS,WAAW,SAAS,cAAcA,EAAI,IAAIA;AAEjE9F,EAAAA,GAAA,OAAOb,IAAiB,CAAMkH,OAAA;IAChC,IAAIvB,OAAO;MACT,KAAA1D;MACA,MAAM,CAAC+E,OAAe;AACpB,cAAMJ,KAAYK,IAAKP,GAAoBO,GAAIpG,EAAG,IAAI;AAS5C,gBAPQ,MAAM;AACtB,cAAI+F,MAAaK,GAAI;AACnB,kBAAMjG,KAASgG,GAAW;AACvBC,cAAA,aAAaL,IAAW5F,EAAM,GACjC4F,GAAU,YAAY5F,EAAM;UAC9B;QAAA,GAAA,GAGK;UACL,SAAS,MAAM;AACT4F,YAAAA,MAAA,QAAAA,GAAW,eACbA,MAAA,QAAAA,GAAW,WAAW,aAAaI,GAAW,KAAKJ,EAAAA,IAErDA,MAAA,QAAAA,GAAW,OAAA;UACb;QAAA;MAEJ;IAAA,CACD;IACD,GAAGM;EAAA,CACJ,GAEK,MAAArG,GAAI,WAAWwF,EAAkB;AAEjC,QAAAjH,KAAQyB,GAAI,IAAIjB,EAAc,GAC9BqB,KAAUJ,GAAI,IAAIyF,EAAoB,GACtCa,KAAY,OAAO,YAAYtG,GAAI,IAAIX,EAAW,CAAC,GACnDkH,KAAY,OAAO,YAAYvG,GAAI,IAAIV,EAAW,CAAC,GACnD4C,KAAO,IAAIsE,WAAWJ,GAAY;IACtC,OAAA7H;IACA,WAAA+H;IACA,WAAAC;IACA,GAAGnG;EAAA,CACJ;AACD,SAAA6F,GAAe/D,GAAK,GAAG,GACnBlC,GAAA,IAAInB,IAAeqD,EAAI,GAC3BlC,GAAI,KAAKuF,EAAe,GAEjB,MAAM;AACXrD,IAAAA,MAAA,QAAAA,GAAM,QAAA,GACNlC,GAAI,OAAO0F,EAAO,EACf,OAAO7G,EAAa,EACpB,OAAO4G,EAAoB,EAC3B,OAAOE,EAAU,EACjB,OAAOC,EAAY,EACnB,OAAOJ,EAAkB,EACzB,WAAWD,EAAe;EAAA;AAC/B;AAIJtH,GAASkI,IAAY;EACnB,aAAa;AACf,CAAC;ACrHW,IAAAM,MAAAA,CAAAA,QAEVA,GAAA,OAAO,QAEPA,GAAA,WAAW,YAEXA,GAAA,UAAU,WAEVA,GAAA,YAAY,aAEZA,GAAA,YAAY,aAVFA,KAAAA,MAAA,CAAA,CAAA;AAAA,IAAAC;AAAA,IAAAC;AAAA,IAAAC;AAAA,IAAAC;AAAA,IAAAvI;AAAA,IAAAwI;AAAA,IAAAC;AAAA,IAAAC;AAAA,IAAAC;AAAA,IAAAC;AAAA,IAAAC;AAAA,IAAAC;AAAA,IAAAC;AAAA,IAAAC;AAAA,IAAAC;AA0BL,IAAMC,KAAN,MAAMA,IAAO;EAAb,cAAA;AAOLhG,IAAAA,GAAA,MAAAiG,IAAA,MAAA;AAEAjG,IAAAA,GAAA,MAAAkG,IAAA,MAAA;AAEAlG,IAAAA,GAAA,MAAAmG,IAAA,MAAA;AAEAnG,IAAAA,GAAA,MAAAoG,IAAA,MAAA;AAGSpG,IAAAA,GAAA,MAAAC,IAAA,MAAA;AAEAD,IAAAA,GAAA,MAAAqG,IAAA,MAAA;AAGArG,IAAAA,GAAA,MAAAsG,IAAA,MAAA;AAGAtG,IAAAA,GAAA,MAAAuG,IAAA,MAAA;AAGAvG,IAAAA,GAAA,MAAAE,IAAA,MAAA;AAGAF,IAAAA,GAAA,MAAAwG,IAAA,MAAA;AAkBAxG,IAAAA,GAAA,MAAAyG,IAAA,MAAA;AASAzG,IAAAA,GAAA,MAAA0G,IAAA,MAAA;AAmBA1G,IAAAA,GAAA,MAAA2G,IAAA,MAAA;AAWA3G,IAAAA,GAAA,MAAA4G,IAAA,MAAA;AAMA5G,IAAAA,GAAA,MAAA6G,IAAA,MAAA;AAtFU1G,IAAAA,GAAA,MAAA8F,IAAA,KAAA,GAET9F,GAAA,MAAA+F,IAAA,MAAA,GAEV/F,GAAA,MAAAgG,IAA2B,CAAA,CAAA,GAE3BhG,GAAA,MAAAiG,IAAkC,MAAM;IAAA,CAAA,GAG/BjG,GAAA,MAAAF,IAAa,IAAIG,EAAAA,CAAAA,GAEjBD,GAAA,MAAAkG,IAAS,IAAIS,EAAAA,CAAAA,GAGb3G,GAAA,MAAAmG,IAAAA,oBAAyC,IAAA,CAAA,GAGzCnG,GAAA,MAAAoG,IAAAA,oBAAyC,IAAA,CAAA,GAGlDpG,GAAA,MAASD,IAAO,IAAI6G,EAAI1G,EAAA,MAAKJ,EAAAA,GAAYI,EAAA,MAAKgG,EAAAA,CAAM,CAAA,GAGpDlG,GAAA,MAASqG,IAAgB,MAAM;AACvB,YAAAQ,KAAe1I,GAAO,OAAOE,OAAQ;AACnC,cAAA,QAAQ,IAAI6B,EAAA,MAAK8F,EAAAA,EAAe,IAAI,CAAMc,OAAAA,GAAGzI,EAAG,CAAC,CAAC;MAAA,CACzD,GACK0I,IAAkB;QACtB5H;QACAgC;QACAK;QACAZ;QACAgC;QACA4B;QACAjG,GAAK,IAAI;QACTsI;MAAA;AAEG3G,QAAA,MAAAoG,EAAAA,EAAA,KAAA,MAASS,GAAiB7G,EAAA,MAAKkG,EAAAA,CAAAA;IAAe,CAAA,GAI5CpG,GAAA,MAAAsG,IAAW,CAACpD,IAA2B8D,MAA6B;AACnE9D,MAAAA,GAAA,QAAQ,CAAC3G,OAAW;AACpB,cAAA8B,KAAM6B,EAAA,MAAKH,EAAAA,EAAK,QAAQG,EAAA,MAAK4F,EAAAA,IAAmBvJ,GAAO,OAAO,MAAS,GACvE0K,KAAU1K,GAAO8B,EAAG;AAC1B2I,UAAM,IAAIzK,IAAQ,EAAE,KAAA8B,IAAK,SAAA4I,IAAS,SAAS,OAAA,CAAW;MAAA,CACvD;IAAA,CAAA,GAIHjH,GAAA,MAASuG,IAAW,CAACrD,IAA2BgE,IAAS,UAChD,QAAQ;MACb,CAAChE,EAAO,EAAE,KAAO,EAAA,IAAI,CAAC3G,OAAW;AAC/B,cAAM4K,KAASjH,EAAA,MAAKiG,EAAAA,EAAgB,IAAI5J,EAAM,GACxC6K,KAAUD,MAAA,OAAA,SAAAA,GAAQ;AAMxB,eALID,IACGhH,EAAA,MAAAiG,EAAAA,EAAgB,OAAO5J,EAAM,IAE7B2D,EAAA,MAAAiG,EAAAA,EAAgB,IAAI5J,IAAQ,EAAE,KAAK,QAAW,SAAS,QAAW,SAAS,OAAW,CAAA,GAEzF,OAAO6K,MAAY,aACdA,GAAQ,IAEVA;MAAA,CACR;IAAA,CAAA,GAKLpH,GAAA,MAASwG,IAAmB,YAAY;AACtC,YAAM,QAAQ,IAAI,CAAC,GAAGtG,EAAA,MAAKkG,EAAAA,EAAgB,QAAA,CAAS,EAAE,IAAI,CAAC,CAACzJ,IAAG,EAAE,SAAAyK,EAAS,CAAA,MACpE,OAAOA,KAAY,aACdA,EAAQ,IAEVA,CACR,CAAC,GACFlH,EAAA,MAAKkG,EAAAA,EAAgB,MAAA;IAAM,CAAA,GAIpBpG,GAAA,MAAAyG,IAAa,CAACY,OAAyB;AAC9CrH,MAAAA,GAAA,MAAK+F,IAAUsB,EAAAA,GACfnH,EAAA,MAAK+F,EAAAA,EAAL,KAAA,MAAqBoB,EAAAA;IAAM,CAAA,GAIpBrH,GAAA,MAAA0G,IAAqB,CAACM,OACtB,CAAC,GAAGA,GAAM,QAAS,CAAA,EAAE,IAAI,OAAO,CAACvH,GAAK0H,EAAM,MAAM;AACjD,YAAA,EAAE,KAAA9I,IAAK,SAAA4I,GAAY,IAAAE;AACzB,UAAI,CAACF;AACH;AAEI,YAAAG,KAAU,MAAMH,GAAAA;AAEtBD,MAAAA,GAAM,IAAIvH,GAAK,EAAE,KAAApB,IAAK,SAAA4I,IAAS,SAAAG,GAAAA,CAAS;IAAA,CACzC,CAAA,GAeM,KAAA,kBAAkB,CAACE,KAAS,UACnCtH,GAAA,MAAK8F,IAAmBwB,EAAAA,GAEjB,OAKA,KAAA,iBAAiB,CAACC,QACzBvH,GAAA,MAAKiG,IAAkBsB,EAAAA,GAChB,OAIA,KAAA,SAAS,CAACnJ,QACZ8B,EAAA,MAAA8F,EAAAA,EAAe,KAAK5H,EAAS,GAC3B,OAIA,KAAA,eAAe,CAACA,QACvB4B,GAAA,MAAKgG,IAAiB9F,EAAA,MAAK8F,EAAAA,EAAe,OAAO,CAAAhH,MAAKA,MAAMZ,EAAS,CAAA,GAC9D,OAIA,KAAA,MAAM,CAAC8E,OAA+C;AAC7D,YAAMsE,IAAW,CAACtE,EAAO,EAAE,KAAK;AAChC,aAAAsE,EAAS,KAAK,EAAE,QAAQ,CAACjL,OAAW;AAC7B2D,UAAA,MAAAiG,EAAAA,EAAgB,IAAI5J,IAAQ;UAC/B,KAAK;UACL,SAAS;UACT,SAAS;QAAA,CACV;MAAA,CACF,GAEG2D,EAAA,MAAK6F,EAAAA,MAAY,aACd7F,EAAA,MAAAoG,EAAAA,EAAA,KAAA,MAASkB,GAAUtH,EAAA,MAAKiG,EAAAA,CAAAA,GAExB;IAAA,GAIA,KAAA,SAAS,OAAOjD,OACnBhD,EAAA,MAAK6F,EAAAA,MAAY,cACnB,QAAQ,KAAK,4HAA4H,GAClI,IAAI,QAAQ,CAAC0B,MAAY;AAC9B,iBAAW,MAAM;AACPA,UAAA,KAAK,OAAOvE,EAAO,CAAC;MAAA,GAC3B,EAAE;IAAA,CACN,MAGH,MAAMhD,EAAA,MAAKqG,EAAAA,EAAL,KAAA,MAAc,CAACrD,EAAO,EAAE,KAAA,GAAQ,IAAA,GAC/B,OAKT,KAAS,SAAS,YACZhD,EAAA,MAAK6F,EAAAA,MAAY,aACZ,QAEL7F,EAAA,MAAK6F,EAAAA,MAAY,aACnB,MAAM,KAAK,QAAA,GAEb7F,EAAA,MAAKuG,EAAAA,EAAL,KAAA,MAAgB,UAAA,GAEhBvG,EAAA,MAAKmG,EAAAA,EAAL,KAAA,IAAA,GACKnG,EAAA,MAAAoG,EAAAA,EAAA,KAAA,MAAS,CAAC,GAAGpG,EAAA,MAAKiG,EAAAA,EAAgB,KAAA,CAAM,GAAGjG,EAAA,MAAKiG,EAAAA,CAAAA,GAErD,MAAM,QAAQ;MACZ;QACEjG,EAAA,MAAKwG,EAAAA,EAAL,KAAA,MAAwBxG,EAAA,MAAKkG,EAAAA,CAAAA;QAC7BlG,EAAA,MAAKwG,EAAAA,EAAL,KAAA,MAAwBxG,EAAA,MAAKiG,EAAAA,CAAAA;MAAA,EAC7B,KAAK;IAAA,GAGTjG,EAAA,MAAKuG,EAAAA,EAAL,KAAA,MAAgB,SAAA,GACT,OAKA,KAAA,UAAU,OAAOiB,KAAe,UACnCxH,EAAA,MAAK6F,EAAAA,MAAY,eAA0B7F,EAAA,MAAK6F,EAAAA,MAAY,cACvD,OAEL7F,EAAA,MAAK6F,EAAAA,MAAY,aACZ,IAAI,QAAQ,CAAC0B,MAAY;AAC9B,iBAAW,MAAM;AACPA,UAAA,KAAK,QAAQC,EAAY,CAAC;MAAA,GACjC,EAAE;IAAA,CACN,KAGCA,MACF1H,GAAA,MAAKgG,IAAiB,CAAA,CAAA,GAExB9F,EAAA,MAAKuG,EAAAA,EAAL,KAAA,MAAgB,WAAA,GACV,MAAAvG,EAAA,MAAKqG,EAAAA,EAAL,KAAA,MAAc,CAAC,GAAGrG,EAAA,MAAKiG,EAAAA,EAAgB,KAAA,CAAM,GAAGuB,EAAAA,GACtD,MAAMxH,EAAA,MAAKsG,EAAAA,EAAL,KAAA,IAAA,GAENtG,EAAA,MAAKuG,EAAAA,EAAL,KAAA,MAAgB,WAAA,GACT,OAKT,KAAS,SAAS,CAAIkB,OAA4BA,GAAOzH,EAAA,MAAKH,EAAAA,CAAI,GAIlE,KAAS,UAAU,MACZG,EAAA,MAAK4F,EAAAA,IAIH,CAAC,GAAG5F,EAAA,MAAKkG,EAAAA,EAAgB,OAAU,GAAA,GAAGlG,EAAA,MAAKiG,EAAAA,EAAgB,OAAA,CAAQ,EACvE,IAAI,CAAC,EAAE,KAAA9H,GAAI,MAAA;;AAAM,cAAAY,IAAAZ,MAAA,OAAA,SAAAA,GAAK,cAAL,OAAA,SAAAY,EAAgB,KAAA;IAAA,CAAM,EACvC,OAAO,CAACD,OAAsB,CAAA,CAAQA,EAAE,KALzC,QAAQ,KAAK,2IAA2I,GACjJ,CAAA;EAKX;;EA5OA,OAAO,OAAO;AACZ,WAAO,IAAI6G,IAAO;EACpB;;EAsGA,IAAI,MAAM;AACR,WAAO3F,EAAA,MAAKH,EAAAA;EACd;;EAGA,IAAI,SAAS;AACX,WAAOG,EAAA,MAAK6F,EAAAA;EACd;AA8HF;AAxOED,KAAA,oBAAA,QAAA,GAEAC,KAAA,oBAAA,QAAA,GAEAC,KAAA,oBAAA,QAAA,GAEAC,KAAA,oBAAA,QAAA,GAGSnG,KAAA,oBAAA,QAAA,GAEAoG,KAAA,oBAAA,QAAA,GAGAC,KAAA,oBAAA,QAAA,GAGAC,KAAA,oBAAA,QAAA,GAGArG,KAAA,oBAAA,QAAA,GAGAsG,KAAA,oBAAA,QAAA,GAkBAC,KAAA,oBAAA,QAAA,GASAC,KAAA,oBAAA,QAAA,GAmBAC,KAAA,oBAAA,QAAA,GAWAC,KAAA,oBAAA,QAAA,GAMAC,KAAA,oBAAA,QAAA;AA7FJ,IAAMkB,KAAN/B;",
  "names": ["s", "m", "h", "d", "w", "y", "parse", "n", "createDebug", "disable", "i", "debug", "index", "extend", "v", "m", "c", "index", "v", "isArray", "isPlainObject", "setProperty", "getProperty", "extend", "i", "ErrorCode", "MilkdownError", "code", "message", "functionReplacer", "_", "value", "stringify", "x", "docTypeError", "type", "contextNotFound", "name", "timerNotFound", "ctxCallOutOfScope", "createNodeInParserFail", "args", "msg", "arg", "serialize", "y", "stackOverFlow", "parserMatchError", "node", "serializerMatchError", "expectDomTypeError", "node", "MilkdownError", "ErrorCode", "stringify", "callCommandBeforeEditorView", "missingNodeInSchema", "name", "MilkdownError", "ErrorCode", "missingMarkInSchema", "Container", "slice", "context", "x", "name", "contextNotFound", "Slice", "container", "value", "type", "__privateAdd", "_watchers", "_value", "_emit", "__privateSet", "__privateGet", "watcher", "updater", "w", "off", "SliceType", "ctxCallOutOfScope", "createSlice", "Inspector", "clock", "meta", "_meta", "_container", "_clock", "_injectedSlices", "_consumedSlices", "_recordedTimers", "_waitTimers", "_getSlice", "_getTimer", "timer", "duration", "timerType", "promise", "start", "sliceType", "_Ctx", "_inspector", "_a", "Ctx", "Clock", "timerNotFound", "Timer", "_promise", "_listener", "_eventUniqId", "_status", "_removeListener", "_waitTimeout", "resolve", "reject", "e", "event", "ifTimeout", "TimerType", "timeout", "createTimer", "values", "index", "characterReference", "list", "all", "index", "extension", "code", "list", "base", "code", "code", "hasOwnProperty", "ok", "code", "previous", "code", "document", "code", "point", "index", "ok", "code", "constructs", "index", "index", "text", "ok", "attentionMarkers", "previous", "code", "point", "ok", "code", "ok", "code", "ok", "code", "ok", "code", "ok", "code", "ok", "code", "effects", "nok", "start", "ok", "code", "furtherStart", "index", "code", "ok", "between", "index", "n", "list", "index", "previous", "start", "content", "ok", "previous", "code", "ok", "code", "ok", "code", "ok", "code", "ok", "code", "ok", "code", "titleBefore", "ok", "code", "content", "text", "ok", "code", "index", "ok", "code", "ok", "index", "code", "index", "text", "ok", "code", "ok", "code", "ok", "code", "ok", "code", "ok", "code", "ok", "code", "index", "content", "text", "definition", "heading", "ok", "code", "paragraph", "content", "code", "constructs", "text", "code", "list", "index", "createDebug", "point", "exit", "code", "_", "constructs", "map", "all", "list", "ok", "from", "index", "document", "flow", "string", "text", "document", "flow", "string", "text", "constructs", "document", "code", "$2", "head", "point", "link", "heading", "blockQuote", "codeText", "definition", "emphasis", "hardBreak", "html", "image", "listItem", "list", "paragraph", "strong", "thematicBreak", "compile", "exit", "index", "point", "node", "data", "text", "string", "d", "extension", "doc", "own", "one", "own", "configure", "base", "extension", "index", "list", "node", "_", "exit", "map", "list", "index", "_", "index", "index", "node", "node", "_", "exit", "value", "map", "definition", "node", "_", "exit", "node", "_", "exit", "ok", "index", "all", "node", "d", "is", "node", "index", "visit", "node", "index", "node", "node", "_", "exit", "subexit", "value", "node", "node", "_", "exit", "node", "_", "exit", "node", "_", "index", "position", "node", "node", "_", "exit", "value", "node", "_", "exit", "text", "list", "node", "exit", "index", "node", "exit", "map", "index", "node", "_", "exit", "node", "_", "d", "node", "_", "exit", "text", "node", "_", "thematicBreak", "_", "definition", "list", "text", "thematicBreak", "node", "index", "handle", "index", "map", "one", "value", "index", "position", "a", "b", "configure", "exit", "node", "compiler", "run", "values", "index", "index", "join", "extname", "index", "code", "index", "index", "field", "basename", "dirname", "assertPath", "extname", "own", "index", "extend", "file", "tree", "compiler", "value", "parameters", "node", "isUint8Array", "StackElement", "Stack", "node", "_a", "el", "stackOverFlow", "ParserStackElement", "type", "content", "attrs", "rest", "_ParserState", "schema", "__privateAdd", "_marks", "_hasText", "_maybeMerge", "_matchTarget", "_runNode", "_closeNodeAndPush", "_addNodeAndPush", "__privateSet", "Mark", "a", "b", "__privateGet", "result", "x", "parserMatchError", "nodeType", "element", "createNodeInParserFail", "markType", "mark", "text", "topElement", "prevNode", "currNode", "merged", "doc", "nodes", "remark", "markdown", "tree", "state", "ParserState", "_SerializerStackElement", "children", "value", "props", "SerializerStackElement", "isFragment", "_SerializerState", "_runProseNode", "_runProseMark", "_searchType", "_maybeMergeChildren", "_createMarkdownNode", "_moveSpaces", "_openMark", "_closeMark", "serializerMatchError", "marks", "getPriority", "child", "searchNode", "firstChild", "target", "tmp", "nextChildren", "index", "last", "currChildren", "currRest", "prevChildren", "prevRest", "next", "onPush", "startSpaces", "endSpaces", "first", "findIndex", "lastChild", "trim", "SerializerState", "text", "i", "node", "node", "node", "i", "node", "node", "node", "empty", "i", "i", "types", "index", "wrap", "i", "at", "node", "doc", "empty", "i", "mac", "mac", "i", "normalize", "map", "withMeta", "plugin", "meta", "remarkHandlers", "node", "_", "state", "info", "marker", "exit", "tracker", "value", "editorViewCtx", "createSlice", "editorStateCtx", "initTimerCtx", "editorCtx", "inputRulesCtx", "prosePluginsCtx", "remarkPluginsCtx", "nodeViewCtx", "markViewCtx", "remarkCtx", "unified", "remarkParse", "remarkStringify", "remarkStringifyOptionsCtx", "ConfigReady", "createTimer", "config", "configure", "ctx", "InitReady", "init", "editor", "options", "SchemaReady", "schemaTimerCtx", "schemaCtx", "nodesCtx", "marksCtx", "extendPriority", "x", "_a", "rule", "schema", "remark", "processor", "acc", "plug", "nodes", "key", "marks", "Schema", "CommandManager", "__privateAdd", "_container", "_ctx", "__privateSet", "Container", "__privateGet", "slice", "payload", "callCommandBeforeEditorView", "command", "view", "createCmdKey", "commandsCtx", "commandsTimerCtx", "CommandsReady", "commands", "cmd", "ParserReady", "outOfScope", "ctxCallOutOfScope", "parserCtx", "parserTimerCtx", "parser", "ParserState", "SerializerReady", "serializerTimerCtx", "serializerCtx", "serializer", "SerializerState", "defaultValueCtx", "editorStateOptionsCtx", "editorStateTimerCtx", "EditorStateReady", "getDoc", "defaultValue", "DOMParser", "Node", "docTypeError", "PluginKey", "overrideBaseKeymap", "keymap", "handleBackspace", "chainCommands", "undoInputRule", "deleteSelection", "joinBackward", "selectNodeBackward", "editorState", "t", "rules", "optionsOverride", "prosePlugins", "doc", "plugins", "Plugin", "_tr", "_value", "_oldState", "newState", "createInputRules", "createKeymap", "baseKeymap", "EditorState", "EditorViewReady", "editorViewTimerCtx", "editorViewOptionsCtx", "rootCtx", "rootDOMCtx", "rootAttrsCtx", "createViewContainer", "root", "container", "attrs", "prepareViewDom", "dom", "editorView", "el", "xs", "nodeViews", "markViews", "EditorView", "EditorStatus", "j", "p", "y", "D", "z", "u", "w", "O", "K", "S", "E", "A", "C", "I", "_Editor", "_enableInspector", "_status", "_configureList", "_onStatusChange", "_clock", "_usrPluginStore", "_sysPluginStore", "_loadInternal", "_prepare", "_cleanup", "_cleanupInternal", "_setStatus", "_loadPluginInStore", "Clock", "Ctx", "configPlugin", "fn", "internalPlugins", "store", "handler", "remove", "loader", "cleanup", "status", "enable", "onChange", "_plugins", "resolve", "clearPlugins", "action", "Editor"]
}
