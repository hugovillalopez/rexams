const isParent = (node) => !!node.children;
const isHTML = (node) => node.type === 'html';
function flatMapWithDepth(ast, fn) {
    return transform(ast, 0, null)[0];
    function transform(node, index, parent) {
        if (isParent(node)) {
            const out = [];
            for (let i = 0, n = node.children.length; i < n; i++) {
                const xs = transform(node.children[i], i, node);
                if (xs) {
                    for (let j = 0, m = xs.length; j < m; j++) {
                        out.push(xs[j]);
                    }
                }
            }
            node.children = out;
        }
        return fn(node, index, parent);
    }
}
export const filterHTMLPlugin = () => {
    function transformer(tree) {
        flatMapWithDepth(tree, (node) => {
            if (!isHTML(node)) {
                return [node];
            }
            return [];
        });
    }
    return transformer;
};
//# sourceMappingURL=filter-html.js.map